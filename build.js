(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", { value: true });

const picomatch = require('picomatch');
const normalizePath = require('normalize-path');

/**
 * @typedef {(testString: string) => boolean} AnymatchFn
 * @typedef {string|RegExp|AnymatchFn} AnymatchPattern
 * @typedef {AnymatchPattern|AnymatchPattern[]} AnymatchMatcher
 */
const BANG = '!';
const DEFAULT_OPTIONS = {returnIndex: false};
const arrify = (item) => Array.isArray(item) ? item : [item];

/**
 * @param {AnymatchPattern} matcher
 * @param {object} options
 * @returns {AnymatchFn}
 */
const createPattern = (matcher, options) => {
  if (typeof matcher === 'function') {
    return matcher;
  }
  if (typeof matcher === 'string') {
    const glob = picomatch(matcher, options);
    return (string) => matcher === string || glob(string);
  }
  if (matcher instanceof RegExp) {
    return (string) => matcher.test(string);
  }
  return (string) => false;
};

/**
 * @param {Array<Function>} patterns
 * @param {Array<Function>} negPatterns
 * @param {String|Array} args
 * @param {Boolean} returnIndex
 * @returns {boolean|number}
 */
const matchPatterns = (patterns, negPatterns, args, returnIndex) => {
  const isList = Array.isArray(args);
  const _path = isList ? args[0] : args;
  if (!isList && typeof _path !== 'string') {
    throw new TypeError('anymatch: second argument must be a string: got ' +
      Object.prototype.toString.call(_path))
  }
  const path = normalizePath(_path);

  for (let index = 0; index < negPatterns.length; index++) {
    const nglob = negPatterns[index];
    if (nglob(path)) {
      return returnIndex ? -1 : false;
    }
  }

  const applied = isList && [path].concat(args.slice(1));
  for (let index = 0; index < patterns.length; index++) {
    const pattern = patterns[index];
    if (isList ? pattern(...applied) : pattern(path)) {
      return returnIndex ? index : true;
    }
  }

  return returnIndex ? -1 : false;
};

/**
 * @param {AnymatchMatcher} matchers
 * @param {Array|string} testString
 * @param {object} options
 * @returns {boolean|number|Function}
 */
const anymatch = (matchers, testString, options = DEFAULT_OPTIONS) => {
  if (matchers == null) {
    throw new TypeError('anymatch: specify first argument');
  }
  const opts = typeof options === 'boolean' ? {returnIndex: options} : options;
  const returnIndex = opts.returnIndex || false;

  // Early cache for matchers.
  const mtchers = arrify(matchers);
  const negatedGlobs = mtchers
    .filter(item => typeof item === 'string' && item.charAt(0) === BANG)
    .map(item => item.slice(1))
    .map(item => picomatch(item, opts));
  const patterns = mtchers.map(matcher => createPattern(matcher, opts));

  if (testString == null) {
    return (testString, ri = false) => {
      const returnIndex = typeof ri === 'boolean' ? ri : false;
      return matchPatterns(patterns, negatedGlobs, testString, returnIndex);
    }
  }

  return matchPatterns(patterns, negatedGlobs, testString, returnIndex);
};

anymatch.default = anymatch;
module.exports = anymatch;

},{"normalize-path":77,"picomatch":90}],2:[function(require,module,exports){
(function (Opal) {
  function initialize (Opal) {
/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor-revealjs/converter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$nil?', '$option?', '$include?', '$join', '$map', '$split', '$!=', '$to_s', '$inject', '$!', '$nil_or_empty?', '$is_a?', '$compact', '$<<', '$empty?', '$+', '$level', '$special', '$to_i', '$attr', '$document', '$numbered', '$caption', '$<=', '$sectnum', '$captioned_title', '$content', '$each', '$constants', '$const_set', '$const_get', '$register_for', '$respond_to?', '$basebackend', '$outfilesuffix', '$filetype', '$[]', '$create', '$backend_info', '$new', '$node_name', '$send', '$extend', '$instance_eval', '$set_local_variables', '$converter', '$binding', '$===', '$flatten', '$map!', '$to_proc', '$reject!', '$convert', '$doctype', '$puts', '$[]=', '$-', '$role', '$reject', '$title?', '$title', '$context', '$has_role?', '$resolve_content', '$attr?', '$items', '$text', '$text?', '$blocks?', '$chomp', '$last', '$attributes', '$roles', '$image_uri', '$zero?', '$select', '$style', '$html_tag', '$colspan', '$rowspan', '$doctitle', '$normalize_web_path', '$>=', '$coderay_stylesheet_data', '$instance', '$pygments_stylesheet_data', '$docinfo', '$notitle', '$has_header?', '$media_uri', '$subtitle?', '$slice_text', '$header', '$subtitle', '$find_by', '$length', '$pop', '$author', '$to_boolean', '$to_valid_slidenumber', '$read', '$icon_uri', '$*', '$id', '$footnotes?', '$footnotes', '$index', '$sections', '$section_level', '$first', '$section_title', '$<', '$size', '$each_with_index', '$blocks', '$to_sym', '$strip', '$sub_specialcharacters', '$start_with?', '$end_with?', '$list_marker_keyword', '$tr_s', '$fetch', '$references', '$role?', '$local_variable_set']);
  
  (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      function $Revealjs() {};
      var self = $Revealjs = $module($base, 'Revealjs', $Revealjs);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      nil
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Converter(){};
    var self = $Converter = $klass($base, $super, 'Converter', $Converter);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Converter_10, TMP_Converter_initialize_11, TMP_Converter_convert_12, TMP_Converter_toc_13, TMP_Converter_page_break_15, TMP_Converter_open_17, TMP_Converter_paragraph_19, TMP_Converter_verse_21, TMP_Converter_dlist_23, TMP_Converter_inline_footnote_31, TMP_Converter_asciidoctor_revealjs_33, TMP_Converter_image_35, TMP_Converter_inline_break_37, TMP_Converter_preamble_39, TMP_Converter_thematic_break_41, TMP_Converter_quote_43, TMP_Converter_inline_indexterm_45, TMP_Converter_pass_47, TMP_Converter_table_49, TMP_Converter_document_60, TMP_Converter_inline_callout_63, TMP_Converter_notes_65, TMP_Converter_inline_image_67, TMP_Converter_video_69, TMP_Converter_literal_71, TMP_Converter_floating_title_73, TMP_Converter_embedded_75, TMP_Converter_sidebar_78, TMP_Converter_outline_80, TMP_Converter_listing_83, TMP_Converter_inline_kbd_85, TMP_Converter_section_88, TMP_Converter_example_95, TMP_Converter_inline_button_97, TMP_Converter_inline_menu_99, TMP_Converter_audio_102, TMP_Converter_stem_104, TMP_Converter_olist_106, TMP_Converter_inline_anchor_109, TMP_Converter_admonition_111, TMP_Converter_inline_quoted_113, TMP_Converter_ulist_115, TMP_Converter_ruler_118, TMP_Converter_colist_120, TMP_Converter_set_local_variables_124;

    def.delegate_converter = nil;
    
    if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    } else {
      nil
    };
    (function($base, $parent_nesting) {
      function $Helpers() {};
      var self = $Helpers = $module($base, 'Helpers', $Helpers);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Helpers_slice_text_1, TMP_Helpers_to_boolean_3, TMP_Helpers_to_valid_slidenumber_4, TMP_Helpers_html_tag_5, TMP_Helpers_section_level_7, TMP_Helpers_section_title_8, TMP_Helpers_resolve_content_9;

      
      Opal.const_set($nesting[0], 'EOL', "\n");
      Opal.const_set($nesting[0], 'SliceHintRx', /  +/);
      
      Opal.def(self, '$slice_text', TMP_Helpers_slice_text_1 = function $$slice_text(str, active) {
        var $a, $b, $c, TMP_2, self = this;

        
        
        if (active == null) {
          active = nil;
        };
        if ($truthy(($truthy($a = ($truthy($b = active) ? $b : ($truthy($c = active['$nil?']()) ? self['$option?']("slice") : $c))) ? str['$include?']("  ") : $a))) {
          return $send(str.$split($$($nesting, 'SliceHintRx')), 'map', [], (TMP_2 = function(line){var self = TMP_2.$$s || this;

          
            
            if (line == null) {
              line = nil;
            };
            return "" + "<span class=\"line\">" + (line) + "</span>";}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2)).$join($$($nesting, 'EOL'))
        } else {
          return str
        };
      }, TMP_Helpers_slice_text_1.$$arity = -2);
      
      Opal.def(self, '$to_boolean', TMP_Helpers_to_boolean_3 = function $$to_boolean(val) {
        var $a, $b, $c, self = this;

        return ($truthy($a = ($truthy($b = ($truthy($c = val) ? val['$!=']("false") : $c)) ? val.$to_s()['$!=']("0") : $b)) ? $a : false)
      }, TMP_Helpers_to_boolean_3.$$arity = 1);
      
      Opal.def(self, '$to_valid_slidenumber', TMP_Helpers_to_valid_slidenumber_4 = function $$to_valid_slidenumber(val) {
        var self = this;

        
        if (val['$==']("")) {
          return true};
        if (val.$to_s()['$==']("false")) {
          return false
        } else {
          return "" + "'" + (val) + "'"
        };
      }, TMP_Helpers_to_valid_slidenumber_4.$$arity = 1);
      Opal.const_set($nesting[0], 'DEFAULT_TOCLEVELS', 2);
      Opal.const_set($nesting[0], 'DEFAULT_SECTNUMLEVELS', 3);
      Opal.const_set($nesting[0], 'VOID_ELEMENTS', ["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
      
      Opal.def(self, '$html_tag', TMP_Helpers_html_tag_5 = function $$html_tag(name, attributes, content) {
        var TMP_6, $a, $iter = TMP_Helpers_html_tag_5.$$p, $yield = $iter || nil, self = this, attrs = nil, attrs_str = nil;

        if ($iter) TMP_Helpers_html_tag_5.$$p = null;
        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        
        if (content == null) {
          content = nil;
        };
        attrs = $send(attributes, 'inject', [[]], (TMP_6 = function(attrs, $mlhs_tmp1){var self = TMP_6.$$s || this, $a, $b, k = nil, v = nil;

        
          
          if (attrs == null) {
            attrs = nil;
          };
          
          if ($mlhs_tmp1 == null) {
            $mlhs_tmp1 = nil;
          };
          $b = $mlhs_tmp1, $a = Opal.to_ary($b), (k = ($a[0] == null ? nil : $a[0])), (v = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(($truthy($a = v['$!']()) ? $a : v['$nil_or_empty?']()))) {
            return attrs;};
          if ($truthy(v['$is_a?']($$($nesting, 'Array')))) {
            v = v.$compact().$join(" ")};
          return attrs['$<<']((function() {if (v['$=='](true)) {
            return k
          } else {
            return "" + (k) + "=\"" + (v) + "\""
          }; return nil; })());}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6.$$has_top_level_mlhs_arg = true, TMP_6));
        attrs_str = (function() {if ($truthy(attrs['$empty?']())) {
          return ""
        } else {
          return $rb_plus(" ", attrs.$join(" "))
        }; return nil; })();
        if ($truthy($$($nesting, 'VOID_ELEMENTS')['$include?'](name.$to_s()))) {
          return "" + "<" + (name) + (attrs_str) + ">"
        } else {
          
          if (($yield !== nil)) {
            content = ($truthy($a = content) ? $a : Opal.yieldX($yield, []))};
          return "" + "<" + (name) + (attrs_str) + ">" + (content) + "</" + (name) + ">";
        };
      }, TMP_Helpers_html_tag_5.$$arity = -2);
      
      Opal.def(self, '$section_level', TMP_Helpers_section_level_7 = function $$section_level(sec) {
        var $a, $b, self = this;
        if (self._section_level == null) self._section_level = nil;

        
        
        if (sec == null) {
          sec = self;
        };
        return (self._section_level = ($truthy($a = self._section_level) ? $a : (function() {if ($truthy((($b = sec.$level()['$=='](0)) ? sec.$special() : sec.$level()['$=='](0)))) {
          return 1
        } else {
          return sec.$level()
        }; return nil; })()));
      }, TMP_Helpers_section_level_7.$$arity = -1);
      
      Opal.def(self, '$section_title', TMP_Helpers_section_title_8 = function $$section_title(sec) {
        var $a, $b, self = this, sectnumlevels = nil;

        
        
        if (sec == null) {
          sec = self;
        };
        sectnumlevels = self.$document().$attr("sectnumlevels", $$($nesting, 'DEFAULT_SECTNUMLEVELS')).$to_i();
        if ($truthy(($truthy($a = ($truthy($b = sec.$numbered()) ? sec.$caption()['$!']() : $b)) ? $rb_le(sec.$level(), sectnumlevels) : $a))) {
          return [sec.$sectnum(), sec.$captioned_title()].$join(" ")
        } else {
          return sec.$captioned_title()
        };
      }, TMP_Helpers_section_title_8.$$arity = -1);
      
      Opal.def(self, '$resolve_content', TMP_Helpers_resolve_content_9 = function $$resolve_content() {
        var self = this;
        if (self.content_model == null) self.content_model = nil;

        if (self.content_model['$==']("simple")) {
          return "" + "<p>" + (self.$content()) + "</p>"
        } else {
          return self.$content()
        }
      }, TMP_Helpers_resolve_content_9.$$arity = 0);
    })($nesting[0], $nesting);
    $send($$($nesting, 'Helpers').$constants(), 'each', [], (TMP_Converter_10 = function(const$){var self = TMP_Converter_10.$$s || this;

    
      
      if (const$ == null) {
        const$ = nil;
      };
      return self.$const_set(const$, $$($nesting, 'Helpers').$const_get(const$));}, TMP_Converter_10.$$s = self, TMP_Converter_10.$$arity = 1, TMP_Converter_10));
    self.$register_for("revealjs");
    
    Opal.def(self, '$initialize', TMP_Converter_initialize_11 = function $$initialize(backend, opts) {
      var $a, $iter = TMP_Converter_initialize_11.$$p, $yield = $iter || nil, self = this, delegate_backend = nil, factory = nil, converter = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Converter_initialize_11.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Converter_initialize_11, false), $zuper, $iter);
      if ($truthy(self['$respond_to?']("basebackend"))) {
        self.$basebackend("html")};
      if ($truthy(self['$respond_to?']("outfilesuffix"))) {
        self.$outfilesuffix(".html")};
      if ($truthy(self['$respond_to?']("filetype"))) {
        self.$filetype("html")};
      delegate_backend = ($truthy($a = opts['$[]']("delegate_backend")) ? $a : "html5").$to_s();
      factory = $$$($$$($$$('::', 'Asciidoctor'), 'Converter'), 'Factory');
      converter = factory.$create(delegate_backend, self.$backend_info());
      return (self.delegate_converter = (function() {if (converter['$=='](self)) {
        return factory.$new().$create(delegate_backend, self.$backend_info())
      } else {
        return converter
      }; return nil; })());
    }, TMP_Converter_initialize_11.$$arity = -2);
    
    Opal.def(self, '$convert', TMP_Converter_convert_12 = function $$convert(node, transform, opts) {
      var $a, self = this, converter = nil;

      
      
      if (transform == null) {
        transform = nil;
      };
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      transform = ($truthy($a = transform) ? $a : node.$node_name());
      converter = (function() {if ($truthy(self['$respond_to?'](transform))) {
        return self
      } else {
        return self.delegate_converter
      }; return nil; })();
      if ($truthy(opts['$empty?']())) {
        return converter.$send(transform, node)
      } else {
        return converter.$send(transform, node, opts)
      };
    }, TMP_Converter_convert_12.$$arity = -2);
    
    Opal.def(self, '$toc', TMP_Converter_toc_13 = function $$toc(node, opts) {
      var TMP_14, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_14 = function(){var self = TMP_14.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div id=\"toc\"");
        _temple_html_attributeremover1 = [];
        _slim_codeattributes1 = self.$document().$attr("toc-class", "toc");
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _buf['$<<']("><div id=\"toctitle\">");
        _buf['$<<'](self.$document().$attr("toc-title"));
        _buf['$<<']("</div>");
        _buf['$<<'](self.$converter().$convert(self.$document(), "outline"));
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14));
    }, TMP_Converter_toc_13.$$arity = -2);
    
    Opal.def(self, '$page_break', TMP_Converter_page_break_15 = function $$page_break(node, opts) {
      var TMP_16, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_16 = function(){var self = TMP_16.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div style=\"page-break-after: always;\"></div>");
        return (_buf = _buf.$join(""));}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16));
    }, TMP_Converter_page_break_15.$$arity = -2);
    
    Opal.def(self, '$open', TMP_Converter_open_17 = function $$open(node, opts) {
      var TMP_18, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_18 = function(){var self = TMP_18.$$s || this, $a, $b, $c, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _temple_html_attributemerger2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil;
        if (self.style == null) self.style = nil;
        if (self.parent == null) self.parent = nil;
        if (self.document == null) self.document = nil;
        if (self.id == null) self.id = nil;
        if (self.level == null) self.level = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.style['$==']("abstract")) {
          if ($truthy((($a = self.parent['$=='](self.document)) ? self.document.$doctype()['$==']("book") : self.parent['$=='](self.document)))) {
            self.$puts("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.")
          } else {
            
            _buf['$<<']("<div");
            _temple_html_attributeremover1 = [];
            _temple_html_attributemerger1 = [];
            
            $writer = [0, "quoteblock"];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [1, "abstract"];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [2, []];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            _slim_codeattributes1 = self.$role();
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
              
              _slim_codeattributes1 = _slim_codeattributes1.$flatten();
              $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributemerger1['$[]'](2)['$<<'](_slim_codeattributes1.$join(" "));
            } else {
              _temple_html_attributemerger1['$[]'](2)['$<<'](_slim_codeattributes1)
            };
            
            $writer = [2, _temple_html_attributemerger1['$[]'](2).$join("")];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
            _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
            if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover1);
              _buf['$<<']("\"");};
            _slim_codeattributes2 = self.id;
            if ($truthy(_slim_codeattributes2)) {
              if (_slim_codeattributes2['$=='](true)) {
                _buf['$<<'](" id")
              } else {
                
                _buf['$<<'](" id=\"");
                _buf['$<<'](_slim_codeattributes2);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
            if ($truthy(self['$title?']())) {
              
              _buf['$<<']("<div class=\"title\">");
              _buf['$<<'](self.$title());
              _buf['$<<']("</div>");};
            _buf['$<<']("<blockquote>");
            _buf['$<<'](self.$content());
            _buf['$<<']("</blockquote></div>");
          }
        } else if ($truthy((($a = self.style['$==']("partintro")) ? ($truthy($b = ($truthy($c = self.level['$!='](0)) ? $c : self.parent.$context()['$!=']("section"))) ? $b : self.document.$doctype()['$!=']("book")) : self.style['$==']("partintro")))) {
          self.$puts("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a book part. Excluding block content.")
        } else if ($truthy(($truthy($a = ($truthy($b = self['$has_role?']("aside")) ? $b : self['$has_role?']("speaker"))) ? $a : self['$has_role?']("notes")))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _buf['$<<']("<div");
          _temple_html_attributeremover2 = [];
          _temple_html_attributemerger2 = [];
          
          $writer = [0, "openblock"];
          $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes3 = [(function() {if ($truthy(self.style['$!=']("open"))) {
            return self.style
          } else {
            return nil
          }; return nil; })(), self.$role()];
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
            
            _slim_codeattributes3 = _slim_codeattributes3.$flatten();
            $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3.$join(" "));
          } else {
            _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3)
          };
          
          $writer = [1, _temple_html_attributemerger2['$[]'](1).$join("")];
          $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover2['$<<']($send(_temple_html_attributemerger2, 'reject', [], "empty?".$to_proc()).$join(" "));
          _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
          if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover2);
            _buf['$<<']("\"");};
          _slim_codeattributes4 = self.id;
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](self.$title());
            _buf['$<<']("</div>");};
          _buf['$<<']("<div class=\"content\">");
          _buf['$<<'](self.$content());
          _buf['$<<']("</div></div>");
        };
        return (_buf = _buf.$join(""));}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18));
    }, TMP_Converter_open_17.$$arity = -2);
    
    Opal.def(self, '$paragraph', TMP_Converter_paragraph_19 = function $$paragraph(node, opts) {
      var TMP_20, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_20 = function(){var self = TMP_20.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "paragraph"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        if ($truthy(self['$has_role?']("small"))) {
          
          _buf['$<<']("<small>");
          _buf['$<<'](self.$content());
          _buf['$<<']("</small>");
        } else {
          
          _buf['$<<']("<p>");
          _buf['$<<'](self.$content());
          _buf['$<<']("</p>");
        };
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20));
    }, TMP_Converter_paragraph_19.$$arity = -2);
    
    Opal.def(self, '$verse', TMP_Converter_verse_21 = function $$verse(node, opts) {
      var TMP_22, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_22 = function(){var self = TMP_22.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, attribution = nil, citetitle = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "verseblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<pre class=\"content\">");
        _buf['$<<'](self.$content());
        _buf['$<<']("</pre>");
        attribution = (function() {if ($truthy(self['$attr?']("attribution"))) {
          
          return self.$attr("attribution");
        } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ($truthy(self['$attr?']("citetitle"))) {
          
          return self.$attr("citetitle");
        } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {
          
          _buf['$<<']("<div class=\"attribution\">");
          if ($truthy(citetitle)) {
            
            _buf['$<<']("<cite>");
            _buf['$<<'](citetitle);
            _buf['$<<']("</cite>");};
          if ($truthy(attribution)) {
            
            if ($truthy(citetitle)) {
              _buf['$<<']("<br>")};
            _buf['$<<']("&#8212; ");
            _buf['$<<'](attribution);};
          _buf['$<<']("</div>");};
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22));
    }, TMP_Converter_verse_21.$$arity = -2);
    
    Opal.def(self, '$dlist', TMP_Converter_dlist_23 = function $$dlist(node, opts) {
      var TMP_24, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_24 = function(){var self = TMP_24.$$s || this, TMP_25, $a, TMP_27, TMP_29, _buf = nil, $case = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _temple_html_attributemerger2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _temple_html_attributeremover4 = nil, _temple_html_attributemerger3 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $case = self.style;
        if ("qanda"['$===']($case)) {
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "qlist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = ["qanda", self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<ol>");
        $send(self.$items(), 'each', [], (TMP_25 = function(questions, answer){var self = TMP_25.$$s || this, TMP_26;

        
          
          if (questions == null) {
            questions = nil;
          };
          
          if (answer == null) {
            answer = nil;
          };
          _buf['$<<']("<li>");
          $send([].concat(Opal.to_a(questions)), 'each', [], (TMP_26 = function(question){var self = TMP_26.$$s || this;

          
            
            if (question == null) {
              question = nil;
            };
            _buf['$<<']("<p><em>");
            _buf['$<<'](question.$text());
            return _buf['$<<']("</em></p>");}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
          if ($truthy(answer['$nil?']())) {
          } else {
            
            if ($truthy(answer['$text?']())) {
              
              _buf['$<<']("<p>");
              _buf['$<<'](answer.$text());
              _buf['$<<']("</p>");};
            if ($truthy(answer['$blocks?']())) {
              _buf['$<<'](answer.$content())};
          };
          return _buf['$<<']("</li>");}, TMP_25.$$s = self, TMP_25.$$arity = 2, TMP_25));
        _buf['$<<']("</ol></div>");}
        else if ("horizontal"['$===']($case)) {
        _buf['$<<']("<div");
        _temple_html_attributeremover2 = [];
        _temple_html_attributemerger2 = [];
        
        $writer = [0, "hdlist"];
        $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes3 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3.$join(" "));
        } else {
          _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3)
        };
        
        $writer = [1, _temple_html_attributemerger2['$[]'](1).$join("")];
        $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover2['$<<']($send(_temple_html_attributemerger2, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"");};
        _slim_codeattributes4 = self.id;
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<table>");
        if ($truthy(($truthy($a = self['$attr?']("labelwidth")) ? $a : self['$attr?']("itemwidth")))) {
          
          _buf['$<<']("<colgroup><col");
          _slim_codeattributes5 = (function() {if ($truthy(self['$attr?']("labelwidth"))) {
            return "" + "width:" + (self.$attr("labelwidth").$chomp("%")) + "%;"
          } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes5)) {
            if (_slim_codeattributes5['$=='](true)) {
              _buf['$<<'](" style")
            } else {
              
              _buf['$<<'](" style=\"");
              _buf['$<<'](_slim_codeattributes5);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("><col");
          _slim_codeattributes6 = (function() {if ($truthy(self['$attr?']("itemwidth"))) {
            return "" + "width:" + (self.$attr("itemwidth").$chomp("%")) + "%;"
          } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes6)) {
            if (_slim_codeattributes6['$=='](true)) {
              _buf['$<<'](" style")
            } else {
              
              _buf['$<<'](" style=\"");
              _buf['$<<'](_slim_codeattributes6);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("></colgroup>");};
        $send(self.$items(), 'each', [], (TMP_27 = function(terms, dd){var self = TMP_27.$$s || this, TMP_28, _temple_html_attributeremover3 = nil, _slim_codeattributes7 = nil, last_term = nil;

        
          
          if (terms == null) {
            terms = nil;
          };
          
          if (dd == null) {
            dd = nil;
          };
          _buf['$<<']("<tr><td");
          _temple_html_attributeremover3 = [];
          _slim_codeattributes7 = ["hdlist1", (function() {if ($truthy(self['$option?']("strong"))) {
            return "strong"
          } else {
            return nil
          }; return nil; })()];
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes7))) {
            
            _slim_codeattributes7 = _slim_codeattributes7.$flatten();
            $send(_slim_codeattributes7, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes7, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes7.$join(" "));
          } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes7)
          };
          _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"");};
          _buf['$<<'](">");
          terms = [].concat(Opal.to_a(terms));
          last_term = terms.$last();
          $send(terms, 'each', [], (TMP_28 = function(dt){var self = TMP_28.$$s || this;

          
            
            if (dt == null) {
              dt = nil;
            };
            _buf['$<<'](dt.$text());
            if ($truthy(dt['$!='](last_term))) {
              return _buf['$<<']("<br>")
            } else {
              return nil
            };}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28));
          _buf['$<<']("</td><td class=\"hdlist2\">");
          if ($truthy(dd['$nil?']())) {
          } else {
            
            if ($truthy(dd['$text?']())) {
              
              _buf['$<<']("<p>");
              _buf['$<<'](dd.$text());
              _buf['$<<']("</p>");};
            if ($truthy(dd['$blocks?']())) {
              _buf['$<<'](dd.$content())};
          };
          return _buf['$<<']("</td></tr>");}, TMP_27.$$s = self, TMP_27.$$arity = 2, TMP_27));
        _buf['$<<']("</table></div>");}
        else {
        _buf['$<<']("<div");
        _temple_html_attributeremover4 = [];
        _temple_html_attributemerger3 = [];
        
        $writer = [0, "dlist"];
        $send(_temple_html_attributemerger3, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger3, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes8 = [self.style, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes8))) {
          
          _slim_codeattributes8 = _slim_codeattributes8.$flatten();
          $send(_slim_codeattributes8, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes8, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger3['$[]'](1)['$<<'](_slim_codeattributes8.$join(" "));
        } else {
          _temple_html_attributemerger3['$[]'](1)['$<<'](_slim_codeattributes8)
        };
        
        $writer = [1, _temple_html_attributemerger3['$[]'](1).$join("")];
        $send(_temple_html_attributemerger3, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover4['$<<']($send(_temple_html_attributemerger3, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover4 = _temple_html_attributeremover4.$join("");
        if ($truthy(_temple_html_attributeremover4['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover4);
          _buf['$<<']("\"");};
        _slim_codeattributes9 = self.id;
        if ($truthy(_slim_codeattributes9)) {
          if (_slim_codeattributes9['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes9);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<dl>");
        $send(self.$items(), 'each', [], (TMP_29 = function(terms, dd){var self = TMP_29.$$s || this, TMP_30;

        
          
          if (terms == null) {
            terms = nil;
          };
          
          if (dd == null) {
            dd = nil;
          };
          $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_30 = function(dt){var self = TMP_30.$$s || this, _temple_html_attributeremover5 = nil, _slim_codeattributes10 = nil;
            if (self.style == null) self.style = nil;

          
            
            if (dt == null) {
              dt = nil;
            };
            _buf['$<<']("<dt");
            _temple_html_attributeremover5 = [];
            _slim_codeattributes10 = (function() {if ($truthy(self.style)) {
              return nil
            } else {
              return "hdlist1"
            }; return nil; })();
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes10))) {
              
              _slim_codeattributes10 = _slim_codeattributes10.$flatten();
              $send(_slim_codeattributes10, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes10, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover5['$<<'](_slim_codeattributes10.$join(" "));
            } else {
              _temple_html_attributeremover5['$<<'](_slim_codeattributes10)
            };
            _temple_html_attributeremover5 = _temple_html_attributeremover5.$join("");
            if ($truthy(_temple_html_attributeremover5['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover5);
              _buf['$<<']("\"");};
            _buf['$<<'](">");
            _buf['$<<'](dt.$text());
            return _buf['$<<']("</dt>");}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30));
          if ($truthy(dd['$nil?']())) {
            return nil
          } else {
            
            _buf['$<<']("<dd>");
            if ($truthy(dd['$text?']())) {
              
              _buf['$<<']("<p>");
              _buf['$<<'](dd.$text());
              _buf['$<<']("</p>");};
            if ($truthy(dd['$blocks?']())) {
              _buf['$<<'](dd.$content())};
            return _buf['$<<']("</dd>");
          };}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29));
        _buf['$<<']("</dl></div>");};
        return (_buf = _buf.$join(""));}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24));
    }, TMP_Converter_dlist_23.$$arity = -2);
    
    Opal.def(self, '$inline_footnote', TMP_Converter_inline_footnote_31 = function $$inline_footnote(node, opts) {
      var TMP_32, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_32 = function(){var self = TMP_32.$$s || this, _buf = nil, _slim_codeattributes1 = nil;
        if (self.type == null) self.type = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.type['$==']("xref")) {
          
          _buf['$<<']("<span class=\"footnoteref\">[<a class=\"footnote\" href=\"#_footnote_");
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("\" title=\"View footnote.\">");
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("</a>]</span>");
        } else {
          
          _buf['$<<']("<span class=\"footnote\"");
          _slim_codeattributes1 = (function() {if ($truthy(self.id)) {
            return "" + "_footnote_" + (self.id)
          } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">[<a id=\"_footnoteref_");
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("\" class=\"footnote\" href=\"#_footnote_");
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("\" title=\"View footnote.\">");
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("</a>]</span>");
        };
        return (_buf = _buf.$join(""));}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32));
    }, TMP_Converter_inline_footnote_31.$$arity = -2);
    
    Opal.def(self, '$asciidoctor_revealjs', TMP_Converter_asciidoctor_revealjs_33 = function $$asciidoctor_revealjs(node, opts) {
      var TMP_34, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_34 = function(){var self = TMP_34.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<!--This CSS is generated by the Asciidoctor-Reveal.js converter to further integrate AsciiDoc's existing semantic with Reveal.js--><style type=\"text/css\">.reveal div.right {\n  float: right;\n}\n\n/* callouts */\n.conum[data-value] {display:inline-block;color:#fff!important;background-color:rgba(50,150,50,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}\n.conum[data-value] *{color:#fff!important}\n.conum[data-value]+b{display:none}\n.conum[data-value]:after{content:attr(data-value)}\npre .conum[data-value]{position:relative;top:-.125em}\nb.conum *{color:inherit!important}\n.conum:not([data-value]):empty{display:none}</style>");
        return (_buf = _buf.$join(""));}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34));
    }, TMP_Converter_asciidoctor_revealjs_33.$$arity = -2);
    
    Opal.def(self, '$image', TMP_Converter_image_35 = function $$image(node, opts) {
      var TMP_36, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_36 = function(){var self = TMP_36.$$s || this, $a, $b, _buf = nil, width = nil, height = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        width = (function() {if ($truthy(self['$attr?']("width"))) {
          
          return self.$attr("width");
        } else {
          return nil
        }; return nil; })();
        height = (function() {if ($truthy(self['$attr?']("height"))) {
          
          return self.$attr("height");
        } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = self['$has_role?']("stretch")) ? ($truthy($b = self['$attr?']("width")) ? $b : self['$attr?']("height"))['$!']() : $a))) {
          height = "100%"};
        if ($truthy(($truthy($a = self.$attributes()['$[]'](1)['$==']("background")) ? $a : self.$attributes()['$[]'](1)['$==']("canvas")))) {
        } else {
          
          _buf['$<<']("<div");
          _temple_html_attributeremover1 = [];
          _temple_html_attributemerger1 = [];
          
          $writer = [0, "imageblock"];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes1 = self.$roles();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
          };
          
          $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _slim_codeattributes2 = self.id;
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes3 = [(function() {if ($truthy(self['$attr?']("align"))) {
            return "" + "text-align: " + (self.$attr("align"))
          } else {
            return nil
          }; return nil; })(), (function() {if ($truthy(self['$attr?']("float"))) {
            return "" + "float: " + (self.$attr("float"))
          } else {
            return nil
          }; return nil; })()].$compact().$join("; ");
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" style")
            } else {
              
              _buf['$<<'](" style=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"");
            _slim_codeattributes4 = self.$attr("link");
            if ($truthy(_slim_codeattributes4)) {
              if (_slim_codeattributes4['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes4);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("><img");
            _slim_codeattributes5 = self.$image_uri(self.$attr("target"));
            if ($truthy(_slim_codeattributes5)) {
              if (_slim_codeattributes5['$=='](true)) {
                _buf['$<<'](" src")
              } else {
                
                _buf['$<<'](" src=\"");
                _buf['$<<'](_slim_codeattributes5);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes6 = self.$attr("alt");
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" alt")
              } else {
                
                _buf['$<<'](" alt=\"");
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes7 = width;
            if ($truthy(_slim_codeattributes7)) {
              if (_slim_codeattributes7['$=='](true)) {
                _buf['$<<'](" width")
              } else {
                
                _buf['$<<'](" width=\"");
                _buf['$<<'](_slim_codeattributes7);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes8 = height;
            if ($truthy(_slim_codeattributes8)) {
              if (_slim_codeattributes8['$=='](true)) {
                _buf['$<<'](" height")
              } else {
                
                _buf['$<<'](" height=\"");
                _buf['$<<'](_slim_codeattributes8);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes9 = (function() {if ($truthy(self['$attr?']("background"))) {
              return "" + "background: " + (self.$attr("background"))
            } else {
              return nil
            }; return nil; })();
            if ($truthy(_slim_codeattributes9)) {
              if (_slim_codeattributes9['$=='](true)) {
                _buf['$<<'](" style")
              } else {
                
                _buf['$<<'](" style=\"");
                _buf['$<<'](_slim_codeattributes9);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("></a>");
          } else {
            
            _buf['$<<']("<img");
            _slim_codeattributes10 = self.$image_uri(self.$attr("target"));
            if ($truthy(_slim_codeattributes10)) {
              if (_slim_codeattributes10['$=='](true)) {
                _buf['$<<'](" src")
              } else {
                
                _buf['$<<'](" src=\"");
                _buf['$<<'](_slim_codeattributes10);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes11 = self.$attr("alt");
            if ($truthy(_slim_codeattributes11)) {
              if (_slim_codeattributes11['$=='](true)) {
                _buf['$<<'](" alt")
              } else {
                
                _buf['$<<'](" alt=\"");
                _buf['$<<'](_slim_codeattributes11);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes12 = width;
            if ($truthy(_slim_codeattributes12)) {
              if (_slim_codeattributes12['$=='](true)) {
                _buf['$<<'](" width")
              } else {
                
                _buf['$<<'](" width=\"");
                _buf['$<<'](_slim_codeattributes12);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes13 = height;
            if ($truthy(_slim_codeattributes13)) {
              if (_slim_codeattributes13['$=='](true)) {
                _buf['$<<'](" height")
              } else {
                
                _buf['$<<'](" height=\"");
                _buf['$<<'](_slim_codeattributes13);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes14 = (function() {if ($truthy(self['$attr?']("background"))) {
              return "" + "background: " + (self.$attr("background"))
            } else {
              return nil
            }; return nil; })();
            if ($truthy(_slim_codeattributes14)) {
              if (_slim_codeattributes14['$=='](true)) {
                _buf['$<<'](" style")
              } else {
                
                _buf['$<<'](" style=\"");
                _buf['$<<'](_slim_codeattributes14);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          };
          _buf['$<<']("</div>");
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](self.$captioned_title());
            _buf['$<<']("</div>");};
        };
        return (_buf = _buf.$join(""));}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36));
    }, TMP_Converter_image_35.$$arity = -2);
    
    Opal.def(self, '$inline_break', TMP_Converter_inline_break_37 = function $$inline_break(node, opts) {
      var TMP_38, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_38 = function(){var self = TMP_38.$$s || this, _buf = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<'](self.text);
        _buf['$<<']("<br>");
        return (_buf = _buf.$join(""));}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38));
    }, TMP_Converter_inline_break_37.$$arity = -2);
    
    Opal.def(self, '$preamble', TMP_Converter_preamble_39 = function $$preamble(node, opts) {
      var TMP_40, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_40 = function(){var self = TMP_40.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        return (_buf = _buf.$join(""));}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40));
    }, TMP_Converter_preamble_39.$$arity = -2);
    
    Opal.def(self, '$thematic_break', TMP_Converter_thematic_break_41 = function $$thematic_break(node, opts) {
      var TMP_42, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_42 = function(){var self = TMP_42.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<hr>");
        return (_buf = _buf.$join(""));}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42));
    }, TMP_Converter_thematic_break_41.$$arity = -2);
    
    Opal.def(self, '$quote', TMP_Converter_quote_43 = function $$quote(node, opts) {
      var TMP_44, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_44 = function(){var self = TMP_44.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, attribution = nil, citetitle = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "quoteblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<blockquote>");
        _buf['$<<'](self.$content());
        _buf['$<<']("</blockquote>");
        attribution = (function() {if ($truthy(self['$attr?']("attribution"))) {
          
          return self.$attr("attribution");
        } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ($truthy(self['$attr?']("citetitle"))) {
          
          return self.$attr("citetitle");
        } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {
          
          _buf['$<<']("<div class=\"attribution\">");
          if ($truthy(citetitle)) {
            
            _buf['$<<']("<cite>");
            _buf['$<<'](citetitle);
            _buf['$<<']("</cite>");};
          if ($truthy(attribution)) {
            
            if ($truthy(citetitle)) {
              _buf['$<<']("<br>")};
            _buf['$<<']("&#8212; ");
            _buf['$<<'](attribution);};
          _buf['$<<']("</div>");};
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44));
    }, TMP_Converter_quote_43.$$arity = -2);
    
    Opal.def(self, '$inline_indexterm', TMP_Converter_inline_indexterm_45 = function $$inline_indexterm(node, opts) {
      var TMP_46, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_46 = function(){var self = TMP_46.$$s || this, _buf = nil;
        if (self.type == null) self.type = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.type['$==']("visible")) {
          _buf['$<<'](self.text)};
        return (_buf = _buf.$join(""));}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46));
    }, TMP_Converter_inline_indexterm_45.$$arity = -2);
    
    Opal.def(self, '$pass', TMP_Converter_pass_47 = function $$pass(node, opts) {
      var TMP_48, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_48 = function(){var self = TMP_48.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<'](self.$content());
        return (_buf = _buf.$join(""));}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48));
    }, TMP_Converter_pass_47.$$arity = -2);
    
    Opal.def(self, '$table', TMP_Converter_table_49 = function $$table(node, opts) {
      var TMP_50, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_50 = function(){var self = TMP_50.$$s || this, TMP_51, TMP_52, TMP_53, TMP_54, _buf = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
        if (self.id == null) self.id = nil;
        if (self.columns == null) self.columns = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<table");
        _slim_codeattributes1 = self.id;
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"");
          }};
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = ["tableblock", "" + "frame-" + (self.$attr("frame", "all")), "" + "grid-" + (self.$attr("grid", "all")), self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes3 = [(function() {if ($truthy(self['$option?']("autowidth"))) {
          return nil
        } else {
          return "" + "width:" + (self.$attr("tablepcwidth")) + "%"
        }; return nil; })(), (function() {if ($truthy(self['$attr?']("float"))) {
          return "" + "float:" + (self.$attr("float"))
        } else {
          return nil
        }; return nil; })()].$compact().$join("; ");
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" style")
          } else {
            
            _buf['$<<'](" style=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<caption class=\"title\">");
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</caption>");};
        if ($truthy(self.$attr("rowcount")['$zero?']())) {
        } else {
          
          _buf['$<<']("<colgroup>");
          if ($truthy(self['$option?']("autowidth"))) {
            $send(self.columns, 'each', [], (TMP_51 = function(){var self = TMP_51.$$s || this;

            return _buf['$<<']("<col>")}, TMP_51.$$s = self, TMP_51.$$arity = 0, TMP_51))
          } else {
            $send(self.columns, 'each', [], (TMP_52 = function(col){var self = TMP_52.$$s || this;

            
              
              if (col == null) {
                col = nil;
              };
              _buf['$<<']("<col style=\"width:");
              _buf['$<<'](col.$attr("colpcwidth"));
              return _buf['$<<']("%\">");}, TMP_52.$$s = self, TMP_52.$$arity = 1, TMP_52))
          };
          _buf['$<<']("</colgroup>");
          $send($send(["head", "foot", "body"], 'select', [], (TMP_53 = function(tblsec){var self = TMP_53.$$s || this;
            if (self.rows == null) self.rows = nil;

          
            
            if (tblsec == null) {
              tblsec = nil;
            };
            return self.rows['$[]'](tblsec)['$empty?']()['$!']();}, TMP_53.$$s = self, TMP_53.$$arity = 1, TMP_53)), 'each', [], (TMP_54 = function(tblsec){var self = TMP_54.$$s || this, TMP_55;
            if (self.rows == null) self.rows = nil;

          
            
            if (tblsec == null) {
              tblsec = nil;
            };
            _buf['$<<']("<t");
            _buf['$<<'](tblsec);
            _buf['$<<'](">");
            return $send(self.rows['$[]'](tblsec), 'each', [], (TMP_55 = function(row){var self = TMP_55.$$s || this, TMP_56;

            
              
              if (row == null) {
                row = nil;
              };
              _buf['$<<']("<tr>");
              $send(row, 'each', [], (TMP_56 = function(cell){var self = TMP_56.$$s || this, $a, TMP_57, cell_content = nil, $case = nil, _slim_controls1 = nil;
                if (self.document == null) self.document = nil;

              
                
                if (cell == null) {
                  cell = nil;
                };
                if (tblsec['$==']("head")) {
                  cell_content = cell.$text()
                } else {
                  $case = cell.$style();
                  if ("verse"['$===']($case) || "literal"['$===']($case)) {cell_content = cell.$text()}
                  else {cell_content = cell.$content()}
                };
                _slim_controls1 = $send(self, 'html_tag', [(function() {if ($truthy(($truthy($a = tblsec['$==']("head")) ? $a : cell.$style()['$==']("header")))) {
                  return "th"
                } else {
                  return "td"
                }; return nil; })(), $hash2(["class", "colspan", "rowspan", "style"], {"class": ["tableblock", "" + "halign-" + (cell.$attr("halign")), "" + "valign-" + (cell.$attr("valign"))], "colspan": cell.$colspan(), "rowspan": cell.$rowspan(), "style": (function() {if ($truthy(self.document['$attr?']("cellbgcolor"))) {
                  return "" + "background-color:" + (self.document.$attr("cellbgcolor")) + ";"
                } else {
                  return nil
                }; return nil; })()})], (TMP_57 = function(){var self = TMP_57.$$s || this, TMP_58, TMP_59, _slim_controls2 = nil;

                
                  _slim_controls2 = [];
                  if (tblsec['$==']("head")) {
                    _slim_controls2['$<<'](cell_content)
                  } else {
                    $case = cell.$style();
                    if ("asciidoc"['$===']($case)) {
                    _slim_controls2['$<<']("<div>");
                    _slim_controls2['$<<'](cell_content);
                    _slim_controls2['$<<']("</div>");}
                    else if ("verse"['$===']($case)) {
                    _slim_controls2['$<<']("<div class=\"verse\">");
                    _slim_controls2['$<<'](cell_content);
                    _slim_controls2['$<<']("</div>");}
                    else if ("literal"['$===']($case)) {
                    _slim_controls2['$<<']("<div class=\"literal\"><pre>");
                    _slim_controls2['$<<'](cell_content);
                    _slim_controls2['$<<']("</pre></div>");}
                    else if ("header"['$===']($case)) {$send(cell_content, 'each', [], (TMP_58 = function(text){var self = TMP_58.$$s || this;

                    
                      
                      if (text == null) {
                        text = nil;
                      };
                      _slim_controls2['$<<']("<p class=\"tableblock header\">");
                      _slim_controls2['$<<'](text);
                      return _slim_controls2['$<<']("</p>");}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58))}
                    else {$send(cell_content, 'each', [], (TMP_59 = function(text){var self = TMP_59.$$s || this;

                    
                      
                      if (text == null) {
                        text = nil;
                      };
                      _slim_controls2['$<<']("<p class=\"tableblock\">");
                      _slim_controls2['$<<'](text);
                      return _slim_controls2['$<<']("</p>");}, TMP_59.$$s = self, TMP_59.$$arity = 1, TMP_59))}
                  };
                  return (_slim_controls2 = _slim_controls2.$join(""));}, TMP_57.$$s = self, TMP_57.$$arity = 0, TMP_57));
                return _buf['$<<'](_slim_controls1);}, TMP_56.$$s = self, TMP_56.$$arity = 1, TMP_56));
              return _buf['$<<']("</tr>");}, TMP_55.$$s = self, TMP_55.$$arity = 1, TMP_55));}, TMP_54.$$s = self, TMP_54.$$arity = 1, TMP_54));
        };
        _buf['$<<']("</table>");
        return (_buf = _buf.$join(""));}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50));
    }, TMP_Converter_table_49.$$arity = -2);
    
    Opal.def(self, '$document', TMP_Converter_document_60 = function $$document(node, opts) {
      var TMP_61, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_61 = function(){var self = TMP_61.$$s || this, $a, TMP_62, _buf = nil, _slim_codeattributes1 = nil, revealjsdir = nil, asset_uri_scheme = nil, cdn_base = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, eqnums_val = nil, eqnums_opt = nil, $case = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, docinfo_content = nil, _slim_codeattributes10 = nil, customcss = nil, bg_image = nil, bg_video = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil, _slim_codeattributes24 = nil, _title_obj = nil, _slice = nil, preamble = nil;
        if (self.safe == null) self.safe = nil;
        if (self.header == null) self.header = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<!DOCTYPE html><html");
        _slim_codeattributes1 = (function() {if ($truthy(self['$attr?']("nolang"))) {
          return nil
        } else {
          return self.$attr("lang", "en")
        }; return nil; })();
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" lang")
          } else {
            
            _buf['$<<'](" lang=\"");
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("><head><meta charset=\"utf-8\">");
        if ($truthy((($a = $$($nesting, 'RUBY_ENGINE')['$==']("opal")) ? $$($nesting, 'JAVASCRIPT_PLATFORM')['$==']("node") : $$($nesting, 'RUBY_ENGINE')['$==']("opal")))) {
          revealjsdir = self.$attr("revealjsdir", "node_modules/reveal.js")
        } else {
          revealjsdir = self.$attr("revealjsdir", "reveal.js")
        };
        if ($truthy((asset_uri_scheme = self.$attr("asset-uri-scheme", "https"))['$empty?']())) {
        } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        cdn_base = "" + (asset_uri_scheme) + "//cdnjs.cloudflare.com/ajax/libs";
        $send(["description", "keywords", "author", "copyright"], 'each', [], (TMP_62 = function(key){var self = TMP_62.$$s || this, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;

        
          
          if (key == null) {
            key = nil;
          };
          if ($truthy(self['$attr?'](key))) {
            
            _buf['$<<']("<meta");
            _slim_codeattributes2 = key;
            if ($truthy(_slim_codeattributes2)) {
              if (_slim_codeattributes2['$=='](true)) {
                _buf['$<<'](" name")
              } else {
                
                _buf['$<<'](" name=\"");
                _buf['$<<'](_slim_codeattributes2);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes3 = self.$attr(key);
            if ($truthy(_slim_codeattributes3)) {
              if (_slim_codeattributes3['$=='](true)) {
                _buf['$<<'](" content")
              } else {
                
                _buf['$<<'](" content=\"");
                _buf['$<<'](_slim_codeattributes3);
                _buf['$<<']("\"");
              }};
            return _buf['$<<'](">");
          } else {
            return nil
          };}, TMP_62.$$s = self, TMP_62.$$arity = 1, TMP_62));
        _buf['$<<']("<title>");
        _buf['$<<'](self.$doctitle($hash2(["sanitize", "use_fallback"], {"sanitize": true, "use_fallback": true})));
        _buf['$<<']("</title><meta content=\"yes\" name=\"apple-mobile-web-app-capable\"><meta content=\"black-translucent\" name=\"apple-mobile-web-app-status-bar-style\"><meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui\" name=\"viewport\"><link href=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/css/reveal.css\" rel=\"stylesheet\">");
        if ($truthy(self['$attr?']("revealjs_customtheme"))) {
          
          _buf['$<<']("<link rel=\"stylesheet\"");
          _slim_codeattributes4 = self.$attr("revealjs_customtheme");
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" href")
            } else {
              
              _buf['$<<'](" href=\"");
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](" id=\"theme\">");
        } else {
          
          _buf['$<<']("<link rel=\"stylesheet\" href=\"");
          _buf['$<<'](revealjsdir);
          _buf['$<<']("/css/theme/");
          _buf['$<<'](self.$attr("revealjs_theme", "black"));
          _buf['$<<'](".css\" id=\"theme\">");
        };
        _buf['$<<']("<!--This CSS is generated by the Asciidoctor-Reveal.js converter to further integrate AsciiDoc's existing semantic with Reveal.js--><style type=\"text/css\">.reveal div.right {\n  float: right;\n}\n\n/* callouts */\n.conum[data-value] {display:inline-block;color:#fff!important;background-color:rgba(50,150,50,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}\n.conum[data-value] *{color:#fff!important}\n.conum[data-value]+b{display:none}\n.conum[data-value]:after{content:attr(data-value)}\npre .conum[data-value]{position:relative;top:-.125em}\nb.conum *{color:inherit!important}\n.conum:not([data-value]):empty{display:none}</style>");
        if ($truthy(self['$attr?']("icons", "font"))) {
          if ($truthy(self['$attr?']("iconfont-remote"))) {
            
            _buf['$<<']("<link rel=\"stylesheet\"");
            _slim_codeattributes5 = self.$attr("iconfont-cdn", "" + (cdn_base) + "/font-awesome/4.3.0/css/font-awesome.min.css");
            if ($truthy(_slim_codeattributes5)) {
              if (_slim_codeattributes5['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes5);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          } else {
            
            _buf['$<<']("<link rel=\"stylesheet\"");
            _slim_codeattributes6 = self.$normalize_web_path("" + (self.$attr("iconfont-name", "font-awesome")) + ".css", self.$attr("stylesdir", ""), false);
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          }};
        if ($truthy(self['$attr?']("stem"))) {
          
          eqnums_val = self.$attr("eqnums", "none");
          if (eqnums_val['$==']("")) {
            eqnums_val = "AMS"};
          eqnums_opt = "" + " equationNumbers: { autoNumber: \"" + (eqnums_val) + "\" } ";
          _buf['$<<']("<script type=\"text/x-mathjax-config\">MathJax.Hub.Config({\ntex2jax: {\n  inlineMath: [");
          _buf['$<<']($$$($$($nesting, 'Asciidoctor'), 'INLINE_MATH_DELIMITERS')['$[]']("latexmath").$to_s());
          _buf['$<<']("],\n  displayMath: [");
          _buf['$<<']($$$($$($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]']("latexmath").$to_s());
          _buf['$<<']("],\n  ignoreClass: \"nostem|nolatexmath\"\n},\nasciimath2jax: {\n  delimiters: [");
          _buf['$<<']($$$($$($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]']("asciimath").$to_s());
          _buf['$<<']("],\n  ignoreClass: \"nostem|noasciimath\"\n},\nTeX: {");
          _buf['$<<'](eqnums_opt);
          _buf['$<<']("}\n});</script><script src=\"");
          _buf['$<<'](cdn_base);
          _buf['$<<']("/mathjax/2.4.0/MathJax.js?config=TeX-MML-AM_HTMLorMML\"></script>");};
        $case = self.$document().$attr("source-highlighter");
        if ("coderay"['$===']($case)) {if (self.$attr("coderay-css", "class")['$==']("class")) {
          if ($truthy(($truthy($a = $rb_ge(self.safe, $$$($$$($$($nesting, 'Asciidoctor'), 'SafeMode'), 'SECURE'))) ? $a : self['$attr?']("linkcss")))) {
            
            _buf['$<<']("<link rel=\"stylesheet\"");
            _slim_codeattributes7 = self.$normalize_web_path("asciidoctor-coderay.css", self.$attr("stylesdir", ""));
            if ($truthy(_slim_codeattributes7)) {
              if (_slim_codeattributes7['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes7);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          } else {
            
            _buf['$<<']("<style>");
            _buf['$<<']($$$($$($nesting, 'Asciidoctor'), 'Stylesheets').$instance().$coderay_stylesheet_data());
            _buf['$<<']("</style>");
          }}}
        else if ("pygments"['$===']($case)) {if (self.$attr("pygments-css", "class")['$==']("class")) {
          if ($truthy(($truthy($a = $rb_ge(self.safe, $$$($$$($$($nesting, 'Asciidoctor'), 'SafeMode'), 'SECURE'))) ? $a : self['$attr?']("linkcss")))) {
            
            _buf['$<<']("<link rel=\"stylesheet\"");
            _slim_codeattributes8 = self.$normalize_web_path("asciidoctor-pygments.css", self.$attr("stylesdir", ""));
            if ($truthy(_slim_codeattributes8)) {
              if (_slim_codeattributes8['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes8);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          } else {
            
            _buf['$<<']("<style>");
            _buf['$<<']($$$($$($nesting, 'Asciidoctor'), 'Stylesheets').$instance().$pygments_stylesheet_data(self.$attr("pygments-style")));
            _buf['$<<']("</style>");
          }}};
        if ($truthy(self['$attr?']("highlightjs-theme"))) {
          
          _buf['$<<']("<link");
          _slim_codeattributes9 = self.$attr("highlightjs-theme");
          if ($truthy(_slim_codeattributes9)) {
            if (_slim_codeattributes9['$=='](true)) {
              _buf['$<<'](" href")
            } else {
              
              _buf['$<<'](" href=\"");
              _buf['$<<'](_slim_codeattributes9);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](" rel=\"stylesheet\">");
        } else {
          
          _buf['$<<']("<link href=\"");
          _buf['$<<'](revealjsdir);
          _buf['$<<']("/lib/css/zenburn.css\" rel=\"stylesheet\">");
        };
        _buf['$<<']("<script>var link = document.createElement( 'link' );\nlink.rel = 'stylesheet';\nlink.type = 'text/css';\nlink.href = window.location.search.match( /print-pdf/gi ) ? \"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/css/print/pdf.css\" : \"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/css/print/paper.css\";\ndocument.getElementsByTagName( 'head' )[0].appendChild( link );</script><!--[if lt IE 9]><script src=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/lib/js/html5shiv.js\"></script><![endif]-->");
        if ($truthy((docinfo_content = self.$docinfo("header", ".html"))['$empty?']())) {
        } else {
          _buf['$<<'](docinfo_content)
        };
        if ($truthy(self['$attr?']("customcss"))) {
          
          _buf['$<<']("<link rel=\"stylesheet\"");
          _slim_codeattributes10 = (function() {if ($truthy((customcss = self.$attr("customcss"))['$empty?']())) {
            return "asciidoctor-revealjs.css"
          } else {
            return customcss
          }; return nil; })();
          if ($truthy(_slim_codeattributes10)) {
            if (_slim_codeattributes10['$=='](true)) {
              _buf['$<<'](" href")
            } else {
              
              _buf['$<<'](" href=\"");
              _buf['$<<'](_slim_codeattributes10);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");};
        _buf['$<<']("</head><body><div class=\"reveal\"><div class=\"slides\">");
        if ($truthy(($truthy($a = self.$notitle()) ? $a : self['$has_header?']()['$!']()))) {
        } else {
          
          bg_image = (function() {if ($truthy(self['$attr?']("title-slide-background-image"))) {
            
            return self.$image_uri(self.$attr("title-slide-background-image"));
          } else {
            return nil
          }; return nil; })();
          bg_video = (function() {if ($truthy(self['$attr?']("title-slide-background-video"))) {
            
            return self.$media_uri(self.$attr("title-slide-background-video"));
          } else {
            return nil
          }; return nil; })();
          _buf['$<<']("<section");
          _temple_html_attributeremover1 = [];
          _temple_html_attributemerger1 = [];
          
          $writer = [0, "title"];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes11 = self.$role();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes11))) {
            
            _slim_codeattributes11 = _slim_codeattributes11.$flatten();
            $send(_slim_codeattributes11, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes11, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes11.$join(" "));
          } else {
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes11)
          };
          
          $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _buf['$<<'](" data-state=\"title\"");
          _slim_codeattributes12 = self.$attr("title-slide-transition");
          if ($truthy(_slim_codeattributes12)) {
            if (_slim_codeattributes12['$=='](true)) {
              _buf['$<<'](" data-transition")
            } else {
              
              _buf['$<<'](" data-transition=\"");
              _buf['$<<'](_slim_codeattributes12);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes13 = self.$attr("title-slide-transition-speed");
          if ($truthy(_slim_codeattributes13)) {
            if (_slim_codeattributes13['$=='](true)) {
              _buf['$<<'](" data-transition-speed")
            } else {
              
              _buf['$<<'](" data-transition-speed=\"");
              _buf['$<<'](_slim_codeattributes13);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes14 = self.$attr("title-slide-background");
          if ($truthy(_slim_codeattributes14)) {
            if (_slim_codeattributes14['$=='](true)) {
              _buf['$<<'](" data-background")
            } else {
              
              _buf['$<<'](" data-background=\"");
              _buf['$<<'](_slim_codeattributes14);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes15 = self.$attr("title-slide-background-size");
          if ($truthy(_slim_codeattributes15)) {
            if (_slim_codeattributes15['$=='](true)) {
              _buf['$<<'](" data-background-size")
            } else {
              
              _buf['$<<'](" data-background-size=\"");
              _buf['$<<'](_slim_codeattributes15);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes16 = bg_image;
          if ($truthy(_slim_codeattributes16)) {
            if (_slim_codeattributes16['$=='](true)) {
              _buf['$<<'](" data-background-image")
            } else {
              
              _buf['$<<'](" data-background-image=\"");
              _buf['$<<'](_slim_codeattributes16);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes17 = bg_video;
          if ($truthy(_slim_codeattributes17)) {
            if (_slim_codeattributes17['$=='](true)) {
              _buf['$<<'](" data-background-video")
            } else {
              
              _buf['$<<'](" data-background-video=\"");
              _buf['$<<'](_slim_codeattributes17);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes18 = self.$attr("title-slide-background-video-loop");
          if ($truthy(_slim_codeattributes18)) {
            if (_slim_codeattributes18['$=='](true)) {
              _buf['$<<'](" data-background-video-loop")
            } else {
              
              _buf['$<<'](" data-background-video-loop=\"");
              _buf['$<<'](_slim_codeattributes18);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes19 = self.$attr("title-slide-background-video-muted");
          if ($truthy(_slim_codeattributes19)) {
            if (_slim_codeattributes19['$=='](true)) {
              _buf['$<<'](" data-background-video-muted")
            } else {
              
              _buf['$<<'](" data-background-video-muted=\"");
              _buf['$<<'](_slim_codeattributes19);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes20 = self.$attr("title-slide-background-iframe");
          if ($truthy(_slim_codeattributes20)) {
            if (_slim_codeattributes20['$=='](true)) {
              _buf['$<<'](" data-background-iframe")
            } else {
              
              _buf['$<<'](" data-background-iframe=\"");
              _buf['$<<'](_slim_codeattributes20);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes21 = self.$attr("title-slide-background-color");
          if ($truthy(_slim_codeattributes21)) {
            if (_slim_codeattributes21['$=='](true)) {
              _buf['$<<'](" data-background-color")
            } else {
              
              _buf['$<<'](" data-background-color=\"");
              _buf['$<<'](_slim_codeattributes21);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes22 = self.$attr("title-slide-background-repeat");
          if ($truthy(_slim_codeattributes22)) {
            if (_slim_codeattributes22['$=='](true)) {
              _buf['$<<'](" data-background-repeat")
            } else {
              
              _buf['$<<'](" data-background-repeat=\"");
              _buf['$<<'](_slim_codeattributes22);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes23 = self.$attr("title-slide-background-position");
          if ($truthy(_slim_codeattributes23)) {
            if (_slim_codeattributes23['$=='](true)) {
              _buf['$<<'](" data-background-position")
            } else {
              
              _buf['$<<'](" data-background-position=\"");
              _buf['$<<'](_slim_codeattributes23);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes24 = self.$attr("title-slide-background-transition");
          if ($truthy(_slim_codeattributes24)) {
            if (_slim_codeattributes24['$=='](true)) {
              _buf['$<<'](" data-background-transition")
            } else {
              
              _buf['$<<'](" data-background-transition=\"");
              _buf['$<<'](_slim_codeattributes24);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          if ($truthy((_title_obj = self.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true})))['$subtitle?']())) {
            
            _buf['$<<']("<h1>");
            _buf['$<<'](self.$slice_text(_title_obj.$title(), (_slice = self.$header()['$option?']("slice"))));
            _buf['$<<']("</h1><h2>");
            _buf['$<<'](self.$slice_text(_title_obj.$subtitle(), _slice));
            _buf['$<<']("</h2>");
          } else {
            
            _buf['$<<']("<h1>");
            _buf['$<<'](self.header.$title());
            _buf['$<<']("</h1>");
          };
          preamble = self.document.$find_by($hash2(["context"], {"context": "preamble"}));
          if ($truthy(($truthy($a = preamble['$nil?']()) ? $a : preamble.$length()['$=='](0)))) {
          } else {
            
            _buf['$<<']("<div class=\"preamble\">");
            _buf['$<<'](preamble.$pop().$content());
            _buf['$<<']("</div>");
          };
          if ($truthy(self.$author()['$nil?']())) {
          } else {
            
            _buf['$<<']("<p class=\"author\"><small>");
            _buf['$<<'](self.$author());
            _buf['$<<']("</small></p>");
          };
          _buf['$<<']("</section>");
        };
        _buf['$<<'](self.$content());
        _buf['$<<']("</div></div><script src=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/lib/js/head.min.js\"></script><script src=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/js/reveal.js\"></script><script>Array.prototype.slice.call(document.querySelectorAll('.slides section')).forEach(function(slide) {\n  if (slide.getAttribute('data-background-color')) return;\n  // user needs to explicitly say he wants CSS color to override otherwise we might break custom css or theme (#226)\n  if (!(slide.classList.contains('canvas') || slide.classList.contains('background'))) return;\n  var bgColor = getComputedStyle(slide).backgroundColor;\n  if (bgColor !== 'rgba(0, 0, 0, 0)' && bgColor !== 'transparent') {\n    slide.setAttribute('data-background-color', bgColor);\n    slide.style.backgroundColor = 'transparent';\n  }\n})\n\n// See https://github.com/hakimel/reveal.js#configuration for a full list of configuration options\nReveal.initialize({\n  // Display presentation control arrows\n  controls: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_controls", true)));
        _buf['$<<'](",\n  // Help the user learn the controls by providing hints, for example by\n  // bouncing the down arrow when they first encounter a vertical slide\n  controlsTutorial: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_controlsTutorial", true)));
        _buf['$<<'](",\n  // Determines where controls appear, \"edges\" or \"bottom-right\"\n  controlsLayout: '");
        _buf['$<<'](self.$attr("revealjs_controlsLayout", "bottom-right"));
        _buf['$<<']("',\n  // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\"\n  // or \"visible\"\n  controlsBackArrows: '");
        _buf['$<<'](self.$attr("revealjs_controlsBackArrows", "faded"));
        _buf['$<<']("',\n  // Display a presentation progress bar\n  progress: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_progress", true)));
        _buf['$<<'](",\n  // Display the page number of the current slide\n  slideNumber: ");
        _buf['$<<'](self.$to_valid_slidenumber(self.$attr("revealjs_slidenumber", false)));
        _buf['$<<'](",\n  // Control which views the slide number displays on\n  showSlideNumber: '");
        _buf['$<<'](self.$attr("revealjs_showslidenumber", "all"));
        _buf['$<<']("',\n  // Push each slide change to the browser history\n  history: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_history", false)));
        _buf['$<<'](",\n  // Enable keyboard shortcuts for navigation\n  keyboard: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_keyboard", true)));
        _buf['$<<'](",\n  // Enable the slide overview mode\n  overview: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_overview", true)));
        _buf['$<<'](",\n  // Vertical centering of slides\n  center: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_center", true)));
        _buf['$<<'](",\n  // Enables touch navigation on devices with touch input\n  touch: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_touch", true)));
        _buf['$<<'](",\n  // Loop the presentation\n  loop: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_loop", false)));
        _buf['$<<'](",\n  // Change the presentation direction to be RTL\n  rtl: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_rtl", false)));
        _buf['$<<'](",\n  // Randomizes the order of slides each time the presentation loads\n  shuffle: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_shuffle", false)));
        _buf['$<<'](",\n  // Turns fragments on and off globally\n  fragments: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_fragments", true)));
        _buf['$<<'](",\n  // Flags whether to include the current fragment in the URL,\n  // so that reloading brings you to the same fragment position\n  fragmentInURL: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_fragmentInURL", false)));
        _buf['$<<'](",\n  // Flags if the presentation is running in an embedded mode,\n  // i.e. contained within a limited portion of the screen\n  embedded: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_embedded", false)));
        _buf['$<<'](",\n  // Flags if we should show a help overlay when the questionmark\n  // key is pressed\n  help: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_help", true)));
        _buf['$<<'](",\n  // Flags if speaker notes should be visible to all viewers\n  showNotes: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_showNotes", false)));
        _buf['$<<'](",\n  // Global override for autolaying embedded media (video/audio/iframe)\n  // - null: Media will only autoplay if data-autoplay is present\n  // - true: All media will autoplay, regardless of individual setting\n  // - false: No media will autoplay, regardless of individual setting\n  autoPlayMedia: ");
        _buf['$<<'](self.$attr("revealjs_autoPlayMedia", "null"));
        _buf['$<<'](",\n  // Number of milliseconds between automatically proceeding to the\n  // next slide, disabled when set to 0, this value can be overwritten\n  // by using a data-autoslide attribute on your slides\n  autoSlide: ");
        _buf['$<<'](self.$attr("revealjs_autoSlide", 0));
        _buf['$<<'](",\n  // Stop auto-sliding after user input\n  autoSlideStoppable: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_autoSlideStoppable", true)));
        _buf['$<<'](",\n  // Use this method for navigation when auto-sliding\n  autoSlideMethod: ");
        _buf['$<<'](self.$attr("revealjs_autoSlideMethod", "Reveal.navigateNext"));
        _buf['$<<'](",\n  // Specify the average time in seconds that you think you will spend\n  // presenting each slide. This is used to show a pacing timer in the\n  // speaker view\n  defaultTiming: ");
        _buf['$<<'](self.$attr("revealjs_defaultTiming", 120));
        _buf['$<<'](",\n  // Enable slide navigation via mouse wheel\n  mouseWheel: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_mouseWheel", false)));
        _buf['$<<'](",\n  // Hides the address bar on mobile devices\n  hideAddressBar: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hideAddressBar", true)));
        _buf['$<<'](",\n  // Opens links in an iframe preview overlay\n  // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link\n  // individually\n  previewLinks: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_previewLinks", false)));
        _buf['$<<'](",\n  // Transition style (e.g., none, fade, slide, convex, concave, zoom)\n  transition: '");
        _buf['$<<'](self.$attr("revealjs_transition", "slide"));
        _buf['$<<']("',\n  // Transition speed (e.g., default, fast, slow)\n  transitionSpeed: '");
        _buf['$<<'](self.$attr("revealjs_transitionSpeed", "default"));
        _buf['$<<']("',\n  // Transition style for full page slide backgrounds (e.g., none, fade, slide, convex, concave, zoom)\n  backgroundTransition: '");
        _buf['$<<'](self.$attr("revealjs_backgroundTransition", "fade"));
        _buf['$<<']("',\n  // Number of slides away from the current that are visible\n  viewDistance: ");
        _buf['$<<'](self.$attr("revealjs_viewDistance", 3));
        _buf['$<<'](",\n  // Parallax background image (e.g., \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\")\n  parallaxBackgroundImage: '");
        _buf['$<<'](self.$attr("revealjs_parallaxBackgroundImage", ""));
        _buf['$<<']("',\n  // Parallax background size in CSS syntax (e.g., \"2100px 900px\")\n  parallaxBackgroundSize: '");
        _buf['$<<'](self.$attr("revealjs_parallaxBackgroundSize", ""));
        _buf['$<<']("',\n  // Number of pixels to move the parallax background per slide\n  // - Calculated automatically unless specified\n  // - Set to 0 to disable movement along an axis\n  parallaxBackgroundHorizontal: ");
        _buf['$<<'](self.$attr("revealjs_parallaxBackgroundHorizontal", "null"));
        _buf['$<<'](",\n  parallaxBackgroundVertical: ");
        _buf['$<<'](self.$attr("revealjs_parallaxBackgroundVertical", "null"));
        _buf['$<<'](",\n  // The display mode that will be used to show slides\n  display: '");
        _buf['$<<'](self.$attr("revealjs_display", "block"));
        _buf['$<<']("',\n\n  // The \"normal\" size of the presentation, aspect ratio will be preserved\n  // when the presentation is scaled to fit different resolutions. Can be\n  // specified using percentage units.\n  width: ");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](",\n  height: ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](",\n\n  // Factor of the display size that should remain empty around the content\n  margin: ");
        _buf['$<<'](self.$attr("revealjs_margin", 0.1));
        _buf['$<<'](",\n\n  // Bounds for smallest/largest possible scale to apply to content\n  minScale: ");
        _buf['$<<'](self.$attr("revealjs_minscale", 0.2));
        _buf['$<<'](",\n  maxScale: ");
        _buf['$<<'](self.$attr("revealjs_maxscale", 1.5));
        _buf['$<<'](",\n\n  // Optional libraries used to extend on reveal.js\n  dependencies: [\n      { src: '");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/lib/js/classList.js', condition: function() { return !document.body.classList; } },\n      ");
        _buf['$<<']((function() {if ($truthy(self.$document()['$attr?']("source-highlighter", "highlightjs"))) {
          return "" + "{ src: '" + (revealjsdir) + "/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },"
        } else {
          return nil
        }; return nil; })());
        _buf['$<<']("\n      ");
        _buf['$<<']((function() {if ($truthy(self['$attr?']("revealjs_plugin_zoom", "disabled"))) {
          return ""
        } else {
          return "" + "{ src: '" + (revealjsdir) + "/plugin/zoom-js/zoom.js', async: true },"
        }; return nil; })());
        _buf['$<<']("\n      ");
        _buf['$<<']((function() {if ($truthy(self['$attr?']("revealjs_plugin_notes", "disabled"))) {
          return ""
        } else {
          return "" + "{ src: '" + (revealjsdir) + "/plugin/notes/notes.js', async: true },"
        }; return nil; })());
        _buf['$<<']("\n      ");
        _buf['$<<']((function() {if ($truthy(self['$attr?']("revealjs_plugin_marked", "enabled"))) {
          return "" + "{ src: '" + (revealjsdir) + "/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },"
        } else {
          return ""
        }; return nil; })());
        _buf['$<<']("\n      ");
        _buf['$<<']((function() {if ($truthy(self['$attr?']("revealjs_plugin_markdown", "enabled"))) {
          return "" + "{ src: '" + (revealjsdir) + "/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },"
        } else {
          return ""
        }; return nil; })());
        _buf['$<<']("\n      ");
        _buf['$<<']((function() {if ($truthy(self['$attr?']("revealjs_plugin_pdf", "enabled"))) {
          return "" + "{ src: '" + (revealjsdir) + "/plugin/print-pdf/print-pdf.js', async: true },"
        } else {
          return ""
        }; return nil; })());
        _buf['$<<']("\n      ");
        _buf['$<<']((function() {if ($truthy(self['$attr?']("revealjs_plugins"))) {
          return $$($nesting, 'File').$read(self.$attr("revealjs_plugins", ""))
        } else {
          return ""
        }; return nil; })());
        _buf['$<<']("\n  ],\n\n  ");
        _buf['$<<']((function() {if ($truthy(self['$attr?']("revealjs_plugins_configuration"))) {
          return $$($nesting, 'File').$read(self.$attr("revealjs_plugins_configuration", ""))
        } else {
          return ""
        }; return nil; })());
        _buf['$<<']("\n\n});</script>");
        if ($truthy((docinfo_content = self.$docinfo("footer", ".html"))['$empty?']())) {
        } else {
          _buf['$<<'](docinfo_content)
        };
        _buf['$<<']("</body></html>");
        return (_buf = _buf.$join(""));}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61));
    }, TMP_Converter_document_60.$$arity = -2);
    
    Opal.def(self, '$inline_callout', TMP_Converter_inline_callout_63 = function $$inline_callout(node, opts) {
      var TMP_64, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_64 = function(){var self = TMP_64.$$s || this, _buf = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
        if (self.document == null) self.document = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.document['$attr?']("icons", "font"))) {
          
          _buf['$<<']("<i class=\"conum\"");
          _slim_codeattributes1 = self.text;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" data-value")
            } else {
              
              _buf['$<<'](" data-value=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("></i><b>");
          _buf['$<<']("" + "(" + (self.text) + ")");
          _buf['$<<']("</b>");
        } else if ($truthy(self.document['$attr?']("icons"))) {
          
          _buf['$<<']("<img");
          _slim_codeattributes2 = self.$icon_uri("" + "callouts/" + (self.text));
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" src")
            } else {
              
              _buf['$<<'](" src=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes3 = self.text;
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" alt")
            } else {
              
              _buf['$<<'](" alt=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
        } else {
          
          _buf['$<<']("<b>");
          _buf['$<<']("" + "(" + (self.text) + ")");
          _buf['$<<']("</b>");
        };
        return (_buf = _buf.$join(""));}, TMP_64.$$s = self, TMP_64.$$arity = 0, TMP_64));
    }, TMP_Converter_inline_callout_63.$$arity = -2);
    
    Opal.def(self, '$notes', TMP_Converter_notes_65 = function $$notes(node, opts) {
      var TMP_66, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_66 = function(){var self = TMP_66.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<aside class=\"notes\">");
        _buf['$<<'](self.$resolve_content());
        _buf['$<<']("</aside>");
        return (_buf = _buf.$join(""));}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66));
    }, TMP_Converter_notes_65.$$arity = -2);
    
    Opal.def(self, '$inline_image', TMP_Converter_inline_image_67 = function $$inline_image(node, opts) {
      var TMP_68, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_68 = function(){var self = TMP_68.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, style_class = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _temple_html_attributeremover3 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, src = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil;
        if (self.type == null) self.type = nil;
        if (self.document == null) self.document = nil;
        if (self.target == null) self.target = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<span");
        _temple_html_attributeremover1 = [];
        _slim_codeattributes1 = [self.type, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = (function() {if ($truthy(self['$attr?']("float"))) {
          return "" + "float: " + (self.$attr("float"))
        } else {
          return nil
        }; return nil; })();
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" style")
          } else {
            
            _buf['$<<'](" style=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy((($a = self.type['$==']("icon")) ? self.document['$attr?']("icons", "font") : self.type['$==']("icon")))) {
          
          style_class = ["" + "fa fa-" + (self.target)];
          if ($truthy(self['$attr?']("size"))) {
            style_class['$<<']("" + "fa-" + (self.$attr("size")))};
          if ($truthy(self['$attr?']("rotate"))) {
            style_class['$<<']("" + "fa-rotate-" + (self.$attr("rotate")))};
          if ($truthy(self['$attr?']("flip"))) {
            style_class['$<<']("" + "fa-flip-" + (self.$attr("flip")))};
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"");
            _slim_codeattributes3 = self.$attr("link");
            if ($truthy(_slim_codeattributes3)) {
              if (_slim_codeattributes3['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes3);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes4 = self.$attr("window");
            if ($truthy(_slim_codeattributes4)) {
              if (_slim_codeattributes4['$=='](true)) {
                _buf['$<<'](" target")
              } else {
                
                _buf['$<<'](" target=\"");
                _buf['$<<'](_slim_codeattributes4);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("><i");
            _temple_html_attributeremover2 = [];
            _slim_codeattributes5 = style_class;
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes5))) {
              
              _slim_codeattributes5 = _slim_codeattributes5.$flatten();
              $send(_slim_codeattributes5, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes5, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes5.$join(" "));
            } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes5)
            };
            _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
            if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover2);
              _buf['$<<']("\"");};
            _slim_codeattributes6 = self.$attr("title");
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" title")
              } else {
                
                _buf['$<<'](" title=\"");
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("></i></a>");
          } else {
            
            _buf['$<<']("<i");
            _temple_html_attributeremover3 = [];
            _slim_codeattributes7 = style_class;
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes7))) {
              
              _slim_codeattributes7 = _slim_codeattributes7.$flatten();
              $send(_slim_codeattributes7, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes7, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover3['$<<'](_slim_codeattributes7.$join(" "));
            } else {
              _temple_html_attributeremover3['$<<'](_slim_codeattributes7)
            };
            _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
            if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover3);
              _buf['$<<']("\"");};
            _slim_codeattributes8 = self.$attr("title");
            if ($truthy(_slim_codeattributes8)) {
              if (_slim_codeattributes8['$=='](true)) {
                _buf['$<<'](" title")
              } else {
                
                _buf['$<<'](" title=\"");
                _buf['$<<'](_slim_codeattributes8);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("></i>");
          };
        } else if ($truthy((($a = self.type['$==']("icon")) ? self.document['$attr?']("icons")['$!']() : self.type['$==']("icon")))) {
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"");
            _slim_codeattributes9 = self.$attr("link");
            if ($truthy(_slim_codeattributes9)) {
              if (_slim_codeattributes9['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes9);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes10 = self.$attr("window");
            if ($truthy(_slim_codeattributes10)) {
              if (_slim_codeattributes10['$=='](true)) {
                _buf['$<<'](" target")
              } else {
                
                _buf['$<<'](" target=\"");
                _buf['$<<'](_slim_codeattributes10);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">[");
            _buf['$<<'](self.$attr("alt"));
            _buf['$<<']("]</a>");
          } else {
            
            _buf['$<<']("[");
            _buf['$<<'](self.$attr("alt"));
            _buf['$<<']("]");
          }
        } else {
          
          src = (function() {if (self.type['$==']("icon")) {
            
            return self.$icon_uri(self.target);
          } else {
            
            return self.$image_uri(self.target);
          }; return nil; })();
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"");
            _slim_codeattributes11 = self.$attr("link");
            if ($truthy(_slim_codeattributes11)) {
              if (_slim_codeattributes11['$=='](true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes11);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes12 = self.$attr("window");
            if ($truthy(_slim_codeattributes12)) {
              if (_slim_codeattributes12['$=='](true)) {
                _buf['$<<'](" target")
              } else {
                
                _buf['$<<'](" target=\"");
                _buf['$<<'](_slim_codeattributes12);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("><img");
            _slim_codeattributes13 = src;
            if ($truthy(_slim_codeattributes13)) {
              if (_slim_codeattributes13['$=='](true)) {
                _buf['$<<'](" src")
              } else {
                
                _buf['$<<'](" src=\"");
                _buf['$<<'](_slim_codeattributes13);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes14 = self.$attr("alt");
            if ($truthy(_slim_codeattributes14)) {
              if (_slim_codeattributes14['$=='](true)) {
                _buf['$<<'](" alt")
              } else {
                
                _buf['$<<'](" alt=\"");
                _buf['$<<'](_slim_codeattributes14);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes15 = self.$attr("width");
            if ($truthy(_slim_codeattributes15)) {
              if (_slim_codeattributes15['$=='](true)) {
                _buf['$<<'](" width")
              } else {
                
                _buf['$<<'](" width=\"");
                _buf['$<<'](_slim_codeattributes15);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes16 = self.$attr("height");
            if ($truthy(_slim_codeattributes16)) {
              if (_slim_codeattributes16['$=='](true)) {
                _buf['$<<'](" height")
              } else {
                
                _buf['$<<'](" height=\"");
                _buf['$<<'](_slim_codeattributes16);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes17 = self.$attr("title");
            if ($truthy(_slim_codeattributes17)) {
              if (_slim_codeattributes17['$=='](true)) {
                _buf['$<<'](" title")
              } else {
                
                _buf['$<<'](" title=\"");
                _buf['$<<'](_slim_codeattributes17);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("></a>");
          } else {
            
            _buf['$<<']("<img");
            _slim_codeattributes18 = src;
            if ($truthy(_slim_codeattributes18)) {
              if (_slim_codeattributes18['$=='](true)) {
                _buf['$<<'](" src")
              } else {
                
                _buf['$<<'](" src=\"");
                _buf['$<<'](_slim_codeattributes18);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes19 = self.$attr("alt");
            if ($truthy(_slim_codeattributes19)) {
              if (_slim_codeattributes19['$=='](true)) {
                _buf['$<<'](" alt")
              } else {
                
                _buf['$<<'](" alt=\"");
                _buf['$<<'](_slim_codeattributes19);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes20 = self.$attr("width");
            if ($truthy(_slim_codeattributes20)) {
              if (_slim_codeattributes20['$=='](true)) {
                _buf['$<<'](" width")
              } else {
                
                _buf['$<<'](" width=\"");
                _buf['$<<'](_slim_codeattributes20);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes21 = self.$attr("height");
            if ($truthy(_slim_codeattributes21)) {
              if (_slim_codeattributes21['$=='](true)) {
                _buf['$<<'](" height")
              } else {
                
                _buf['$<<'](" height=\"");
                _buf['$<<'](_slim_codeattributes21);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes22 = self.$attr("title");
            if ($truthy(_slim_codeattributes22)) {
              if (_slim_codeattributes22['$=='](true)) {
                _buf['$<<'](" title")
              } else {
                
                _buf['$<<'](" title=\"");
                _buf['$<<'](_slim_codeattributes22);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          };
        };
        _buf['$<<']("</span>");
        return (_buf = _buf.$join(""));}, TMP_68.$$s = self, TMP_68.$$arity = 0, TMP_68));
    }, TMP_Converter_inline_image_67.$$arity = -2);
    
    Opal.def(self, '$video', TMP_Converter_video_69 = function $$video(node, opts) {
      var TMP_70, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_70 = function(){var self = TMP_70.$$s || this, $a, _buf = nil, no_stretch = nil, width = nil, height = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, $case = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, loop_param = nil, src = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, params = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        no_stretch = ($truthy($a = self['$attr?']("width")) ? $a : self['$attr?']("height"));
        width = (function() {if ($truthy(self['$attr?']("width"))) {
          
          return self.$attr("width");
        } else {
          return "100%"
        }; return nil; })();
        height = (function() {if ($truthy(self['$attr?']("height"))) {
          
          return self.$attr("height");
        } else {
          return "100%"
        }; return nil; })();
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "videoblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role(), (function() {if ($truthy(no_stretch)) {
          return nil
        } else {
          return "stretch"
        }; return nil; })()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>");};
        $case = self.$attr("poster");
        if ("vimeo"['$===']($case)) {
        if ($truthy((asset_uri_scheme = self.$attr("asset_uri_scheme", "https"))['$empty?']())) {
        } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        start_anchor = (function() {if ($truthy(self['$attr?']("start"))) {
          return "" + "#at=" + (self.$attr("start"))
        } else {
          return nil
        }; return nil; })();
        delimiter = "?";
        loop_param = (function() {if ($truthy(self['$option?']("loop"))) {
          return "" + (delimiter) + "loop=1"
        } else {
          return nil
        }; return nil; })();
        src = "" + (asset_uri_scheme) + "//player.vimeo.com/video/" + (self.$attr("target")) + (start_anchor) + (loop_param);
        _buf['$<<']("<iframe");
        _slim_codeattributes3 = width;
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" width")
          } else {
            
            _buf['$<<'](" width=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes4 = height;
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" height")
          } else {
            
            _buf['$<<'](" height=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes5 = src;
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" src")
          } else {
            
            _buf['$<<'](" src=\"");
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes6 = 0;
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" frameborder")
          } else {
            
            _buf['$<<'](" frameborder=\"");
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](" webkitAllowFullScreen mozallowfullscreen allowFullScreen");
        _slim_codeattributes7 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes7)) {
          if (_slim_codeattributes7['$=='](true)) {
            _buf['$<<'](" data-autoplay")
          } else {
            
            _buf['$<<'](" data-autoplay=\"");
            _buf['$<<'](_slim_codeattributes7);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("></iframe>");}
        else if ("youtube"['$===']($case)) {
        if ($truthy((asset_uri_scheme = self.$attr("asset_uri_scheme", "https"))['$empty?']())) {
        } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        params = ["rel=0"];
        if ($truthy(self['$attr?']("start"))) {
          params['$<<']("" + "start=" + (self.$attr("start")))};
        if ($truthy(self['$attr?']("end"))) {
          params['$<<']("" + "end=" + (self.$attr("end")))};
        if ($truthy(self['$option?']("loop"))) {
          params['$<<']("loop=1")};
        if ($truthy(self['$option?']("nocontrols"))) {
          params['$<<']("controls=0")};
        src = "" + (asset_uri_scheme) + "//www.youtube.com/embed/" + (self.$attr("target")) + "?" + ($rb_times(params, "&amp;"));
        _buf['$<<']("<iframe");
        _slim_codeattributes8 = width;
        if ($truthy(_slim_codeattributes8)) {
          if (_slim_codeattributes8['$=='](true)) {
            _buf['$<<'](" width")
          } else {
            
            _buf['$<<'](" width=\"");
            _buf['$<<'](_slim_codeattributes8);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes9 = height;
        if ($truthy(_slim_codeattributes9)) {
          if (_slim_codeattributes9['$=='](true)) {
            _buf['$<<'](" height")
          } else {
            
            _buf['$<<'](" height=\"");
            _buf['$<<'](_slim_codeattributes9);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes10 = src;
        if ($truthy(_slim_codeattributes10)) {
          if (_slim_codeattributes10['$=='](true)) {
            _buf['$<<'](" src")
          } else {
            
            _buf['$<<'](" src=\"");
            _buf['$<<'](_slim_codeattributes10);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes11 = 0;
        if ($truthy(_slim_codeattributes11)) {
          if (_slim_codeattributes11['$=='](true)) {
            _buf['$<<'](" frameborder")
          } else {
            
            _buf['$<<'](" frameborder=\"");
            _buf['$<<'](_slim_codeattributes11);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes12 = self['$option?']("nofullscreen")['$!']();
        if ($truthy(_slim_codeattributes12)) {
          if (_slim_codeattributes12['$=='](true)) {
            _buf['$<<'](" allowfullscreen")
          } else {
            
            _buf['$<<'](" allowfullscreen=\"");
            _buf['$<<'](_slim_codeattributes12);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes13 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes13)) {
          if (_slim_codeattributes13['$=='](true)) {
            _buf['$<<'](" data-autoplay")
          } else {
            
            _buf['$<<'](" data-autoplay=\"");
            _buf['$<<'](_slim_codeattributes13);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("></iframe>");}
        else {
        _buf['$<<']("<video");
        _slim_codeattributes14 = self.$media_uri(self.$attr("target"));
        if ($truthy(_slim_codeattributes14)) {
          if (_slim_codeattributes14['$=='](true)) {
            _buf['$<<'](" src")
          } else {
            
            _buf['$<<'](" src=\"");
            _buf['$<<'](_slim_codeattributes14);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes15 = width;
        if ($truthy(_slim_codeattributes15)) {
          if (_slim_codeattributes15['$=='](true)) {
            _buf['$<<'](" width")
          } else {
            
            _buf['$<<'](" width=\"");
            _buf['$<<'](_slim_codeattributes15);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes16 = height;
        if ($truthy(_slim_codeattributes16)) {
          if (_slim_codeattributes16['$=='](true)) {
            _buf['$<<'](" height")
          } else {
            
            _buf['$<<'](" height=\"");
            _buf['$<<'](_slim_codeattributes16);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes17 = (function() {if ($truthy(self.$attr("poster"))) {
          return self.$media_uri(self.$attr("poster"))
        } else {
          return nil
        }; return nil; })();
        if ($truthy(_slim_codeattributes17)) {
          if (_slim_codeattributes17['$=='](true)) {
            _buf['$<<'](" poster")
          } else {
            
            _buf['$<<'](" poster=\"");
            _buf['$<<'](_slim_codeattributes17);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes18 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes18)) {
          if (_slim_codeattributes18['$=='](true)) {
            _buf['$<<'](" data-autoplay")
          } else {
            
            _buf['$<<'](" data-autoplay=\"");
            _buf['$<<'](_slim_codeattributes18);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes19 = self['$option?']("nocontrols")['$!']();
        if ($truthy(_slim_codeattributes19)) {
          if (_slim_codeattributes19['$=='](true)) {
            _buf['$<<'](" controls")
          } else {
            
            _buf['$<<'](" controls=\"");
            _buf['$<<'](_slim_codeattributes19);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes20 = self['$option?']("loop");
        if ($truthy(_slim_codeattributes20)) {
          if (_slim_codeattributes20['$=='](true)) {
            _buf['$<<'](" loop")
          } else {
            
            _buf['$<<'](" loop=\"");
            _buf['$<<'](_slim_codeattributes20);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">Your browser does not support the video tag.</video>");};
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, TMP_70.$$s = self, TMP_70.$$arity = 0, TMP_70));
    }, TMP_Converter_video_69.$$arity = -2);
    
    Opal.def(self, '$literal', TMP_Converter_literal_71 = function $$literal(node, opts) {
      var TMP_72, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_72 = function(){var self = TMP_72.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil;
        if (self.id == null) self.id = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "literalblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<div class=\"content\"><pre");
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = (function() {if ($truthy(($truthy($a = self.document['$attr?']("prewrap")['$!']()) ? $a : self['$option?']("nowrap")))) {
          return "nowrap"
        } else {
          return nil
        }; return nil; })();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" "));
        } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3)
        };
        _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.$content());
        _buf['$<<']("</pre></div></div>");
        return (_buf = _buf.$join(""));}, TMP_72.$$s = self, TMP_72.$$arity = 0, TMP_72));
    }, TMP_Converter_literal_71.$$arity = -2);
    
    Opal.def(self, '$floating_title', TMP_Converter_floating_title_73 = function $$floating_title(node, opts) {
      var TMP_74, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_74 = function(){var self = TMP_74.$$s || this, _buf = nil, _slim_htag_filter1 = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_htag_filter1 = $rb_plus(self.$level(), 1).$to_s();
        _buf['$<<']("<h");
        _buf['$<<'](_slim_htag_filter1);
        _slim_codeattributes1 = self.$id();
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"");
          }};
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = [self.$style(), self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.$title());
        _buf['$<<']("</h");
        _buf['$<<'](_slim_htag_filter1);
        _buf['$<<'](">");
        return (_buf = _buf.$join(""));}, TMP_74.$$s = self, TMP_74.$$arity = 0, TMP_74));
    }, TMP_Converter_floating_title_73.$$arity = -2);
    
    Opal.def(self, '$embedded', TMP_Converter_embedded_75 = function $$embedded(node, opts) {
      var TMP_76, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_76 = function(){var self = TMP_76.$$s || this, $a, TMP_77, _buf = nil, _slim_codeattributes1 = nil;
        if (self.id == null) self.id = nil;
        if (self.header == null) self.header = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = self.$notitle()) ? $a : self['$has_header?']()['$!']()))) {
        } else {
          
          _buf['$<<']("<h1");
          _slim_codeattributes1 = self.id;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          _buf['$<<'](self.header.$title());
          _buf['$<<']("</h1>");
        };
        _buf['$<<'](self.$content());
        if ($truthy(($truthy($a = self['$footnotes?']()['$!']()) ? $a : self['$attr?']("nofootnotes")))) {
        } else {
          
          _buf['$<<']("<div id=\"footnotes\"><hr>");
          $send(self.$footnotes(), 'each', [], (TMP_77 = function(fn){var self = TMP_77.$$s || this;

          
            
            if (fn == null) {
              fn = nil;
            };
            _buf['$<<']("<div class=\"footnote\" id=\"_footnote_");
            _buf['$<<'](fn.$index());
            _buf['$<<']("\"><a href=\"#_footnoteref_");
            _buf['$<<'](fn.$index());
            _buf['$<<']("\">");
            _buf['$<<'](fn.$index());
            _buf['$<<']("</a>. ");
            _buf['$<<'](fn.$text());
            return _buf['$<<']("</div>");}, TMP_77.$$s = self, TMP_77.$$arity = 1, TMP_77));
          _buf['$<<']("</div>");
        };
        return (_buf = _buf.$join(""));}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76));
    }, TMP_Converter_embedded_75.$$arity = -2);
    
    Opal.def(self, '$sidebar', TMP_Converter_sidebar_78 = function $$sidebar(node, opts) {
      var TMP_79, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_79 = function(){var self = TMP_79.$$s || this, $a, $b, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = ($truthy($b = self['$has_role?']("aside")) ? $b : self['$has_role?']("speaker"))) ? $a : self['$has_role?']("notes")))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _buf['$<<']("<div");
          _temple_html_attributeremover1 = [];
          _temple_html_attributemerger1 = [];
          
          $writer = [0, "sidebarblock"];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes1 = self.$role();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
          };
          
          $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _slim_codeattributes2 = self.id;
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("><div class=\"content\">");
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](self.$title());
            _buf['$<<']("</div>");};
          _buf['$<<'](self.$content());
          _buf['$<<']("</div></div>");
        };
        return (_buf = _buf.$join(""));}, TMP_79.$$s = self, TMP_79.$$arity = 0, TMP_79));
    }, TMP_Converter_sidebar_78.$$arity = -2);
    
    Opal.def(self, '$outline', TMP_Converter_outline_80 = function $$outline(node, opts) {
      var TMP_81, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_81 = function(){var self = TMP_81.$$s || this, $a, TMP_82, _buf = nil, toclevels = nil, slevel = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.$sections()['$empty?']())) {
        } else {
          
          toclevels = ($truthy($a = toclevels) ? $a : self.$document().$attr("toclevels", $$($nesting, 'DEFAULT_TOCLEVELS')).$to_i());
          slevel = self.$section_level(self.$sections().$first());
          _buf['$<<']("<ol class=\"sectlevel");
          _buf['$<<'](slevel);
          _buf['$<<']("\">");
          $send(self.$sections(), 'each', [], (TMP_82 = function(sec){var self = TMP_82.$$s || this, $b, child_toc = nil;

          
            
            if (sec == null) {
              sec = nil;
            };
            _buf['$<<']("<li><a href=\"#");
            _buf['$<<'](sec.$id());
            _buf['$<<']("\">");
            _buf['$<<'](self.$section_title(sec));
            _buf['$<<']("</a>");
            if ($truthy(($truthy($b = $rb_lt(sec.$level(), toclevels)) ? (child_toc = self.$converter().$convert(sec, "outline")) : $b))) {
              _buf['$<<'](child_toc)};
            return _buf['$<<']("</li>");}, TMP_82.$$s = self, TMP_82.$$arity = 1, TMP_82));
          _buf['$<<']("</ol>");
        };
        return (_buf = _buf.$join(""));}, TMP_81.$$s = self, TMP_81.$$arity = 0, TMP_81));
    }, TMP_Converter_outline_80.$$arity = -2);
    
    Opal.def(self, '$listing', TMP_Converter_listing_83 = function $$listing(node, opts) {
      var TMP_84, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_84 = function(){var self = TMP_84.$$s || this, $a, $b, _buf = nil, nowrap = nil, language = nil, code_class = nil, pre_class = nil, pre_lang = nil, code_noescape = nil, $case = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes5 = nil, _temple_html_attributeremover3 = nil, _slim_codeattributes6 = nil;
        if (self.document == null) self.document = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>");};
        nowrap = ($truthy($a = self.document['$attr?']("prewrap")['$!']()) ? $a : self['$option?']("nowrap"));
        if ($truthy(($truthy($a = self.style['$==']("source")) ? $a : (($b = self.style['$==']("listing")) ? self.$attributes()['$[]'](1)['$!=']("listing") : self.style['$==']("listing"))))) {
          
          language = self.$attr("language");
          code_class = (function() {if ($truthy(language)) {
            return [language, "" + "language-" + (language)]
          } else {
            return nil
          }; return nil; })();
          pre_class = ["highlight"];
          pre_lang = nil;
          code_noescape = false;
          $case = self.$document().$attr("source-highlighter");
          if ("coderay"['$===']($case)) {pre_class = ["CodeRay"]}
          else if ("pygments"['$===']($case)) {pre_class = ["pygments", "highlight"]}
          else if ("prettify"['$===']($case)) {
          pre_class = ["prettyprint"];
          if ($truthy(self['$attr?']("linenums"))) {
            pre_class['$<<']("linenums")};
          if ($truthy(language)) {
            pre_class['$<<'](language)};
          if ($truthy(language)) {
            pre_class['$<<']("" + "language-" + (language))};
          code_class = nil;}
          else if ("html-pipeline"['$===']($case)) {
          pre_lang = language;
          pre_class = (code_class = nil);
          nowrap = false;}
          else if ("highlightjs"['$===']($case) || "highlight.js"['$===']($case)) {code_noescape = true};
          if ($truthy(nowrap)) {
            pre_class['$<<']("nowrap")};
          pre_class['$<<']("listingblock");
          if ($truthy(self.$role())) {
            pre_class['$<<'](self.$role())};
          _buf['$<<']("<pre");
          _temple_html_attributeremover1 = [];
          _slim_codeattributes1 = pre_class;
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _slim_codeattributes2 = pre_lang;
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" lang")
            } else {
              
              _buf['$<<'](" lang=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes3 = self.id;
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("><code");
          _slim_codeattributes4 = code_noescape;
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" data-noescape")
            } else {
              
              _buf['$<<'](" data-noescape=\"");
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"");
            }};
          _temple_html_attributeremover2 = [];
          _slim_codeattributes5 = code_class;
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes5))) {
            
            _slim_codeattributes5 = _slim_codeattributes5.$flatten();
            $send(_slim_codeattributes5, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes5, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover2['$<<'](_slim_codeattributes5.$join(" "));
          } else {
            _temple_html_attributeremover2['$<<'](_slim_codeattributes5)
          };
          _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
          if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover2);
            _buf['$<<']("\"");};
          _buf['$<<'](">");
          _buf['$<<'](self.$content());
          _buf['$<<']("</code></pre>");
        } else {
          
          _buf['$<<']("<pre");
          _temple_html_attributeremover3 = [];
          _slim_codeattributes6 = (function() {if ($truthy(nowrap)) {
            return "nowrap"
          } else {
            return nil
          }; return nil; })();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes6))) {
            
            _slim_codeattributes6 = _slim_codeattributes6.$flatten();
            $send(_slim_codeattributes6, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes6, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes6.$join(" "));
          } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes6)
          };
          _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"");};
          _buf['$<<'](">");
          _buf['$<<'](self.$content());
          _buf['$<<']("</pre>");
        };
        return (_buf = _buf.$join(""));}, TMP_84.$$s = self, TMP_84.$$arity = 0, TMP_84));
    }, TMP_Converter_listing_83.$$arity = -2);
    
    Opal.def(self, '$inline_kbd', TMP_Converter_inline_kbd_85 = function $$inline_kbd(node, opts) {
      var TMP_86, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_86 = function(){var self = TMP_86.$$s || this, TMP_87, _buf = nil, keys = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ((keys = self.$attr("keys")).$size()['$=='](1)) {
          
          _buf['$<<']("<kbd>");
          _buf['$<<'](keys.$first());
          _buf['$<<']("</kbd>");
        } else {
          
          _buf['$<<']("<span class=\"keyseq\">");
          $send(keys, 'each_with_index', [], (TMP_87 = function(key, idx){var self = TMP_87.$$s || this;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if ($truthy(idx['$zero?']())) {
            } else {
              _buf['$<<']("+")
            };
            _buf['$<<']("<kbd>");
            _buf['$<<'](key);
            return _buf['$<<']("</kbd>");}, TMP_87.$$s = self, TMP_87.$$arity = 2, TMP_87));
          _buf['$<<']("</span>");
        };
        return (_buf = _buf.$join(""));}, TMP_86.$$s = self, TMP_86.$$arity = 0, TMP_86));
    }, TMP_Converter_inline_kbd_85.$$arity = -2);
    
    Opal.def(self, '$section', TMP_Converter_section_88 = function $$section(node, opts) {
      var TMP_89, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_89 = function(){var self = TMP_89.$$s || this, $a, $b, TMP_90, TMP_91, TMP_93, TMP_94, _buf = nil, titleless = nil, title = nil, hide_title = nil, vertical_slides = nil, data_background_image = nil, data_background_size = nil, data_background_repeat = nil, data_background_transition = nil, section_images = nil, bg_image = nil, data_background_color = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_htag_filter1 = nil, _slim_codeattributes15 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil, _slim_codeattributes24 = nil, _slim_codeattributes25 = nil, _slim_codeattributes26 = nil, _slim_codeattributes27 = nil, _slim_codeattributes28 = nil;
        if (self.level == null) self.level = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        titleless = (title = self.$title())['$==']("!");
        hide_title = ($truthy($a = ($truthy($b = titleless) ? $b : self['$option?']("notitle"))) ? $a : self['$option?']("conceal"));
        vertical_slides = $send(self, 'find_by', [$hash2(["context"], {"context": "section"})], (TMP_90 = function(section){var self = TMP_90.$$s || this;

        
          
          if (section == null) {
            section = nil;
          };
          return section.$level()['$=='](2);}, TMP_90.$$s = self, TMP_90.$$arity = 1, TMP_90));
        $b = nil, $a = Opal.to_ary($b), (data_background_image = ($a[0] == null ? nil : $a[0])), (data_background_size = ($a[1] == null ? nil : $a[1])), (data_background_repeat = ($a[2] == null ? nil : $a[2])), (data_background_transition = ($a[3] == null ? nil : $a[3])), $b;
        section_images = $send(self.$blocks(), 'map', [], (TMP_91 = function(block){var self = TMP_91.$$s || this, $c, TMP_92, ctx = nil;

        
          
          if (block == null) {
            block = nil;
          };
          if ((ctx = block.$context())['$==']("image")) {
            if ($truthy(["background", "canvas"]['$include?'](block.$attributes()['$[]'](1)))) {
              return block
            } else {
              return []
            }
          } else if (ctx['$==']("section")) {
            return []
          } else {
            return ($truthy($c = $send(block, 'find_by', [$hash2(["context"], {"context": "image"})], (TMP_92 = function(image){var self = TMP_92.$$s || this;

            
              
              if (image == null) {
                image = nil;
              };
              return ["background", "canvas"]['$include?'](image.$attributes()['$[]'](1));}, TMP_92.$$s = self, TMP_92.$$arity = 1, TMP_92))) ? $c : [])
          };}, TMP_91.$$s = self, TMP_91.$$arity = 1, TMP_91));
        if ($truthy((bg_image = section_images.$flatten().$first()))) {
          
          data_background_image = self.$image_uri(bg_image.$attr("target"));
          data_background_size = bg_image.$attr("size");
          data_background_repeat = bg_image.$attr("repeat");
          data_background_transition = bg_image.$attr("transition");};
        if ($truthy(self['$attr?']("background-image"))) {
          data_background_image = self.$image_uri(self.$attr("background-image"))};
        if ($truthy(self['$attr?']("background-color"))) {
          data_background_color = self.$attr("background-color")};
        if ($truthy((($a = self.level['$=='](1)) ? vertical_slides['$empty?']()['$!']() : self.level['$=='](1)))) {
          
          _buf['$<<']("<section><section");
          _slim_codeattributes1 = (function() {if ($truthy(titleless)) {
            return nil
          } else {
            return self.$id()
          }; return nil; })();
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _temple_html_attributeremover1 = [];
          _slim_codeattributes2 = self.$roles();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
            
            _slim_codeattributes2 = _slim_codeattributes2.$flatten();
            $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _slim_codeattributes3 = self.$attr("transition");
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" data-transition")
            } else {
              
              _buf['$<<'](" data-transition=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes4 = self.$attr("transition-speed");
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" data-transition-speed")
            } else {
              
              _buf['$<<'](" data-transition-speed=\"");
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes5 = data_background_color;
          if ($truthy(_slim_codeattributes5)) {
            if (_slim_codeattributes5['$=='](true)) {
              _buf['$<<'](" data-background-color")
            } else {
              
              _buf['$<<'](" data-background-color=\"");
              _buf['$<<'](_slim_codeattributes5);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes6 = data_background_image;
          if ($truthy(_slim_codeattributes6)) {
            if (_slim_codeattributes6['$=='](true)) {
              _buf['$<<'](" data-background-image")
            } else {
              
              _buf['$<<'](" data-background-image=\"");
              _buf['$<<'](_slim_codeattributes6);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes7 = ($truthy($a = data_background_size) ? $a : self.$attr("background-size"));
          if ($truthy(_slim_codeattributes7)) {
            if (_slim_codeattributes7['$=='](true)) {
              _buf['$<<'](" data-background-size")
            } else {
              
              _buf['$<<'](" data-background-size=\"");
              _buf['$<<'](_slim_codeattributes7);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes8 = ($truthy($a = data_background_repeat) ? $a : self.$attr("background-repeat"));
          if ($truthy(_slim_codeattributes8)) {
            if (_slim_codeattributes8['$=='](true)) {
              _buf['$<<'](" data-background-repeat")
            } else {
              
              _buf['$<<'](" data-background-repeat=\"");
              _buf['$<<'](_slim_codeattributes8);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes9 = ($truthy($a = data_background_transition) ? $a : self.$attr("background-transition"));
          if ($truthy(_slim_codeattributes9)) {
            if (_slim_codeattributes9['$=='](true)) {
              _buf['$<<'](" data-background-transition")
            } else {
              
              _buf['$<<'](" data-background-transition=\"");
              _buf['$<<'](_slim_codeattributes9);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes10 = self.$attr("background-iframe");
          if ($truthy(_slim_codeattributes10)) {
            if (_slim_codeattributes10['$=='](true)) {
              _buf['$<<'](" data-background-iframe")
            } else {
              
              _buf['$<<'](" data-background-iframe=\"");
              _buf['$<<'](_slim_codeattributes10);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes11 = self.$attr("background-video");
          if ($truthy(_slim_codeattributes11)) {
            if (_slim_codeattributes11['$=='](true)) {
              _buf['$<<'](" data-background-video")
            } else {
              
              _buf['$<<'](" data-background-video=\"");
              _buf['$<<'](_slim_codeattributes11);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes12 = ($truthy($a = self['$attr?']("background-video-loop")) ? $a : self['$option?']("loop"));
          if ($truthy(_slim_codeattributes12)) {
            if (_slim_codeattributes12['$=='](true)) {
              _buf['$<<'](" data-background-video-loop")
            } else {
              
              _buf['$<<'](" data-background-video-loop=\"");
              _buf['$<<'](_slim_codeattributes12);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes13 = ($truthy($a = self['$attr?']("background-video-muted")) ? $a : self['$option?']("muted"));
          if ($truthy(_slim_codeattributes13)) {
            if (_slim_codeattributes13['$=='](true)) {
              _buf['$<<'](" data-background-video-muted")
            } else {
              
              _buf['$<<'](" data-background-video-muted=\"");
              _buf['$<<'](_slim_codeattributes13);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes14 = self.$attr("state");
          if ($truthy(_slim_codeattributes14)) {
            if (_slim_codeattributes14['$=='](true)) {
              _buf['$<<'](" data-state")
            } else {
              
              _buf['$<<'](" data-state=\"");
              _buf['$<<'](_slim_codeattributes14);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          if ($truthy(hide_title)) {
          } else {
            
            _buf['$<<']("<h2>");
            _buf['$<<'](title);
            _buf['$<<']("</h2>");
          };
          $send($rb_minus(self.$blocks(), vertical_slides), 'each', [], (TMP_93 = function(block){var self = TMP_93.$$s || this;

          
            
            if (block == null) {
              block = nil;
            };
            return _buf['$<<'](block.$convert());}, TMP_93.$$s = self, TMP_93.$$arity = 1, TMP_93));
          _buf['$<<']("</section>");
          $send(vertical_slides, 'each', [], (TMP_94 = function(subsection){var self = TMP_94.$$s || this;

          
            
            if (subsection == null) {
              subsection = nil;
            };
            return _buf['$<<'](subsection.$convert());}, TMP_94.$$s = self, TMP_94.$$arity = 1, TMP_94));
          _buf['$<<']("</section>");
        } else if ($truthy($rb_ge(self.level, 3))) {
          
          _slim_htag_filter1 = self.level.$to_s();
          _buf['$<<']("<h");
          _buf['$<<'](_slim_htag_filter1);
          _buf['$<<'](">");
          _buf['$<<'](title);
          _buf['$<<']("</h");
          _buf['$<<'](_slim_htag_filter1);
          _buf['$<<'](">");
          _buf['$<<'](self.$content().$chomp());
        } else {
          
          _buf['$<<']("<section");
          _slim_codeattributes15 = (function() {if ($truthy(titleless)) {
            return nil
          } else {
            return self.$id()
          }; return nil; })();
          if ($truthy(_slim_codeattributes15)) {
            if (_slim_codeattributes15['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes15);
              _buf['$<<']("\"");
            }};
          _temple_html_attributeremover2 = [];
          _slim_codeattributes16 = self.$roles();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes16))) {
            
            _slim_codeattributes16 = _slim_codeattributes16.$flatten();
            $send(_slim_codeattributes16, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes16, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover2['$<<'](_slim_codeattributes16.$join(" "));
          } else {
            _temple_html_attributeremover2['$<<'](_slim_codeattributes16)
          };
          _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
          if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover2);
            _buf['$<<']("\"");};
          _slim_codeattributes17 = self.$attr("transition");
          if ($truthy(_slim_codeattributes17)) {
            if (_slim_codeattributes17['$=='](true)) {
              _buf['$<<'](" data-transition")
            } else {
              
              _buf['$<<'](" data-transition=\"");
              _buf['$<<'](_slim_codeattributes17);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes18 = self.$attr("transition-speed");
          if ($truthy(_slim_codeattributes18)) {
            if (_slim_codeattributes18['$=='](true)) {
              _buf['$<<'](" data-transition-speed")
            } else {
              
              _buf['$<<'](" data-transition-speed=\"");
              _buf['$<<'](_slim_codeattributes18);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes19 = data_background_color;
          if ($truthy(_slim_codeattributes19)) {
            if (_slim_codeattributes19['$=='](true)) {
              _buf['$<<'](" data-background-color")
            } else {
              
              _buf['$<<'](" data-background-color=\"");
              _buf['$<<'](_slim_codeattributes19);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes20 = data_background_image;
          if ($truthy(_slim_codeattributes20)) {
            if (_slim_codeattributes20['$=='](true)) {
              _buf['$<<'](" data-background-image")
            } else {
              
              _buf['$<<'](" data-background-image=\"");
              _buf['$<<'](_slim_codeattributes20);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes21 = ($truthy($a = data_background_size) ? $a : self.$attr("background-size"));
          if ($truthy(_slim_codeattributes21)) {
            if (_slim_codeattributes21['$=='](true)) {
              _buf['$<<'](" data-background-size")
            } else {
              
              _buf['$<<'](" data-background-size=\"");
              _buf['$<<'](_slim_codeattributes21);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes22 = ($truthy($a = data_background_repeat) ? $a : self.$attr("background-repeat"));
          if ($truthy(_slim_codeattributes22)) {
            if (_slim_codeattributes22['$=='](true)) {
              _buf['$<<'](" data-background-repeat")
            } else {
              
              _buf['$<<'](" data-background-repeat=\"");
              _buf['$<<'](_slim_codeattributes22);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes23 = ($truthy($a = data_background_transition) ? $a : self.$attr("background-transition"));
          if ($truthy(_slim_codeattributes23)) {
            if (_slim_codeattributes23['$=='](true)) {
              _buf['$<<'](" data-background-transition")
            } else {
              
              _buf['$<<'](" data-background-transition=\"");
              _buf['$<<'](_slim_codeattributes23);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes24 = self.$attr("background-iframe");
          if ($truthy(_slim_codeattributes24)) {
            if (_slim_codeattributes24['$=='](true)) {
              _buf['$<<'](" data-background-iframe")
            } else {
              
              _buf['$<<'](" data-background-iframe=\"");
              _buf['$<<'](_slim_codeattributes24);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes25 = self.$attr("background-video");
          if ($truthy(_slim_codeattributes25)) {
            if (_slim_codeattributes25['$=='](true)) {
              _buf['$<<'](" data-background-video")
            } else {
              
              _buf['$<<'](" data-background-video=\"");
              _buf['$<<'](_slim_codeattributes25);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes26 = ($truthy($a = self['$attr?']("background-video-loop")) ? $a : self['$option?']("loop"));
          if ($truthy(_slim_codeattributes26)) {
            if (_slim_codeattributes26['$=='](true)) {
              _buf['$<<'](" data-background-video-loop")
            } else {
              
              _buf['$<<'](" data-background-video-loop=\"");
              _buf['$<<'](_slim_codeattributes26);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes27 = ($truthy($a = self['$attr?']("background-video-muted")) ? $a : self['$option?']("muted"));
          if ($truthy(_slim_codeattributes27)) {
            if (_slim_codeattributes27['$=='](true)) {
              _buf['$<<'](" data-background-video-muted")
            } else {
              
              _buf['$<<'](" data-background-video-muted=\"");
              _buf['$<<'](_slim_codeattributes27);
              _buf['$<<']("\"");
            }};
          _slim_codeattributes28 = self.$attr("state");
          if ($truthy(_slim_codeattributes28)) {
            if (_slim_codeattributes28['$=='](true)) {
              _buf['$<<'](" data-state")
            } else {
              
              _buf['$<<'](" data-state=\"");
              _buf['$<<'](_slim_codeattributes28);
              _buf['$<<']("\"");
            }};
          _buf['$<<'](">");
          if ($truthy(hide_title)) {
          } else {
            
            _buf['$<<']("<h2>");
            _buf['$<<'](title);
            _buf['$<<']("</h2>");
          };
          _buf['$<<'](self.$content().$chomp());
          _buf['$<<']("</section>");
        };
        return (_buf = _buf.$join(""));}, TMP_89.$$s = self, TMP_89.$$arity = 0, TMP_89));
    }, TMP_Converter_section_88.$$arity = -2);
    
    Opal.def(self, '$example', TMP_Converter_example_95 = function $$example(node, opts) {
      var TMP_96, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_96 = function(){var self = TMP_96.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "exampleblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<div class=\"content\">");
        _buf['$<<'](self.$content());
        _buf['$<<']("</div></div>");
        return (_buf = _buf.$join(""));}, TMP_96.$$s = self, TMP_96.$$arity = 0, TMP_96));
    }, TMP_Converter_example_95.$$arity = -2);
    
    Opal.def(self, '$inline_button', TMP_Converter_inline_button_97 = function $$inline_button(node, opts) {
      var TMP_98, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_98 = function(){var self = TMP_98.$$s || this, _buf = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<b class=\"button\">");
        _buf['$<<'](self.text);
        _buf['$<<']("</b>");
        return (_buf = _buf.$join(""));}, TMP_98.$$s = self, TMP_98.$$arity = 0, TMP_98));
    }, TMP_Converter_inline_button_97.$$arity = -2);
    
    Opal.def(self, '$inline_menu', TMP_Converter_inline_menu_99 = function $$inline_menu(node, opts) {
      var TMP_100, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_100 = function(){var self = TMP_100.$$s || this, TMP_101, _buf = nil, menu = nil, menuitem = nil, submenus = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        menu = self.$attr("menu");
        menuitem = self.$attr("menuitem");
        if ($truthy((submenus = self.$attr("submenus"))['$empty?']()['$!']())) {
          
          _buf['$<<']("<span class=\"menuseq\"><span class=\"menu\">");
          _buf['$<<'](menu);
          _buf['$<<']("</span>&#160;&#9656;&#32;");
          _buf['$<<']($send(submenus, 'map', [], (TMP_101 = function(submenu){var self = TMP_101.$$s || this;

          
            
            if (submenu == null) {
              submenu = nil;
            };
            return "" + "<span class=\"submenu\">" + (submenu) + "</span>&#160;&#9656;&#32;";}, TMP_101.$$s = self, TMP_101.$$arity = 1, TMP_101)).$join());
          _buf['$<<']("<span class=\"menuitem\">");
          _buf['$<<'](menuitem);
          _buf['$<<']("</span></span>");
        } else if ($truthy(menuitem['$nil?']()['$!']())) {
          
          _buf['$<<']("<span class=\"menuseq\"><span class=\"menu\">");
          _buf['$<<'](menu);
          _buf['$<<']("</span>&#160;&#9656;&#32;<span class=\"menuitem\">");
          _buf['$<<'](menuitem);
          _buf['$<<']("</span></span>");
        } else {
          
          _buf['$<<']("<span class=\"menu\">");
          _buf['$<<'](menu);
          _buf['$<<']("</span>");
        };
        return (_buf = _buf.$join(""));}, TMP_100.$$s = self, TMP_100.$$arity = 0, TMP_100));
    }, TMP_Converter_inline_menu_99.$$arity = -2);
    
    Opal.def(self, '$audio', TMP_Converter_audio_102 = function $$audio(node, opts) {
      var TMP_103, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_103 = function(){var self = TMP_103.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "audioblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<div class=\"content\"><audio");
        _slim_codeattributes3 = self.$media_uri(self.$attr("target"));
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" src")
          } else {
            
            _buf['$<<'](" src=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes4 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" autoplay")
          } else {
            
            _buf['$<<'](" autoplay=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes5 = self['$option?']("nocontrols")['$!']();
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" controls")
          } else {
            
            _buf['$<<'](" controls=\"");
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes6 = self['$option?']("loop");
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" loop")
          } else {
            
            _buf['$<<'](" loop=\"");
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">Your browser does not support the audio tag.</audio></div></div>");
        return (_buf = _buf.$join(""));}, TMP_103.$$s = self, TMP_103.$$arity = 0, TMP_103));
    }, TMP_Converter_audio_102.$$arity = -2);
    
    Opal.def(self, '$stem', TMP_Converter_stem_104 = function $$stem(node, opts) {
      var TMP_105, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_105 = function(){var self = TMP_105.$$s || this, $a, $b, _buf = nil, open = nil, close = nil, equation = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.style == null) self.style = nil;
        if (self.subs == null) self.subs = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $b = $$$($$($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]'](self.style.$to_sym()), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
        equation = self.$content().$strip();
        if ($truthy(($truthy($a = ($truthy($b = self.subs['$nil?']()) ? $b : self.subs['$empty?']())) ? self['$attr?']("subs")['$!']() : $a))) {
          equation = self.$sub_specialcharacters(equation)};
        if ($truthy(($truthy($a = equation['$start_with?'](open)) ? equation['$end_with?'](close) : $a))) {
        } else {
          equation = "" + (open) + (equation) + (close)
        };
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "stemblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<div class=\"content\">");
        _buf['$<<'](equation);
        _buf['$<<']("</div></div>");
        return (_buf = _buf.$join(""));}, TMP_105.$$s = self, TMP_105.$$arity = 0, TMP_105));
    }, TMP_Converter_stem_104.$$arity = -2);
    
    Opal.def(self, '$olist', TMP_Converter_olist_106 = function $$olist(node, opts) {
      var TMP_107, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_107 = function(){var self = TMP_107.$$s || this, TMP_108, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "olist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<ol");
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = self.style;
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" "));
        } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3)
        };
        _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"");};
        _slim_codeattributes4 = self.$attr("start");
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" start")
          } else {
            
            _buf['$<<'](" start=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _slim_codeattributes5 = self.$list_marker_keyword();
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" type")
          } else {
            
            _buf['$<<'](" type=\"");
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        $send(self.$items(), 'each', [], (TMP_108 = function(item){var self = TMP_108.$$s || this, $a, _temple_html_attributeremover3 = nil, _slim_codeattributes6 = nil;

        
          
          if (item == null) {
            item = nil;
          };
          _buf['$<<']("<li");
          _temple_html_attributeremover3 = [];
          _slim_codeattributes6 = (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$has_role?']("step")))) {
            return "fragment"
          } else {
            return nil
          }; return nil; })();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes6))) {
            
            _slim_codeattributes6 = _slim_codeattributes6.$flatten();
            $send(_slim_codeattributes6, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes6, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes6.$join(" "));
          } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes6)
          };
          _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"");};
          _buf['$<<']("><p>");
          _buf['$<<'](item.$text());
          _buf['$<<']("</p>");
          if ($truthy(item['$blocks?']())) {
            _buf['$<<'](item.$content())};
          return _buf['$<<']("</li>");}, TMP_108.$$s = self, TMP_108.$$arity = 1, TMP_108));
        _buf['$<<']("</ol></div>");
        return (_buf = _buf.$join(""));}, TMP_107.$$s = self, TMP_107.$$arity = 0, TMP_107));
    }, TMP_Converter_olist_106.$$arity = -2);
    
    Opal.def(self, '$inline_anchor', TMP_Converter_inline_anchor_109 = function $$inline_anchor(node, opts) {
      var TMP_110, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_110 = function(){var self = TMP_110.$$s || this, $a, _buf = nil, $case = nil, refid = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil;
        if (self.type == null) self.type = nil;
        if (self.target == null) self.target = nil;
        if (self.text == null) self.text = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $case = self.type;
        if ("xref"['$===']($case)) {
        refid = ($truthy($a = self.$attr("refid")) ? $a : self.target);
        _buf['$<<']("<a");
        _slim_codeattributes1 = self.target;
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" href")
          } else {
            
            _buf['$<<'](" href=\"");
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        _buf['$<<'](($truthy($a = self.text) ? $a : self.document.$references()['$[]']("ids").$fetch(refid, "" + "[" + (refid) + "]")).$tr_s("\n", " "));
        _buf['$<<']("</a>");}
        else if ("ref"['$===']($case)) {
        _buf['$<<']("<a");
        _slim_codeattributes2 = self.target;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("></a>");}
        else if ("bibref"['$===']($case)) {
        _buf['$<<']("<a");
        _slim_codeattributes3 = self.target;
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }};
        _buf['$<<']("></a>[");
        _buf['$<<'](self.target);
        _buf['$<<']("]");}
        else {
        _buf['$<<']("<a");
        _slim_codeattributes4 = self.target;
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" href")
          } else {
            
            _buf['$<<'](" href=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }};
        _temple_html_attributeremover1 = [];
        _slim_codeattributes5 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes5))) {
          
          _slim_codeattributes5 = _slim_codeattributes5.$flatten();
          $send(_slim_codeattributes5, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes5, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes5.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes5)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes6 = self.$attr("window");
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" target")
          } else {
            
            _buf['$<<'](" target=\"");
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</a>");};
        return (_buf = _buf.$join(""));}, TMP_110.$$s = self, TMP_110.$$arity = 0, TMP_110));
    }, TMP_Converter_inline_anchor_109.$$arity = -2);
    
    Opal.def(self, '$admonition', TMP_Converter_admonition_111 = function $$admonition(node, opts) {
      var TMP_112, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_112 = function(){var self = TMP_112.$$s || this, $a, $b, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, icon_mapping = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil;
        if (self.id == null) self.id = nil;
        if (self.document == null) self.document = nil;
        if (self.caption == null) self.caption = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = ($truthy($b = self['$has_role?']("aside")) ? $b : self['$has_role?']("speaker"))) ? $a : self['$has_role?']("notes")))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _buf['$<<']("<div");
          _temple_html_attributeremover1 = [];
          _temple_html_attributemerger1 = [];
          
          $writer = [0, "admonitionblock"];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes1 = [self.$attr("name"), self.$role()];
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
          };
          
          $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");};
          _slim_codeattributes2 = self.id;
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("><table><tr><td class=\"icon\">");
          if ($truthy(self.document['$attr?']("icons", "font"))) {
            
            icon_mapping = $$($nesting, 'Hash')['$[]']("caution", "fire", "important", "exclamation-circle", "note", "info-circle", "tip", "lightbulb-o", "warning", "warning");
            _buf['$<<']("<i");
            _temple_html_attributeremover2 = [];
            _slim_codeattributes3 = "" + "fa fa-" + (icon_mapping['$[]'](self.$attr("name")));
            if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
              
              _slim_codeattributes3 = _slim_codeattributes3.$flatten();
              $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" "));
            } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes3)
            };
            _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
            if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"");
              _buf['$<<'](_temple_html_attributeremover2);
              _buf['$<<']("\"");};
            _slim_codeattributes4 = self.$attr(($truthy($a = "textlabel") ? $a : self.caption));
            if ($truthy(_slim_codeattributes4)) {
              if (_slim_codeattributes4['$=='](true)) {
                _buf['$<<'](" title")
              } else {
                
                _buf['$<<'](" title=\"");
                _buf['$<<'](_slim_codeattributes4);
                _buf['$<<']("\"");
              }};
            _buf['$<<']("></i>");
          } else if ($truthy(self.document['$attr?']("icons"))) {
            
            _buf['$<<']("<img");
            _slim_codeattributes5 = self.$icon_uri(self.$attr("name"));
            if ($truthy(_slim_codeattributes5)) {
              if (_slim_codeattributes5['$=='](true)) {
                _buf['$<<'](" src")
              } else {
                
                _buf['$<<'](" src=\"");
                _buf['$<<'](_slim_codeattributes5);
                _buf['$<<']("\"");
              }};
            _slim_codeattributes6 = self.caption;
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" alt")
              } else {
                
                _buf['$<<'](" alt=\"");
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"");
              }};
            _buf['$<<'](">");
          } else {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](($truthy($a = self.$attr("textlabel")) ? $a : self.caption));
            _buf['$<<']("</div>");
          };
          _buf['$<<']("</td><td class=\"content\">");
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](self.$title());
            _buf['$<<']("</div>");};
          _buf['$<<'](self.$content());
          _buf['$<<']("</td></tr></table></div>");
        };
        return (_buf = _buf.$join(""));}, TMP_112.$$s = self, TMP_112.$$arity = 0, TMP_112));
    }, TMP_Converter_admonition_111.$$arity = -2);
    
    Opal.def(self, '$inline_quoted', TMP_Converter_inline_quoted_113 = function $$inline_quoted(node, opts) {
      var TMP_114, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_114 = function(){var self = TMP_114.$$s || this, $a, $b, _buf = nil, _slim_codeattributes1 = nil, $case = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil, _temple_html_attributeremover3 = nil, _slim_codeattributes4 = nil, _temple_html_attributeremover4 = nil, _slim_codeattributes5 = nil, _temple_html_attributeremover5 = nil, _slim_codeattributes6 = nil, open = nil, close = nil;
        if (self.id == null) self.id = nil;
        if (self.type == null) self.type = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.id['$nil?']())) {
        } else {
          
          _buf['$<<']("<a");
          _slim_codeattributes1 = self.id;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }};
          _buf['$<<']("></a>");
        };
        $case = self.type;
        if ("emphasis"['$===']($case)) {
        _buf['$<<']("<em");
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes2))) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</em>");}
        else if ("strong"['$===']($case)) {
        _buf['$<<']("<strong");
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" "));
        } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3)
        };
        _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</strong>");}
        else if ("monospaced"['$===']($case)) {
        _buf['$<<']("<code");
        _temple_html_attributeremover3 = [];
        _slim_codeattributes4 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes4))) {
          
          _slim_codeattributes4 = _slim_codeattributes4.$flatten();
          $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover3['$<<'](_slim_codeattributes4.$join(" "));
        } else {
          _temple_html_attributeremover3['$<<'](_slim_codeattributes4)
        };
        _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
        if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover3);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</code>");}
        else if ("superscript"['$===']($case)) {
        _buf['$<<']("<sup");
        _temple_html_attributeremover4 = [];
        _slim_codeattributes5 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes5))) {
          
          _slim_codeattributes5 = _slim_codeattributes5.$flatten();
          $send(_slim_codeattributes5, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes5, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover4['$<<'](_slim_codeattributes5.$join(" "));
        } else {
          _temple_html_attributeremover4['$<<'](_slim_codeattributes5)
        };
        _temple_html_attributeremover4 = _temple_html_attributeremover4.$join("");
        if ($truthy(_temple_html_attributeremover4['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover4);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</sup>");}
        else if ("subscript"['$===']($case)) {
        _buf['$<<']("<sub");
        _temple_html_attributeremover5 = [];
        _slim_codeattributes6 = self.$role();
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes6))) {
          
          _slim_codeattributes6 = _slim_codeattributes6.$flatten();
          $send(_slim_codeattributes6, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes6, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover5['$<<'](_slim_codeattributes6.$join(" "));
        } else {
          _temple_html_attributeremover5['$<<'](_slim_codeattributes6)
        };
        _temple_html_attributeremover5 = _temple_html_attributeremover5.$join("");
        if ($truthy(_temple_html_attributeremover5['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover5);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        _buf['$<<'](self.text);
        _buf['$<<']("</sub>");}
        else if ("double"['$===']($case)) {_buf['$<<']((function() {if ($truthy(self['$role?']())) {
          return "" + "<span class=\"" + (self.$role()) + "\">&#8220;" + (self.text) + "&#8221;</span>"
        } else {
          return "" + "&#8220;" + (self.text) + "&#8221;"
        }; return nil; })())}
        else if ("single"['$===']($case)) {_buf['$<<']((function() {if ($truthy(self['$role?']())) {
          return "" + "<span class=\"" + (self.$role()) + "\">&#8216;" + (self.text) + "&#8217;</span>"
        } else {
          return "" + "&#8216;" + (self.text) + "&#8217;"
        }; return nil; })())}
        else if ("asciimath"['$===']($case) || "latexmath"['$===']($case)) {
        $b = $$$($$($nesting, 'Asciidoctor'), 'INLINE_MATH_DELIMITERS')['$[]'](self.type), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
        _buf['$<<'](open);
        _buf['$<<'](self.text);
        _buf['$<<'](close);}
        else {_buf['$<<']((function() {if ($truthy(self['$role?']())) {
          return "" + "<span class=\"" + (self.$role()) + "\">" + (self.text) + "</span>"
        } else {
          return self.text
        }; return nil; })())};
        return (_buf = _buf.$join(""));}, TMP_114.$$s = self, TMP_114.$$arity = 0, TMP_114));
    }, TMP_Converter_inline_quoted_113.$$arity = -2);
    
    Opal.def(self, '$ulist', TMP_Converter_ulist_115 = function $$ulist(node, opts) {
      var TMP_116, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_116 = function(){var self = TMP_116.$$s || this, $a, TMP_117, _buf = nil, checklist = nil, marker_checked = nil, marker_unchecked = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil;
        if (self.document == null) self.document = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy((checklist = (function() {if ($truthy(self['$option?']("checklist"))) {
          return "checklist"
        } else {
          return nil
        }; return nil; })()))) {
          if ($truthy(self['$option?']("interactive"))) {
            
            marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked>";
            marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\">";
          } else if ($truthy(self.document['$attr?']("icons", "font"))) {
            
            marker_checked = "<i class=\"icon-check\"></i>";
            marker_unchecked = "<i class=\"icon-check-empty\"></i>";
          } else {
            
            marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked disabled>";
            marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\" disabled>";
          }};
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "ulist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [checklist, self.style, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        _buf['$<<']("<ul");
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = ($truthy($a = checklist) ? $a : self.style);
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" "));
        } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3)
        };
        _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"");};
        _buf['$<<'](">");
        $send(self.$items(), 'each', [], (TMP_117 = function(item){var self = TMP_117.$$s || this, $b, _temple_html_attributeremover3 = nil, _slim_codeattributes4 = nil;

        
          
          if (item == null) {
            item = nil;
          };
          _buf['$<<']("<li");
          _temple_html_attributeremover3 = [];
          _slim_codeattributes4 = (function() {if ($truthy(($truthy($b = self['$option?']("step")) ? $b : self['$has_role?']("step")))) {
            return "fragment"
          } else {
            return nil
          }; return nil; })();
          if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes4))) {
            
            _slim_codeattributes4 = _slim_codeattributes4.$flatten();
            $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes4.$join(" "));
          } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes4)
          };
          _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"");};
          _buf['$<<']("><p>");
          if ($truthy(($truthy($b = checklist) ? item['$attr?']("checkbox") : $b))) {
            _buf['$<<']("" + ((function() {if ($truthy(item['$attr?']("checked"))) {
              return marker_checked
            } else {
              return marker_unchecked
            }; return nil; })()) + (item.$text()))
          } else {
            _buf['$<<'](item.$text())
          };
          _buf['$<<']("</p>");
          if ($truthy(item['$blocks?']())) {
            _buf['$<<'](item.$content())};
          return _buf['$<<']("</li>");}, TMP_117.$$s = self, TMP_117.$$arity = 1, TMP_117));
        _buf['$<<']("</ul></div>");
        return (_buf = _buf.$join(""));}, TMP_116.$$s = self, TMP_116.$$arity = 0, TMP_116));
    }, TMP_Converter_ulist_115.$$arity = -2);
    
    Opal.def(self, '$ruler', TMP_Converter_ruler_118 = function $$ruler(node, opts) {
      var TMP_119, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_119 = function(){var self = TMP_119.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<hr>");
        return (_buf = _buf.$join(""));}, TMP_119.$$s = self, TMP_119.$$arity = 0, TMP_119));
    }, TMP_Converter_ruler_118.$$arity = -2);
    
    Opal.def(self, '$colist', TMP_Converter_colist_120 = function $$colist(node, opts) {
      var TMP_121, self = this;

      
      
      if (opts == null) {
        opts = $hash2([], {});
      };
      node.$extend($$($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_121 = function(){var self = TMP_121.$$s || this, TMP_122, TMP_123, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, font_icons = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
        } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "colist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role()];
        if ($truthy($$($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        
        $writer = [1, _temple_html_attributemerger1['$[]'](1).$join("")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }};
        _buf['$<<'](">");
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">");
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>");};
        if ($truthy(self.document['$attr?']("icons"))) {
          
          font_icons = self.document['$attr?']("icons", "font");
          _buf['$<<']("<table>");
          $send(self.$items(), 'each_with_index', [], (TMP_122 = function(item, i){var self = TMP_122.$$s || this, num = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil;

          
            
            if (item == null) {
              item = nil;
            };
            
            if (i == null) {
              i = nil;
            };
            num = $rb_plus(i, 1);
            _buf['$<<']("<tr><td>");
            if ($truthy(font_icons)) {
              
              _buf['$<<']("<i class=\"conum\"");
              _slim_codeattributes3 = num;
              if ($truthy(_slim_codeattributes3)) {
                if (_slim_codeattributes3['$=='](true)) {
                  _buf['$<<'](" data-value")
                } else {
                  
                  _buf['$<<'](" data-value=\"");
                  _buf['$<<'](_slim_codeattributes3);
                  _buf['$<<']("\"");
                }};
              _buf['$<<']("></i><b>");
              _buf['$<<'](num);
              _buf['$<<']("</b>");
            } else {
              
              _buf['$<<']("<img");
              _slim_codeattributes4 = self.$icon_uri("" + "callouts/" + (num));
              if ($truthy(_slim_codeattributes4)) {
                if (_slim_codeattributes4['$=='](true)) {
                  _buf['$<<'](" src")
                } else {
                  
                  _buf['$<<'](" src=\"");
                  _buf['$<<'](_slim_codeattributes4);
                  _buf['$<<']("\"");
                }};
              _slim_codeattributes5 = num;
              if ($truthy(_slim_codeattributes5)) {
                if (_slim_codeattributes5['$=='](true)) {
                  _buf['$<<'](" alt")
                } else {
                  
                  _buf['$<<'](" alt=\"");
                  _buf['$<<'](_slim_codeattributes5);
                  _buf['$<<']("\"");
                }};
              _buf['$<<'](">");
            };
            _buf['$<<']("</td><td>");
            _buf['$<<'](item.$text());
            return _buf['$<<']("</td></tr>");}, TMP_122.$$s = self, TMP_122.$$arity = 2, TMP_122));
          _buf['$<<']("</table>");
        } else {
          
          _buf['$<<']("<ol>");
          $send(self.$items(), 'each', [], (TMP_123 = function(item){var self = TMP_123.$$s || this;

          
            
            if (item == null) {
              item = nil;
            };
            _buf['$<<']("<li><p>");
            _buf['$<<'](item.$text());
            return _buf['$<<']("</p></li>");}, TMP_123.$$s = self, TMP_123.$$arity = 1, TMP_123));
          _buf['$<<']("</ol>");
        };
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, TMP_121.$$s = self, TMP_121.$$arity = 0, TMP_121));
    }, TMP_Converter_colist_120.$$arity = -2);
    return (Opal.def(self, '$set_local_variables', TMP_Converter_set_local_variables_124 = function $$set_local_variables(binding, vars) {
      var TMP_125, self = this;

      return $send(vars, 'each', [], (TMP_125 = function(key, val){var self = TMP_125.$$s || this;

      
        
        if (key == null) {
          key = nil;
        };
        
        if (val == null) {
          val = nil;
        };
        return binding.$local_variable_set(key.$to_sym(), val);}, TMP_125.$$s = self, TMP_125.$$arity = 2, TMP_125))
    }, TMP_Converter_set_local_variables_124.$$arity = 2), nil) && 'set_local_variables';
  })($$$($$($nesting, 'Asciidoctor'), 'Revealjs'), $$$($$$($$$('::', 'Asciidoctor'), 'Converter'), 'Base'), $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor-revealjs/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      function $Revealjs() {};
      var self = $Revealjs = $module($base, 'Revealjs', $Revealjs);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      Opal.const_set($nesting[0], 'VERSION', "2.0.0")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("asciidoctor-revealjs/converter");
    return self.$require("asciidoctor-revealjs/version");
  } else {
    return nil
  }
})(Opal);

  }

  var mainModule

  function resolveModule () {
    if (!mainModule) {
      checkAsciidoctor()
      initialize(Opal)
      mainModule = Opal.const_get_qualified(Opal.Asciidoctor, 'Revealjs')
    }
    return mainModule
  }

  function checkAsciidoctor () {
    if (typeof Opal.Asciidoctor === 'undefined') {
      throw new TypeError('Asciidoctor.js is not loaded')
    }
  }

  /**
   * @return {string} Version of this extension.
   */
  function getVersion () {
    return resolveModule().$$const.VERSION.toString()
  }

  /**
   * Registers the reveal.js converter.
   */
  function register () {
    return resolveModule()
  }

  var facade = {
    getVersion: getVersion,
    register: register,
  }

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = facade
  }
  return facade
})(Opal);

},{}],3:[function(require,module,exports){
(function (__dirname){
/* eslint-env node, es6 */
const functionCall = Function.call;
const Opal = require('opal-runtime').Opal;
// save and restore Function.call until https://github.com/opal/opal/issues/1846 is fixed
Function.call = functionCall;

// Node module
(function (root, factory) {
  module.exports = factory;
// eslint-disable-next-line no-unused-vars
}(this, function (moduleConfig) {
/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/opal_ext/electron/io"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send, $gvars = Opal.gvars, $writer = nil;
  if ($gvars.stdout == null) $gvars.stdout = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;

  Opal.add_stubs(['$write_proc=', '$-']);
  
  
  $writer = [function(s){console.log(s)}];
  $send($gvars.stdout, 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [function(s){console.error(s)}];
  $send($gvars.stderr, 'write_proc=', Opal.to_a($writer));
  return $writer[$rb_minus($writer["length"], 1)];;
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/opal_ext/node"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  
  
  var isElectron = typeof navigator === 'object' && typeof navigator.userAgent === 'string' && typeof navigator.userAgent.indexOf('Electron') !== -1,
      platform,
      engine,
      framework,
      ioModule;

  if (typeof moduleConfig === 'object' && typeof moduleConfig.runtime === 'object') {
    var runtime = moduleConfig.runtime;
    platform = runtime.platform;
    engine = runtime.engine;
    framework = runtime.framework;
    ioModule = runtime.ioModule;
  }

  ioModule = ioModule || 'node';
  platform = platform || 'node';
  engine = engine || 'v8';
  if (isElectron) {
    framework = framework || 'electron';
  } else {
    framework = framework || '';
  }
;
  Opal.const_set($nesting[0], 'JAVASCRIPT_IO_MODULE', ioModule);
  Opal.const_set($nesting[0], 'JAVASCRIPT_PLATFORM', platform);
  Opal.const_set($nesting[0], 'JAVASCRIPT_ENGINE', engine);
  Opal.const_set($nesting[0], 'JAVASCRIPT_FRAMEWORK', framework);
  if ($$($nesting, 'JAVASCRIPT_FRAMEWORK')['$==']("electron")) {
    self.$require("asciidoctor/js/opal_ext/electron/io")};
  
// Load Opal modules
Opal.load("pathname");
Opal.load("base64");
Opal.load("open-uri");
Opal.load("nodejs");
;
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["set"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  
  (function($base, $super, $parent_nesting) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Set_$$_1, TMP_Set_initialize_2, TMP_Set_dup_4, TMP_Set_$_5, TMP_Set_inspect_6, TMP_Set_$eq$eq_7, TMP_Set_add_9, TMP_Set_classify_10, TMP_Set_collect$B_13, TMP_Set_delete_15, TMP_Set_delete$q_16, TMP_Set_delete_if_17, TMP_Set_add$q_20, TMP_Set_each_21, TMP_Set_empty$q_22, TMP_Set_eql$q_23, TMP_Set_clear_25, TMP_Set_include$q_26, TMP_Set_merge_27, TMP_Set_replace_29, TMP_Set_size_30, TMP_Set_subtract_31, TMP_Set_$_33, TMP_Set_superset$q_34, TMP_Set_proper_superset$q_36, TMP_Set_subset$q_38, TMP_Set_proper_subset$q_40, TMP_Set_to_a_42;

    def.hash = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defs(self, '$[]', TMP_Set_$$_1 = function($a) {
      var $post_args, ary, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      ary = $post_args;;
      return self.$new(ary);
    }, TMP_Set_$$_1.$$arity = -1);
    
    Opal.def(self, '$initialize', TMP_Set_initialize_2 = function $$initialize(enum$) {
      var $iter = TMP_Set_initialize_2.$$p, block = $iter || nil, TMP_3, self = this;

      if ($iter) TMP_Set_initialize_2.$$p = null;
      
      
      if ($iter) TMP_Set_initialize_2.$$p = null;;
      
      if (enum$ == null) {
        enum$ = nil;
      };
      self.hash = $hash2([], {});
      if ($truthy(enum$['$nil?']())) {
        return nil};
      if ($truthy($$($nesting, 'Enumerable')['$==='](enum$))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], (TMP_3 = function(item){var self = TMP_3.$$s || this;

        
          
          if (item == null) {
            item = nil;
          };
          return self.$add(Opal.yield1(block, item));}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
      } else {
        return self.$merge(enum$)
      };
    }, TMP_Set_initialize_2.$$arity = -1);
    
    Opal.def(self, '$dup', TMP_Set_dup_4 = function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, TMP_Set_dup_4.$$arity = 0);
    
    Opal.def(self, '$-', TMP_Set_$_5 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, TMP_Set_$_5.$$arity = 1);
    Opal.alias(self, "difference", "-");
    
    Opal.def(self, '$inspect', TMP_Set_inspect_6 = function $$inspect() {
      var self = this;

      return "" + "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, TMP_Set_inspect_6.$$arity = 0);
    
    Opal.def(self, '$==', TMP_Set_$eq$eq_7 = function(other) {
      var $a, TMP_8, self = this;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ($truthy(($truthy($a = other['$is_a?']($$($nesting, 'Set'))) ? self.$size()['$=='](other.$size()) : $a))) {
        return $send(other, 'all?', [], (TMP_8 = function(o){var self = TMP_8.$$s || this;
          if (self.hash == null) self.hash = nil;

        
          
          if (o == null) {
            o = nil;
          };
          return self.hash['$include?'](o);}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
      } else {
        return false
      }
    }, TMP_Set_$eq$eq_7.$$arity = 1);
    
    Opal.def(self, '$add', TMP_Set_add_9 = function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, TMP_Set_add_9.$$arity = 1);
    Opal.alias(self, "<<", "add");
    
    Opal.def(self, '$classify', TMP_Set_classify_10 = function $$classify() {
      var $iter = TMP_Set_classify_10.$$p, block = $iter || nil, TMP_11, TMP_12, self = this, result = nil;

      if ($iter) TMP_Set_classify_10.$$p = null;
      
      
      if ($iter) TMP_Set_classify_10.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("classify")
      };
      result = $send($$($nesting, 'Hash'), 'new', [], (TMP_11 = function(h, k){var self = TMP_11.$$s || this, $writer = nil;

      
        
        if (h == null) {
          h = nil;
        };
        
        if (k == null) {
          k = nil;
        };
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11));
      $send(self, 'each', [], (TMP_12 = function(item){var self = TMP_12.$$s || this;

      
        
        if (item == null) {
          item = nil;
        };
        return result['$[]'](Opal.yield1(block, item)).$add(item);}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
      return result;
    }, TMP_Set_classify_10.$$arity = 0);
    
    Opal.def(self, '$collect!', TMP_Set_collect$B_13 = function() {
      var $iter = TMP_Set_collect$B_13.$$p, block = $iter || nil, TMP_14, self = this, result = nil;

      if ($iter) TMP_Set_collect$B_13.$$p = null;
      
      
      if ($iter) TMP_Set_collect$B_13.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], (TMP_14 = function(item){var self = TMP_14.$$s || this;

      
        
        if (item == null) {
          item = nil;
        };
        return result['$<<'](Opal.yield1(block, item));}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
      return self.$replace(result);
    }, TMP_Set_collect$B_13.$$arity = 0);
    Opal.alias(self, "map!", "collect!");
    
    Opal.def(self, '$delete', TMP_Set_delete_15 = function(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, TMP_Set_delete_15.$$arity = 1);
    
    Opal.def(self, '$delete?', TMP_Set_delete$q_16 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
      } else {
        return nil
      }
    }, TMP_Set_delete$q_16.$$arity = 1);
    
    Opal.def(self, '$delete_if', TMP_Set_delete_if_17 = function $$delete_if() {
      var TMP_18, TMP_19, $iter = TMP_Set_delete_if_17.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Set_delete_if_17.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("delete_if")
      };
      $send($send(self, 'select', [], (TMP_18 = function(o){var self = TMP_18.$$s || this;

      
        
        if (o == null) {
          o = nil;
        };
        return Opal.yield1($yield, o);;}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18)), 'each', [], (TMP_19 = function(o){var self = TMP_19.$$s || this;
        if (self.hash == null) self.hash = nil;

      
        
        if (o == null) {
          o = nil;
        };
        return self.hash.$delete(o);}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
      return self;
    }, TMP_Set_delete_if_17.$$arity = 0);
    
    Opal.def(self, '$add?', TMP_Set_add$q_20 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
      } else {
        return self.$add(o)
      }
    }, TMP_Set_add$q_20.$$arity = 1);
    
    Opal.def(self, '$each', TMP_Set_each_21 = function $$each() {
      var $iter = TMP_Set_each_21.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Set_each_21.$$p = null;
      
      
      if ($iter) TMP_Set_each_21.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, TMP_Set_each_21.$$arity = 0);
    
    Opal.def(self, '$empty?', TMP_Set_empty$q_22 = function() {
      var self = this;

      return self.hash['$empty?']()
    }, TMP_Set_empty$q_22.$$arity = 0);
    
    Opal.def(self, '$eql?', TMP_Set_eql$q_23 = function(other) {
      var TMP_24, self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], (TMP_24 = function(){var self = TMP_24.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24)))
    }, TMP_Set_eql$q_23.$$arity = 1);
    
    Opal.def(self, '$clear', TMP_Set_clear_25 = function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, TMP_Set_clear_25.$$arity = 0);
    
    Opal.def(self, '$include?', TMP_Set_include$q_26 = function(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, TMP_Set_include$q_26.$$arity = 1);
    Opal.alias(self, "member?", "include?");
    
    Opal.def(self, '$merge', TMP_Set_merge_27 = function $$merge(enum$) {
      var TMP_28, self = this;

      
      $send(enum$, 'each', [], (TMP_28 = function(item){var self = TMP_28.$$s || this;

      
        
        if (item == null) {
          item = nil;
        };
        return self.$add(item);}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28));
      return self;
    }, TMP_Set_merge_27.$$arity = 1);
    
    Opal.def(self, '$replace', TMP_Set_replace_29 = function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, TMP_Set_replace_29.$$arity = 1);
    
    Opal.def(self, '$size', TMP_Set_size_30 = function $$size() {
      var self = this;

      return self.hash.$size()
    }, TMP_Set_size_30.$$arity = 0);
    Opal.alias(self, "length", "size");
    
    Opal.def(self, '$subtract', TMP_Set_subtract_31 = function $$subtract(enum$) {
      var TMP_32, self = this;

      
      $send(enum$, 'each', [], (TMP_32 = function(item){var self = TMP_32.$$s || this;

      
        
        if (item == null) {
          item = nil;
        };
        return self.$delete(item);}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32));
      return self;
    }, TMP_Set_subtract_31.$$arity = 1);
    
    Opal.def(self, '$|', TMP_Set_$_33 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, TMP_Set_$_33.$$arity = 1);
    
    Opal.def(self, '$superset?', TMP_Set_superset$q_34 = function(set) {
      var $a, TMP_35, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], (TMP_35 = function(o){var self = TMP_35.$$s || this;

      
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35));
    }, TMP_Set_superset$q_34.$$arity = 1);
    Opal.alias(self, ">=", "superset?");
    
    Opal.def(self, '$proper_superset?', TMP_Set_proper_superset$q_36 = function(set) {
      var $a, TMP_37, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], (TMP_37 = function(o){var self = TMP_37.$$s || this;

      
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37));
    }, TMP_Set_proper_superset$q_36.$$arity = 1);
    Opal.alias(self, ">", "proper_superset?");
    
    Opal.def(self, '$subset?', TMP_Set_subset$q_38 = function(set) {
      var $a, TMP_39, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], (TMP_39 = function(o){var self = TMP_39.$$s || this;

      
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39));
    }, TMP_Set_subset$q_38.$$arity = 1);
    Opal.alias(self, "<=", "subset?");
    
    Opal.def(self, '$proper_subset?', TMP_Set_proper_subset$q_40 = function(set) {
      var $a, TMP_41, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], (TMP_41 = function(o){var self = TMP_41.$$s || this;

      
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41));
    }, TMP_Set_proper_subset$q_40.$$arity = 1);
    Opal.alias(self, "<", "proper_subset?");
    Opal.alias(self, "+", "|");
    Opal.alias(self, "union", "|");
    return (Opal.def(self, '$to_a', TMP_Set_to_a_42 = function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, TMP_Set_to_a_42.$$arity = 0), nil) && 'to_a';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    function $Enumerable() {};
    var self = $Enumerable = $module($base, 'Enumerable', $Enumerable);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Enumerable_to_set_43;

    
    Opal.def(self, '$to_set', TMP_Enumerable_to_set_43 = function $$to_set($a, $b) {
      var $iter = TMP_Enumerable_to_set_43.$$p, block = $iter || nil, $post_args, klass, args, self = this;

      if ($iter) TMP_Enumerable_to_set_43.$$p = null;
      
      
      if ($iter) TMP_Enumerable_to_set_43.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        klass = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (klass == null) {
        klass = $$($nesting, 'Set');
      };
      
      args = $post_args;;
      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc());
    }, TMP_Enumerable_to_set_43.$$arity = -1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/opal_ext/file"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$new', '$attr_reader', '$delete', '$gsub', '$read', '$size', '$to_enum', '$chomp', '$each_line', '$readlines', '$split']);
  
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_open_1;

    
    Opal.def(self, '$open', TMP_Kernel_open_1 = function $$open(path, $a) {
      var $post_args, rest, $iter = TMP_Kernel_open_1.$$p, $yield = $iter || nil, self = this, file = nil;

      if ($iter) TMP_Kernel_open_1.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      rest = $post_args;;
      file = $send($$($nesting, 'File'), 'new', [path].concat(Opal.to_a(rest)));
      if (($yield !== nil)) {
        return Opal.yield1($yield, file);
      } else {
        return file
      };
    }, TMP_Kernel_open_1.$$arity = -2)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_File_initialize_2, TMP_File_read_3, TMP_File_each_line_4, TMP_File_readlines_5;

    def.eof = def.path = nil;
    
    self.$attr_reader("eof");
    self.$attr_reader("lineno");
    self.$attr_reader("path");
    
    Opal.def(self, '$initialize', TMP_File_initialize_2 = function $$initialize(path, flags) {
      var self = this, encoding_flag_regexp = nil;

      
      
      if (flags == null) {
        flags = "r";
      };
      self.path = path;
      self.contents = nil;
      self.eof = false;
      self.lineno = 0;
      flags = flags.$delete("b");
      encoding_flag_regexp = /:(.*)/;
      flags = flags.$gsub(encoding_flag_regexp, "");
      return (self.flags = flags);
    }, TMP_File_initialize_2.$$arity = -2);
    
    Opal.def(self, '$read', TMP_File_read_3 = function $$read() {
      var self = this, res = nil;

      if ($truthy(self.eof)) {
        return ""
      } else {
        
        res = $$($nesting, 'File').$read(self.path);
        self.eof = true;
        self.lineno = res.$size();
        return res;
      }
    }, TMP_File_read_3.$$arity = 0);
    
    Opal.def(self, '$each_line', TMP_File_each_line_4 = function $$each_line(separator) {
      var $iter = TMP_File_each_line_4.$$p, block = $iter || nil, self = this, lines = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if ($iter) TMP_File_each_line_4.$$p = null;
      
      
      if ($iter) TMP_File_each_line_4.$$p = null;;
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      if ($truthy(self.eof)) {
        return (function() {if ((block !== nil)) {
          return self
        } else {
          return [].$to_enum()
        }; return nil; })()};
      if ((block !== nil)) {
        
        lines = $$($nesting, 'File').$read(self.path);
        
        self.eof = false;
        self.lineno = 0;
        var chomped  = lines.$chomp(),
            trailing = lines.length != chomped.length,
            splitted = chomped.split(separator);
        for (var i = 0, length = splitted.length; i < length; i++) {
          self.lineno += 1;
          if (i < length - 1 || trailing) {
            Opal.yield1(block, splitted[i] + separator);
          }
          else {
            Opal.yield1(block, splitted[i]);
          }
        }
        self.eof = true;
      ;
        return self;
      } else {
        return self.$read().$each_line()
      };
    }, TMP_File_each_line_4.$$arity = -1);
    
    Opal.def(self, '$readlines', TMP_File_readlines_5 = function $$readlines() {
      var self = this;

      return $$($nesting, 'File').$readlines(self.path)
    }, TMP_File_readlines_5.$$arity = 0);
    return (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_readlines_6, TMP_file$q_7, TMP_readable$q_8, TMP_read_9;

      
      
      Opal.def(self, '$readlines', TMP_readlines_6 = function $$readlines(path, separator) {
        var self = this, content = nil;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        
        
        if (separator == null) {
          separator = $gvars["/"];
        };
        content = $$($nesting, 'File').$read(path);
        return content.$split(separator);
      }, TMP_readlines_6.$$arity = -2);
      
      Opal.def(self, '$file?', TMP_file$q_7 = function(path) {
        var self = this;

        return true
      }, TMP_file$q_7.$$arity = 1);
      
      Opal.def(self, '$readable?', TMP_readable$q_8 = function(path) {
        var self = this;

        return true
      }, TMP_readable$q_8.$$arity = 1);
      return (Opal.def(self, '$read', TMP_read_9 = function $$read(path) {
        var self = this;

        return ""
      }, TMP_read_9.$$arity = 1), nil) && 'read';
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_IO_read_10;

    return (Opal.defs(self, '$read', TMP_IO_read_10 = function $$read(path) {
      var self = this;

      return $$($nesting, 'File').$read(path)
    }, TMP_IO_read_10.$$arity = 1), nil) && 'read'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/opal_ext/match_data"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_MatchData_$$$eq_1;

    def.matches = nil;
    return (Opal.def(self, '$[]=', TMP_MatchData_$$$eq_1 = function(idx, val) {
      var self = this, $writer = nil;

      
      $writer = [idx, val];
      $send(self.matches, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, TMP_MatchData_$$$eq_1.$$arity = 2), nil) && '[]='
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/opal_ext/kernel"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_freeze_1;

    
    Opal.def(self, '$freeze', TMP_Kernel_freeze_1 = function $$freeze() {
      var self = this;

      return self
    }, TMP_Kernel_freeze_1.$$arity = 0)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/opal_ext/thread_safe"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    function $ThreadSafe() {};
    var self = $ThreadSafe = $module($base, 'ThreadSafe', $ThreadSafe);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Cache(){};
      var self = $Cache = $klass($base, $super, 'Cache', $Cache);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$$('::', 'Hash'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/opal_ext/string"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$method_defined?', '$<', '$length', '$bytes', '$to_s', '$byteslice', '$==', '$with_index', '$select', '$[]', '$even?', '$_original_unpack']);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_String_limit_bytesize_1, TMP_String_unpack_2;

    
    if ($truthy(self['$method_defined?']("limit_bytesize"))) {
    } else {
      
      Opal.def(self, '$limit_bytesize', TMP_String_limit_bytesize_1 = function $$limit_bytesize(size) {
        var self = this, result = nil;

        
        if ($truthy($rb_lt(size, self.$bytes().$length()))) {
        } else {
          return self.$to_s()
        };
        result = self.$byteslice(0, size);
        return result.$to_s();
      }, TMP_String_limit_bytesize_1.$$arity = 1)
    };
    if ($truthy(self['$method_defined?']("limit"))) {
    } else {
      Opal.alias(self, "limit", "limit_bytesize")
    };
    Opal.alias(self, "_original_unpack", "unpack");
    return (Opal.def(self, '$unpack', TMP_String_unpack_2 = function $$unpack(format) {
      var TMP_3, self = this;

      if (format['$==']("C3")) {
        return $send(self['$[]'](0, 3).$bytes().$select(), 'with_index', [], (TMP_3 = function(_, i){var self = TMP_3.$$s || this;

        
          
          if (_ == null) {
            _ = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          return i['$even?']();}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3))
      } else {
        return self.$_original_unpack(format)
      }
    }, TMP_String_unpack_2.$$arity = 1), nil) && 'unpack';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/opal_ext/uri"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$extend']);
  return (function($base, $parent_nesting) {
    function $URI() {};
    var self = $URI = $module($base, 'URI', $URI);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_URI_parse_1, TMP_URI_path_2;

    
    Opal.defs(self, '$parse', TMP_URI_parse_1 = function $$parse(str) {
      var self = this;

      return str.$extend($$($nesting, 'URI'))
    }, TMP_URI_parse_1.$$arity = 1);
    
    Opal.def(self, '$path', TMP_URI_path_2 = function $$path() {
      var self = this;

      return self
    }, TMP_URI_path_2.$$arity = 0);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/opal_ext"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("asciidoctor/js/opal_ext/file");
  self.$require("asciidoctor/js/opal_ext/match_data");
  self.$require("asciidoctor/js/opal_ext/kernel");
  self.$require("asciidoctor/js/opal_ext/thread_safe");
  self.$require("asciidoctor/js/opal_ext/string");
  self.$require("asciidoctor/js/opal_ext/uri");
  
// Load specific implementation
self.$require("asciidoctor/js/opal_ext/node");
;
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/rx"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy;

  Opal.add_stubs(['$gsub', '$+', '$unpack_hex_range']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Asciidoctor_unpack_hex_range_1;

    
    Opal.const_set($nesting[0], 'HEX_RANGE_RX', /([A-F0-9]{4})(?:-([A-F0-9]{4}))?/);
    Opal.defs(self, '$unpack_hex_range', TMP_Asciidoctor_unpack_hex_range_1 = function $$unpack_hex_range(str) {
      var TMP_2, self = this;

      return $send(str, 'gsub', [$$($nesting, 'HEX_RANGE_RX')], (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b;

      return "" + "\\u" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + (($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) ? "" + "-\\u" + ((($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) : $a))}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2))
    }, TMP_Asciidoctor_unpack_hex_range_1.$$arity = 1);
    Opal.const_set($nesting[0], 'P_L', $rb_plus("A-Za-z", self.$unpack_hex_range("00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D037F03860388-038A038C038E-03A103A3-03F503F7-0481048A-052F0531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A0-08B20904-0939093D09500958-09610971-09800985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA16F1-16F81700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191E1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A69DA6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A7ADA7B0A7B1A7F7-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFA9E0-A9E4A9E6-A9EFA9FA-A9FEAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA7E-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EAB30-AB5AAB5C-AB5FAB64AB65ABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC")));
    Opal.const_set($nesting[0], 'P_Nl', self.$unpack_hex_range("16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF"));
    Opal.const_set($nesting[0], 'P_Nd', $rb_plus("0-9", self.$unpack_hex_range("0660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0DE6-0DEF0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9A9F0-A9F9AA50-AA59ABF0-ABF9FF10-FF19")));
    Opal.const_set($nesting[0], 'P_Pc', self.$unpack_hex_range("005F203F20402054FE33FE34FE4D-FE4FFF3F"));
    Opal.const_set($nesting[0], 'CC_ALPHA', "" + ($$($nesting, 'P_L')) + ($$($nesting, 'P_Nl')));
    Opal.const_set($nesting[0], 'CG_ALPHA', "" + "[" + ($$($nesting, 'CC_ALPHA')) + "]");
    Opal.const_set($nesting[0], 'CC_ALNUM', "" + ($$($nesting, 'CC_ALPHA')) + ($$($nesting, 'P_Nd')));
    Opal.const_set($nesting[0], 'CG_ALNUM', "" + "[" + ($$($nesting, 'CC_ALNUM')) + "]");
    Opal.const_set($nesting[0], 'CC_WORD', "" + ($$($nesting, 'CC_ALNUM')) + ($$($nesting, 'P_Pc')));
    Opal.const_set($nesting[0], 'CG_WORD', "" + "[" + ($$($nesting, 'CC_WORD')) + "]");
    Opal.const_set($nesting[0], 'CG_BLANK', "[ \\t]");
    Opal.const_set($nesting[0], 'CC_EOL', "(?=\\n|$)");
    Opal.const_set($nesting[0], 'CG_GRAPH', "[^\\s\\x00-\\x1F\\x7F]");
    Opal.const_set($nesting[0], 'CC_ALL', "[\\s\\S]");
    Opal.const_set($nesting[0], 'CC_ANY', "[^\\n]");
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["strscan"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$anchor', '$scan_until', '$length', '$size', '$rest', '$pos=', '$-', '$private']);
  return (function($base, $super, $parent_nesting) {
    function $StringScanner(){};
    var self = $StringScanner = $klass($base, $super, 'StringScanner', $StringScanner);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_StringScanner_initialize_1, TMP_StringScanner_beginning_of_line$q_2, TMP_StringScanner_scan_3, TMP_StringScanner_scan_until_4, TMP_StringScanner_$$_5, TMP_StringScanner_check_6, TMP_StringScanner_check_until_7, TMP_StringScanner_peek_8, TMP_StringScanner_eos$q_9, TMP_StringScanner_exist$q_10, TMP_StringScanner_skip_11, TMP_StringScanner_skip_until_12, TMP_StringScanner_get_byte_13, TMP_StringScanner_match$q_14, TMP_StringScanner_pos$eq_15, TMP_StringScanner_matched_size_16, TMP_StringScanner_post_match_17, TMP_StringScanner_pre_match_18, TMP_StringScanner_reset_19, TMP_StringScanner_rest_20, TMP_StringScanner_rest$q_21, TMP_StringScanner_rest_size_22, TMP_StringScanner_terminate_23, TMP_StringScanner_unscan_24, TMP_StringScanner_anchor_25;

    def.pos = def.string = def.working = def.matched = def.prev_pos = def.match = nil;
    
    self.$attr_reader("pos");
    self.$attr_reader("matched");
    
    Opal.def(self, '$initialize', TMP_StringScanner_initialize_1 = function $$initialize(string) {
      var self = this;

      
      self.string = string;
      self.pos = 0;
      self.matched = nil;
      self.working = string;
      return (self.match = []);
    }, TMP_StringScanner_initialize_1.$$arity = 1);
    self.$attr_reader("string");
    
    Opal.def(self, '$beginning_of_line?', TMP_StringScanner_beginning_of_line$q_2 = function() {
      var self = this;

      return self.pos === 0 || self.string.charAt(self.pos - 1) === "\n"
    }, TMP_StringScanner_beginning_of_line$q_2.$$arity = 0);
    Opal.alias(self, "bol?", "beginning_of_line?");
    
    Opal.def(self, '$scan', TMP_StringScanner_scan_3 = function $$scan(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else if (typeof(result) === 'object') {
        self.prev_pos = self.pos;
        self.pos     += result[0].length;
        self.working  = self.working.substring(result[0].length);
        self.matched  = result[0];
        self.match    = result;

        return result[0];
      }
      else if (typeof(result) === 'string') {
        self.pos     += result.length;
        self.working  = self.working.substring(result.length);

        return result;
      }
      else {
        return nil;
      }
    ;
    }, TMP_StringScanner_scan_3.$$arity = 1);
    
    Opal.def(self, '$scan_until', TMP_StringScanner_scan_until_4 = function $$scan_until(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var pos     = self.pos,
          working = self.working,
          result;

      while (true) {
        result   = pattern.exec(working);
        pos     += 1;
        working  = working.substr(1);

        if (result == null) {
          if (working.length === 0) {
            return self.matched = nil;
          }

          continue;
        }

        self.matched  = self.string.substr(self.pos, pos - self.pos - 1 + result[0].length);
        self.prev_pos = pos - 1;
        self.pos      = pos;
        self.working  = working.substr(result[0].length);

        return self.matched;
      }
    ;
    }, TMP_StringScanner_scan_until_4.$$arity = 1);
    
    Opal.def(self, '$[]', TMP_StringScanner_$$_5 = function(idx) {
      var self = this;

      
      var match = self.match;

      if (idx < 0) {
        idx += match.length;
      }

      if (idx < 0 || idx >= match.length) {
        return nil;
      }

      if (match[idx] == null) {
        return nil;
      }

      return match[idx];
    
    }, TMP_StringScanner_$$_5.$$arity = 1);
    
    Opal.def(self, '$check', TMP_StringScanner_check_6 = function $$check(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }

      return self.matched = result[0];
    ;
    }, TMP_StringScanner_check_6.$$arity = 1);
    
    Opal.def(self, '$check_until', TMP_StringScanner_check_until_7 = function $$check_until(pattern) {
      var self = this;

      
      var prev_pos = self.prev_pos,
          pos      = self.pos;

      var result = self.$scan_until(pattern);

      if (result !== nil) {
        self.matched = result.substr(-1);
        self.working = self.string.substr(pos);
      }

      self.prev_pos = prev_pos;
      self.pos      = pos;

      return result;
    
    }, TMP_StringScanner_check_until_7.$$arity = 1);
    
    Opal.def(self, '$peek', TMP_StringScanner_peek_8 = function $$peek(length) {
      var self = this;

      return self.working.substring(0, length)
    }, TMP_StringScanner_peek_8.$$arity = 1);
    
    Opal.def(self, '$eos?', TMP_StringScanner_eos$q_9 = function() {
      var self = this;

      return self.working.length === 0
    }, TMP_StringScanner_eos$q_9.$$arity = 0);
    
    Opal.def(self, '$exist?', TMP_StringScanner_exist$q_10 = function(pattern) {
      var self = this;

      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else if (result.index == 0) {
        return 0;
      }
      else {
        return result.index + 1;
      }
    
    }, TMP_StringScanner_exist$q_10.$$arity = 1);
    
    Opal.def(self, '$skip', TMP_StringScanner_skip_11 = function $$skip(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else {
        var match_str = result[0];
        var match_len = match_str.length;

        self.matched   = match_str;
        self.prev_pos  = self.pos;
        self.pos      += match_len;
        self.working   = self.working.substring(match_len);

        return match_len;
      }
    ;
    }, TMP_StringScanner_skip_11.$$arity = 1);
    
    Opal.def(self, '$skip_until', TMP_StringScanner_skip_until_12 = function $$skip_until(pattern) {
      var self = this;

      
      var result = self.$scan_until(pattern);

      if (result === nil) {
        return nil;
      }
      else {
        self.matched = result.substr(-1);

        return result.length;
      }
    
    }, TMP_StringScanner_skip_until_12.$$arity = 1);
    
    Opal.def(self, '$get_byte', TMP_StringScanner_get_byte_13 = function $$get_byte() {
      var self = this;

      
      var result = nil;

      if (self.pos < self.string.length) {
        self.prev_pos  = self.pos;
        self.pos      += 1;
        result      = self.matched = self.working.substring(0, 1);
        self.working   = self.working.substring(1);
      }
      else {
        self.matched = nil;
      }

      return result;
    
    }, TMP_StringScanner_get_byte_13.$$arity = 0);
    Opal.alias(self, "getch", "get_byte");
    
    Opal.def(self, '$match?', TMP_StringScanner_match$q_14 = function(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else {
        self.prev_pos = self.pos;

        return result[0].length;
      }
    ;
    }, TMP_StringScanner_match$q_14.$$arity = 1);
    
    Opal.def(self, '$pos=', TMP_StringScanner_pos$eq_15 = function(pos) {
      var self = this;

      
      
      if (pos < 0) {
        pos += self.string.$length();
      }
    ;
      self.pos = pos;
      return (self.working = self.string.slice(pos));
    }, TMP_StringScanner_pos$eq_15.$$arity = 1);
    
    Opal.def(self, '$matched_size', TMP_StringScanner_matched_size_16 = function $$matched_size() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.matched.length
    
    }, TMP_StringScanner_matched_size_16.$$arity = 0);
    
    Opal.def(self, '$post_match', TMP_StringScanner_post_match_17 = function $$post_match() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(self.pos);
    
    }, TMP_StringScanner_post_match_17.$$arity = 0);
    
    Opal.def(self, '$pre_match', TMP_StringScanner_pre_match_18 = function $$pre_match() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(0, self.prev_pos);
    
    }, TMP_StringScanner_pre_match_18.$$arity = 0);
    
    Opal.def(self, '$reset', TMP_StringScanner_reset_19 = function $$reset() {
      var self = this;

      
      self.working = self.string;
      self.matched = nil;
      return (self.pos = 0);
    }, TMP_StringScanner_reset_19.$$arity = 0);
    
    Opal.def(self, '$rest', TMP_StringScanner_rest_20 = function $$rest() {
      var self = this;

      return self.working
    }, TMP_StringScanner_rest_20.$$arity = 0);
    
    Opal.def(self, '$rest?', TMP_StringScanner_rest$q_21 = function() {
      var self = this;

      return self.working.length !== 0
    }, TMP_StringScanner_rest$q_21.$$arity = 0);
    
    Opal.def(self, '$rest_size', TMP_StringScanner_rest_size_22 = function $$rest_size() {
      var self = this;

      return self.$rest().$size()
    }, TMP_StringScanner_rest_size_22.$$arity = 0);
    
    Opal.def(self, '$terminate', TMP_StringScanner_terminate_23 = function $$terminate() {
      var self = this, $writer = nil;

      
      self.match = nil;
      
      $writer = [self.string.$length()];
      $send(self, 'pos=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, TMP_StringScanner_terminate_23.$$arity = 0);
    
    Opal.def(self, '$unscan', TMP_StringScanner_unscan_24 = function $$unscan() {
      var self = this;

      
      self.pos = self.prev_pos;
      self.prev_pos = nil;
      self.match = nil;
      return self;
    }, TMP_StringScanner_unscan_24.$$arity = 0);
    self.$private();
    return (Opal.def(self, '$anchor', TMP_StringScanner_anchor_25 = function $$anchor(pattern) {
      var self = this;

      
      var flags = pattern.toString().match(/\/([^\/]+)$/);
      flags = flags ? flags[1] : undefined;
      return new RegExp('^(?:' + pattern.source + ')', flags);
    
    }, TMP_StringScanner_anchor_25.$$arity = 1), nil) && 'anchor';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("asciidoctor/js/opal_ext");
  self.$require("asciidoctor/js/rx");
  return self.$require("strscan");
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["logger"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$to_h', '$map', '$constants', '$const_get', '$to_s', '$format', '$chr', '$strftime', '$message_as_string', '$===', '$+', '$message', '$class', '$join', '$backtrace', '$inspect', '$attr_reader', '$attr_accessor', '$new', '$key', '$upcase', '$raise', '$add', '$to_proc', '$<=', '$<', '$write', '$call', '$[]', '$now']);
  return (function($base, $super, $parent_nesting) {
    function $Logger(){};
    var self = $Logger = $klass($base, $super, 'Logger', $Logger);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Logger_1, TMP_Logger_initialize_4, TMP_Logger_level$eq_5, TMP_Logger_info_6, TMP_Logger_debug_7, TMP_Logger_warn_8, TMP_Logger_error_9, TMP_Logger_fatal_10, TMP_Logger_unknown_11, TMP_Logger_info$q_12, TMP_Logger_debug$q_13, TMP_Logger_warn$q_14, TMP_Logger_error$q_15, TMP_Logger_fatal$q_16, TMP_Logger_add_17;

    def.level = def.progname = def.pipe = def.formatter = nil;
    
    (function($base, $parent_nesting) {
      function $Severity() {};
      var self = $Severity = $module($base, 'Severity', $Severity);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      
      Opal.const_set($nesting[0], 'DEBUG', 0);
      Opal.const_set($nesting[0], 'INFO', 1);
      Opal.const_set($nesting[0], 'WARN', 2);
      Opal.const_set($nesting[0], 'ERROR', 3);
      Opal.const_set($nesting[0], 'FATAL', 4);
      Opal.const_set($nesting[0], 'UNKNOWN', 5);
    })($nesting[0], $nesting);
    self.$include($$($nesting, 'Severity'));
    Opal.const_set($nesting[0], 'SEVERITY_LABELS', $send($$($nesting, 'Severity').$constants(), 'map', [], (TMP_Logger_1 = function(s){var self = TMP_Logger_1.$$s || this;

    
      
      if (s == null) {
        s = nil;
      };
      return [$$($nesting, 'Severity').$const_get(s), s.$to_s()];}, TMP_Logger_1.$$s = self, TMP_Logger_1.$$arity = 1, TMP_Logger_1)).$to_h());
    (function($base, $super, $parent_nesting) {
      function $Formatter(){};
      var self = $Formatter = $klass($base, $super, 'Formatter', $Formatter);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Formatter_call_2, TMP_Formatter_message_as_string_3;

      
      Opal.const_set($nesting[0], 'MESSAGE_FORMAT', "%s, [%s] %5s -- %s: %s\n");
      Opal.const_set($nesting[0], 'DATE_TIME_FORMAT', "%Y-%m-%dT%H:%M:%S.%6N");
      
      Opal.def(self, '$call', TMP_Formatter_call_2 = function $$call(severity, time, progname, msg) {
        var self = this;

        return self.$format($$($nesting, 'MESSAGE_FORMAT'), severity.$chr(), time.$strftime($$($nesting, 'DATE_TIME_FORMAT')), severity, progname, self.$message_as_string(msg))
      }, TMP_Formatter_call_2.$$arity = 4);
      return (Opal.def(self, '$message_as_string', TMP_Formatter_message_as_string_3 = function $$message_as_string(msg) {
        var $a, self = this, $case = nil;

        return (function() {$case = msg;
        if ($$$('::', 'String')['$===']($case)) {return msg}
        else if ($$$('::', 'Exception')['$===']($case)) {return $rb_plus("" + (msg.$message()) + " (" + (msg.$class()) + ")\n", ($truthy($a = msg.$backtrace()) ? $a : []).$join("\n"))}
        else {return msg.$inspect()}})()
      }, TMP_Formatter_message_as_string_3.$$arity = 1), nil) && 'message_as_string';
    })($nesting[0], null, $nesting);
    self.$attr_reader("level");
    self.$attr_accessor("progname");
    self.$attr_accessor("formatter");
    
    Opal.def(self, '$initialize', TMP_Logger_initialize_4 = function $$initialize(pipe) {
      var self = this;

      
      self.pipe = pipe;
      self.level = $$($nesting, 'DEBUG');
      return (self.formatter = $$($nesting, 'Formatter').$new());
    }, TMP_Logger_initialize_4.$$arity = 1);
    
    Opal.def(self, '$level=', TMP_Logger_level$eq_5 = function(severity) {
      var self = this, level = nil;

      if ($truthy($$$('::', 'Integer')['$==='](severity))) {
        return (self.level = severity)
      } else if ($truthy((level = $$($nesting, 'SEVERITY_LABELS').$key(severity.$to_s().$upcase())))) {
        return (self.level = level)
      } else {
        return self.$raise($$($nesting, 'ArgumentError'), "" + "invalid log level: " + (severity))
      }
    }, TMP_Logger_level$eq_5.$$arity = 1);
    
    Opal.def(self, '$info', TMP_Logger_info_6 = function $$info(progname) {
      var $iter = TMP_Logger_info_6.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_info_6.$$p = null;
      
      
      if ($iter) TMP_Logger_info_6.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'INFO'), nil, progname], block.$to_proc());
    }, TMP_Logger_info_6.$$arity = -1);
    
    Opal.def(self, '$debug', TMP_Logger_debug_7 = function $$debug(progname) {
      var $iter = TMP_Logger_debug_7.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_debug_7.$$p = null;
      
      
      if ($iter) TMP_Logger_debug_7.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'DEBUG'), nil, progname], block.$to_proc());
    }, TMP_Logger_debug_7.$$arity = -1);
    
    Opal.def(self, '$warn', TMP_Logger_warn_8 = function $$warn(progname) {
      var $iter = TMP_Logger_warn_8.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_warn_8.$$p = null;
      
      
      if ($iter) TMP_Logger_warn_8.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'WARN'), nil, progname], block.$to_proc());
    }, TMP_Logger_warn_8.$$arity = -1);
    
    Opal.def(self, '$error', TMP_Logger_error_9 = function $$error(progname) {
      var $iter = TMP_Logger_error_9.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_error_9.$$p = null;
      
      
      if ($iter) TMP_Logger_error_9.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'ERROR'), nil, progname], block.$to_proc());
    }, TMP_Logger_error_9.$$arity = -1);
    
    Opal.def(self, '$fatal', TMP_Logger_fatal_10 = function $$fatal(progname) {
      var $iter = TMP_Logger_fatal_10.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_fatal_10.$$p = null;
      
      
      if ($iter) TMP_Logger_fatal_10.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'FATAL'), nil, progname], block.$to_proc());
    }, TMP_Logger_fatal_10.$$arity = -1);
    
    Opal.def(self, '$unknown', TMP_Logger_unknown_11 = function $$unknown(progname) {
      var $iter = TMP_Logger_unknown_11.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_unknown_11.$$p = null;
      
      
      if ($iter) TMP_Logger_unknown_11.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'UNKNOWN'), nil, progname], block.$to_proc());
    }, TMP_Logger_unknown_11.$$arity = -1);
    
    Opal.def(self, '$info?', TMP_Logger_info$q_12 = function() {
      var self = this;

      return $rb_le(self.level, $$($nesting, 'INFO'))
    }, TMP_Logger_info$q_12.$$arity = 0);
    
    Opal.def(self, '$debug?', TMP_Logger_debug$q_13 = function() {
      var self = this;

      return $rb_le(self.level, $$($nesting, 'DEBUG'))
    }, TMP_Logger_debug$q_13.$$arity = 0);
    
    Opal.def(self, '$warn?', TMP_Logger_warn$q_14 = function() {
      var self = this;

      return $rb_le(self.level, $$($nesting, 'WARN'))
    }, TMP_Logger_warn$q_14.$$arity = 0);
    
    Opal.def(self, '$error?', TMP_Logger_error$q_15 = function() {
      var self = this;

      return $rb_le(self.level, $$($nesting, 'ERROR'))
    }, TMP_Logger_error$q_15.$$arity = 0);
    
    Opal.def(self, '$fatal?', TMP_Logger_fatal$q_16 = function() {
      var self = this;

      return $rb_le(self.level, $$($nesting, 'FATAL'))
    }, TMP_Logger_fatal$q_16.$$arity = 0);
    return (Opal.def(self, '$add', TMP_Logger_add_17 = function $$add(severity, message, progname) {
      var $iter = TMP_Logger_add_17.$$p, block = $iter || nil, $a, self = this;

      if ($iter) TMP_Logger_add_17.$$p = null;
      
      
      if ($iter) TMP_Logger_add_17.$$p = null;;
      
      if (message == null) {
        message = nil;
      };
      
      if (progname == null) {
        progname = nil;
      };
      if ($truthy($rb_lt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), self.level))) {
        return true};
      progname = ($truthy($a = progname) ? $a : self.progname);
      if ($truthy(message)) {
      } else if ((block !== nil)) {
        message = Opal.yieldX(block, [])
      } else {
        
        message = progname;
        progname = self.progname;
      };
      self.pipe.$write(self.formatter.$call(($truthy($a = $$($nesting, 'SEVERITY_LABELS')['$[]'](severity)) ? $a : "ANY"), $$$('::', 'Time').$now(), progname, message));
      return true;
    }, TMP_Logger_add_17.$$arity = -2), nil) && 'add';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/logging"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$attr_reader', '$progname=', '$-', '$new', '$formatter=', '$level=', '$>', '$[]', '$===', '$inspect', '$map', '$constants', '$const_get', '$to_sym', '$<<', '$clear', '$empty?', '$max', '$attr_accessor', '$memoize_logger', '$private', '$alias_method', '$==', '$define_method', '$extend', '$logger', '$merge']);
  
  self.$require("logger");
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Logger(){};
      var self = $Logger = $klass($base, $super, 'Logger', $Logger);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Logger_initialize_1, TMP_Logger_add_2;

      def.max_severity = nil;
      
      self.$attr_reader("max_severity");
      
      Opal.def(self, '$initialize', TMP_Logger_initialize_1 = function $$initialize($a) {
        var $post_args, args, $iter = TMP_Logger_initialize_1.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Logger_initialize_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Logger_initialize_1, false), $zuper, $iter);
        
        $writer = ["asciidoctor"];
        $send(self, 'progname=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$$($nesting, 'BasicFormatter').$new()];
        $send(self, 'formatter=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$$($nesting, 'WARN')];
        $send(self, 'level=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_Logger_initialize_1.$$arity = -1);
      
      Opal.def(self, '$add', TMP_Logger_add_2 = function $$add(severity, message, progname) {
        var $a, $iter = TMP_Logger_add_2.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Logger_add_2.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        if (message == null) {
          message = nil;
        };
        
        if (progname == null) {
          progname = nil;
        };
        if ($truthy($rb_gt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), (self.max_severity = ($truthy($a = self.max_severity) ? $a : severity))))) {
          self.max_severity = severity};
        return $send(self, Opal.find_super_dispatcher(self, 'add', TMP_Logger_add_2, false), $zuper, $iter);
      }, TMP_Logger_add_2.$$arity = -2);
      (function($base, $super, $parent_nesting) {
        function $BasicFormatter(){};
        var self = $BasicFormatter = $klass($base, $super, 'BasicFormatter', $BasicFormatter);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_BasicFormatter_call_3;

        
        Opal.const_set($nesting[0], 'SEVERITY_LABELS', $hash2(["WARN", "FATAL"], {"WARN": "WARNING", "FATAL": "FAILED"}));
        return (Opal.def(self, '$call', TMP_BasicFormatter_call_3 = function $$call(severity, _, progname, msg) {
          var $a, self = this;

          return "" + (progname) + ": " + (($truthy($a = $$($nesting, 'SEVERITY_LABELS')['$[]'](severity)) ? $a : severity)) + ": " + ((function() {if ($truthy($$$('::', 'String')['$==='](msg))) {
            return msg
          } else {
            return msg.$inspect()
          }; return nil; })()) + "\n"
        }, TMP_BasicFormatter_call_3.$$arity = 4), nil) && 'call';
      })($nesting[0], $$($nesting, 'Formatter'), $nesting);
      return (function($base, $parent_nesting) {
        function $AutoFormattingMessage() {};
        var self = $AutoFormattingMessage = $module($base, 'AutoFormattingMessage', $AutoFormattingMessage);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_AutoFormattingMessage_inspect_4;

        
        Opal.def(self, '$inspect', TMP_AutoFormattingMessage_inspect_4 = function $$inspect() {
          var self = this, sloc = nil;

          if ($truthy((sloc = self['$[]']("source_location")))) {
            return "" + (sloc) + ": " + (self['$[]']("text"))
          } else {
            return self['$[]']("text")
          }
        }, TMP_AutoFormattingMessage_inspect_4.$$arity = 0)
      })($nesting[0], $nesting);
    })($nesting[0], $$$('::', 'Logger'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $MemoryLogger(){};
      var self = $MemoryLogger = $klass($base, $super, 'MemoryLogger', $MemoryLogger);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_MemoryLogger_5, TMP_MemoryLogger_initialize_6, TMP_MemoryLogger_add_7, TMP_MemoryLogger_clear_8, TMP_MemoryLogger_empty$q_9, TMP_MemoryLogger_max_severity_10;

      def.messages = nil;
      
      Opal.const_set($nesting[0], 'SEVERITY_LABELS', $$$('::', 'Hash')['$[]']($send($$($nesting, 'Severity').$constants(), 'map', [], (TMP_MemoryLogger_5 = function(c){var self = TMP_MemoryLogger_5.$$s || this;

      
        
        if (c == null) {
          c = nil;
        };
        return [$$($nesting, 'Severity').$const_get(c), c.$to_sym()];}, TMP_MemoryLogger_5.$$s = self, TMP_MemoryLogger_5.$$arity = 1, TMP_MemoryLogger_5))));
      self.$attr_reader("messages");
      
      Opal.def(self, '$initialize', TMP_MemoryLogger_initialize_6 = function $$initialize() {
        var self = this, $writer = nil;

        
        
        $writer = [$$($nesting, 'WARN')];
        $send(self, 'level=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return (self.messages = []);
      }, TMP_MemoryLogger_initialize_6.$$arity = 0);
      
      Opal.def(self, '$add', TMP_MemoryLogger_add_7 = function $$add(severity, message, progname) {
        var $a, $iter = TMP_MemoryLogger_add_7.$$p, $yield = $iter || nil, self = this;

        if ($iter) TMP_MemoryLogger_add_7.$$p = null;
        
        
        if (message == null) {
          message = nil;
        };
        
        if (progname == null) {
          progname = nil;
        };
        if ($truthy(message)) {
        } else {
          message = (function() {if (($yield !== nil)) {
            return Opal.yieldX($yield, []);
          } else {
            return progname
          }; return nil; })()
        };
        self.messages['$<<']($hash2(["severity", "message"], {"severity": $$($nesting, 'SEVERITY_LABELS')['$[]'](($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), "message": message}));
        return true;
      }, TMP_MemoryLogger_add_7.$$arity = -2);
      
      Opal.def(self, '$clear', TMP_MemoryLogger_clear_8 = function $$clear() {
        var self = this;

        return self.messages.$clear()
      }, TMP_MemoryLogger_clear_8.$$arity = 0);
      
      Opal.def(self, '$empty?', TMP_MemoryLogger_empty$q_9 = function() {
        var self = this;

        return self.messages['$empty?']()
      }, TMP_MemoryLogger_empty$q_9.$$arity = 0);
      return (Opal.def(self, '$max_severity', TMP_MemoryLogger_max_severity_10 = function $$max_severity() {
        var TMP_11, self = this;

        if ($truthy(self['$empty?']())) {
          return nil
        } else {
          return $send(self.messages, 'map', [], (TMP_11 = function(m){var self = TMP_11.$$s || this;

          
            
            if (m == null) {
              m = nil;
            };
            return $$($nesting, 'Severity').$const_get(m['$[]']("severity"));}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11)).$max()
        }
      }, TMP_MemoryLogger_max_severity_10.$$arity = 0), nil) && 'max_severity';
    })($nesting[0], $$$('::', 'Logger'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $NullLogger(){};
      var self = $NullLogger = $klass($base, $super, 'NullLogger', $NullLogger);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_NullLogger_initialize_12, TMP_NullLogger_add_13;

      def.max_severity = nil;
      
      self.$attr_reader("max_severity");
      
      Opal.def(self, '$initialize', TMP_NullLogger_initialize_12 = function $$initialize() {
        var self = this;

        return nil
      }, TMP_NullLogger_initialize_12.$$arity = 0);
      return (Opal.def(self, '$add', TMP_NullLogger_add_13 = function $$add(severity, message, progname) {
        var $a, self = this;

        
        
        if (message == null) {
          message = nil;
        };
        
        if (progname == null) {
          progname = nil;
        };
        if ($truthy($rb_gt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), (self.max_severity = ($truthy($a = self.max_severity) ? $a : severity))))) {
          self.max_severity = severity};
        return true;
      }, TMP_NullLogger_add_13.$$arity = -2), nil) && 'add';
    })($nesting[0], $$$('::', 'Logger'), $nesting);
    (function($base, $parent_nesting) {
      function $LoggerManager() {};
      var self = $LoggerManager = $module($base, 'LoggerManager', $LoggerManager);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      
      self.logger_class = $$($nesting, 'Logger');
      (function(self, $parent_nesting) {
        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_logger_14, TMP_logger$eq_15, TMP_memoize_logger_16;

        
        self.$attr_accessor("logger_class");
        
        Opal.def(self, '$logger', TMP_logger_14 = function $$logger(pipe) {
          var $a, self = this;
          if (self.logger == null) self.logger = nil;
          if (self.logger_class == null) self.logger_class = nil;
          if ($gvars.stderr == null) $gvars.stderr = nil;

          
          
          if (pipe == null) {
            pipe = $gvars.stderr;
          };
          self.$memoize_logger();
          return (self.logger = ($truthy($a = self.logger) ? $a : self.logger_class.$new(pipe)));
        }, TMP_logger_14.$$arity = -1);
        
        Opal.def(self, '$logger=', TMP_logger$eq_15 = function(logger) {
          var $a, self = this;
          if (self.logger_class == null) self.logger_class = nil;
          if ($gvars.stderr == null) $gvars.stderr = nil;

          return (self.logger = ($truthy($a = logger) ? $a : self.logger_class.$new($gvars.stderr)))
        }, TMP_logger$eq_15.$$arity = 1);
        self.$private();
        return (Opal.def(self, '$memoize_logger', TMP_memoize_logger_16 = function $$memoize_logger() {
          var self = this;

          return (function(self, $parent_nesting) {
            var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_17;

            
            self.$alias_method("logger", "logger");
            if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
              return $send(self, 'define_method', ["logger"], (TMP_17 = function(){var self = TMP_17.$$s || this;
                if (self.logger == null) self.logger = nil;

              return self.logger}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17))
            } else {
              return nil
            };
          })(Opal.get_singleton_class(self), $nesting)
        }, TMP_memoize_logger_16.$$arity = 0), nil) && 'memoize_logger';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      function $Logging() {};
      var self = $Logging = $module($base, 'Logging', $Logging);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Logging_included_18, TMP_Logging_logger_19, TMP_Logging_message_with_context_20;

      
      Opal.defs(self, '$included', TMP_Logging_included_18 = function $$included(into) {
        var self = this;

        return into.$extend($$($nesting, 'Logging'))
      }, TMP_Logging_included_18.$$arity = 1);
      self.$private();
      
      Opal.def(self, '$logger', TMP_Logging_logger_19 = function $$logger() {
        var self = this;

        return $$($nesting, 'LoggerManager').$logger()
      }, TMP_Logging_logger_19.$$arity = 0);
      
      Opal.def(self, '$message_with_context', TMP_Logging_message_with_context_20 = function $$message_with_context(text, context) {
        var self = this;

        
        
        if (context == null) {
          context = $hash2([], {});
        };
        return $hash2(["text"], {"text": text}).$merge(context).$extend($$$($$($nesting, 'Logger'), 'AutoFormattingMessage'));
      }, TMP_Logging_message_with_context_20.$$arity = -2);
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/timings"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$now', '$[]=', '$-', '$delete', '$reduce', '$+', '$[]', '$>', '$time', '$puts', '$%', '$to_f', '$read_parse', '$convert', '$read_parse_convert', '$const_defined?', '$respond_to?', '$clock_gettime']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Timings(){};
      var self = $Timings = $klass($base, $super, 'Timings', $Timings);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Timings_initialize_1, TMP_Timings_start_2, TMP_Timings_record_3, TMP_Timings_time_4, TMP_Timings_read_6, TMP_Timings_parse_7, TMP_Timings_read_parse_8, TMP_Timings_convert_9, TMP_Timings_read_parse_convert_10, TMP_Timings_write_11, TMP_Timings_total_12, TMP_Timings_print_report_13, $a, TMP_Timings_now_14, TMP_Timings_now_15;

      def.timers = def.log = nil;
      
      
      Opal.def(self, '$initialize', TMP_Timings_initialize_1 = function $$initialize() {
        var self = this;

        
        self.log = $hash2([], {});
        return (self.timers = $hash2([], {}));
      }, TMP_Timings_initialize_1.$$arity = 0);
      
      Opal.def(self, '$start', TMP_Timings_start_2 = function $$start(key) {
        var self = this, $writer = nil;

        
        $writer = [key, self.$now()];
        $send(self.timers, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_Timings_start_2.$$arity = 1);
      
      Opal.def(self, '$record', TMP_Timings_record_3 = function $$record(key) {
        var self = this, $writer = nil;

        
        $writer = [key, $rb_minus(self.$now(), self.timers.$delete(key))];
        $send(self.log, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_Timings_record_3.$$arity = 1);
      
      Opal.def(self, '$time', TMP_Timings_time_4 = function $$time($a) {
        var $post_args, keys, TMP_5, self = this, time = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        keys = $post_args;;
        time = $send(keys, 'reduce', [0], (TMP_5 = function(sum, key){var self = TMP_5.$$s || this, $b;
          if (self.log == null) self.log = nil;

        
          
          if (sum == null) {
            sum = nil;
          };
          
          if (key == null) {
            key = nil;
          };
          return $rb_plus(sum, ($truthy($b = self.log['$[]'](key)) ? $b : 0));}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5));
        if ($truthy($rb_gt(time, 0))) {
          return time
        } else {
          return nil
        };
      }, TMP_Timings_time_4.$$arity = -1);
      
      Opal.def(self, '$read', TMP_Timings_read_6 = function $$read() {
        var self = this;

        return self.$time("read")
      }, TMP_Timings_read_6.$$arity = 0);
      
      Opal.def(self, '$parse', TMP_Timings_parse_7 = function $$parse() {
        var self = this;

        return self.$time("parse")
      }, TMP_Timings_parse_7.$$arity = 0);
      
      Opal.def(self, '$read_parse', TMP_Timings_read_parse_8 = function $$read_parse() {
        var self = this;

        return self.$time("read", "parse")
      }, TMP_Timings_read_parse_8.$$arity = 0);
      
      Opal.def(self, '$convert', TMP_Timings_convert_9 = function $$convert() {
        var self = this;

        return self.$time("convert")
      }, TMP_Timings_convert_9.$$arity = 0);
      
      Opal.def(self, '$read_parse_convert', TMP_Timings_read_parse_convert_10 = function $$read_parse_convert() {
        var self = this;

        return self.$time("read", "parse", "convert")
      }, TMP_Timings_read_parse_convert_10.$$arity = 0);
      
      Opal.def(self, '$write', TMP_Timings_write_11 = function $$write() {
        var self = this;

        return self.$time("write")
      }, TMP_Timings_write_11.$$arity = 0);
      
      Opal.def(self, '$total', TMP_Timings_total_12 = function $$total() {
        var self = this;

        return self.$time("read", "parse", "convert", "write")
      }, TMP_Timings_total_12.$$arity = 0);
      
      Opal.def(self, '$print_report', TMP_Timings_print_report_13 = function $$print_report(to, subject) {
        var self = this;
        if ($gvars.stdout == null) $gvars.stdout = nil;

        
        
        if (to == null) {
          to = $gvars.stdout;
        };
        
        if (subject == null) {
          subject = nil;
        };
        if ($truthy(subject)) {
          to.$puts("" + "Input file: " + (subject))};
        to.$puts("" + "  Time to read and parse source: " + ("%05.5f"['$%'](self.$read_parse().$to_f())));
        to.$puts("" + "  Time to convert document: " + ("%05.5f"['$%'](self.$convert().$to_f())));
        return to.$puts("" + "  Total time (read, parse and convert): " + ("%05.5f"['$%'](self.$read_parse_convert().$to_f())));
      }, TMP_Timings_print_report_13.$$arity = -1);
      if ($truthy(($truthy($a = $$$('::', 'Process')['$const_defined?']("CLOCK_MONOTONIC")) ? $$$('::', 'Process')['$respond_to?']("clock_gettime") : $a))) {
        
        Opal.const_set($nesting[0], 'CLOCK_ID', $$$($$$('::', 'Process'), 'CLOCK_MONOTONIC'));
        return (Opal.def(self, '$now', TMP_Timings_now_14 = function $$now() {
          var self = this;

          return $$$('::', 'Process').$clock_gettime($$($nesting, 'CLOCK_ID'))
        }, TMP_Timings_now_14.$$arity = 0), nil) && 'now';
      } else {
        return (Opal.def(self, '$now', TMP_Timings_now_15 = function $$now() {
          var self = this;

          return $$$('::', 'Time').$now()
        }, TMP_Timings_now_15.$$arity = 0), nil) && 'now'
      };
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'VERSION', "1.5.8")
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/core_ext/nil_or_empty"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$method_defined?']);
  
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("nil_or_empty?"))) {
      return nil
    } else {
      return Opal.alias(self, "nil_or_empty?", "nil?")
    }
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("nil_or_empty?"))) {
      return nil
    } else {
      return Opal.alias(self, "nil_or_empty?", "empty?")
    }
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("nil_or_empty?"))) {
      return nil
    } else {
      return Opal.alias(self, "nil_or_empty?", "empty?")
    }
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("nil_or_empty?"))) {
      return nil
    } else {
      return Opal.alias(self, "nil_or_empty?", "empty?")
    }
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("nil_or_empty?"))) {
      return nil
    } else {
      return Opal.alias(self, "nil_or_empty?", "nil?")
    }
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/core_ext/regexp/is_match"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$method_defined?']);
  return (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("match?"))) {
      return nil
    } else {
      return Opal.alias(self, "match?", "===")
    }
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/core_ext/string/limit_bytesize"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$method_defined?', '$<', '$bytesize', '$valid_encoding?', '$force_encoding', '$byteslice', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_String_limit_bytesize_1;

    if ($truthy(self['$method_defined?']("limit_bytesize"))) {
      return nil
    } else {
      return (Opal.def(self, '$limit_bytesize', TMP_String_limit_bytesize_1 = function $$limit_bytesize(size) {
        var $a, self = this, result = nil;

        
        if ($truthy($rb_lt(size, self.$bytesize()))) {
        } else {
          return self
        };
        while (!($truthy((result = self.$byteslice(0, size)).$force_encoding($$$($$$('::', 'Encoding'), 'UTF_8'))['$valid_encoding?']()))) {
          size = $rb_minus(size, 1)
        };
        return result;
      }, TMP_String_limit_bytesize_1.$$arity = 1), nil) && 'limit_bytesize'
    }
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/core_ext/1.8.7/io/binread"] = function(Opal) {
  var TMP_binread_1, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$respond_to?', '$open', '$==', '$seek', '$read']);
  if ($truthy($$($nesting, 'IO')['$respond_to?']("binread"))) {
    return nil
  } else {
    return (Opal.defs($$($nesting, 'IO'), '$binread', TMP_binread_1 = function $$binread(name, length, offset) {
      var TMP_2, self = this;

      
      
      if (length == null) {
        length = nil;
      };
      
      if (offset == null) {
        offset = 0;
      };
      return $send($$($nesting, 'File'), 'open', [name, "rb"], (TMP_2 = function(f){var self = TMP_2.$$s || this;

      
        
        if (f == null) {
          f = nil;
        };
        if (offset['$=='](0)) {
        } else {
          f.$seek(offset)
        };
        if ($truthy(length)) {
          
          return f.$read(length);
        } else {
          return f.$read()
        };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
    }, TMP_binread_1.$$arity = -2), nil) && 'binread'
  }
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/core_ext/1.8.7/io/write"] = function(Opal) {
  var TMP_write_1, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$respond_to?', '$open', '$write']);
  if ($truthy($$($nesting, 'IO')['$respond_to?']("write"))) {
    return nil
  } else {
    return (Opal.defs($$($nesting, 'IO'), '$write', TMP_write_1 = function $$write(name, string, offset, opts) {
      var TMP_2, self = this;

      
      
      if (offset == null) {
        offset = 0;
      };
      
      if (opts == null) {
        opts = nil;
      };
      return $send($$($nesting, 'File'), 'open', [name, "w"], (TMP_2 = function(f){var self = TMP_2.$$s || this;

      
        
        if (f == null) {
          f = nil;
        };
        return f.$write(string);}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
    }, TMP_write_1.$$arity = -3), nil) && 'write'
  }
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/core_ext"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$==', '$!=']);
  
  self.$require("asciidoctor/core_ext/nil_or_empty");
  self.$require("asciidoctor/core_ext/regexp/is_match");
  if ($truthy($$($nesting, 'RUBY_MIN_VERSION_1_9'))) {
    
    self.$require("asciidoctor/core_ext/string/limit_bytesize");
    if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      
      self.$require("asciidoctor/core_ext/1.8.7/io/binread");
      return self.$require("asciidoctor/core_ext/1.8.7/io/write");
    } else {
      return nil
    };
  } else if ($truthy($$($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
    return nil
  } else {
    return nil
  };
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/helpers"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include?', '$include', '$==', '$===', '$raise', '$warn', '$logger', '$chomp', '$message', '$normalize_lines_from_string', '$normalize_lines_array', '$empty?', '$unpack', '$[]', '$slice', '$join', '$map', '$each_line', '$encode', '$force_encoding', '$length', '$rstrip', '$[]=', '$-', '$encoding', '$nil_or_empty?', '$match?', '$=~', '$gsub', '$each_byte', '$sprintf', '$rindex', '$basename', '$extname', '$directory?', '$dirname', '$mkdir_p', '$mkdir', '$divmod', '$*']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      function $Helpers() {};
      var self = $Helpers = $module($base, 'Helpers', $Helpers);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Helpers_require_library_1, TMP_Helpers_normalize_lines_2, TMP_Helpers_normalize_lines_array_3, TMP_Helpers_normalize_lines_from_string_8, TMP_Helpers_uriish$q_10, TMP_Helpers_uri_prefix_11, TMP_Helpers_uri_encode_12, TMP_Helpers_rootname_15, TMP_Helpers_basename_16, TMP_Helpers_mkdir_p_17, TMP_Helpers_int_to_roman_18;

      
      Opal.defs(self, '$require_library', TMP_Helpers_require_library_1 = function $$require_library(name, gem_name, on_failure) {
        var self = this, e = nil, $case = nil;

        
        
        if (gem_name == null) {
          gem_name = true;
        };
        
        if (on_failure == null) {
          on_failure = "abort";
        };
        try {
          return self.$require(name)
        } catch ($err) {
          if (Opal.rescue($err, [$$$('::', 'LoadError')])) {e = $err;
            try {
              
              if ($truthy(self['$include?']($$($nesting, 'Logging')))) {
              } else {
                self.$include($$($nesting, 'Logging'))
              };
              if ($truthy(gem_name)) {
                
                if (gem_name['$=='](true)) {
                  gem_name = name};
                $case = on_failure;
                if ("abort"['$===']($case)) {self.$raise($$$('::', 'LoadError'), "" + "asciidoctor: FAILED: required gem '" + (gem_name) + "' is not installed. Processing aborted.")}
                else if ("warn"['$===']($case)) {self.$logger().$warn("" + "optional gem '" + (gem_name) + "' is not installed. Functionality disabled.")};
              } else {
                $case = on_failure;
                if ("abort"['$===']($case)) {self.$raise($$$('::', 'LoadError'), "" + "asciidoctor: FAILED: " + (e.$message().$chomp(".")) + ". Processing aborted.")}
                else if ("warn"['$===']($case)) {self.$logger().$warn("" + (e.$message().$chomp(".")) + ". Functionality disabled.")}
              };
              return nil;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_Helpers_require_library_1.$$arity = -2);
      Opal.defs(self, '$normalize_lines', TMP_Helpers_normalize_lines_2 = function $$normalize_lines(data) {
        var self = this;

        if ($truthy($$$('::', 'String')['$==='](data))) {
          
          return self.$normalize_lines_from_string(data);
        } else {
          
          return self.$normalize_lines_array(data);
        }
      }, TMP_Helpers_normalize_lines_2.$$arity = 1);
      Opal.defs(self, '$normalize_lines_array', TMP_Helpers_normalize_lines_array_3 = function $$normalize_lines_array(data) {
        var TMP_4, TMP_5, TMP_6, TMP_7, self = this, leading_bytes = nil, first_line = nil, utf8 = nil, leading_2_bytes = nil, $writer = nil;

        
        if ($truthy(data['$empty?']())) {
          return data};
        leading_bytes = (first_line = data['$[]'](0)).$unpack("C3");
        if ($truthy($$($nesting, 'COERCE_ENCODING'))) {
          
          utf8 = $$$($$$('::', 'Encoding'), 'UTF_8');
          if ((leading_2_bytes = leading_bytes.$slice(0, 2))['$==']($$($nesting, 'BOM_BYTES_UTF_16LE'))) {
            
            data = data.$join();
            return $send(data.$force_encoding($$$($$$('::', 'Encoding'), 'UTF_16LE')).$slice(1, data.$length()).$encode(utf8).$each_line(), 'map', [], (TMP_4 = function(line){var self = TMP_4.$$s || this;

            
              
              if (line == null) {
                line = nil;
              };
              return line.$rstrip();}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
          } else if (leading_2_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_16BE'))) {
            
            
            $writer = [0, first_line.$force_encoding($$$($$$('::', 'Encoding'), 'UTF_16BE')).$slice(1, first_line.$length())];
            $send(data, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send(data, 'map', [], (TMP_5 = function(line){var self = TMP_5.$$s || this;

            
              
              if (line == null) {
                line = nil;
              };
              return line.$force_encoding($$$($$$('::', 'Encoding'), 'UTF_16BE')).$encode(utf8).$rstrip();}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
          } else if (leading_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_8'))) {
            
            $writer = [0, first_line.$force_encoding(utf8).$slice(1, first_line.$length())];
            $send(data, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return $send(data, 'map', [], (TMP_6 = function(line){var self = TMP_6.$$s || this;

          
            
            if (line == null) {
              line = nil;
            };
            if (line.$encoding()['$=='](utf8)) {
              return line.$rstrip()
            } else {
              return line.$force_encoding(utf8).$rstrip()
            };}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
        } else {
          
          if (leading_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_8'))) {
            
            $writer = [0, first_line.$slice(3, first_line.$length())];
            $send(data, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return $send(data, 'map', [], (TMP_7 = function(line){var self = TMP_7.$$s || this;

          
            
            if (line == null) {
              line = nil;
            };
            return line.$rstrip();}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        };
      }, TMP_Helpers_normalize_lines_array_3.$$arity = 1);
      Opal.defs(self, '$normalize_lines_from_string', TMP_Helpers_normalize_lines_from_string_8 = function $$normalize_lines_from_string(data) {
        var TMP_9, self = this, leading_bytes = nil, utf8 = nil, leading_2_bytes = nil;

        
        if ($truthy(data['$nil_or_empty?']())) {
          return []};
        leading_bytes = data.$unpack("C3");
        if ($truthy($$($nesting, 'COERCE_ENCODING'))) {
          
          utf8 = $$$($$$('::', 'Encoding'), 'UTF_8');
          if ((leading_2_bytes = leading_bytes.$slice(0, 2))['$==']($$($nesting, 'BOM_BYTES_UTF_16LE'))) {
            data = data.$force_encoding($$$($$$('::', 'Encoding'), 'UTF_16LE')).$slice(1, data.$length()).$encode(utf8)
          } else if (leading_2_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_16BE'))) {
            data = data.$force_encoding($$$($$$('::', 'Encoding'), 'UTF_16BE')).$slice(1, data.$length()).$encode(utf8)
          } else if (leading_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_8'))) {
            data = (function() {if (data.$encoding()['$=='](utf8)) {
              
              return data.$slice(1, data.$length());
            } else {
              
              return data.$force_encoding(utf8).$slice(1, data.$length());
            }; return nil; })()
          } else if (data.$encoding()['$=='](utf8)) {
          } else {
            data = data.$force_encoding(utf8)
          };
        } else if (leading_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_8'))) {
          data = data.$slice(3, data.$length())};
        return $send(data.$each_line(), 'map', [], (TMP_9 = function(line){var self = TMP_9.$$s || this;

        
          
          if (line == null) {
            line = nil;
          };
          return line.$rstrip();}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
      }, TMP_Helpers_normalize_lines_from_string_8.$$arity = 1);
      Opal.defs(self, '$uriish?', TMP_Helpers_uriish$q_10 = function(str) {
        var $a, self = this;

        return ($truthy($a = str['$include?'](":")) ? $$($nesting, 'UriSniffRx')['$match?'](str) : $a)
      }, TMP_Helpers_uriish$q_10.$$arity = 1);
      Opal.defs(self, '$uri_prefix', TMP_Helpers_uri_prefix_11 = function $$uri_prefix(str) {
        var $a, self = this;

        if ($truthy(($truthy($a = str['$include?'](":")) ? $$($nesting, 'UriSniffRx')['$=~'](str) : $a))) {
          return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))
        } else {
          return nil
        }
      }, TMP_Helpers_uri_prefix_11.$$arity = 1);
      Opal.const_set($nesting[0], 'REGEXP_ENCODE_URI_CHARS', /[^\w\-.!~*';:@=+$,()\[\]]/);
      Opal.defs(self, '$uri_encode', TMP_Helpers_uri_encode_12 = function $$uri_encode(str) {
        var TMP_13, self = this;

        return $send(str, 'gsub', [$$($nesting, 'REGEXP_ENCODE_URI_CHARS')], (TMP_13 = function(){var self = TMP_13.$$s || this, $a, TMP_14;

        return $send((($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$each_byte(), 'map', [], (TMP_14 = function(c){var self = TMP_14.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            return self.$sprintf("%%%02X", c);}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14)).$join()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))
      }, TMP_Helpers_uri_encode_12.$$arity = 1);
      Opal.defs(self, '$rootname', TMP_Helpers_rootname_15 = function $$rootname(filename) {
        var $a, self = this;

        return filename.$slice(0, ($truthy($a = filename.$rindex(".")) ? $a : filename.$length()))
      }, TMP_Helpers_rootname_15.$$arity = 1);
      Opal.defs(self, '$basename', TMP_Helpers_basename_16 = function $$basename(filename, drop_ext) {
        var self = this;

        
        
        if (drop_ext == null) {
          drop_ext = nil;
        };
        if ($truthy(drop_ext)) {
          return $$$('::', 'File').$basename(filename, (function() {if (drop_ext['$=='](true)) {
            
            return $$$('::', 'File').$extname(filename);
          } else {
            return drop_ext
          }; return nil; })())
        } else {
          return $$$('::', 'File').$basename(filename)
        };
      }, TMP_Helpers_basename_16.$$arity = -2);
      Opal.defs(self, '$mkdir_p', TMP_Helpers_mkdir_p_17 = function $$mkdir_p(dir) {
        var self = this, parent_dir = nil;

        if ($truthy($$$('::', 'File')['$directory?'](dir))) {
          return nil
        } else {
          
          if ((parent_dir = $$$('::', 'File').$dirname(dir))['$=='](".")) {
          } else {
            self.$mkdir_p(parent_dir)
          };
          
          try {
            return $$$('::', 'Dir').$mkdir(dir)
          } catch ($err) {
            if (Opal.rescue($err, [$$$('::', 'SystemCallError')])) {
              try {
                if ($truthy($$$('::', 'File')['$directory?'](dir))) {
                  return nil
                } else {
                  return self.$raise()
                }
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };;
        }
      }, TMP_Helpers_mkdir_p_17.$$arity = 1);
      Opal.const_set($nesting[0], 'ROMAN_NUMERALS', $hash2(["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"], {"M": 1000, "CM": 900, "D": 500, "CD": 400, "C": 100, "XC": 90, "L": 50, "XL": 40, "X": 10, "IX": 9, "V": 5, "IV": 4, "I": 1}));
      Opal.defs(self, '$int_to_roman', TMP_Helpers_int_to_roman_18 = function $$int_to_roman(val) {
        var TMP_19, self = this;

        return $send($$($nesting, 'ROMAN_NUMERALS'), 'map', [], (TMP_19 = function(l, i){var self = TMP_19.$$s || this, $a, $b, repeat = nil;

        
          
          if (l == null) {
            l = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          $b = val.$divmod(i), $a = Opal.to_ary($b), (repeat = ($a[0] == null ? nil : $a[0])), (val = ($a[1] == null ? nil : $a[1])), $b;
          return $rb_times(l, repeat);}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19)).$join()
      }, TMP_Helpers_int_to_roman_18.$$arity = 1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/substitutors"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $hash = Opal.hash, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$freeze', '$+', '$keys', '$chr', '$attr_reader', '$empty?', '$!', '$===', '$[]', '$join', '$include?', '$extract_passthroughs', '$each', '$sub_specialchars', '$sub_quotes', '$sub_attributes', '$sub_replacements', '$sub_macros', '$highlight_source', '$sub_callouts', '$sub_post_replacements', '$warn', '$logger', '$restore_passthroughs', '$split', '$apply_subs', '$compat_mode', '$gsub', '$==', '$length', '$>', '$*', '$-', '$end_with?', '$slice', '$parse_quoted_text_attributes', '$size', '$[]=', '$unescape_brackets', '$resolve_pass_subs', '$start_with?', '$extract_inner_passthrough', '$to_sym', '$attributes', '$basebackend?', '$=~', '$to_i', '$convert', '$new', '$clear', '$match?', '$convert_quoted_text', '$do_replacement', '$sub', '$shift', '$store_attribute', '$!=', '$attribute_undefined', '$counter', '$key?', '$downcase', '$attribute_missing', '$tr_s', '$delete', '$reject', '$strip', '$index', '$min', '$compact', '$map', '$chop', '$unescape_bracketed_text', '$pop', '$rstrip', '$extensions', '$inline_macros?', '$inline_macros', '$regexp', '$instance', '$names', '$config', '$dup', '$nil_or_empty?', '$parse_attributes', '$process_method', '$register', '$tr', '$basename', '$split_simple_csv', '$normalize_string', '$!~', '$parse', '$uri_encode', '$sub_inline_xrefs', '$sub_inline_anchors', '$find', '$footnotes', '$id', '$text', '$style', '$lstrip', '$parse_into', '$extname', '$catalog', '$fetch', '$outfilesuffix', '$natural_xrefs', '$key', '$attr?', '$attr', '$to_s', '$read_next_id', '$callouts', '$<', '$<<', '$shorthand_property_syntax', '$concat', '$each_char', '$drop', '$&', '$resolve_subs', '$nil?', '$require_library', '$sub_source', '$resolve_lines_to_highlight', '$highlight', '$find_by_alias', '$find_by_mimetype', '$name', '$option?', '$count', '$to_a', '$uniq', '$sort', '$resolve_block_subs']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      function $Substitutors() {};
      var self = $Substitutors = $module($base, 'Substitutors', $Substitutors);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Substitutors_apply_subs_1, TMP_Substitutors_apply_normal_subs_3, TMP_Substitutors_apply_title_subs_4, TMP_Substitutors_apply_reftext_subs_5, TMP_Substitutors_apply_header_subs_6, TMP_Substitutors_extract_passthroughs_7, TMP_Substitutors_extract_inner_passthrough_11, TMP_Substitutors_restore_passthroughs_12, TMP_Substitutors_sub_quotes_14, TMP_Substitutors_sub_replacements_17, TMP_Substitutors_sub_specialchars_20, TMP_Substitutors_sub_specialchars_21, TMP_Substitutors_do_replacement_23, TMP_Substitutors_sub_attributes_24, TMP_Substitutors_sub_macros_29, TMP_Substitutors_sub_inline_anchors_46, TMP_Substitutors_sub_inline_xrefs_49, TMP_Substitutors_sub_callouts_51, TMP_Substitutors_sub_post_replacements_53, TMP_Substitutors_convert_quoted_text_56, TMP_Substitutors_parse_quoted_text_attributes_57, TMP_Substitutors_parse_attributes_58, TMP_Substitutors_expand_subs_59, TMP_Substitutors_unescape_bracketed_text_61, TMP_Substitutors_normalize_string_62, TMP_Substitutors_unescape_brackets_63, TMP_Substitutors_split_simple_csv_64, TMP_Substitutors_resolve_subs_67, TMP_Substitutors_resolve_block_subs_69, TMP_Substitutors_resolve_pass_subs_70, TMP_Substitutors_highlight_source_71, TMP_Substitutors_resolve_lines_to_highlight_76, TMP_Substitutors_sub_source_78, TMP_Substitutors_lock_in_subs_79;

      
      Opal.const_set($nesting[0], 'SpecialCharsRx', /[<&>]/);
      Opal.const_set($nesting[0], 'SpecialCharsTr', $hash2([">", "<", "&"], {">": "&gt;", "<": "&lt;", "&": "&amp;"}));
      Opal.const_set($nesting[0], 'QuotedTextSniffRx', $hash(false, /[*_`#^~]/, true, /[*'_+#^~]/));
      Opal.const_set($nesting[0], 'BASIC_SUBS', ["specialcharacters"]).$freeze();
      Opal.const_set($nesting[0], 'HEADER_SUBS', ["specialcharacters", "attributes"]).$freeze();
      Opal.const_set($nesting[0], 'NORMAL_SUBS', ["specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"]).$freeze();
      Opal.const_set($nesting[0], 'NONE_SUBS', []).$freeze();
      Opal.const_set($nesting[0], 'TITLE_SUBS', ["specialcharacters", "quotes", "replacements", "macros", "attributes", "post_replacements"]).$freeze();
      Opal.const_set($nesting[0], 'REFTEXT_SUBS', ["specialcharacters", "quotes", "replacements"]).$freeze();
      Opal.const_set($nesting[0], 'VERBATIM_SUBS', ["specialcharacters", "callouts"]).$freeze();
      Opal.const_set($nesting[0], 'SUB_GROUPS', $hash2(["none", "normal", "verbatim", "specialchars"], {"none": $$($nesting, 'NONE_SUBS'), "normal": $$($nesting, 'NORMAL_SUBS'), "verbatim": $$($nesting, 'VERBATIM_SUBS'), "specialchars": $$($nesting, 'BASIC_SUBS')}));
      Opal.const_set($nesting[0], 'SUB_HINTS', $hash2(["a", "m", "n", "p", "q", "r", "c", "v"], {"a": "attributes", "m": "macros", "n": "normal", "p": "post_replacements", "q": "quotes", "r": "replacements", "c": "specialcharacters", "v": "verbatim"}));
      Opal.const_set($nesting[0], 'SUB_OPTIONS', $hash2(["block", "inline"], {"block": $rb_plus($rb_plus($$($nesting, 'SUB_GROUPS').$keys(), $$($nesting, 'NORMAL_SUBS')), ["callouts"]), "inline": $rb_plus($$($nesting, 'SUB_GROUPS').$keys(), $$($nesting, 'NORMAL_SUBS'))}));
      Opal.const_set($nesting[0], 'SUB_HIGHLIGHT', ["coderay", "pygments"]);
      if ($truthy($$$('::', 'RUBY_MIN_VERSION_1_9'))) {
        
        Opal.const_set($nesting[0], 'CAN', "\u0018");
        Opal.const_set($nesting[0], 'DEL', "\u007F");
        Opal.const_set($nesting[0], 'PASS_START', "\u0096");
        Opal.const_set($nesting[0], 'PASS_END', "\u0097");
      } else {
        
        Opal.const_set($nesting[0], 'CAN', (24).$chr());
        Opal.const_set($nesting[0], 'DEL', (127).$chr());
        Opal.const_set($nesting[0], 'PASS_START', (150).$chr());
        Opal.const_set($nesting[0], 'PASS_END', (151).$chr());
      };
      Opal.const_set($nesting[0], 'PassSlotRx', new RegExp("" + ($$($nesting, 'PASS_START')) + "(\\d+)" + ($$($nesting, 'PASS_END'))));
      Opal.const_set($nesting[0], 'HighlightedPassSlotRx', new RegExp("" + "<span\\b[^>]*>" + ($$($nesting, 'PASS_START')) + "</span>[^\\d]*(\\d+)[^\\d]*<span\\b[^>]*>" + ($$($nesting, 'PASS_END')) + "</span>"));
      Opal.const_set($nesting[0], 'RS', "\\");
      Opal.const_set($nesting[0], 'R_SB', "]");
      Opal.const_set($nesting[0], 'ESC_R_SB', "\\]");
      Opal.const_set($nesting[0], 'PLUS', "+");
      Opal.const_set($nesting[0], 'PygmentsWrapperDivRx', /<div class="pyhl">(.*)<\/div>/m);
      Opal.const_set($nesting[0], 'PygmentsWrapperPreRx', /<pre\b[^>]*?>(.*?)<\/pre>\s*/m);
      self.$attr_reader("passthroughs");
      
      Opal.def(self, '$apply_subs', TMP_Substitutors_apply_subs_1 = function $$apply_subs(text, subs) {
        var $a, TMP_2, self = this, multiline = nil, has_passthroughs = nil;
        if (self.passthroughs == null) self.passthroughs = nil;

        
        
        if (subs == null) {
          subs = $$($nesting, 'NORMAL_SUBS');
        };
        if ($truthy(($truthy($a = text['$empty?']()) ? $a : subs['$!']()))) {
          return text};
        if ($truthy((multiline = $$$('::', 'Array')['$==='](text)))) {
          text = (function() {if ($truthy(text['$[]'](1))) {
            
            return text.$join($$($nesting, 'LF'));
          } else {
            return text['$[]'](0)
          }; return nil; })()};
        if ($truthy((has_passthroughs = subs['$include?']("macros")))) {
          
          text = self.$extract_passthroughs(text);
          if ($truthy(self.passthroughs['$empty?']())) {
            has_passthroughs = false};};
        $send(subs, 'each', [], (TMP_2 = function(type){var self = TMP_2.$$s || this, $case = nil;

        
          
          if (type == null) {
            type = nil;
          };
          return (function() {$case = type;
          if ("specialcharacters"['$===']($case)) {return (text = self.$sub_specialchars(text))}
          else if ("quotes"['$===']($case)) {return (text = self.$sub_quotes(text))}
          else if ("attributes"['$===']($case)) {if ($truthy(text['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {
            return (text = self.$sub_attributes(text))
          } else {
            return nil
          }}
          else if ("replacements"['$===']($case)) {return (text = self.$sub_replacements(text))}
          else if ("macros"['$===']($case)) {return (text = self.$sub_macros(text))}
          else if ("highlight"['$===']($case)) {return (text = self.$highlight_source(text, subs['$include?']("callouts")))}
          else if ("callouts"['$===']($case)) {if ($truthy(subs['$include?']("highlight"))) {
            return nil
          } else {
            return (text = self.$sub_callouts(text))
          }}
          else if ("post_replacements"['$===']($case)) {return (text = self.$sub_post_replacements(text))}
          else {return self.$logger().$warn("" + "unknown substitution type " + (type))}})();}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        if ($truthy(has_passthroughs)) {
          text = self.$restore_passthroughs(text)};
        if ($truthy(multiline)) {
          
          return text.$split($$($nesting, 'LF'), -1);
        } else {
          return text
        };
      }, TMP_Substitutors_apply_subs_1.$$arity = -2);
      
      Opal.def(self, '$apply_normal_subs', TMP_Substitutors_apply_normal_subs_3 = function $$apply_normal_subs(text) {
        var self = this;

        return self.$apply_subs(text)
      }, TMP_Substitutors_apply_normal_subs_3.$$arity = 1);
      
      Opal.def(self, '$apply_title_subs', TMP_Substitutors_apply_title_subs_4 = function $$apply_title_subs(title) {
        var self = this;

        return self.$apply_subs(title, $$($nesting, 'TITLE_SUBS'))
      }, TMP_Substitutors_apply_title_subs_4.$$arity = 1);
      
      Opal.def(self, '$apply_reftext_subs', TMP_Substitutors_apply_reftext_subs_5 = function $$apply_reftext_subs(text) {
        var self = this;

        return self.$apply_subs(text, $$($nesting, 'REFTEXT_SUBS'))
      }, TMP_Substitutors_apply_reftext_subs_5.$$arity = 1);
      
      Opal.def(self, '$apply_header_subs', TMP_Substitutors_apply_header_subs_6 = function $$apply_header_subs(text) {
        var self = this;

        return self.$apply_subs(text, $$($nesting, 'HEADER_SUBS'))
      }, TMP_Substitutors_apply_header_subs_6.$$arity = 1);
      
      Opal.def(self, '$extract_passthroughs', TMP_Substitutors_extract_passthroughs_7 = function $$extract_passthroughs(text) {
        var $a, $b, TMP_8, TMP_9, TMP_10, self = this, compat_mode = nil, passes = nil, pass_inline_char1 = nil, pass_inline_char2 = nil, pass_inline_rx = nil;
        if (self.document == null) self.document = nil;
        if (self.passthroughs == null) self.passthroughs = nil;

        
        compat_mode = self.document.$compat_mode();
        passes = self.passthroughs;
        if ($truthy(($truthy($a = ($truthy($b = text['$include?']("++")) ? $b : text['$include?']("$$"))) ? $a : text['$include?']("ss:")))) {
          text = $send(text, 'gsub', [$$($nesting, 'InlinePassMacroRx')], (TMP_8 = function(){var self = TMP_8.$$s || this, $c, m = nil, preceding = nil, boundary = nil, attributes = nil, escape_count = nil, content = nil, old_behavior = nil, subs = nil, pass_key = nil, $writer = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            preceding = nil;
            if ($truthy((boundary = m['$[]'](4)))) {
              
              if ($truthy(($truthy($c = compat_mode) ? boundary['$==']("++") : $c))) {
                return (function() {if ($truthy(m['$[]'](2))) {
                  return "" + (m['$[]'](1)) + "[" + (m['$[]'](2)) + "]" + (m['$[]'](3)) + "++" + (self.$extract_passthroughs(m['$[]'](5))) + "++"
                } else {
                  return "" + (m['$[]'](1)) + (m['$[]'](3)) + "++" + (self.$extract_passthroughs(m['$[]'](5))) + "++"
                }; return nil; })();};
              attributes = m['$[]'](2);
              escape_count = m['$[]'](3).$length();
              content = m['$[]'](5);
              old_behavior = false;
              if ($truthy(attributes)) {
                if ($truthy($rb_gt(escape_count, 0))) {
                  return "" + (m['$[]'](1)) + "[" + (attributes) + "]" + ($rb_times($$($nesting, 'RS'), $rb_minus(escape_count, 1))) + (boundary) + (m['$[]'](5)) + (boundary);
                } else if (m['$[]'](1)['$==']($$($nesting, 'RS'))) {
                  
                  preceding = "" + "[" + (attributes) + "]";
                  attributes = nil;
                } else {
                  
                  if ($truthy((($c = boundary['$==']("++")) ? attributes['$end_with?']("x-") : boundary['$==']("++")))) {
                    
                    old_behavior = true;
                    attributes = attributes.$slice(0, $rb_minus(attributes.$length(), 2));};
                  attributes = self.$parse_quoted_text_attributes(attributes);
                }
              } else if ($truthy($rb_gt(escape_count, 0))) {
                return "" + ($rb_times($$($nesting, 'RS'), $rb_minus(escape_count, 1))) + (boundary) + (m['$[]'](5)) + (boundary);};
              subs = (function() {if (boundary['$==']("+++")) {
                return []
              } else {
                return $$($nesting, 'BASIC_SUBS')
              }; return nil; })();
              pass_key = passes.$size();
              if ($truthy(attributes)) {
                if ($truthy(old_behavior)) {
                  
                  $writer = [pass_key, $hash2(["text", "subs", "type", "attributes"], {"text": content, "subs": $$($nesting, 'NORMAL_SUBS'), "type": "monospaced", "attributes": attributes})];
                  $send(passes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else {
                  
                  $writer = [pass_key, $hash2(["text", "subs", "type", "attributes"], {"text": content, "subs": subs, "type": "unquoted", "attributes": attributes})];
                  $send(passes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
              } else {
                
                $writer = [pass_key, $hash2(["text", "subs"], {"text": content, "subs": subs})];
                $send(passes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
            } else {
              
              if (m['$[]'](6)['$==']($$($nesting, 'RS'))) {
                return m['$[]'](0).$slice(1, m['$[]'](0).$length());};
              
              $writer = [(pass_key = passes.$size()), $hash2(["text", "subs"], {"text": self.$unescape_brackets(m['$[]'](8)), "subs": (function() {if ($truthy(m['$[]'](7))) {
                
                return self.$resolve_pass_subs(m['$[]'](7));
              } else {
                return nil
              }; return nil; })()})];
              $send(passes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            return "" + (preceding) + ($$($nesting, 'PASS_START')) + (pass_key) + ($$($nesting, 'PASS_END'));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8))};
        $b = $$($nesting, 'InlinePassRx')['$[]'](compat_mode), $a = Opal.to_ary($b), (pass_inline_char1 = ($a[0] == null ? nil : $a[0])), (pass_inline_char2 = ($a[1] == null ? nil : $a[1])), (pass_inline_rx = ($a[2] == null ? nil : $a[2])), $b;
        if ($truthy(($truthy($a = text['$include?'](pass_inline_char1)) ? $a : ($truthy($b = pass_inline_char2) ? text['$include?'](pass_inline_char2) : $b)))) {
          text = $send(text, 'gsub', [pass_inline_rx], (TMP_9 = function(){var self = TMP_9.$$s || this, $c, m = nil, preceding = nil, attributes = nil, quoted_text = nil, escape_mark = nil, format_mark = nil, content = nil, old_behavior = nil, pass_key = nil, $writer = nil, subs = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            preceding = m['$[]'](1);
            attributes = m['$[]'](2);
            if ($truthy((quoted_text = m['$[]'](3))['$start_with?']($$($nesting, 'RS')))) {
              escape_mark = $$($nesting, 'RS')};
            format_mark = m['$[]'](4);
            content = m['$[]'](5);
            if ($truthy(compat_mode)) {
              old_behavior = true
            } else if ($truthy((old_behavior = ($truthy($c = attributes) ? attributes['$end_with?']("x-") : $c)))) {
              attributes = attributes.$slice(0, $rb_minus(attributes.$length(), 2))};
            if ($truthy(attributes)) {
              
              if ($truthy((($c = format_mark['$==']("`")) ? old_behavior['$!']() : format_mark['$==']("`")))) {
                return self.$extract_inner_passthrough(content, "" + (preceding) + "[" + (attributes) + "]" + (escape_mark), attributes);};
              if ($truthy(escape_mark)) {
                return "" + (preceding) + "[" + (attributes) + "]" + (quoted_text.$slice(1, quoted_text.$length()));
              } else if (preceding['$==']($$($nesting, 'RS'))) {
                
                preceding = "" + "[" + (attributes) + "]";
                attributes = nil;
              } else {
                attributes = self.$parse_quoted_text_attributes(attributes)
              };
            } else if ($truthy((($c = format_mark['$==']("`")) ? old_behavior['$!']() : format_mark['$==']("`")))) {
              return self.$extract_inner_passthrough(content, "" + (preceding) + (escape_mark));
            } else if ($truthy(escape_mark)) {
              return "" + (preceding) + (quoted_text.$slice(1, quoted_text.$length()));};
            pass_key = passes.$size();
            if ($truthy(compat_mode)) {
              
              $writer = [pass_key, $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": $$($nesting, 'BASIC_SUBS'), "attributes": attributes, "type": "monospaced"})];
              $send(passes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            } else if ($truthy(attributes)) {
              if ($truthy(old_behavior)) {
                
                subs = (function() {if (format_mark['$==']("`")) {
                  return $$($nesting, 'BASIC_SUBS')
                } else {
                  return $$($nesting, 'NORMAL_SUBS')
                }; return nil; })();
                
                $writer = [pass_key, $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": subs, "attributes": attributes, "type": "monospaced"})];
                $send(passes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
              } else {
                
                $writer = [pass_key, $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": $$($nesting, 'BASIC_SUBS'), "attributes": attributes, "type": "unquoted"})];
                $send(passes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
            } else {
              
              $writer = [pass_key, $hash2(["text", "subs"], {"text": content, "subs": $$($nesting, 'BASIC_SUBS')})];
              $send(passes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            return "" + (preceding) + ($$($nesting, 'PASS_START')) + (pass_key) + ($$($nesting, 'PASS_END'));}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9))};
        if ($truthy(($truthy($a = text['$include?'](":")) ? ($truthy($b = text['$include?']("stem:")) ? $b : text['$include?']("math:")) : $a))) {
          text = $send(text, 'gsub', [$$($nesting, 'InlineStemMacroRx')], (TMP_10 = function(){var self = TMP_10.$$s || this, $c, m = nil, type = nil, content = nil, subs = nil, $writer = nil, pass_key = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
              return m['$[]'](0).$slice(1, m['$[]'](0).$length());};
            if ((type = m['$[]'](1).$to_sym())['$==']("stem")) {
              type = $$($nesting, 'STEM_TYPE_ALIASES')['$[]'](self.document.$attributes()['$[]']("stem")).$to_sym()};
            content = self.$unescape_brackets(m['$[]'](3));
            subs = (function() {if ($truthy(m['$[]'](2))) {
              
              return self.$resolve_pass_subs(m['$[]'](2));
            } else {
              
              if ($truthy(self.document['$basebackend?']("html"))) {
                return $$($nesting, 'BASIC_SUBS')
              } else {
                return nil
              };
            }; return nil; })();
            
            $writer = [(pass_key = passes.$size()), $hash2(["text", "subs", "type"], {"text": content, "subs": subs, "type": type})];
            $send(passes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return "" + ($$($nesting, 'PASS_START')) + (pass_key) + ($$($nesting, 'PASS_END'));}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10))};
        return text;
      }, TMP_Substitutors_extract_passthroughs_7.$$arity = 1);
      
      Opal.def(self, '$extract_inner_passthrough', TMP_Substitutors_extract_inner_passthrough_11 = function $$extract_inner_passthrough(text, pre, attributes) {
        var $a, $b, self = this, $writer = nil, pass_key = nil;
        if (self.passthroughs == null) self.passthroughs = nil;

        
        
        if (attributes == null) {
          attributes = nil;
        };
        if ($truthy(($truthy($a = ($truthy($b = text['$end_with?']("+")) ? text['$start_with?']("+", "\\+") : $b)) ? $$($nesting, 'SinglePlusInlinePassRx')['$=~'](text) : $a))) {
          if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {
            return "" + (pre) + "`+" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + "+`"
          } else {
            
            
            $writer = [(pass_key = self.passthroughs.$size()), (function() {if ($truthy(attributes)) {
              return $hash2(["text", "subs", "attributes", "type"], {"text": (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), "subs": $$($nesting, 'BASIC_SUBS'), "attributes": attributes, "type": "unquoted"})
            } else {
              return $hash2(["text", "subs"], {"text": (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), "subs": $$($nesting, 'BASIC_SUBS')})
            }; return nil; })()];
            $send(self.passthroughs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return "" + (pre) + "`" + ($$($nesting, 'PASS_START')) + (pass_key) + ($$($nesting, 'PASS_END')) + "`";
          }
        } else {
          return "" + (pre) + "`" + (text) + "`"
        };
      }, TMP_Substitutors_extract_inner_passthrough_11.$$arity = -3);
      
      Opal.def(self, '$restore_passthroughs', TMP_Substitutors_restore_passthroughs_12 = function $$restore_passthroughs(text, outer) {
        var TMP_13, self = this, passes = nil;
        if (self.passthroughs == null) self.passthroughs = nil;

        
        
        if (outer == null) {
          outer = true;
        };
        return (function() { try {
        
        passes = self.passthroughs;
        return $send(text, 'gsub', [$$($nesting, 'PassSlotRx')], (TMP_13 = function(){var self = TMP_13.$$s || this, $a, pass = nil, subbed_text = nil, type = nil;

        
          pass = passes['$[]']((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i());
          subbed_text = self.$apply_subs(pass['$[]']("text"), pass['$[]']("subs"));
          if ($truthy((type = pass['$[]']("type")))) {
            subbed_text = $$($nesting, 'Inline').$new(self, "quoted", subbed_text, $hash2(["type", "attributes"], {"type": type, "attributes": pass['$[]']("attributes")})).$convert()};
          if ($truthy(subbed_text['$include?']($$($nesting, 'PASS_START')))) {
            return self.$restore_passthroughs(subbed_text, false)
          } else {
            return subbed_text
          };}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13));
        } finally {
          (function() {if ($truthy(outer)) {
            return passes.$clear()
          } else {
            return nil
          }; return nil; })()
        }; })();
      }, TMP_Substitutors_restore_passthroughs_12.$$arity = -2);
      if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
        
        
        Opal.def(self, '$sub_quotes', TMP_Substitutors_sub_quotes_14 = function $$sub_quotes(text) {
          var TMP_15, self = this, compat = nil;
          if (self.document == null) self.document = nil;

          
          if ($truthy($$($nesting, 'QuotedTextSniffRx')['$[]']((compat = self.document.$compat_mode()))['$match?'](text))) {
            $send($$($nesting, 'QUOTE_SUBS')['$[]'](compat), 'each', [], (TMP_15 = function(type, scope, pattern){var self = TMP_15.$$s || this, TMP_16;

            
              
              if (type == null) {
                type = nil;
              };
              
              if (scope == null) {
                scope = nil;
              };
              
              if (pattern == null) {
                pattern = nil;
              };
              return (text = $send(text, 'gsub', [pattern], (TMP_16 = function(){var self = TMP_16.$$s || this;
                if ($gvars["~"] == null) $gvars["~"] = nil;

              return self.$convert_quoted_text($gvars["~"], type, scope)}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16)));}, TMP_15.$$s = self, TMP_15.$$arity = 3, TMP_15))};
          return text;
        }, TMP_Substitutors_sub_quotes_14.$$arity = 1);
        
        Opal.def(self, '$sub_replacements', TMP_Substitutors_sub_replacements_17 = function $$sub_replacements(text) {
          var TMP_18, self = this;

          
          if ($truthy($$($nesting, 'ReplaceableTextRx')['$match?'](text))) {
            $send($$($nesting, 'REPLACEMENTS'), 'each', [], (TMP_18 = function(pattern, replacement, restore){var self = TMP_18.$$s || this, TMP_19;

            
              
              if (pattern == null) {
                pattern = nil;
              };
              
              if (replacement == null) {
                replacement = nil;
              };
              
              if (restore == null) {
                restore = nil;
              };
              return (text = $send(text, 'gsub', [pattern], (TMP_19 = function(){var self = TMP_19.$$s || this;
                if ($gvars["~"] == null) $gvars["~"] = nil;

              return self.$do_replacement($gvars["~"], replacement, restore)}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19)));}, TMP_18.$$s = self, TMP_18.$$arity = 3, TMP_18))};
          return text;
        }, TMP_Substitutors_sub_replacements_17.$$arity = 1);
      } else {
        nil
      };
      if ($truthy($$$('::', 'RUBY_MIN_VERSION_1_9'))) {
        
        Opal.def(self, '$sub_specialchars', TMP_Substitutors_sub_specialchars_20 = function $$sub_specialchars(text) {
          var $a, $b, self = this;

          if ($truthy(($truthy($a = ($truthy($b = text['$include?']("<")) ? $b : text['$include?']("&"))) ? $a : text['$include?'](">")))) {
            
            return text.$gsub($$($nesting, 'SpecialCharsRx'), $$($nesting, 'SpecialCharsTr'));
          } else {
            return text
          }
        }, TMP_Substitutors_sub_specialchars_20.$$arity = 1)
      } else {
        
        Opal.def(self, '$sub_specialchars', TMP_Substitutors_sub_specialchars_21 = function $$sub_specialchars(text) {
          var $a, $b, TMP_22, self = this;

          if ($truthy(($truthy($a = ($truthy($b = text['$include?']("<")) ? $b : text['$include?']("&"))) ? $a : text['$include?'](">")))) {
            
            return $send(text, 'gsub', [$$($nesting, 'SpecialCharsRx')], (TMP_22 = function(){var self = TMP_22.$$s || this, $c;

            return $$($nesting, 'SpecialCharsTr')['$[]']((($c = $gvars['~']) === nil ? nil : $c['$[]'](0)))}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22));
          } else {
            return text
          }
        }, TMP_Substitutors_sub_specialchars_21.$$arity = 1)
      };
      Opal.alias(self, "sub_specialcharacters", "sub_specialchars");
      
      Opal.def(self, '$do_replacement', TMP_Substitutors_do_replacement_23 = function $$do_replacement(m, replacement, restore) {
        var self = this, captured = nil, $case = nil;

        if ($truthy((captured = m['$[]'](0))['$include?']($$($nesting, 'RS')))) {
          return captured.$sub($$($nesting, 'RS'), "")
        } else {
          return (function() {$case = restore;
          if ("none"['$===']($case)) {return replacement}
          else if ("bounding"['$===']($case)) {return "" + (m['$[]'](1)) + (replacement) + (m['$[]'](2))}
          else {return "" + (m['$[]'](1)) + (replacement)}})()
        }
      }, TMP_Substitutors_do_replacement_23.$$arity = 3);
      
      Opal.def(self, '$sub_attributes', TMP_Substitutors_sub_attributes_24 = function $$sub_attributes(text, opts) {
        var TMP_25, TMP_26, TMP_27, TMP_28, self = this, doc_attrs = nil, drop = nil, drop_line = nil, drop_empty_line = nil, attribute_undefined = nil, attribute_missing = nil, lines = nil;
        if (self.document == null) self.document = nil;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        doc_attrs = self.document.$attributes();
        drop = (drop_line = (drop_empty_line = (attribute_undefined = (attribute_missing = nil))));
        text = $send(text, 'gsub', [$$($nesting, 'AttributeReferenceRx')], (TMP_25 = function(){var self = TMP_25.$$s || this, $a, $b, $c, $case = nil, args = nil, _ = nil, value = nil, key = nil;
          if (self.document == null) self.document = nil;

        if ($truthy(($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$==']($$($nesting, 'RS'))) ? $a : (($b = $gvars['~']) === nil ? nil : $b['$[]'](4))['$==']($$($nesting, 'RS'))))) {
            return "" + "{" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + "}"
          } else if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))) {
            return (function() {$case = (args = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$split(":", 3)).$shift();
            if ("set"['$===']($case)) {
            $b = $$($nesting, 'Parser').$store_attribute(args['$[]'](0), ($truthy($c = args['$[]'](1)) ? $c : ""), self.document), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(($truthy($a = value) ? $a : (attribute_undefined = ($truthy($b = attribute_undefined) ? $b : ($truthy($c = doc_attrs['$[]']("attribute-undefined")) ? $c : $$($nesting, 'Compliance').$attribute_undefined())))['$!=']("drop-line")))) {
              return (drop = (drop_empty_line = $$($nesting, 'DEL')))
            } else {
              return (drop = (drop_line = $$($nesting, 'CAN')))
            };}
            else if ("counter2"['$===']($case)) {
            $send(self.document, 'counter', Opal.to_a(args));
            return (drop = (drop_empty_line = $$($nesting, 'DEL')));}
            else {return $send(self.document, 'counter', Opal.to_a(args))}})()
          } else if ($truthy(doc_attrs['$key?']((key = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$downcase())))) {
            return doc_attrs['$[]'](key)
          } else if ($truthy((value = $$($nesting, 'INTRINSIC_ATTRIBUTES')['$[]'](key)))) {
            return value
          } else {
            return (function() {$case = (attribute_missing = ($truthy($a = attribute_missing) ? $a : ($truthy($b = ($truthy($c = opts['$[]']("attribute_missing")) ? $c : doc_attrs['$[]']("attribute-missing"))) ? $b : $$($nesting, 'Compliance').$attribute_missing())));
            if ("drop"['$===']($case)) {return (drop = (drop_empty_line = $$($nesting, 'DEL')))}
            else if ("drop-line"['$===']($case)) {
            self.$logger().$warn("" + "dropping line containing reference to missing attribute: " + (key));
            return (drop = (drop_line = $$($nesting, 'CAN')));}
            else if ("warn"['$===']($case)) {
            self.$logger().$warn("" + "skipping reference to missing attribute: " + (key));
            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0));}
            else {return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))}})()
          }}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25));
        if ($truthy(drop)) {
          if ($truthy(drop_empty_line)) {
            
            lines = text.$tr_s($$($nesting, 'DEL'), $$($nesting, 'DEL')).$split($$($nesting, 'LF'), -1);
            if ($truthy(drop_line)) {
              return $send(lines, 'reject', [], (TMP_26 = function(line){var self = TMP_26.$$s || this, $a, $b, $c;

              
                
                if (line == null) {
                  line = nil;
                };
                return ($truthy($a = ($truthy($b = ($truthy($c = line['$==']($$($nesting, 'DEL'))) ? $c : line['$==']($$($nesting, 'CAN')))) ? $b : line['$start_with?']($$($nesting, 'CAN')))) ? $a : line['$include?']($$($nesting, 'CAN')));}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26)).$join($$($nesting, 'LF')).$delete($$($nesting, 'DEL'))
            } else {
              return $send(lines, 'reject', [], (TMP_27 = function(line){var self = TMP_27.$$s || this;

              
                
                if (line == null) {
                  line = nil;
                };
                return line['$==']($$($nesting, 'DEL'));}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27)).$join($$($nesting, 'LF')).$delete($$($nesting, 'DEL'))
            };
          } else if ($truthy(text['$include?']($$($nesting, 'LF')))) {
            return $send(text.$split($$($nesting, 'LF'), -1), 'reject', [], (TMP_28 = function(line){var self = TMP_28.$$s || this, $a, $b;

            
              
              if (line == null) {
                line = nil;
              };
              return ($truthy($a = ($truthy($b = line['$==']($$($nesting, 'CAN'))) ? $b : line['$start_with?']($$($nesting, 'CAN')))) ? $a : line['$include?']($$($nesting, 'CAN')));}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28)).$join($$($nesting, 'LF'))
          } else {
            return ""
          }
        } else {
          return text
        };
      }, TMP_Substitutors_sub_attributes_24.$$arity = -2);
      
      Opal.def(self, '$sub_macros', TMP_Substitutors_sub_macros_29 = function $$sub_macros(text) {try {

        var $a, $b, TMP_30, TMP_33, TMP_35, TMP_37, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, self = this, found = nil, found_square_bracket = nil, $writer = nil, found_colon = nil, found_macroish = nil, found_macroish_short = nil, doc_attrs = nil, doc = nil, extensions = nil;
        if (self.document == null) self.document = nil;

        
        found = $hash2([], {});
        found_square_bracket = (($writer = ["square_bracket", text['$include?']("[")]), $send(found, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
        found_colon = text['$include?'](":");
        found_macroish = (($writer = ["macroish", ($truthy($a = found_square_bracket) ? found_colon : $a)]), $send(found, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
        found_macroish_short = ($truthy($a = found_macroish) ? text['$include?'](":[") : $a);
        doc_attrs = (doc = self.document).$attributes();
        if ($truthy(doc_attrs['$key?']("experimental"))) {
          
          if ($truthy(($truthy($a = found_macroish_short) ? ($truthy($b = text['$include?']("kbd:")) ? $b : text['$include?']("btn:")) : $a))) {
            text = $send(text, 'gsub', [$$($nesting, 'InlineKbdBtnMacroRx')], (TMP_30 = function(){var self = TMP_30.$$s || this, $c, TMP_31, TMP_32, keys = nil, delim_idx = nil, delim = nil;

            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {
                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length())
              } else if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))['$==']("kbd")) {
                
                if ($truthy((keys = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$strip())['$include?']($$($nesting, 'R_SB')))) {
                  keys = keys.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
                if ($truthy(($truthy($c = $rb_gt(keys.$length(), 1)) ? (delim_idx = (function() {if ($truthy((delim_idx = keys.$index(",", 1)))) {
                  return [delim_idx, keys.$index("+", 1)].$compact().$min()
                } else {
                  
                  return keys.$index("+", 1);
                }; return nil; })()) : $c))) {
                  
                  delim = keys.$slice(delim_idx, 1);
                  if ($truthy(keys['$end_with?'](delim))) {
                    
                    keys = $send(keys.$chop().$split(delim, -1), 'map', [], (TMP_31 = function(key){var self = TMP_31.$$s || this;

                    
                      
                      if (key == null) {
                        key = nil;
                      };
                      return key.$strip();}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
                    
                    $writer = [-1, "" + (keys['$[]'](-1)) + (delim)];
                    $send(keys, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                  } else {
                    keys = $send(keys.$split(delim), 'map', [], (TMP_32 = function(key){var self = TMP_32.$$s || this;

                    
                      
                      if (key == null) {
                        key = nil;
                      };
                      return key.$strip();}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32))
                  };
                } else {
                  keys = [keys]
                };
                return $$($nesting, 'Inline').$new(self, "kbd", nil, $hash2(["attributes"], {"attributes": $hash2(["keys"], {"keys": keys})})).$convert();
              } else {
                return $$($nesting, 'Inline').$new(self, "button", self.$unescape_bracketed_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))).$convert()
              }}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30))};
          if ($truthy(($truthy($a = found_macroish) ? text['$include?']("menu:") : $a))) {
            text = $send(text, 'gsub', [$$($nesting, 'InlineMenuMacroRx')], (TMP_33 = function(){var self = TMP_33.$$s || this, $c, TMP_34, m = nil, menu = nil, items = nil, delim = nil, submenus = nil, menuitem = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            
              m = $gvars["~"];
              if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                return m['$[]'](0).$slice(1, m['$[]'](0).$length());};
              $c = [m['$[]'](1), m['$[]'](2)], (menu = $c[0]), (items = $c[1]), $c;
              if ($truthy(items)) {
                
                if ($truthy(items['$include?']($$($nesting, 'R_SB')))) {
                  items = items.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
                if ($truthy((delim = (function() {if ($truthy(items['$include?']("&gt;"))) {
                  return "&gt;"
                } else {
                  
                  if ($truthy(items['$include?'](","))) {
                    return ","
                  } else {
                    return nil
                  };
                }; return nil; })()))) {
                  
                  submenus = $send(items.$split(delim), 'map', [], (TMP_34 = function(it){var self = TMP_34.$$s || this;

                  
                    
                    if (it == null) {
                      it = nil;
                    };
                    return it.$strip();}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34));
                  menuitem = submenus.$pop();
                } else {
                  $c = [[], items.$rstrip()], (submenus = $c[0]), (menuitem = $c[1]), $c
                };
              } else {
                $c = [[], nil], (submenus = $c[0]), (menuitem = $c[1]), $c
              };
              return $$($nesting, 'Inline').$new(self, "menu", nil, $hash2(["attributes"], {"attributes": $hash2(["menu", "submenus", "menuitem"], {"menu": menu, "submenus": submenus, "menuitem": menuitem})})).$convert();}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33))};
          if ($truthy(($truthy($a = text['$include?']("\"")) ? text['$include?']("&gt;") : $a))) {
            text = $send(text, 'gsub', [$$($nesting, 'InlineMenuRx')], (TMP_35 = function(){var self = TMP_35.$$s || this, $c, $d, TMP_36, m = nil, input = nil, menu = nil, submenus = nil, menuitem = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            
              m = $gvars["~"];
              if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                return m['$[]'](0).$slice(1, m['$[]'](0).$length());};
              input = m['$[]'](1);
              $d = $send(input.$split("&gt;"), 'map', [], (TMP_36 = function(it){var self = TMP_36.$$s || this;

              
                
                if (it == null) {
                  it = nil;
                };
                return it.$strip();}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36)), $c = Opal.to_ary($d), (menu = ($c[0] == null ? nil : $c[0])), (submenus = $slice.call($c, 1)), $d;
              menuitem = submenus.$pop();
              return $$($nesting, 'Inline').$new(self, "menu", nil, $hash2(["attributes"], {"attributes": $hash2(["menu", "submenus", "menuitem"], {"menu": menu, "submenus": submenus, "menuitem": menuitem})})).$convert();}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35))};};
        if ($truthy(($truthy($a = (extensions = doc.$extensions())) ? extensions['$inline_macros?']() : $a))) {
          $send(extensions.$inline_macros(), 'each', [], (TMP_37 = function(extension){var self = TMP_37.$$s || this, TMP_38;

          
            
            if (extension == null) {
              extension = nil;
            };
            return (text = $send(text, 'gsub', [extension.$instance().$regexp()], (TMP_38 = function(){var self = TMP_38.$$s || this, $c, m = nil, target = nil, content = nil, extconf = nil, attributes = nil, replacement = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            
              m = $gvars["~"];
              if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                return m['$[]'](0).$slice(1, m['$[]'](0).$length());};
              if ($truthy((function() { try {
                return m.$names()
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    return []
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }})()['$empty?']())) {
                $c = [m['$[]'](1), m['$[]'](2), extension.$config()], (target = $c[0]), (content = $c[1]), (extconf = $c[2]), $c
              } else {
                $c = [(function() { try {
                  return m['$[]']("target")
                } catch ($err) {
                  if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                    try {
                      return nil
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                }})(), (function() { try {
                  return m['$[]']("content")
                } catch ($err) {
                  if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                    try {
                      return nil
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                }})(), extension.$config()], (target = $c[0]), (content = $c[1]), (extconf = $c[2]), $c
              };
              attributes = (function() {if ($truthy((attributes = extconf['$[]']("default_attrs")))) {
                return attributes.$dup()
              } else {
                return $hash2([], {})
              }; return nil; })();
              if ($truthy(content['$nil_or_empty?']())) {
                if ($truthy(($truthy($c = content) ? extconf['$[]']("content_model")['$!=']("attributes") : $c))) {
                  
                  $writer = ["text", content];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];}
              } else {
                
                content = self.$unescape_bracketed_text(content);
                if (extconf['$[]']("content_model")['$==']("attributes")) {
                  self.$parse_attributes(content, ($truthy($c = extconf['$[]']("pos_attrs")) ? $c : []), $hash2(["into"], {"into": attributes}))
                } else {
                  
                  $writer = ["text", content];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                };
              };
              replacement = extension.$process_method()['$[]'](self, ($truthy($c = target) ? $c : content), attributes);
              if ($truthy($$($nesting, 'Inline')['$==='](replacement))) {
                return replacement.$convert()
              } else {
                return replacement
              };}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38)));}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37))};
        if ($truthy(($truthy($a = found_macroish) ? ($truthy($b = text['$include?']("image:")) ? $b : text['$include?']("icon:")) : $a))) {
          text = $send(text, 'gsub', [$$($nesting, 'InlineImageMacroRx')], (TMP_39 = function(){var self = TMP_39.$$s || this, $c, m = nil, captured = nil, type = nil, posattrs = nil, target = nil, attrs = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy((captured = (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)))['$start_with?']($$($nesting, 'RS')))) {
              return captured.$slice(1, captured.$length());
            } else if ($truthy(captured['$start_with?']("icon:"))) {
              $c = ["icon", ["size"]], (type = $c[0]), (posattrs = $c[1]), $c
            } else {
              $c = ["image", ["alt", "width", "height"]], (type = $c[0]), (posattrs = $c[1]), $c
            };
            if ($truthy((target = m['$[]'](1))['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {
              target = self.$sub_attributes(target)};
            attrs = self.$parse_attributes(m['$[]'](2), posattrs, $hash2(["unescape_input"], {"unescape_input": true}));
            if (type['$==']("icon")) {
            } else {
              doc.$register("images", [target, (($writer = ["imagesdir", doc_attrs['$[]']("imagesdir")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])])
            };
            ($truthy($c = attrs['$[]']("alt")) ? $c : (($writer = ["alt", (($writer = ["default-alt", $$($nesting, 'Helpers').$basename(target, true).$tr("_-", " ")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            return $$($nesting, 'Inline').$new(self, "image", nil, $hash2(["type", "target", "attributes"], {"type": type, "target": target, "attributes": attrs})).$convert();}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39))};
        if ($truthy(($truthy($a = ($truthy($b = text['$include?']("((")) ? text['$include?']("))") : $b)) ? $a : ($truthy($b = found_macroish_short) ? text['$include?']("dexterm") : $b)))) {
          text = $send(text, 'gsub', [$$($nesting, 'InlineIndextermMacroRx')], (TMP_40 = function(){var self = TMP_40.$$s || this, $c, captured = nil, $case = nil, terms = nil, term = nil, visible = nil, before = nil, after = nil, subbed_term = nil;

          
            captured = (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));
            return (function() {$case = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));
            if ("indexterm"['$===']($case)) {
            text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));
            if ($truthy(captured['$start_with?']($$($nesting, 'RS')))) {
              return captured.$slice(1, captured.$length());};
            terms = self.$split_simple_csv(self.$normalize_string(text, true));
            doc.$register("indexterms", terms);
            return $$($nesting, 'Inline').$new(self, "indexterm", nil, $hash2(["attributes"], {"attributes": $hash2(["terms"], {"terms": terms})})).$convert();}
            else if ("indexterm2"['$===']($case)) {
            text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));
            if ($truthy(captured['$start_with?']($$($nesting, 'RS')))) {
              return captured.$slice(1, captured.$length());};
            term = self.$normalize_string(text, true);
            doc.$register("indexterms", [term]);
            return $$($nesting, 'Inline').$new(self, "indexterm", term, $hash2(["type"], {"type": "visible"})).$convert();}
            else {
            text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3));
            if ($truthy(captured['$start_with?']($$($nesting, 'RS')))) {
              if ($truthy(($truthy($c = text['$start_with?']("(")) ? text['$end_with?'](")") : $c))) {
                
                text = text.$slice(1, $rb_minus(text.$length(), 2));
                $c = [true, "(", ")"], (visible = $c[0]), (before = $c[1]), (after = $c[2]), $c;
              } else {
                return captured.$slice(1, captured.$length());
              }
            } else {
              
              visible = true;
              if ($truthy(text['$start_with?']("("))) {
                if ($truthy(text['$end_with?'](")"))) {
                  $c = [text.$slice(1, $rb_minus(text.$length(), 2)), false], (text = $c[0]), (visible = $c[1]), $c
                } else {
                  $c = [text.$slice(1, text.$length()), "(", ""], (text = $c[0]), (before = $c[1]), (after = $c[2]), $c
                }
              } else if ($truthy(text['$end_with?'](")"))) {
                $c = [text.$slice(0, $rb_minus(text.$length(), 1)), "", ")"], (text = $c[0]), (before = $c[1]), (after = $c[2]), $c};
            };
            if ($truthy(visible)) {
              
              term = self.$normalize_string(text);
              doc.$register("indexterms", [term]);
              subbed_term = $$($nesting, 'Inline').$new(self, "indexterm", term, $hash2(["type"], {"type": "visible"})).$convert();
            } else {
              
              terms = self.$split_simple_csv(self.$normalize_string(text));
              doc.$register("indexterms", terms);
              subbed_term = $$($nesting, 'Inline').$new(self, "indexterm", nil, $hash2(["attributes"], {"attributes": $hash2(["terms"], {"terms": terms})})).$convert();
            };
            if ($truthy(before)) {
              return "" + (before) + (subbed_term) + (after)
            } else {
              return subbed_term
            };}})();}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40))};
        if ($truthy(($truthy($a = found_colon) ? text['$include?']("://") : $a))) {
          text = $send(text, 'gsub', [$$($nesting, 'InlineLinkRx')], (TMP_41 = function(){var self = TMP_41.$$s || this, $c, $d, m = nil, target = nil, macro = nil, prefix = nil, suffix = nil, $case = nil, attrs = nil, link_opts = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy((target = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2)))['$start_with?']($$($nesting, 'RS')))) {
              return "" + (m['$[]'](1)) + (target.$slice(1, target.$length())) + (m['$[]'](3));};
            $c = [m['$[]'](1), ($truthy($d = (macro = m['$[]'](3))) ? $d : ""), ""], (prefix = $c[0]), (text = $c[1]), (suffix = $c[2]), $c;
            if (prefix['$==']("link:")) {
              if ($truthy(macro)) {
                prefix = ""
              } else {
                return m['$[]'](0);
              }};
            if ($truthy(($truthy($c = macro) ? $c : $$($nesting, 'UriTerminatorRx')['$!~'](target)))) {
            } else {
              
              $case = (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));
              if (")"['$===']($case)) {
              target = target.$chop();
              suffix = ")";}
              else if (";"['$===']($case)) {if ($truthy(($truthy($c = prefix['$start_with?']("&lt;")) ? target['$end_with?']("&gt;") : $c))) {
                
                prefix = prefix.$slice(4, prefix.$length());
                target = target.$slice(0, $rb_minus(target.$length(), 4));
              } else if ($truthy((target = target.$chop())['$end_with?'](")"))) {
                
                target = target.$chop();
                suffix = ");";
              } else {
                suffix = ";"
              }}
              else if (":"['$===']($case)) {if ($truthy((target = target.$chop())['$end_with?'](")"))) {
                
                target = target.$chop();
                suffix = "):";
              } else {
                suffix = ":"
              }};
              if ($truthy(target['$end_with?']("://"))) {
                Opal.ret(m['$[]'](0))};
            };
            $c = [nil, $hash2(["type"], {"type": "link"})], (attrs = $c[0]), (link_opts = $c[1]), $c;
            if ($truthy(text['$empty?']())) {
            } else {
              
              if ($truthy(text['$include?']($$($nesting, 'R_SB')))) {
                text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
              if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?']("=") : $c))) {
                
                text = ($truthy($c = (attrs = $$($nesting, 'AttributeList').$new(text, self).$parse())['$[]'](1)) ? $c : "");
                if ($truthy(attrs['$key?']("id"))) {
                  
                  $writer = ["id", attrs.$delete("id")];
                  $send(link_opts, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};};
              if ($truthy(text['$end_with?']("^"))) {
                
                text = text.$chop();
                if ($truthy(attrs)) {
                  ($truthy($c = attrs['$[]']("window")) ? $c : (($writer = ["window", "_blank"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
                } else {
                  attrs = $hash2(["window"], {"window": "_blank"})
                };};
            };
            if ($truthy(text['$empty?']())) {
              
              text = (function() {if ($truthy(doc_attrs['$key?']("hide-uri-scheme"))) {
                
                return target.$sub($$($nesting, 'UriSniffRx'), "");
              } else {
                return target
              }; return nil; })();
              if ($truthy(attrs)) {
                
                $writer = ["role", (function() {if ($truthy(attrs['$key?']("role"))) {
                  return "" + "bare " + (attrs['$[]']("role"))
                } else {
                  return "bare"
                }; return nil; })()];
                $send(attrs, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else {
                attrs = $hash2(["role"], {"role": "bare"})
              };};
            doc.$register("links", (($writer = ["target", target]), $send(link_opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            if ($truthy(attrs)) {
              
              $writer = ["attributes", attrs];
              $send(link_opts, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            return "" + (prefix) + ($$($nesting, 'Inline').$new(self, "anchor", text, link_opts).$convert()) + (suffix);}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41))};
        if ($truthy(($truthy($a = found_macroish) ? ($truthy($b = text['$include?']("link:")) ? $b : text['$include?']("mailto:")) : $a))) {
          text = $send(text, 'gsub', [$$($nesting, 'InlineLinkMacroRx')], (TMP_42 = function(){var self = TMP_42.$$s || this, $c, m = nil, target = nil, mailto = nil, attrs = nil, link_opts = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
              return m['$[]'](0).$slice(1, m['$[]'](0).$length());};
            target = (function() {if ($truthy((mailto = m['$[]'](1)))) {
              return "" + "mailto:" + (m['$[]'](2))
            } else {
              return m['$[]'](2)
            }; return nil; })();
            $c = [nil, $hash2(["type"], {"type": "link"})], (attrs = $c[0]), (link_opts = $c[1]), $c;
            if ($truthy((text = m['$[]'](3))['$empty?']())) {
            } else {
              
              if ($truthy(text['$include?']($$($nesting, 'R_SB')))) {
                text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
              if ($truthy(mailto)) {
                if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?'](",") : $c))) {
                  
                  text = ($truthy($c = (attrs = $$($nesting, 'AttributeList').$new(text, self).$parse())['$[]'](1)) ? $c : "");
                  if ($truthy(attrs['$key?']("id"))) {
                    
                    $writer = ["id", attrs.$delete("id")];
                    $send(link_opts, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];};
                  if ($truthy(attrs['$key?'](2))) {
                    if ($truthy(attrs['$key?'](3))) {
                      target = "" + (target) + "?subject=" + ($$($nesting, 'Helpers').$uri_encode(attrs['$[]'](2))) + "&amp;body=" + ($$($nesting, 'Helpers').$uri_encode(attrs['$[]'](3)))
                    } else {
                      target = "" + (target) + "?subject=" + ($$($nesting, 'Helpers').$uri_encode(attrs['$[]'](2)))
                    }};}
              } else if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?']("=") : $c))) {
                
                text = ($truthy($c = (attrs = $$($nesting, 'AttributeList').$new(text, self).$parse())['$[]'](1)) ? $c : "");
                if ($truthy(attrs['$key?']("id"))) {
                  
                  $writer = ["id", attrs.$delete("id")];
                  $send(link_opts, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};};
              if ($truthy(text['$end_with?']("^"))) {
                
                text = text.$chop();
                if ($truthy(attrs)) {
                  ($truthy($c = attrs['$[]']("window")) ? $c : (($writer = ["window", "_blank"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
                } else {
                  attrs = $hash2(["window"], {"window": "_blank"})
                };};
            };
            if ($truthy(text['$empty?']())) {
              if ($truthy(mailto)) {
                text = m['$[]'](2)
              } else {
                
                if ($truthy(doc_attrs['$key?']("hide-uri-scheme"))) {
                  if ($truthy((text = target.$sub($$($nesting, 'UriSniffRx'), ""))['$empty?']())) {
                    text = target}
                } else {
                  text = target
                };
                if ($truthy(attrs)) {
                  
                  $writer = ["role", (function() {if ($truthy(attrs['$key?']("role"))) {
                    return "" + "bare " + (attrs['$[]']("role"))
                  } else {
                    return "bare"
                  }; return nil; })()];
                  $send(attrs, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else {
                  attrs = $hash2(["role"], {"role": "bare"})
                };
              }};
            doc.$register("links", (($writer = ["target", target]), $send(link_opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            if ($truthy(attrs)) {
              
              $writer = ["attributes", attrs];
              $send(link_opts, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            return $$($nesting, 'Inline').$new(self, "anchor", text, link_opts).$convert();}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42))};
        if ($truthy(text['$include?']("@"))) {
          text = $send(text, 'gsub', [$$($nesting, 'InlineEmailRx')], (TMP_43 = function(){var self = TMP_43.$$s || this, $c, $d, address = nil, tip = nil, target = nil;

          
            $c = [(($d = $gvars['~']) === nil ? nil : $d['$[]'](0)), (($d = $gvars['~']) === nil ? nil : $d['$[]'](1))], (address = $c[0]), (tip = $c[1]), $c;
            if ($truthy(tip)) {
              return (function() {if (tip['$==']($$($nesting, 'RS'))) {
                
                return address.$slice(1, address.$length());
              } else {
                return address
              }; return nil; })();};
            target = "" + "mailto:" + (address);
            doc.$register("links", target);
            return $$($nesting, 'Inline').$new(self, "anchor", address, $hash2(["type", "target"], {"type": "link", "target": target})).$convert();}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43))};
        if ($truthy(($truthy($a = found_macroish) ? text['$include?']("tnote") : $a))) {
          text = $send(text, 'gsub', [$$($nesting, 'InlineFootnoteMacroRx')], (TMP_44 = function(){var self = TMP_44.$$s || this, $c, $d, $e, TMP_45, m = nil, id = nil, index = nil, type = nil, target = nil, footnote = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
              return m['$[]'](0).$slice(1, m['$[]'](0).$length());};
            if ($truthy(m['$[]'](1))) {
              $d = ($truthy($e = m['$[]'](3)) ? $e : "").$split(",", 2), $c = Opal.to_ary($d), (id = ($c[0] == null ? nil : $c[0])), (text = ($c[1] == null ? nil : $c[1])), $d
            } else {
              $c = [m['$[]'](2), m['$[]'](3)], (id = $c[0]), (text = $c[1]), $c
            };
            if ($truthy(id)) {
              if ($truthy(text)) {
                
                text = self.$restore_passthroughs(self.$sub_inline_xrefs(self.$sub_inline_anchors(self.$normalize_string(text, true))), false);
                index = doc.$counter("footnote-number");
                doc.$register("footnotes", $$$($$($nesting, 'Document'), 'Footnote').$new(index, id, text));
                $c = ["ref", nil], (type = $c[0]), (target = $c[1]), $c;
              } else {
                
                if ($truthy((footnote = $send(doc.$footnotes(), 'find', [], (TMP_45 = function(candidate){var self = TMP_45.$$s || this;

                
                  
                  if (candidate == null) {
                    candidate = nil;
                  };
                  return candidate.$id()['$=='](id);}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45))))) {
                  $c = [footnote.$index(), footnote.$text()], (index = $c[0]), (text = $c[1]), $c
                } else {
                  
                  self.$logger().$warn("" + "invalid footnote reference: " + (id));
                  $c = [nil, id], (index = $c[0]), (text = $c[1]), $c;
                };
                $c = ["xref", id, nil], (type = $c[0]), (target = $c[1]), (id = $c[2]), $c;
              }
            } else if ($truthy(text)) {
              
              text = self.$restore_passthroughs(self.$sub_inline_xrefs(self.$sub_inline_anchors(self.$normalize_string(text, true))), false);
              index = doc.$counter("footnote-number");
              doc.$register("footnotes", $$$($$($nesting, 'Document'), 'Footnote').$new(index, id, text));
              type = (target = nil);
            } else {
              return m['$[]'](0);
            };
            return $$($nesting, 'Inline').$new(self, "footnote", text, $hash2(["attributes", "id", "target", "type"], {"attributes": $hash2(["index"], {"index": index}), "id": id, "target": target, "type": type})).$convert();}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44))};
        return self.$sub_inline_xrefs(self.$sub_inline_anchors(text, found), found);
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_Substitutors_sub_macros_29.$$arity = 1);
      
      Opal.def(self, '$sub_inline_anchors', TMP_Substitutors_sub_inline_anchors_46 = function $$sub_inline_anchors(text, found) {
        var $a, TMP_47, $b, $c, TMP_48, self = this;
        if (self.context == null) self.context = nil;
        if (self.parent == null) self.parent = nil;

        
        
        if (found == null) {
          found = nil;
        };
        if ($truthy((($a = self.context['$==']("list_item")) ? self.parent.$style()['$==']("bibliography") : self.context['$==']("list_item")))) {
          text = $send(text, 'sub', [$$($nesting, 'InlineBiblioAnchorRx')], (TMP_47 = function(){var self = TMP_47.$$s || this, $b, $c;

          return $$($nesting, 'Inline').$new(self, "anchor", "" + "[" + (($truthy($b = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))) ? $b : (($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) + "]", $hash2(["type", "id", "target"], {"type": "bibref", "id": (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), "target": (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))})).$convert()}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47))};
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = found['$!']()) ? $c : found['$[]']("square_bracket"))) ? text['$include?']("[[") : $b)) ? $a : ($truthy($b = ($truthy($c = found['$!']()) ? $c : found['$[]']("macroish"))) ? text['$include?']("or:") : $b)))) {
          text = $send(text, 'gsub', [$$($nesting, 'InlineAnchorRx')], (TMP_48 = function(){var self = TMP_48.$$s || this, $d, $e, id = nil, reftext = nil;

          
            if ($truthy((($d = $gvars['~']) === nil ? nil : $d['$[]'](1)))) {
              return (($d = $gvars['~']) === nil ? nil : $d['$[]'](0)).$slice(1, (($d = $gvars['~']) === nil ? nil : $d['$[]'](0)).$length());};
            if ($truthy((id = (($d = $gvars['~']) === nil ? nil : $d['$[]'](2))))) {
              reftext = (($d = $gvars['~']) === nil ? nil : $d['$[]'](3))
            } else {
              
              id = (($d = $gvars['~']) === nil ? nil : $d['$[]'](4));
              if ($truthy(($truthy($d = (reftext = (($e = $gvars['~']) === nil ? nil : $e['$[]'](5)))) ? reftext['$include?']($$($nesting, 'R_SB')) : $d))) {
                reftext = reftext.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
            };
            return $$($nesting, 'Inline').$new(self, "anchor", reftext, $hash2(["type", "id", "target"], {"type": "ref", "id": id, "target": id})).$convert();}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48))};
        return text;
      }, TMP_Substitutors_sub_inline_anchors_46.$$arity = -2);
      
      Opal.def(self, '$sub_inline_xrefs', TMP_Substitutors_sub_inline_xrefs_49 = function $$sub_inline_xrefs(content, found) {
        var $a, $b, TMP_50, self = this;

        
        
        if (found == null) {
          found = nil;
        };
        if ($truthy(($truthy($a = ($truthy($b = (function() {if ($truthy(found)) {
          return found['$[]']("macroish")
        } else {
          
          return content['$include?']("[");
        }; return nil; })()) ? content['$include?']("xref:") : $b)) ? $a : ($truthy($b = content['$include?']("&")) ? content['$include?']("lt;&") : $b)))) {
          content = $send(content, 'gsub', [$$($nesting, 'InlineXrefMacroRx')], (TMP_50 = function(){var self = TMP_50.$$s || this, $c, $d, m = nil, attrs = nil, doc = nil, refid = nil, text = nil, macro = nil, fragment = nil, hash_idx = nil, fragment_len = nil, path = nil, ext = nil, src2src = nil, target = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;
            if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;

          
            m = $gvars["~"];
            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
              return m['$[]'](0).$slice(1, m['$[]'](0).$length());};
            $c = [$hash2([], {}), self.document], (attrs = $c[0]), (doc = $c[1]), $c;
            if ($truthy((refid = m['$[]'](1)))) {
              
              $d = refid.$split(",", 2), $c = Opal.to_ary($d), (refid = ($c[0] == null ? nil : $c[0])), (text = ($c[1] == null ? nil : $c[1])), $d;
              if ($truthy(text)) {
                text = text.$lstrip()};
            } else {
              
              macro = true;
              refid = m['$[]'](2);
              if ($truthy((text = m['$[]'](3)))) {
                
                if ($truthy(text['$include?']($$($nesting, 'R_SB')))) {
                  text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
                if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?']("=") : $c))) {
                  text = $$($nesting, 'AttributeList').$new(text, self).$parse_into(attrs)['$[]'](1)};};
            };
            if ($truthy(doc.$compat_mode())) {
              fragment = refid
            } else if ($truthy((hash_idx = refid.$index("#")))) {
              if ($truthy($rb_gt(hash_idx, 0))) {
                
                if ($truthy($rb_gt((fragment_len = $rb_minus($rb_minus(refid.$length(), hash_idx), 1)), 0))) {
                  $c = [refid.$slice(0, hash_idx), refid.$slice($rb_plus(hash_idx, 1), fragment_len)], (path = $c[0]), (fragment = $c[1]), $c
                } else {
                  path = refid.$slice(0, hash_idx)
                };
                if ($truthy((ext = $$$('::', 'File').$extname(path))['$empty?']())) {
                  src2src = path
                } else if ($truthy($$($nesting, 'ASCIIDOC_EXTENSIONS')['$[]'](ext))) {
                  src2src = (path = path.$slice(0, $rb_minus(path.$length(), ext.$length())))};
              } else {
                $c = [refid, refid.$slice(1, refid.$length())], (target = $c[0]), (fragment = $c[1]), $c
              }
            } else if ($truthy(($truthy($c = macro) ? refid['$end_with?'](".adoc") : $c))) {
              src2src = (path = refid.$slice(0, $rb_minus(refid.$length(), 5)))
            } else {
              fragment = refid
            };
            if ($truthy(target)) {
              
              refid = fragment;
              if ($truthy(($truthy($c = $gvars.VERBOSE) ? doc.$catalog()['$[]']("ids")['$key?'](refid)['$!']() : $c))) {
                self.$logger().$warn("" + "invalid reference: " + (refid))};
            } else if ($truthy(path)) {
              if ($truthy(($truthy($c = src2src) ? ($truthy($d = doc.$attributes()['$[]']("docname")['$=='](path)) ? $d : doc.$catalog()['$[]']("includes")['$[]'](path)) : $c))) {
                if ($truthy(fragment)) {
                  
                  $c = [fragment, nil, "" + "#" + (fragment)], (refid = $c[0]), (path = $c[1]), (target = $c[2]), $c;
                  if ($truthy(($truthy($c = $gvars.VERBOSE) ? doc.$catalog()['$[]']("ids")['$key?'](refid)['$!']() : $c))) {
                    self.$logger().$warn("" + "invalid reference: " + (refid))};
                } else {
                  $c = [nil, nil, "#"], (refid = $c[0]), (path = $c[1]), (target = $c[2]), $c
                }
              } else {
                
                $c = [path, "" + (doc.$attributes()['$[]']("relfileprefix")) + (path) + ((function() {if ($truthy(src2src)) {
                  
                  return doc.$attributes().$fetch("relfilesuffix", doc.$outfilesuffix());
                } else {
                  return ""
                }; return nil; })())], (refid = $c[0]), (path = $c[1]), $c;
                if ($truthy(fragment)) {
                  $c = ["" + (refid) + "#" + (fragment), "" + (path) + "#" + (fragment)], (refid = $c[0]), (target = $c[1]), $c
                } else {
                  target = path
                };
              }
            } else if ($truthy(($truthy($c = doc.$compat_mode()) ? $c : $$($nesting, 'Compliance').$natural_xrefs()['$!']()))) {
              
              $c = [fragment, "" + "#" + (fragment)], (refid = $c[0]), (target = $c[1]), $c;
              if ($truthy(($truthy($c = $gvars.VERBOSE) ? doc.$catalog()['$[]']("ids")['$key?'](refid)['$!']() : $c))) {
                self.$logger().$warn("" + "invalid reference: " + (refid))};
            } else if ($truthy(doc.$catalog()['$[]']("ids")['$key?'](fragment))) {
              $c = [fragment, "" + "#" + (fragment)], (refid = $c[0]), (target = $c[1]), $c
            } else if ($truthy(($truthy($c = (refid = doc.$catalog()['$[]']("ids").$key(fragment))) ? ($truthy($d = fragment['$include?'](" ")) ? $d : fragment.$downcase()['$!='](fragment)) : $c))) {
              $c = [refid, "" + "#" + (refid)], (fragment = $c[0]), (target = $c[1]), $c
            } else {
              
              $c = [fragment, "" + "#" + (fragment)], (refid = $c[0]), (target = $c[1]), $c;
              if ($truthy($gvars.VERBOSE)) {
                self.$logger().$warn("" + "invalid reference: " + (refid))};
            };
            $c = [path, fragment, refid], attrs['$[]=']("path", $c[0]), attrs['$[]=']("fragment", $c[1]), attrs['$[]=']("refid", $c[2]), $c;
            return $$($nesting, 'Inline').$new(self, "anchor", text, $hash2(["type", "target", "attributes"], {"type": "xref", "target": target, "attributes": attrs})).$convert();}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50))};
        return content;
      }, TMP_Substitutors_sub_inline_xrefs_49.$$arity = -2);
      
      Opal.def(self, '$sub_callouts', TMP_Substitutors_sub_callouts_51 = function $$sub_callouts(text) {
        var TMP_52, self = this, callout_rx = nil, autonum = nil;

        
        callout_rx = (function() {if ($truthy(self['$attr?']("line-comment"))) {
          return $$($nesting, 'CalloutSourceRxMap')['$[]'](self.$attr("line-comment"))
        } else {
          return $$($nesting, 'CalloutSourceRx')
        }; return nil; })();
        autonum = 0;
        return $send(text, 'gsub', [callout_rx], (TMP_52 = function(){var self = TMP_52.$$s || this, $a;
          if (self.document == null) self.document = nil;

        if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {
            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$sub($$($nesting, 'RS'), "")
          } else {
            return $$($nesting, 'Inline').$new(self, "callout", (function() {if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](4))['$=='](".")) {
              return (autonum = $rb_plus(autonum, 1)).$to_s()
            } else {
              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](4))
            }; return nil; })(), $hash2(["id", "attributes"], {"id": self.document.$callouts().$read_next_id(), "attributes": $hash2(["guard"], {"guard": (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))})})).$convert()
          }}, TMP_52.$$s = self, TMP_52.$$arity = 0, TMP_52));
      }, TMP_Substitutors_sub_callouts_51.$$arity = 1);
      
      Opal.def(self, '$sub_post_replacements', TMP_Substitutors_sub_post_replacements_53 = function $$sub_post_replacements(text) {
        var $a, TMP_54, TMP_55, self = this, lines = nil, last = nil;
        if (self.document == null) self.document = nil;
        if (self.attributes == null) self.attributes = nil;

        if ($truthy(($truthy($a = self.document.$attributes()['$key?']("hardbreaks")) ? $a : self.attributes['$key?']("hardbreaks-option")))) {
          
          lines = text.$split($$($nesting, 'LF'), -1);
          if ($truthy($rb_lt(lines.$size(), 2))) {
            return text};
          last = lines.$pop();
          return $send(lines, 'map', [], (TMP_54 = function(line){var self = TMP_54.$$s || this;

          
            
            if (line == null) {
              line = nil;
            };
            return $$($nesting, 'Inline').$new(self, "break", (function() {if ($truthy(line['$end_with?']($$($nesting, 'HARD_LINE_BREAK')))) {
              
              return line.$slice(0, $rb_minus(line.$length(), 2));
            } else {
              return line
            }; return nil; })(), $hash2(["type"], {"type": "line"})).$convert();}, TMP_54.$$s = self, TMP_54.$$arity = 1, TMP_54))['$<<'](last).$join($$($nesting, 'LF'));
        } else if ($truthy(($truthy($a = text['$include?']($$($nesting, 'PLUS'))) ? text['$include?']($$($nesting, 'HARD_LINE_BREAK')) : $a))) {
          return $send(text, 'gsub', [$$($nesting, 'HardLineBreakRx')], (TMP_55 = function(){var self = TMP_55.$$s || this, $b;

          return $$($nesting, 'Inline').$new(self, "break", (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), $hash2(["type"], {"type": "line"})).$convert()}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55))
        } else {
          return text
        }
      }, TMP_Substitutors_sub_post_replacements_53.$$arity = 1);
      
      Opal.def(self, '$convert_quoted_text', TMP_Substitutors_convert_quoted_text_56 = function $$convert_quoted_text(match, type, scope) {
        var $a, self = this, attrs = nil, unescaped_attrs = nil, attrlist = nil, id = nil, attributes = nil;

        
        if ($truthy(match['$[]'](0)['$start_with?']($$($nesting, 'RS')))) {
          if ($truthy((($a = scope['$==']("constrained")) ? (attrs = match['$[]'](2)) : scope['$==']("constrained")))) {
            unescaped_attrs = "" + "[" + (attrs) + "]"
          } else {
            return match['$[]'](0).$slice(1, match['$[]'](0).$length())
          }};
        if (scope['$==']("constrained")) {
          if ($truthy(unescaped_attrs)) {
            return "" + (unescaped_attrs) + ($$($nesting, 'Inline').$new(self, "quoted", match['$[]'](3), $hash2(["type"], {"type": type})).$convert())
          } else {
            
            if ($truthy((attrlist = match['$[]'](2)))) {
              
              id = (attributes = self.$parse_quoted_text_attributes(attrlist)).$delete("id");
              if (type['$==']("mark")) {
                type = "unquoted"};};
            return "" + (match['$[]'](1)) + ($$($nesting, 'Inline').$new(self, "quoted", match['$[]'](3), $hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).$convert());
          }
        } else {
          
          if ($truthy((attrlist = match['$[]'](1)))) {
            
            id = (attributes = self.$parse_quoted_text_attributes(attrlist)).$delete("id");
            if (type['$==']("mark")) {
              type = "unquoted"};};
          return $$($nesting, 'Inline').$new(self, "quoted", match['$[]'](2), $hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).$convert();
        };
      }, TMP_Substitutors_convert_quoted_text_56.$$arity = 3);
      
      Opal.def(self, '$parse_quoted_text_attributes', TMP_Substitutors_parse_quoted_text_attributes_57 = function $$parse_quoted_text_attributes(str) {
        var $a, $b, self = this, segments = nil, id = nil, more_roles = nil, roles = nil, attrs = nil, $writer = nil;

        
        if ($truthy(str['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {
          str = self.$sub_attributes(str)};
        if ($truthy(str['$include?'](","))) {
          str = str.$slice(0, str.$index(","))};
        if ($truthy((str = str.$strip())['$empty?']())) {
          return $hash2([], {})
        } else if ($truthy(($truthy($a = str['$start_with?'](".", "#")) ? $$($nesting, 'Compliance').$shorthand_property_syntax() : $a))) {
          
          segments = str.$split("#", 2);
          if ($truthy($rb_gt(segments.$size(), 1))) {
            $b = segments['$[]'](1).$split("."), $a = Opal.to_ary($b), (id = ($a[0] == null ? nil : $a[0])), (more_roles = $slice.call($a, 1)), $b
          } else {
            
            id = nil;
            more_roles = [];
          };
          roles = (function() {if ($truthy(segments['$[]'](0)['$empty?']())) {
            return []
          } else {
            return segments['$[]'](0).$split(".")
          }; return nil; })();
          if ($truthy($rb_gt(roles.$size(), 1))) {
            roles.$shift()};
          if ($truthy($rb_gt(more_roles.$size(), 0))) {
            roles.$concat(more_roles)};
          attrs = $hash2([], {});
          if ($truthy(id)) {
            
            $writer = ["id", id];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(roles['$empty?']())) {
          } else {
            
            $writer = ["role", roles.$join(" ")];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return attrs;
        } else {
          return $hash2(["role"], {"role": str})
        };
      }, TMP_Substitutors_parse_quoted_text_attributes_57.$$arity = 1);
      
      Opal.def(self, '$parse_attributes', TMP_Substitutors_parse_attributes_58 = function $$parse_attributes(attrlist, posattrs, opts) {
        var $a, self = this, block = nil, into = nil;
        if (self.document == null) self.document = nil;

        
        
        if (posattrs == null) {
          posattrs = [];
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy(($truthy($a = attrlist) ? attrlist['$empty?']()['$!']() : $a))) {
        } else {
          return $hash2([], {})
        };
        if ($truthy(($truthy($a = opts['$[]']("sub_input")) ? attrlist['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $a))) {
          attrlist = self.document.$sub_attributes(attrlist)};
        if ($truthy(opts['$[]']("unescape_input"))) {
          attrlist = self.$unescape_bracketed_text(attrlist)};
        if ($truthy(opts['$[]']("sub_result"))) {
          block = self};
        if ($truthy((into = opts['$[]']("into")))) {
          return $$($nesting, 'AttributeList').$new(attrlist, block).$parse_into(into, posattrs)
        } else {
          return $$($nesting, 'AttributeList').$new(attrlist, block).$parse(posattrs)
        };
      }, TMP_Substitutors_parse_attributes_58.$$arity = -2);
      
      Opal.def(self, '$expand_subs', TMP_Substitutors_expand_subs_59 = function $$expand_subs(subs) {
        var $a, TMP_60, self = this, expanded_subs = nil;

        if ($truthy($$$('::', 'Symbol')['$==='](subs))) {
          if (subs['$==']("none")) {
            return nil
          } else {
            return ($truthy($a = $$($nesting, 'SUB_GROUPS')['$[]'](subs)) ? $a : [subs])
          }
        } else {
          
          expanded_subs = [];
          $send(subs, 'each', [], (TMP_60 = function(key){var self = TMP_60.$$s || this, sub_group = nil;

          
            
            if (key == null) {
              key = nil;
            };
            if (key['$==']("none")) {
              return nil
            } else if ($truthy((sub_group = $$($nesting, 'SUB_GROUPS')['$[]'](key)))) {
              return (expanded_subs = $rb_plus(expanded_subs, sub_group))
            } else {
              return expanded_subs['$<<'](key)
            };}, TMP_60.$$s = self, TMP_60.$$arity = 1, TMP_60));
          if ($truthy(expanded_subs['$empty?']())) {
            return nil
          } else {
            return expanded_subs
          };
        }
      }, TMP_Substitutors_expand_subs_59.$$arity = 1);
      
      Opal.def(self, '$unescape_bracketed_text', TMP_Substitutors_unescape_bracketed_text_61 = function $$unescape_bracketed_text(text) {
        var self = this;

        
        if ($truthy(text['$empty?']())) {
        } else if ($truthy((text = text.$strip().$tr($$($nesting, 'LF'), " "))['$include?']($$($nesting, 'R_SB')))) {
          text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
        return text;
      }, TMP_Substitutors_unescape_bracketed_text_61.$$arity = 1);
      
      Opal.def(self, '$normalize_string', TMP_Substitutors_normalize_string_62 = function $$normalize_string(str, unescape_brackets) {
        var $a, self = this;

        
        
        if (unescape_brackets == null) {
          unescape_brackets = false;
        };
        if ($truthy(str['$empty?']())) {
        } else {
          
          str = str.$strip().$tr($$($nesting, 'LF'), " ");
          if ($truthy(($truthy($a = unescape_brackets) ? str['$include?']($$($nesting, 'R_SB')) : $a))) {
            str = str.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
        };
        return str;
      }, TMP_Substitutors_normalize_string_62.$$arity = -2);
      
      Opal.def(self, '$unescape_brackets', TMP_Substitutors_unescape_brackets_63 = function $$unescape_brackets(str) {
        var self = this;

        
        if ($truthy(str['$empty?']())) {
        } else if ($truthy(str['$include?']($$($nesting, 'RS')))) {
          str = str.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
        return str;
      }, TMP_Substitutors_unescape_brackets_63.$$arity = 1);
      
      Opal.def(self, '$split_simple_csv', TMP_Substitutors_split_simple_csv_64 = function $$split_simple_csv(str) {
        var TMP_65, TMP_66, self = this, values = nil, current = nil, quote_open = nil;

        
        if ($truthy(str['$empty?']())) {
          values = []
        } else if ($truthy(str['$include?']("\""))) {
          
          values = [];
          current = [];
          quote_open = false;
          $send(str, 'each_char', [], (TMP_65 = function(c){var self = TMP_65.$$s || this, $case = nil;

          
            
            if (c == null) {
              c = nil;
            };
            return (function() {$case = c;
            if (","['$===']($case)) {if ($truthy(quote_open)) {
              return current['$<<'](c)
            } else {
              
              values['$<<'](current.$join().$strip());
              return (current = []);
            }}
            else if ("\""['$===']($case)) {return (quote_open = quote_open['$!']())}
            else {return current['$<<'](c)}})();}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65));
          values['$<<'](current.$join().$strip());
        } else {
          values = $send(str.$split(","), 'map', [], (TMP_66 = function(it){var self = TMP_66.$$s || this;

          
            
            if (it == null) {
              it = nil;
            };
            return it.$strip();}, TMP_66.$$s = self, TMP_66.$$arity = 1, TMP_66))
        };
        return values;
      }, TMP_Substitutors_split_simple_csv_64.$$arity = 1);
      
      Opal.def(self, '$resolve_subs', TMP_Substitutors_resolve_subs_67 = function $$resolve_subs(subs, type, defaults, subject) {
        var TMP_68, self = this, candidates = nil, modifiers_present = nil, resolved = nil, invalid = nil;

        
        
        if (type == null) {
          type = "block";
        };
        
        if (defaults == null) {
          defaults = nil;
        };
        
        if (subject == null) {
          subject = nil;
        };
        if ($truthy(subs['$nil_or_empty?']())) {
          return nil};
        candidates = nil;
        if ($truthy(subs['$include?'](" "))) {
          subs = subs.$delete(" ")};
        modifiers_present = $$($nesting, 'SubModifierSniffRx')['$match?'](subs);
        $send(subs.$split(","), 'each', [], (TMP_68 = function(key){var self = TMP_68.$$s || this, $a, $b, modifier_operation = nil, first = nil, resolved_keys = nil, resolved_key = nil, candidate = nil, $case = nil;

        
          
          if (key == null) {
            key = nil;
          };
          modifier_operation = nil;
          if ($truthy(modifiers_present)) {
            if ((first = key.$chr())['$==']("+")) {
              
              modifier_operation = "append";
              key = key.$slice(1, key.$length());
            } else if (first['$==']("-")) {
              
              modifier_operation = "remove";
              key = key.$slice(1, key.$length());
            } else if ($truthy(key['$end_with?']("+"))) {
              
              modifier_operation = "prepend";
              key = key.$chop();}};
          key = key.$to_sym();
          if ($truthy((($a = type['$==']("inline")) ? ($truthy($b = key['$==']("verbatim")) ? $b : key['$==']("v")) : type['$==']("inline")))) {
            resolved_keys = $$($nesting, 'BASIC_SUBS')
          } else if ($truthy($$($nesting, 'SUB_GROUPS')['$key?'](key))) {
            resolved_keys = $$($nesting, 'SUB_GROUPS')['$[]'](key)
          } else if ($truthy(($truthy($a = (($b = type['$==']("inline")) ? key.$length()['$=='](1) : type['$==']("inline"))) ? $$($nesting, 'SUB_HINTS')['$key?'](key) : $a))) {
            
            resolved_key = $$($nesting, 'SUB_HINTS')['$[]'](key);
            if ($truthy((candidate = $$($nesting, 'SUB_GROUPS')['$[]'](resolved_key)))) {
              resolved_keys = candidate
            } else {
              resolved_keys = [resolved_key]
            };
          } else {
            resolved_keys = [key]
          };
          if ($truthy(modifier_operation)) {
            
            candidates = ($truthy($a = candidates) ? $a : (function() {if ($truthy(defaults)) {
              
              return defaults.$drop(0);
            } else {
              return []
            }; return nil; })());
            return (function() {$case = modifier_operation;
            if ("append"['$===']($case)) {return (candidates = $rb_plus(candidates, resolved_keys))}
            else if ("prepend"['$===']($case)) {return (candidates = $rb_plus(resolved_keys, candidates))}
            else if ("remove"['$===']($case)) {return (candidates = $rb_minus(candidates, resolved_keys))}
            else { return nil }})();
          } else {
            
            candidates = ($truthy($a = candidates) ? $a : []);
            return (candidates = $rb_plus(candidates, resolved_keys));
          };}, TMP_68.$$s = self, TMP_68.$$arity = 1, TMP_68));
        if ($truthy(candidates)) {
        } else {
          return nil
        };
        resolved = candidates['$&']($$($nesting, 'SUB_OPTIONS')['$[]'](type));
        if ($truthy($rb_minus(candidates, resolved)['$empty?']())) {
        } else {
          
          invalid = $rb_minus(candidates, resolved);
          self.$logger().$warn("" + "invalid substitution type" + ((function() {if ($truthy($rb_gt(invalid.$size(), 1))) {
            return "s"
          } else {
            return ""
          }; return nil; })()) + ((function() {if ($truthy(subject)) {
            return " for "
          } else {
            return ""
          }; return nil; })()) + (subject) + ": " + (invalid.$join(", ")));
        };
        return resolved;
      }, TMP_Substitutors_resolve_subs_67.$$arity = -2);
      
      Opal.def(self, '$resolve_block_subs', TMP_Substitutors_resolve_block_subs_69 = function $$resolve_block_subs(subs, defaults, subject) {
        var self = this;

        return self.$resolve_subs(subs, "block", defaults, subject)
      }, TMP_Substitutors_resolve_block_subs_69.$$arity = 3);
      
      Opal.def(self, '$resolve_pass_subs', TMP_Substitutors_resolve_pass_subs_70 = function $$resolve_pass_subs(subs) {
        var self = this;

        return self.$resolve_subs(subs, "inline", nil, "passthrough macro")
      }, TMP_Substitutors_resolve_pass_subs_70.$$arity = 1);
      
      Opal.def(self, '$highlight_source', TMP_Substitutors_highlight_source_71 = function $$highlight_source(source, process_callouts, highlighter) {
        var $a, $b, $c, $d, $e, $f, TMP_72, TMP_74, self = this, $case = nil, highlighter_loaded = nil, lineno = nil, callout_on_last = nil, callout_marks = nil, last = nil, callout_rx = nil, linenums_mode = nil, highlight_lines = nil, start = nil, result = nil, lexer = nil, opts = nil, $writer = nil, autonum = nil, reached_code = nil;
        if (self.document == null) self.document = nil;
        if (self.passthroughs == null) self.passthroughs = nil;

        
        
        if (highlighter == null) {
          highlighter = nil;
        };
        $case = (highlighter = ($truthy($a = highlighter) ? $a : self.document.$attributes()['$[]']("source-highlighter")));
        if ("coderay"['$===']($case)) {if ($truthy(($truthy($a = ($truthy($b = (highlighter_loaded = (($c = $$$('::', 'CodeRay', 'skip_raise')) ? 'constant' : nil))) ? $b : (($d = $Substitutors.$$cvars['@@coderay_unavailable'], $d != null) ? 'class variable' : nil))) ? $a : self.document.$attributes()['$[]']("coderay-unavailable")))) {
        } else if ($truthy($$($nesting, 'Helpers').$require_library("coderay", true, "warn")['$nil?']())) {
          (Opal.class_variable_set($Substitutors, '@@coderay_unavailable', true))
        } else {
          highlighter_loaded = true
        }}
        else if ("pygments"['$===']($case)) {if ($truthy(($truthy($a = ($truthy($b = (highlighter_loaded = (($e = $$$('::', 'Pygments', 'skip_raise')) ? 'constant' : nil))) ? $b : (($f = $Substitutors.$$cvars['@@pygments_unavailable'], $f != null) ? 'class variable' : nil))) ? $a : self.document.$attributes()['$[]']("pygments-unavailable")))) {
        } else if ($truthy($$($nesting, 'Helpers').$require_library("pygments", "pygments.rb", "warn")['$nil?']())) {
          (Opal.class_variable_set($Substitutors, '@@pygments_unavailable', true))
        } else {
          highlighter_loaded = true
        }}
        else {highlighter_loaded = false};
        if ($truthy(highlighter_loaded)) {
        } else {
          return self.$sub_source(source, process_callouts)
        };
        lineno = 0;
        callout_on_last = false;
        if ($truthy(process_callouts)) {
          
          callout_marks = $hash2([], {});
          last = -1;
          callout_rx = (function() {if ($truthy(self['$attr?']("line-comment"))) {
            return $$($nesting, 'CalloutExtractRxMap')['$[]'](self.$attr("line-comment"))
          } else {
            return $$($nesting, 'CalloutExtractRx')
          }; return nil; })();
          source = $send(source.$split($$($nesting, 'LF'), -1), 'map', [], (TMP_72 = function(line){var self = TMP_72.$$s || this, TMP_73;

          
            
            if (line == null) {
              line = nil;
            };
            lineno = $rb_plus(lineno, 1);
            return $send(line, 'gsub', [callout_rx], (TMP_73 = function(){var self = TMP_73.$$s || this, $g, $writer = nil;

            if ($truthy((($g = $gvars['~']) === nil ? nil : $g['$[]'](2)))) {
                return (($g = $gvars['~']) === nil ? nil : $g['$[]'](0)).$sub($$($nesting, 'RS'), "")
              } else {
                
                ($truthy($g = callout_marks['$[]'](lineno)) ? $g : (($writer = [lineno, []]), $send(callout_marks, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<']([(($g = $gvars['~']) === nil ? nil : $g['$[]'](1)), (($g = $gvars['~']) === nil ? nil : $g['$[]'](4))]);
                last = lineno;
                return nil;
              }}, TMP_73.$$s = self, TMP_73.$$arity = 0, TMP_73));}, TMP_72.$$s = self, TMP_72.$$arity = 1, TMP_72)).$join($$($nesting, 'LF'));
          callout_on_last = last['$=='](lineno);
          if ($truthy(callout_marks['$empty?']())) {
            callout_marks = nil};
        } else {
          callout_marks = nil
        };
        linenums_mode = nil;
        highlight_lines = nil;
        $case = highlighter;
        if ("coderay"['$===']($case)) {
        if ($truthy((linenums_mode = (function() {if ($truthy(self['$attr?']("linenums", nil, false))) {
          return ($truthy($a = self.document.$attributes()['$[]']("coderay-linenums-mode")) ? $a : "table").$to_sym()
        } else {
          return nil
        }; return nil; })()))) {
          
          if ($truthy($rb_lt((start = self.$attr("start", nil, 1).$to_i()), 1))) {
            start = 1};
          if ($truthy(self['$attr?']("highlight", nil, false))) {
            highlight_lines = self.$resolve_lines_to_highlight(source, self.$attr("highlight", nil, false))};};
        result = $$$($$$('::', 'CodeRay'), 'Duo')['$[]'](self.$attr("language", "text", false).$to_sym(), "html", $hash2(["css", "line_numbers", "line_number_start", "line_number_anchors", "highlight_lines", "bold_every"], {"css": ($truthy($a = self.document.$attributes()['$[]']("coderay-css")) ? $a : "class").$to_sym(), "line_numbers": linenums_mode, "line_number_start": start, "line_number_anchors": false, "highlight_lines": highlight_lines, "bold_every": false})).$highlight(source);}
        else if ("pygments"['$===']($case)) {
        lexer = ($truthy($a = $$$($$$('::', 'Pygments'), 'Lexer').$find_by_alias(self.$attr("language", "text", false))) ? $a : $$$($$$('::', 'Pygments'), 'Lexer').$find_by_mimetype("text/plain"));
        opts = $hash2(["cssclass", "classprefix", "nobackground", "stripnl"], {"cssclass": "pyhl", "classprefix": "tok-", "nobackground": true, "stripnl": false});
        if (lexer.$name()['$==']("PHP")) {
          
          $writer = ["startinline", self['$option?']("mixed")['$!']()];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if (($truthy($a = self.document.$attributes()['$[]']("pygments-css")) ? $a : "class")['$==']("class")) {
        } else {
          
          
          $writer = ["noclasses", true];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["style", ($truthy($a = self.document.$attributes()['$[]']("pygments-style")) ? $a : $$$($$($nesting, 'Stylesheets'), 'DEFAULT_PYGMENTS_STYLE'))];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        };
        if ($truthy(self['$attr?']("highlight", nil, false))) {
          if ($truthy((highlight_lines = self.$resolve_lines_to_highlight(source, self.$attr("highlight", nil, false)))['$empty?']())) {
          } else {
            
            $writer = ["hl_lines", highlight_lines.$join(" ")];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }};
        if ($truthy(($truthy($a = ($truthy($b = self['$attr?']("linenums", nil, false)) ? (($writer = ["linenostart", (function() {if ($truthy($rb_lt((start = self.$attr("start", 1, false)).$to_i(), 1))) {
          return 1
        } else {
          return start
        }; return nil; })()]), $send(opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]) : $b)) ? (($writer = ["linenos", ($truthy($b = self.document.$attributes()['$[]']("pygments-linenums-mode")) ? $b : "table")]), $send(opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])['$==']("table") : $a))) {
          
          linenums_mode = "table";
          if ($truthy((result = lexer.$highlight(source, $hash2(["options"], {"options": opts}))))) {
            result = result.$sub($$($nesting, 'PygmentsWrapperDivRx'), "\\1").$gsub($$($nesting, 'PygmentsWrapperPreRx'), "\\1")
          } else {
            result = self.$sub_specialchars(source)
          };
        } else if ($truthy((result = lexer.$highlight(source, $hash2(["options"], {"options": opts}))))) {
          if ($truthy($$($nesting, 'PygmentsWrapperPreRx')['$=~'](result))) {
            result = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))}
        } else {
          result = self.$sub_specialchars(source)
        };};
        if ($truthy(self.passthroughs['$empty?']())) {
        } else {
          result = result.$gsub($$($nesting, 'HighlightedPassSlotRx'), "" + ($$($nesting, 'PASS_START')) + "\\1" + ($$($nesting, 'PASS_END')))
        };
        if ($truthy(($truthy($a = process_callouts) ? callout_marks : $a))) {
          
          lineno = 0;
          autonum = 0;
          reached_code = linenums_mode['$!=']("table");
          return $send(result.$split($$($nesting, 'LF'), -1), 'map', [], (TMP_74 = function(line){var self = TMP_74.$$s || this, $g, $h, TMP_75, conums = nil, tail = nil, pos = nil, guard = nil, conum = nil, conums_markup = nil;
            if (self.document == null) self.document = nil;

          
            
            if (line == null) {
              line = nil;
            };
            if ($truthy(reached_code)) {
            } else {
              
              if ($truthy(line['$include?']("<td class=\"code\">"))) {
              } else {
                return line;
              };
              reached_code = true;
            };
            lineno = $rb_plus(lineno, 1);
            if ($truthy((conums = callout_marks.$delete(lineno)))) {
              
              tail = nil;
              if ($truthy(($truthy($g = ($truthy($h = callout_on_last) ? callout_marks['$empty?']() : $h)) ? linenums_mode['$==']("table") : $g))) {
                if ($truthy((($g = highlighter['$==']("coderay")) ? (pos = line.$index("</pre>")) : highlighter['$==']("coderay")))) {
                  $g = [line.$slice(0, pos), line.$slice(pos, line.$length())], (line = $g[0]), (tail = $g[1]), $g
                } else if ($truthy((($g = highlighter['$==']("pygments")) ? (pos = line['$start_with?']("</td>")) : highlighter['$==']("pygments")))) {
                  $g = ["", line], (line = $g[0]), (tail = $g[1]), $g}};
              if (conums.$size()['$=='](1)) {
                
                $h = conums['$[]'](0), $g = Opal.to_ary($h), (guard = ($g[0] == null ? nil : $g[0])), (conum = ($g[1] == null ? nil : $g[1])), $h;
                return "" + (line) + ($$($nesting, 'Inline').$new(self, "callout", (function() {if (conum['$=='](".")) {
                  return (autonum = $rb_plus(autonum, 1)).$to_s()
                } else {
                  return conum
                }; return nil; })(), $hash2(["id", "attributes"], {"id": self.document.$callouts().$read_next_id(), "attributes": $hash2(["guard"], {"guard": guard})})).$convert()) + (tail);
              } else {
                
                conums_markup = $send(conums, 'map', [], (TMP_75 = function(guard_it, conum_it){var self = TMP_75.$$s || this;
                  if (self.document == null) self.document = nil;

                
                  
                  if (guard_it == null) {
                    guard_it = nil;
                  };
                  
                  if (conum_it == null) {
                    conum_it = nil;
                  };
                  return $$($nesting, 'Inline').$new(self, "callout", (function() {if (conum_it['$=='](".")) {
                    return (autonum = $rb_plus(autonum, 1)).$to_s()
                  } else {
                    return conum_it
                  }; return nil; })(), $hash2(["id", "attributes"], {"id": self.document.$callouts().$read_next_id(), "attributes": $hash2(["guard"], {"guard": guard_it})})).$convert();}, TMP_75.$$s = self, TMP_75.$$arity = 2, TMP_75)).$join(" ");
                return "" + (line) + (conums_markup) + (tail);
              };
            } else {
              return line
            };}, TMP_74.$$s = self, TMP_74.$$arity = 1, TMP_74)).$join($$($nesting, 'LF'));
        } else {
          return result
        };
      }, TMP_Substitutors_highlight_source_71.$$arity = -3);
      
      Opal.def(self, '$resolve_lines_to_highlight', TMP_Substitutors_resolve_lines_to_highlight_76 = function $$resolve_lines_to_highlight(source, spec) {
        var TMP_77, self = this, lines = nil;

        
        lines = [];
        if ($truthy(spec['$include?'](" "))) {
          spec = spec.$delete(" ")};
        $send((function() {if ($truthy(spec['$include?'](","))) {
          
          return spec.$split(",");
        } else {
          
          return spec.$split(";");
        }; return nil; })(), 'map', [], (TMP_77 = function(entry){var self = TMP_77.$$s || this, $a, $b, negate = nil, delim = nil, from = nil, to = nil, line_nums = nil;

        
          
          if (entry == null) {
            entry = nil;
          };
          negate = false;
          if ($truthy(entry['$start_with?']("!"))) {
            
            entry = entry.$slice(1, entry.$length());
            negate = true;};
          if ($truthy((delim = (function() {if ($truthy(entry['$include?'](".."))) {
            return ".."
          } else {
            
            if ($truthy(entry['$include?']("-"))) {
              return "-"
            } else {
              return nil
            };
          }; return nil; })()))) {
            
            $b = entry.$split(delim, 2), $a = Opal.to_ary($b), (from = ($a[0] == null ? nil : $a[0])), (to = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(($truthy($a = to['$empty?']()) ? $a : $rb_lt((to = to.$to_i()), 0)))) {
              to = $rb_plus(source.$count($$($nesting, 'LF')), 1)};
            line_nums = $$$('::', 'Range').$new(from.$to_i(), to).$to_a();
            if ($truthy(negate)) {
              return (lines = $rb_minus(lines, line_nums))
            } else {
              return lines.$concat(line_nums)
            };
          } else if ($truthy(negate)) {
            return lines.$delete(entry.$to_i())
          } else {
            return lines['$<<'](entry.$to_i())
          };}, TMP_77.$$s = self, TMP_77.$$arity = 1, TMP_77));
        return lines.$sort().$uniq();
      }, TMP_Substitutors_resolve_lines_to_highlight_76.$$arity = 2);
      
      Opal.def(self, '$sub_source', TMP_Substitutors_sub_source_78 = function $$sub_source(source, process_callouts) {
        var self = this;

        if ($truthy(process_callouts)) {
          return self.$sub_callouts(self.$sub_specialchars(source))
        } else {
          
          return self.$sub_specialchars(source);
        }
      }, TMP_Substitutors_sub_source_78.$$arity = 2);
      
      Opal.def(self, '$lock_in_subs', TMP_Substitutors_lock_in_subs_79 = function $$lock_in_subs() {
        var $a, $b, $c, $d, $e, self = this, default_subs = nil, $case = nil, custom_subs = nil, idx = nil, $writer = nil;
        if (self.default_subs == null) self.default_subs = nil;
        if (self.content_model == null) self.content_model = nil;
        if (self.context == null) self.context = nil;
        if (self.subs == null) self.subs = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.style == null) self.style = nil;
        if (self.document == null) self.document = nil;

        
        if ($truthy((default_subs = self.default_subs))) {
        } else {
          $case = self.content_model;
          if ("simple"['$===']($case)) {default_subs = $$($nesting, 'NORMAL_SUBS')}
          else if ("verbatim"['$===']($case)) {if ($truthy(($truthy($a = self.context['$==']("listing")) ? $a : (($b = self.context['$==']("literal")) ? self['$option?']("listparagraph")['$!']() : self.context['$==']("literal"))))) {
            default_subs = $$($nesting, 'VERBATIM_SUBS')
          } else if (self.context['$==']("verse")) {
            default_subs = $$($nesting, 'NORMAL_SUBS')
          } else {
            default_subs = $$($nesting, 'BASIC_SUBS')
          }}
          else if ("raw"['$===']($case)) {default_subs = (function() {if (self.context['$==']("stem")) {
            return $$($nesting, 'BASIC_SUBS')
          } else {
            return $$($nesting, 'NONE_SUBS')
          }; return nil; })()}
          else {return self.subs}
        };
        if ($truthy((custom_subs = self.attributes['$[]']("subs")))) {
          self.subs = ($truthy($a = self.$resolve_block_subs(custom_subs, default_subs, self.context)) ? $a : [])
        } else {
          self.subs = default_subs.$drop(0)
        };
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = (($e = self.context['$==']("listing")) ? self.style['$==']("source") : self.context['$==']("listing"))) ? self.attributes['$key?']("language") : $d)) ? self.document['$basebackend?']("html") : $c)) ? $$($nesting, 'SUB_HIGHLIGHT')['$include?'](self.document.$attributes()['$[]']("source-highlighter")) : $b)) ? (idx = self.subs.$index("specialcharacters")) : $a))) {
          
          $writer = [idx, "highlight"];
          $send(self.subs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return self.subs;
      }, TMP_Substitutors_lock_in_subs_79.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/abstract_node"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$attr_reader', '$attr_accessor', '$==', '$document', '$to_s', '$key?', '$dup', '$[]', '$raise', '$converter', '$attributes', '$nil?', '$[]=', '$-', '$delete', '$+', '$update', '$nil_or_empty?', '$split', '$include?', '$empty?', '$join', '$apply_reftext_subs', '$attr?', '$extname', '$attr', '$image_uri', '$<', '$safe', '$uriish?', '$uri_encode_spaces', '$normalize_web_path', '$generate_data_uri_from_uri', '$generate_data_uri', '$slice', '$length', '$normalize_system_path', '$readable?', '$strict_encode64', '$binread', '$warn', '$logger', '$require_library', '$!', '$open', '$content_type', '$read', '$base_dir', '$root?', '$path_resolver', '$system_path', '$web_path', '$===', '$!=', '$normalize_lines_array', '$to_a', '$each_line', '$open_uri', '$fetch', '$read_asset', '$gsub']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $AbstractNode(){};
      var self = $AbstractNode = $klass($base, $super, 'AbstractNode', $AbstractNode);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_AbstractNode_initialize_1, TMP_AbstractNode_block$q_2, TMP_AbstractNode_inline$q_3, TMP_AbstractNode_converter_4, TMP_AbstractNode_parent$eq_5, TMP_AbstractNode_attr_6, TMP_AbstractNode_attr$q_7, TMP_AbstractNode_set_attr_8, TMP_AbstractNode_remove_attr_9, TMP_AbstractNode_option$q_10, TMP_AbstractNode_set_option_11, TMP_AbstractNode_update_attributes_12, TMP_AbstractNode_role_13, TMP_AbstractNode_roles_14, TMP_AbstractNode_role$q_15, TMP_AbstractNode_has_role$q_16, TMP_AbstractNode_add_role_17, TMP_AbstractNode_remove_role_18, TMP_AbstractNode_reftext_19, TMP_AbstractNode_reftext$q_20, TMP_AbstractNode_icon_uri_21, TMP_AbstractNode_image_uri_22, TMP_AbstractNode_media_uri_23, TMP_AbstractNode_generate_data_uri_24, TMP_AbstractNode_generate_data_uri_from_uri_25, TMP_AbstractNode_normalize_asset_path_27, TMP_AbstractNode_normalize_system_path_28, TMP_AbstractNode_normalize_web_path_29, TMP_AbstractNode_read_asset_30, TMP_AbstractNode_read_contents_32, TMP_AbstractNode_uri_encode_spaces_35, TMP_AbstractNode_is_uri$q_36;

      def.document = def.attributes = def.parent = nil;
      
      self.$include($$($nesting, 'Logging'));
      self.$include($$($nesting, 'Substitutors'));
      self.$attr_reader("attributes");
      self.$attr_reader("context");
      self.$attr_reader("document");
      self.$attr_accessor("id");
      self.$attr_reader("node_name");
      self.$attr_reader("parent");
      
      Opal.def(self, '$initialize', TMP_AbstractNode_initialize_1 = function $$initialize(parent, context, opts) {
        var $a, self = this;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if (context['$==']("document")) {
          $a = [self, nil], (self.document = $a[0]), (self.parent = $a[1]), $a
        } else if ($truthy(parent)) {
          $a = [parent.$document(), parent], (self.document = $a[0]), (self.parent = $a[1]), $a
        } else {
          self.document = (self.parent = nil)
        };
        self.node_name = (self.context = context).$to_s();
        self.attributes = (function() {if ($truthy(opts['$key?']("attributes"))) {
          return opts['$[]']("attributes").$dup()
        } else {
          return $hash2([], {})
        }; return nil; })();
        return (self.passthroughs = $hash2([], {}));
      }, TMP_AbstractNode_initialize_1.$$arity = -3);
      
      Opal.def(self, '$block?', TMP_AbstractNode_block$q_2 = function() {
        var self = this;

        return self.$raise($$$('::', 'NotImplementedError'))
      }, TMP_AbstractNode_block$q_2.$$arity = 0);
      
      Opal.def(self, '$inline?', TMP_AbstractNode_inline$q_3 = function() {
        var self = this;

        return self.$raise($$$('::', 'NotImplementedError'))
      }, TMP_AbstractNode_inline$q_3.$$arity = 0);
      
      Opal.def(self, '$converter', TMP_AbstractNode_converter_4 = function $$converter() {
        var self = this;

        return self.document.$converter()
      }, TMP_AbstractNode_converter_4.$$arity = 0);
      
      Opal.def(self, '$parent=', TMP_AbstractNode_parent$eq_5 = function(parent) {
        var $a, self = this;

        return $a = [parent, parent.$document()], (self.parent = $a[0]), (self.document = $a[1]), $a
      }, TMP_AbstractNode_parent$eq_5.$$arity = 1);
      
      Opal.def(self, '$attr', TMP_AbstractNode_attr_6 = function $$attr(name, default_val, inherit) {
        var $a, $b, self = this;

        
        
        if (default_val == null) {
          default_val = nil;
        };
        
        if (inherit == null) {
          inherit = true;
        };
        name = name.$to_s();
        return ($truthy($a = self.attributes['$[]'](name)) ? $a : (function() {if ($truthy(($truthy($b = inherit) ? self.parent : $b))) {
          return ($truthy($b = self.document.$attributes()['$[]'](name)) ? $b : default_val)
        } else {
          return default_val
        }; return nil; })());
      }, TMP_AbstractNode_attr_6.$$arity = -2);
      
      Opal.def(self, '$attr?', TMP_AbstractNode_attr$q_7 = function(name, expect_val, inherit) {
        var $a, $b, $c, self = this;

        
        
        if (expect_val == null) {
          expect_val = nil;
        };
        
        if (inherit == null) {
          inherit = true;
        };
        name = name.$to_s();
        if ($truthy(expect_val['$nil?']())) {
          return ($truthy($a = self.attributes['$key?'](name)) ? $a : ($truthy($b = ($truthy($c = inherit) ? self.parent : $c)) ? self.document.$attributes()['$key?'](name) : $b))
        } else {
          return expect_val['$=='](($truthy($a = self.attributes['$[]'](name)) ? $a : (function() {if ($truthy(($truthy($b = inherit) ? self.parent : $b))) {
            return self.document.$attributes()['$[]'](name)
          } else {
            return nil
          }; return nil; })()))
        };
      }, TMP_AbstractNode_attr$q_7.$$arity = -2);
      
      Opal.def(self, '$set_attr', TMP_AbstractNode_set_attr_8 = function $$set_attr(name, value, overwrite) {
        var $a, self = this, $writer = nil;

        
        
        if (value == null) {
          value = "";
        };
        
        if (overwrite == null) {
          overwrite = true;
        };
        if ($truthy((($a = overwrite['$=='](false)) ? self.attributes['$key?'](name) : overwrite['$=='](false)))) {
          return false
        } else {
          
          
          $writer = [name, value];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return true;
        };
      }, TMP_AbstractNode_set_attr_8.$$arity = -2);
      
      Opal.def(self, '$remove_attr', TMP_AbstractNode_remove_attr_9 = function $$remove_attr(name) {
        var self = this;

        return self.attributes.$delete(name)
      }, TMP_AbstractNode_remove_attr_9.$$arity = 1);
      
      Opal.def(self, '$option?', TMP_AbstractNode_option$q_10 = function(name) {
        var self = this;

        return self.attributes['$key?']("" + (name) + "-option")
      }, TMP_AbstractNode_option$q_10.$$arity = 1);
      
      Opal.def(self, '$set_option', TMP_AbstractNode_set_option_11 = function $$set_option(name) {
        var self = this, attrs = nil, key = nil, $writer = nil;

        if ($truthy((attrs = self.attributes)['$[]']("options"))) {
          if ($truthy(attrs['$[]']((key = "" + (name) + "-option")))) {
            return nil
          } else {
            
            
            $writer = ["options", $rb_plus(attrs['$[]']("options"), "" + "," + (name))];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [key, ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }
        } else {
          
          
          $writer = ["options", name];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["" + (name) + "-option", ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }
      }, TMP_AbstractNode_set_option_11.$$arity = 1);
      
      Opal.def(self, '$update_attributes', TMP_AbstractNode_update_attributes_12 = function $$update_attributes(attributes) {
        var self = this;

        
        self.attributes.$update(attributes);
        return nil;
      }, TMP_AbstractNode_update_attributes_12.$$arity = 1);
      
      Opal.def(self, '$role', TMP_AbstractNode_role_13 = function $$role() {
        var $a, self = this;

        return ($truthy($a = self.attributes['$[]']("role")) ? $a : self.document.$attributes()['$[]']("role"))
      }, TMP_AbstractNode_role_13.$$arity = 0);
      
      Opal.def(self, '$roles', TMP_AbstractNode_roles_14 = function $$roles() {
        var $a, self = this, val = nil;

        if ($truthy((val = ($truthy($a = self.attributes['$[]']("role")) ? $a : self.document.$attributes()['$[]']("role")))['$nil_or_empty?']())) {
          return []
        } else {
          return val.$split()
        }
      }, TMP_AbstractNode_roles_14.$$arity = 0);
      
      Opal.def(self, '$role?', TMP_AbstractNode_role$q_15 = function(expect_val) {
        var $a, self = this;

        
        
        if (expect_val == null) {
          expect_val = nil;
        };
        if ($truthy(expect_val)) {
          return expect_val['$=='](($truthy($a = self.attributes['$[]']("role")) ? $a : self.document.$attributes()['$[]']("role")))
        } else {
          return ($truthy($a = self.attributes['$key?']("role")) ? $a : self.document.$attributes()['$key?']("role"))
        };
      }, TMP_AbstractNode_role$q_15.$$arity = -1);
      
      Opal.def(self, '$has_role?', TMP_AbstractNode_has_role$q_16 = function(name) {
        var $a, self = this, val = nil;

        if ($truthy((val = ($truthy($a = self.attributes['$[]']("role")) ? $a : self.document.$attributes()['$[]']("role"))))) {
          return ((("" + " ") + (val)) + " ")['$include?']("" + " " + (name) + " ")
        } else {
          return false
        }
      }, TMP_AbstractNode_has_role$q_16.$$arity = 1);
      
      Opal.def(self, '$add_role', TMP_AbstractNode_add_role_17 = function $$add_role(name) {
        var self = this, val = nil, $writer = nil;

        if ($truthy((val = self.attributes['$[]']("role"))['$nil_or_empty?']())) {
          
          
          $writer = ["role", name];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return true;
        } else if ($truthy(((("" + " ") + (val)) + " ")['$include?']("" + " " + (name) + " "))) {
          return false
        } else {
          
          
          $writer = ["role", "" + (val) + " " + (name)];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return true;
        }
      }, TMP_AbstractNode_add_role_17.$$arity = 1);
      
      Opal.def(self, '$remove_role', TMP_AbstractNode_remove_role_18 = function $$remove_role(name) {
        var self = this, val = nil, $writer = nil;

        if ($truthy((val = self.attributes['$[]']("role"))['$nil_or_empty?']())) {
          return false
        } else if ($truthy((val = val.$split()).$delete(name))) {
          
          if ($truthy(val['$empty?']())) {
            self.attributes.$delete("role")
          } else {
            
            $writer = ["role", val.$join(" ")];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return true;
        } else {
          return false
        }
      }, TMP_AbstractNode_remove_role_18.$$arity = 1);
      
      Opal.def(self, '$reftext', TMP_AbstractNode_reftext_19 = function $$reftext() {
        var self = this, val = nil;

        if ($truthy((val = self.attributes['$[]']("reftext")))) {
          
          return self.$apply_reftext_subs(val);
        } else {
          return nil
        }
      }, TMP_AbstractNode_reftext_19.$$arity = 0);
      
      Opal.def(self, '$reftext?', TMP_AbstractNode_reftext$q_20 = function() {
        var self = this;

        return self.attributes['$key?']("reftext")
      }, TMP_AbstractNode_reftext$q_20.$$arity = 0);
      
      Opal.def(self, '$icon_uri', TMP_AbstractNode_icon_uri_21 = function $$icon_uri(name) {
        var self = this, icon = nil;

        
        if ($truthy(self['$attr?']("icon"))) {
          if ($truthy($$$('::', 'File').$extname((icon = self.$attr("icon")))['$empty?']())) {
            icon = "" + (icon) + "." + (self.document.$attr("icontype", "png"))}
        } else {
          icon = "" + (name) + "." + (self.document.$attr("icontype", "png"))
        };
        return self.$image_uri(icon, "iconsdir");
      }, TMP_AbstractNode_icon_uri_21.$$arity = 1);
      
      Opal.def(self, '$image_uri', TMP_AbstractNode_image_uri_22 = function $$image_uri(target_image, asset_dir_key) {
        var $a, $b, $c, $d, self = this, doc = nil, images_base = nil;

        
        
        if (asset_dir_key == null) {
          asset_dir_key = "imagesdir";
        };
        if ($truthy(($truthy($a = $rb_lt((doc = self.document).$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE'))) ? doc['$attr?']("data-uri") : $a))) {
          if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'Helpers')['$uriish?'](target_image)) ? (target_image = self.$uri_encode_spaces(target_image)) : $b)) ? $a : ($truthy($b = ($truthy($c = ($truthy($d = asset_dir_key) ? (images_base = doc.$attr(asset_dir_key)) : $d)) ? $$($nesting, 'Helpers')['$uriish?'](images_base) : $c)) ? (target_image = self.$normalize_web_path(target_image, images_base, false)) : $b)))) {
            if ($truthy(doc['$attr?']("allow-uri-read"))) {
              return self.$generate_data_uri_from_uri(target_image, doc['$attr?']("cache-uri"))
            } else {
              return target_image
            }
          } else {
            return self.$generate_data_uri(target_image, asset_dir_key)
          }
        } else {
          return self.$normalize_web_path(target_image, (function() {if ($truthy(asset_dir_key)) {
            
            return doc.$attr(asset_dir_key);
          } else {
            return nil
          }; return nil; })())
        };
      }, TMP_AbstractNode_image_uri_22.$$arity = -2);
      
      Opal.def(self, '$media_uri', TMP_AbstractNode_media_uri_23 = function $$media_uri(target, asset_dir_key) {
        var self = this;

        
        
        if (asset_dir_key == null) {
          asset_dir_key = "imagesdir";
        };
        return self.$normalize_web_path(target, (function() {if ($truthy(asset_dir_key)) {
          return self.document.$attr(asset_dir_key)
        } else {
          return nil
        }; return nil; })());
      }, TMP_AbstractNode_media_uri_23.$$arity = -2);
      
      Opal.def(self, '$generate_data_uri', TMP_AbstractNode_generate_data_uri_24 = function $$generate_data_uri(target_image, asset_dir_key) {
        var self = this, ext = nil, mimetype = nil, image_path = nil;

        
        
        if (asset_dir_key == null) {
          asset_dir_key = nil;
        };
        ext = $$$('::', 'File').$extname(target_image);
        mimetype = (function() {if (ext['$=='](".svg")) {
          return "image/svg+xml"
        } else {
          return "" + "image/" + (ext.$slice(1, ext.$length()))
        }; return nil; })();
        if ($truthy(asset_dir_key)) {
          image_path = self.$normalize_system_path(target_image, self.document.$attr(asset_dir_key), nil, $hash2(["target_name"], {"target_name": "image"}))
        } else {
          image_path = self.$normalize_system_path(target_image)
        };
        if ($truthy($$$('::', 'File')['$readable?'](image_path))) {
          return "" + "data:" + (mimetype) + ";base64," + ($$$('::', 'Base64').$strict_encode64($$$('::', 'IO').$binread(image_path)))
        } else {
          
          self.$logger().$warn("" + "image to embed not found or not readable: " + (image_path));
          return "" + "data:" + (mimetype) + ";base64,";
        };
      }, TMP_AbstractNode_generate_data_uri_24.$$arity = -2);
      
      Opal.def(self, '$generate_data_uri_from_uri', TMP_AbstractNode_generate_data_uri_from_uri_25 = function $$generate_data_uri_from_uri(image_uri, cache_uri) {
        var TMP_26, self = this, mimetype = nil, bindata = nil;

        
        
        if (cache_uri == null) {
          cache_uri = false;
        };
        if ($truthy(cache_uri)) {
          $$($nesting, 'Helpers').$require_library("open-uri/cached", "open-uri-cached")
        } else if ($truthy($$$('::', 'RUBY_ENGINE_OPAL')['$!']())) {
          $$$('::', 'OpenURI')};
        
        try {
          
          mimetype = nil;
          bindata = $send(self, 'open', [image_uri, "rb"], (TMP_26 = function(f){var self = TMP_26.$$s || this;

          
            
            if (f == null) {
              f = nil;
            };
            mimetype = f.$content_type();
            return f.$read();}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
          return "" + "data:" + (mimetype) + ";base64," + ($$$('::', 'Base64').$strict_encode64(bindata));
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
            try {
              
              self.$logger().$warn("" + "could not retrieve image data from URI: " + (image_uri));
              return image_uri;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };;
      }, TMP_AbstractNode_generate_data_uri_from_uri_25.$$arity = -2);
      
      Opal.def(self, '$normalize_asset_path', TMP_AbstractNode_normalize_asset_path_27 = function $$normalize_asset_path(asset_ref, asset_name, autocorrect) {
        var self = this;

        
        
        if (asset_name == null) {
          asset_name = "path";
        };
        
        if (autocorrect == null) {
          autocorrect = true;
        };
        return self.$normalize_system_path(asset_ref, self.document.$base_dir(), nil, $hash2(["target_name", "recover"], {"target_name": asset_name, "recover": autocorrect}));
      }, TMP_AbstractNode_normalize_asset_path_27.$$arity = -2);
      
      Opal.def(self, '$normalize_system_path', TMP_AbstractNode_normalize_system_path_28 = function $$normalize_system_path(target, start, jail, opts) {
        var self = this, doc = nil;

        
        
        if (start == null) {
          start = nil;
        };
        
        if (jail == null) {
          jail = nil;
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy($rb_lt((doc = self.document).$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {
          if ($truthy(start)) {
            if ($truthy(doc.$path_resolver()['$root?'](start))) {
            } else {
              start = $$$('::', 'File').$join(doc.$base_dir(), start)
            }
          } else {
            start = doc.$base_dir()
          }
        } else {
          
          if ($truthy(start)) {
          } else {
            start = doc.$base_dir()
          };
          if ($truthy(jail)) {
          } else {
            jail = doc.$base_dir()
          };
        };
        return doc.$path_resolver().$system_path(target, start, jail, opts);
      }, TMP_AbstractNode_normalize_system_path_28.$$arity = -2);
      
      Opal.def(self, '$normalize_web_path', TMP_AbstractNode_normalize_web_path_29 = function $$normalize_web_path(target, start, preserve_uri_target) {
        var $a, self = this;

        
        
        if (start == null) {
          start = nil;
        };
        
        if (preserve_uri_target == null) {
          preserve_uri_target = true;
        };
        if ($truthy(($truthy($a = preserve_uri_target) ? $$($nesting, 'Helpers')['$uriish?'](target) : $a))) {
          return self.$uri_encode_spaces(target)
        } else {
          return self.document.$path_resolver().$web_path(target, start)
        };
      }, TMP_AbstractNode_normalize_web_path_29.$$arity = -2);
      
      Opal.def(self, '$read_asset', TMP_AbstractNode_read_asset_30 = function $$read_asset(path, opts) {
        var TMP_31, $a, self = this;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy($$$('::', 'Hash')['$==='](opts))) {
        } else {
          opts = $hash2(["warn_on_failure"], {"warn_on_failure": opts['$!='](false)})
        };
        if ($truthy($$$('::', 'File')['$readable?'](path))) {
          if ($truthy(opts['$[]']("normalize"))) {
            return $$($nesting, 'Helpers').$normalize_lines_array($send($$$('::', 'File'), 'open', [path, "rb"], (TMP_31 = function(f){var self = TMP_31.$$s || this;

            
              
              if (f == null) {
                f = nil;
              };
              return f.$each_line().$to_a();}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31))).$join($$($nesting, 'LF'))
          } else {
            return $$$('::', 'IO').$read(path)
          }
        } else if ($truthy(opts['$[]']("warn_on_failure"))) {
          
          self.$logger().$warn("" + (($truthy($a = self.$attr("docfile")) ? $a : "<stdin>")) + ": " + (($truthy($a = opts['$[]']("label")) ? $a : "file")) + " does not exist or cannot be read: " + (path));
          return nil;
        } else {
          return nil
        };
      }, TMP_AbstractNode_read_asset_30.$$arity = -2);
      
      Opal.def(self, '$read_contents', TMP_AbstractNode_read_contents_32 = function $$read_contents(target, opts) {
        var $a, $b, $c, TMP_33, TMP_34, self = this, doc = nil, start = nil;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        doc = self.document;
        if ($truthy(($truthy($a = $$($nesting, 'Helpers')['$uriish?'](target)) ? $a : ($truthy($b = ($truthy($c = (start = opts['$[]']("start"))) ? $$($nesting, 'Helpers')['$uriish?'](start) : $c)) ? (target = doc.$path_resolver().$web_path(target, start)) : $b)))) {
          if ($truthy(doc['$attr?']("allow-uri-read"))) {
            
            if ($truthy(doc['$attr?']("cache-uri"))) {
              $$($nesting, 'Helpers').$require_library("open-uri/cached", "open-uri-cached")};
            
            try {
              if ($truthy(opts['$[]']("normalize"))) {
                return $$($nesting, 'Helpers').$normalize_lines_array($send($$$('::', 'OpenURI'), 'open_uri', [target], (TMP_33 = function(f){var self = TMP_33.$$s || this;

                
                  
                  if (f == null) {
                    f = nil;
                  };
                  return f.$each_line().$to_a();}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33))).$join($$($nesting, 'LF'))
              } else {
                return $send($$$('::', 'OpenURI'), 'open_uri', [target], (TMP_34 = function(f){var self = TMP_34.$$s || this;

                
                  
                  if (f == null) {
                    f = nil;
                  };
                  return f.$read();}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34))
              }
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  
                  if ($truthy(opts.$fetch("warn_on_failure", true))) {
                    self.$logger().$warn("" + "could not retrieve contents of " + (($truthy($a = opts['$[]']("label")) ? $a : "asset")) + " at URI: " + (target))};
                  return nil;
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;
          } else {
            
            if ($truthy(opts.$fetch("warn_on_failure", true))) {
              self.$logger().$warn("" + "cannot retrieve contents of " + (($truthy($a = opts['$[]']("label")) ? $a : "asset")) + " at URI: " + (target) + " (allow-uri-read attribute not enabled)")};
            return nil;
          }
        } else {
          
          target = self.$normalize_system_path(target, opts['$[]']("start"), nil, $hash2(["target_name"], {"target_name": ($truthy($a = opts['$[]']("label")) ? $a : "asset")}));
          return self.$read_asset(target, $hash2(["normalize", "warn_on_failure", "label"], {"normalize": opts['$[]']("normalize"), "warn_on_failure": opts.$fetch("warn_on_failure", true), "label": opts['$[]']("label")}));
        };
      }, TMP_AbstractNode_read_contents_32.$$arity = -2);
      
      Opal.def(self, '$uri_encode_spaces', TMP_AbstractNode_uri_encode_spaces_35 = function $$uri_encode_spaces(str) {
        var self = this;

        if ($truthy(str['$include?'](" "))) {
          
          return str.$gsub(" ", "%20");
        } else {
          return str
        }
      }, TMP_AbstractNode_uri_encode_spaces_35.$$arity = 1);
      return (Opal.def(self, '$is_uri?', TMP_AbstractNode_is_uri$q_36 = function(str) {
        var self = this;

        return $$($nesting, 'Helpers')['$uriish?'](str)
      }, TMP_AbstractNode_is_uri$q_36.$$arity = 1), nil) && 'is_uri?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/abstract_block"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$attr_writer', '$attr_accessor', '$==', '$!=', '$level', '$file', '$lineno', '$playback_attributes', '$convert', '$converter', '$join', '$map', '$to_s', '$parent', '$parent=', '$-', '$<<', '$!', '$empty?', '$>', '$find_by_internal', '$to_proc', '$[]', '$has_role?', '$replace', '$raise', '$===', '$header?', '$each', '$flatten', '$context', '$blocks', '$+', '$find_index', '$next_adjacent_block', '$select', '$sub_specialchars', '$match?', '$sub_replacements', '$title', '$apply_title_subs', '$include?', '$delete', '$reftext', '$sprintf', '$sub_quotes', '$compat_mode', '$attributes', '$chomp', '$increment_and_store_counter', '$index=', '$numbered', '$sectname', '$counter', '$numeral=', '$numeral', '$caption=', '$assign_numeral', '$reindex_sections']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $AbstractBlock(){};
      var self = $AbstractBlock = $klass($base, $super, 'AbstractBlock', $AbstractBlock);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_AbstractBlock_initialize_1, TMP_AbstractBlock_block$q_2, TMP_AbstractBlock_inline$q_3, TMP_AbstractBlock_file_4, TMP_AbstractBlock_lineno_5, TMP_AbstractBlock_convert_6, TMP_AbstractBlock_content_7, TMP_AbstractBlock_context$eq_9, TMP_AbstractBlock_$lt$lt_10, TMP_AbstractBlock_blocks$q_11, TMP_AbstractBlock_sections$q_12, TMP_AbstractBlock_find_by_13, TMP_AbstractBlock_find_by_internal_14, TMP_AbstractBlock_next_adjacent_block_17, TMP_AbstractBlock_sections_18, TMP_AbstractBlock_alt_20, TMP_AbstractBlock_caption_21, TMP_AbstractBlock_captioned_title_22, TMP_AbstractBlock_list_marker_keyword_23, TMP_AbstractBlock_title_24, TMP_AbstractBlock_title$q_25, TMP_AbstractBlock_title$eq_26, TMP_AbstractBlock_sub$q_27, TMP_AbstractBlock_remove_sub_28, TMP_AbstractBlock_xreftext_29, TMP_AbstractBlock_assign_caption_30, TMP_AbstractBlock_assign_numeral_31, TMP_AbstractBlock_reindex_sections_32;

      def.source_location = def.document = def.attributes = def.blocks = def.next_section_index = def.context = def.style = def.id = def.header = def.caption = def.title_converted = def.converted_title = def.title = def.subs = def.numeral = def.next_section_ordinal = nil;
      
      self.$attr_reader("blocks");
      self.$attr_writer("caption");
      self.$attr_accessor("content_model");
      self.$attr_accessor("level");
      self.$attr_accessor("numeral");
      Opal.alias(self, "number", "numeral");
      Opal.alias(self, "number=", "numeral=");
      self.$attr_accessor("source_location");
      self.$attr_accessor("style");
      self.$attr_reader("subs");
      
      Opal.def(self, '$initialize', TMP_AbstractBlock_initialize_1 = function $$initialize(parent, context, opts) {
        var $a, $iter = TMP_AbstractBlock_initialize_1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_AbstractBlock_initialize_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_AbstractBlock_initialize_1, false), $zuper, $iter);
        self.content_model = "compound";
        self.blocks = [];
        self.subs = [];
        self.id = (self.title = (self.title_converted = (self.caption = (self.numeral = (self.style = (self.default_subs = (self.source_location = nil)))))));
        if (context['$==']("document")) {
          self.level = 0
        } else if ($truthy(($truthy($a = parent) ? context['$!=']("section") : $a))) {
          self.level = parent.$level()
        } else {
          self.level = nil
        };
        self.next_section_index = 0;
        return (self.next_section_ordinal = 1);
      }, TMP_AbstractBlock_initialize_1.$$arity = -3);
      
      Opal.def(self, '$block?', TMP_AbstractBlock_block$q_2 = function() {
        var self = this;

        return true
      }, TMP_AbstractBlock_block$q_2.$$arity = 0);
      
      Opal.def(self, '$inline?', TMP_AbstractBlock_inline$q_3 = function() {
        var self = this;

        return false
      }, TMP_AbstractBlock_inline$q_3.$$arity = 0);
      
      Opal.def(self, '$file', TMP_AbstractBlock_file_4 = function $$file() {
        var $a, self = this;

        return ($truthy($a = self.source_location) ? self.source_location.$file() : $a)
      }, TMP_AbstractBlock_file_4.$$arity = 0);
      
      Opal.def(self, '$lineno', TMP_AbstractBlock_lineno_5 = function $$lineno() {
        var $a, self = this;

        return ($truthy($a = self.source_location) ? self.source_location.$lineno() : $a)
      }, TMP_AbstractBlock_lineno_5.$$arity = 0);
      
      Opal.def(self, '$convert', TMP_AbstractBlock_convert_6 = function $$convert() {
        var self = this;

        
        self.document.$playback_attributes(self.attributes);
        return self.$converter().$convert(self);
      }, TMP_AbstractBlock_convert_6.$$arity = 0);
      Opal.alias(self, "render", "convert");
      
      Opal.def(self, '$content', TMP_AbstractBlock_content_7 = function $$content() {
        var TMP_8, self = this;

        return $send(self.blocks, 'map', [], (TMP_8 = function(b){var self = TMP_8.$$s || this;

        
          
          if (b == null) {
            b = nil;
          };
          return b.$convert();}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8)).$join($$($nesting, 'LF'))
      }, TMP_AbstractBlock_content_7.$$arity = 0);
      
      Opal.def(self, '$context=', TMP_AbstractBlock_context$eq_9 = function(context) {
        var self = this;

        return (self.node_name = (self.context = context).$to_s())
      }, TMP_AbstractBlock_context$eq_9.$$arity = 1);
      
      Opal.def(self, '$<<', TMP_AbstractBlock_$lt$lt_10 = function(block) {
        var self = this, $writer = nil;

        
        if (block.$parent()['$=='](self)) {
        } else {
          
          $writer = [self];
          $send(block, 'parent=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        self.blocks['$<<'](block);
        return self;
      }, TMP_AbstractBlock_$lt$lt_10.$$arity = 1);
      Opal.alias(self, "append", "<<");
      
      Opal.def(self, '$blocks?', TMP_AbstractBlock_blocks$q_11 = function() {
        var self = this;

        return self.blocks['$empty?']()['$!']()
      }, TMP_AbstractBlock_blocks$q_11.$$arity = 0);
      
      Opal.def(self, '$sections?', TMP_AbstractBlock_sections$q_12 = function() {
        var self = this;

        return $rb_gt(self.next_section_index, 0)
      }, TMP_AbstractBlock_sections$q_12.$$arity = 0);
      
      Opal.def(self, '$find_by', TMP_AbstractBlock_find_by_13 = function $$find_by(selector) {
        var $iter = TMP_AbstractBlock_find_by_13.$$p, block = $iter || nil, self = this, result = nil;

        if ($iter) TMP_AbstractBlock_find_by_13.$$p = null;
        
        
        if ($iter) TMP_AbstractBlock_find_by_13.$$p = null;;
        
        if (selector == null) {
          selector = $hash2([], {});
        };
        try {
          return $send(self, 'find_by_internal', [selector, (result = [])], block.$to_proc())
        } catch ($err) {
          if (Opal.rescue($err, [$$$('::', 'StopIteration')])) {
            try {
              return result
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_AbstractBlock_find_by_13.$$arity = -1);
      Opal.alias(self, "query", "find_by");
      
      Opal.def(self, '$find_by_internal', TMP_AbstractBlock_find_by_internal_14 = function $$find_by_internal(selector, result) {
        var $iter = TMP_AbstractBlock_find_by_internal_14.$$p, block = $iter || nil, $a, $b, $c, $d, TMP_15, TMP_16, self = this, any_context = nil, context_selector = nil, style_selector = nil, role_selector = nil, id_selector = nil, verdict = nil, $case = nil;

        if ($iter) TMP_AbstractBlock_find_by_internal_14.$$p = null;
        
        
        if ($iter) TMP_AbstractBlock_find_by_internal_14.$$p = null;;
        
        if (selector == null) {
          selector = $hash2([], {});
        };
        
        if (result == null) {
          result = [];
        };
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = (any_context = (context_selector = selector['$[]']("context"))['$!']())) ? $d : context_selector['$=='](self.context))) ? ($truthy($d = (style_selector = selector['$[]']("style"))['$!']()) ? $d : style_selector['$=='](self.style)) : $c)) ? ($truthy($c = (role_selector = selector['$[]']("role"))['$!']()) ? $c : self['$has_role?'](role_selector)) : $b)) ? ($truthy($b = (id_selector = selector['$[]']("id"))['$!']()) ? $b : id_selector['$=='](self.id)) : $a))) {
          if ($truthy(id_selector)) {
            
            result.$replace((function() {if ((block !== nil)) {
              
              if ($truthy(Opal.yield1(block, self))) {
                return [self]
              } else {
                return []
              };
            } else {
              return [self]
            }; return nil; })());
            self.$raise($$$('::', 'StopIteration'));
          } else if ((block !== nil)) {
            if ($truthy((verdict = Opal.yield1(block, self)))) {
              $case = verdict;
              if ("skip_children"['$===']($case)) {
              result['$<<'](self);
              return result;}
              else if ("skip"['$===']($case)) {return result}
              else {result['$<<'](self)}}
          } else {
            result['$<<'](self)
          }};
        if ($truthy(($truthy($a = (($b = self.context['$==']("document")) ? ($truthy($c = any_context) ? $c : context_selector['$==']("section")) : self.context['$==']("document"))) ? self['$header?']() : $a))) {
          $send(self.header, 'find_by_internal', [selector, result], block.$to_proc())};
        if (context_selector['$==']("document")) {
        } else if (self.context['$==']("dlist")) {
          if ($truthy(($truthy($a = any_context) ? $a : context_selector['$!=']("section")))) {
            $send(self.blocks.$flatten(), 'each', [], (TMP_15 = function(li){var self = TMP_15.$$s || this;

            
              
              if (li == null) {
                li = nil;
              };
              if ($truthy(li)) {
                return $send(li, 'find_by_internal', [selector, result], block.$to_proc())
              } else {
                return nil
              };}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))}
        } else if ($truthy($send(self.blocks, 'each', [], (TMP_16 = function(b){var self = TMP_16.$$s || this, $e;

        
          
          if (b == null) {
            b = nil;
          };
          if ($truthy((($e = context_selector['$==']("section")) ? b.$context()['$!=']("section") : context_selector['$==']("section")))) {
            return nil;};
          return $send(b, 'find_by_internal', [selector, result], block.$to_proc());}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16)))) {};
        return result;
      }, TMP_AbstractBlock_find_by_internal_14.$$arity = -1);
      
      Opal.def(self, '$next_adjacent_block', TMP_AbstractBlock_next_adjacent_block_17 = function $$next_adjacent_block() {
        var self = this, sib = nil, p = nil;

        if (self.context['$==']("document")) {
          return nil
        } else if ($truthy((sib = (p = self.$parent()).$blocks()['$[]']($rb_plus(p.$blocks().$find_index(self), 1))))) {
          return sib
        } else {
          return p.$next_adjacent_block()
        }
      }, TMP_AbstractBlock_next_adjacent_block_17.$$arity = 0);
      
      Opal.def(self, '$sections', TMP_AbstractBlock_sections_18 = function $$sections() {
        var TMP_19, self = this;

        return $send(self.blocks, 'select', [], (TMP_19 = function(block){var self = TMP_19.$$s || this;

        
          
          if (block == null) {
            block = nil;
          };
          return block.$context()['$==']("section");}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19))
      }, TMP_AbstractBlock_sections_18.$$arity = 0);
      
      Opal.def(self, '$alt', TMP_AbstractBlock_alt_20 = function $$alt() {
        var self = this, text = nil;

        if ($truthy((text = self.attributes['$[]']("alt")))) {
          if (text['$=='](self.attributes['$[]']("default-alt"))) {
            return self.$sub_specialchars(text)
          } else {
            
            text = self.$sub_specialchars(text);
            if ($truthy($$($nesting, 'ReplaceableTextRx')['$match?'](text))) {
              
              return self.$sub_replacements(text);
            } else {
              return text
            };
          }
        } else {
          return nil
        }
      }, TMP_AbstractBlock_alt_20.$$arity = 0);
      
      Opal.def(self, '$caption', TMP_AbstractBlock_caption_21 = function $$caption() {
        var self = this;

        if (self.context['$==']("admonition")) {
          return self.attributes['$[]']("textlabel")
        } else {
          return self.caption
        }
      }, TMP_AbstractBlock_caption_21.$$arity = 0);
      
      Opal.def(self, '$captioned_title', TMP_AbstractBlock_captioned_title_22 = function $$captioned_title() {
        var self = this;

        return "" + (self.caption) + (self.$title())
      }, TMP_AbstractBlock_captioned_title_22.$$arity = 0);
      
      Opal.def(self, '$list_marker_keyword', TMP_AbstractBlock_list_marker_keyword_23 = function $$list_marker_keyword(list_type) {
        var $a, self = this;

        
        
        if (list_type == null) {
          list_type = nil;
        };
        return $$($nesting, 'ORDERED_LIST_KEYWORDS')['$[]'](($truthy($a = list_type) ? $a : self.style));
      }, TMP_AbstractBlock_list_marker_keyword_23.$$arity = -1);
      
      Opal.def(self, '$title', TMP_AbstractBlock_title_24 = function $$title() {
        var $a, $b, self = this;

        if ($truthy(self.title_converted)) {
          return self.converted_title
        } else {
          
          return (self.converted_title = ($truthy($a = ($truthy($b = (self.title_converted = true)) ? self.title : $b)) ? self.$apply_title_subs(self.title) : $a));
        }
      }, TMP_AbstractBlock_title_24.$$arity = 0);
      
      Opal.def(self, '$title?', TMP_AbstractBlock_title$q_25 = function() {
        var self = this;

        if ($truthy(self.title)) {
          return true
        } else {
          return false
        }
      }, TMP_AbstractBlock_title$q_25.$$arity = 0);
      
      Opal.def(self, '$title=', TMP_AbstractBlock_title$eq_26 = function(val) {
        var $a, self = this;

        return $a = [val, nil], (self.title = $a[0]), (self.title_converted = $a[1]), $a
      }, TMP_AbstractBlock_title$eq_26.$$arity = 1);
      
      Opal.def(self, '$sub?', TMP_AbstractBlock_sub$q_27 = function(name) {
        var self = this;

        return self.subs['$include?'](name)
      }, TMP_AbstractBlock_sub$q_27.$$arity = 1);
      
      Opal.def(self, '$remove_sub', TMP_AbstractBlock_remove_sub_28 = function $$remove_sub(sub) {
        var self = this;

        
        self.subs.$delete(sub);
        return nil;
      }, TMP_AbstractBlock_remove_sub_28.$$arity = 1);
      
      Opal.def(self, '$xreftext', TMP_AbstractBlock_xreftext_29 = function $$xreftext(xrefstyle) {
        var $a, $b, self = this, val = nil, $case = nil, quoted_title = nil, prefix = nil;

        
        
        if (xrefstyle == null) {
          xrefstyle = nil;
        };
        if ($truthy(($truthy($a = (val = self.$reftext())) ? val['$empty?']()['$!']() : $a))) {
          return val
        } else if ($truthy(($truthy($a = ($truthy($b = xrefstyle) ? self.title : $b)) ? self.caption : $a))) {
          return (function() {$case = xrefstyle;
          if ("full"['$===']($case)) {
          quoted_title = self.$sprintf(self.$sub_quotes((function() {if ($truthy(self.document.$compat_mode())) {
            return "``%s''"
          } else {
            return "\"`%s`\""
          }; return nil; })()), self.$title());
          if ($truthy(($truthy($a = self.numeral) ? (prefix = self.document.$attributes()['$[]']((function() {if (self.context['$==']("image")) {
            return "figure-caption"
          } else {
            return "" + (self.context) + "-caption"
          }; return nil; })())) : $a))) {
            return "" + (prefix) + " " + (self.numeral) + ", " + (quoted_title)
          } else {
            return "" + (self.caption.$chomp(". ")) + ", " + (quoted_title)
          };}
          else if ("short"['$===']($case)) {if ($truthy(($truthy($a = self.numeral) ? (prefix = self.document.$attributes()['$[]']((function() {if (self.context['$==']("image")) {
            return "figure-caption"
          } else {
            return "" + (self.context) + "-caption"
          }; return nil; })())) : $a))) {
            return "" + (prefix) + " " + (self.numeral)
          } else {
            return self.caption.$chomp(". ")
          }}
          else {return self.$title()}})()
        } else {
          return self.$title()
        };
      }, TMP_AbstractBlock_xreftext_29.$$arity = -1);
      
      Opal.def(self, '$assign_caption', TMP_AbstractBlock_assign_caption_30 = function $$assign_caption(value, key) {
        var $a, $b, self = this, prefix = nil;

        
        
        if (value == null) {
          value = nil;
        };
        
        if (key == null) {
          key = nil;
        };
        if ($truthy(($truthy($a = ($truthy($b = self.caption) ? $b : self.title['$!']())) ? $a : (self.caption = ($truthy($b = value) ? $b : self.document.$attributes()['$[]']("caption")))))) {
          return nil
        } else if ($truthy((prefix = self.document.$attributes()['$[]']("" + ((key = ($truthy($a = key) ? $a : self.context))) + "-caption")))) {
          
          self.caption = "" + (prefix) + " " + ((self.numeral = self.document.$increment_and_store_counter("" + (key) + "-number", self))) + ". ";
          return nil;
        } else {
          return nil
        };
      }, TMP_AbstractBlock_assign_caption_30.$$arity = -1);
      
      Opal.def(self, '$assign_numeral', TMP_AbstractBlock_assign_numeral_31 = function $$assign_numeral(section) {
        var $a, self = this, $writer = nil, like = nil, sectname = nil, caption = nil;

        
        self.next_section_index = $rb_plus((($writer = [self.next_section_index]), $send(section, 'index=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), 1);
        if ($truthy((like = section.$numbered()))) {
          if ((sectname = section.$sectname())['$==']("appendix")) {
            
            
            $writer = [self.document.$counter("appendix-number", "A")];
            $send(section, 'numeral=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy((caption = self.document.$attributes()['$[]']("appendix-caption")))) {
              
              $writer = ["" + (caption) + " " + (section.$numeral()) + ": "];
              $send(section, 'caption=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            } else {
              
              $writer = ["" + (section.$numeral()) + ". "];
              $send(section, 'caption=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
          } else if ($truthy(($truthy($a = sectname['$==']("chapter")) ? $a : like['$==']("chapter")))) {
            
            $writer = [self.document.$counter("chapter-number", 1)];
            $send(section, 'numeral=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          } else {
            
            
            $writer = [self.next_section_ordinal];
            $send(section, 'numeral=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.next_section_ordinal = $rb_plus(self.next_section_ordinal, 1);
          }};
        return nil;
      }, TMP_AbstractBlock_assign_numeral_31.$$arity = 1);
      return (Opal.def(self, '$reindex_sections', TMP_AbstractBlock_reindex_sections_32 = function $$reindex_sections() {
        var TMP_33, self = this;

        
        self.next_section_index = 0;
        self.next_section_ordinal = 1;
        return $send(self.blocks, 'each', [], (TMP_33 = function(block){var self = TMP_33.$$s || this;

        
          
          if (block == null) {
            block = nil;
          };
          if (block.$context()['$==']("section")) {
            
            self.$assign_numeral(block);
            return block.$reindex_sections();
          } else {
            return nil
          };}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33));
      }, TMP_AbstractBlock_reindex_sections_32.$$arity = 0), nil) && 'reindex_sections';
    })($nesting[0], $$($nesting, 'AbstractNode'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/attribute_list"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash = Opal.hash, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$new', '$[]', '$update', '$parse', '$parse_attribute', '$eos?', '$skip_delimiter', '$+', '$rekey', '$each_with_index', '$[]=', '$-', '$skip_blank', '$==', '$peek', '$parse_attribute_value', '$get_byte', '$start_with?', '$scan_name', '$!', '$!=', '$*', '$scan_to_delimiter', '$===', '$include?', '$delete', '$each', '$split', '$empty?', '$strip', '$apply_subs', '$scan_to_quote', '$gsub', '$skip', '$scan']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $AttributeList(){};
      var self = $AttributeList = $klass($base, $super, 'AttributeList', $AttributeList);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_AttributeList_initialize_1, TMP_AttributeList_parse_into_2, TMP_AttributeList_parse_3, TMP_AttributeList_rekey_4, TMP_AttributeList_rekey_5, TMP_AttributeList_parse_attribute_7, TMP_AttributeList_parse_attribute_value_9, TMP_AttributeList_skip_blank_10, TMP_AttributeList_skip_delimiter_11, TMP_AttributeList_scan_name_12, TMP_AttributeList_scan_to_delimiter_13, TMP_AttributeList_scan_to_quote_14;

      def.attributes = def.scanner = def.delimiter = def.block = def.delimiter_skip_pattern = def.delimiter_boundary_pattern = nil;
      
      Opal.const_set($nesting[0], 'BACKSLASH', "\\");
      Opal.const_set($nesting[0], 'APOS', "'");
      Opal.const_set($nesting[0], 'BoundaryRxs', $hash("\"", /.*?[^\\](?=")/, $$($nesting, 'APOS'), /.*?[^\\](?=')/, ",", /.*?(?=[ \t]*(,|$))/));
      Opal.const_set($nesting[0], 'EscapedQuotes', $hash("\"", "\\\"", $$($nesting, 'APOS'), "\\'"));
      Opal.const_set($nesting[0], 'NameRx', new RegExp("" + ($$($nesting, 'CG_WORD')) + "[" + ($$($nesting, 'CC_WORD')) + "\\-.]*"));
      Opal.const_set($nesting[0], 'BlankRx', /[ \t]+/);
      Opal.const_set($nesting[0], 'SkipRxs', $hash2(["blank", ","], {"blank": $$($nesting, 'BlankRx'), ",": /[ \t]*(,|$)/}));
      
      Opal.def(self, '$initialize', TMP_AttributeList_initialize_1 = function $$initialize(source, block, delimiter) {
        var self = this;

        
        
        if (block == null) {
          block = nil;
        };
        
        if (delimiter == null) {
          delimiter = ",";
        };
        self.scanner = $$$('::', 'StringScanner').$new(source);
        self.block = block;
        self.delimiter = delimiter;
        self.delimiter_skip_pattern = $$($nesting, 'SkipRxs')['$[]'](delimiter);
        self.delimiter_boundary_pattern = $$($nesting, 'BoundaryRxs')['$[]'](delimiter);
        return (self.attributes = nil);
      }, TMP_AttributeList_initialize_1.$$arity = -2);
      
      Opal.def(self, '$parse_into', TMP_AttributeList_parse_into_2 = function $$parse_into(attributes, posattrs) {
        var self = this;

        
        
        if (posattrs == null) {
          posattrs = [];
        };
        return attributes.$update(self.$parse(posattrs));
      }, TMP_AttributeList_parse_into_2.$$arity = -2);
      
      Opal.def(self, '$parse', TMP_AttributeList_parse_3 = function $$parse(posattrs) {
        var $a, self = this, index = nil;

        
        
        if (posattrs == null) {
          posattrs = [];
        };
        if ($truthy(self.attributes)) {
          return self.attributes};
        self.attributes = $hash2([], {});
        index = 0;
        while ($truthy(self.$parse_attribute(index, posattrs))) {
          
          if ($truthy(self.scanner['$eos?']())) {
            break;};
          self.$skip_delimiter();
          index = $rb_plus(index, 1);
        };
        return self.attributes;
      }, TMP_AttributeList_parse_3.$$arity = -1);
      
      Opal.def(self, '$rekey', TMP_AttributeList_rekey_4 = function $$rekey(posattrs) {
        var self = this;

        return $$($nesting, 'AttributeList').$rekey(self.attributes, posattrs)
      }, TMP_AttributeList_rekey_4.$$arity = 1);
      Opal.defs(self, '$rekey', TMP_AttributeList_rekey_5 = function $$rekey(attributes, pos_attrs) {
        var TMP_6, self = this;

        
        $send(pos_attrs, 'each_with_index', [], (TMP_6 = function(key, index){var self = TMP_6.$$s || this, pos = nil, val = nil, $writer = nil;

        
          
          if (key == null) {
            key = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          if ($truthy(key)) {
          } else {
            return nil;
          };
          pos = $rb_plus(index, 1);
          if ($truthy((val = attributes['$[]'](pos)))) {
            
            $writer = [key, val];
            $send(attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6));
        return attributes;
      }, TMP_AttributeList_rekey_5.$$arity = 2);
      
      Opal.def(self, '$parse_attribute', TMP_AttributeList_parse_attribute_7 = function $$parse_attribute(index, pos_attrs) {
        var $a, TMP_8, self = this, single_quoted_value = nil, first = nil, name = nil, value = nil, skipped = nil, c = nil, $case = nil, $writer = nil, resolved_name = nil, pos_name = nil;

        
        
        if (index == null) {
          index = 0;
        };
        
        if (pos_attrs == null) {
          pos_attrs = [];
        };
        single_quoted_value = false;
        self.$skip_blank();
        if ((first = self.scanner.$peek(1))['$==']("\"")) {
          
          name = self.$parse_attribute_value(self.scanner.$get_byte());
          value = nil;
        } else if (first['$==']($$($nesting, 'APOS'))) {
          
          name = self.$parse_attribute_value(self.scanner.$get_byte());
          value = nil;
          if ($truthy(name['$start_with?']($$($nesting, 'APOS')))) {
          } else {
            single_quoted_value = true
          };
        } else {
          
          name = self.$scan_name();
          skipped = 0;
          c = nil;
          if ($truthy(self.scanner['$eos?']())) {
            if ($truthy(name)) {
            } else {
              return false
            }
          } else {
            
            skipped = ($truthy($a = self.$skip_blank()) ? $a : 0);
            c = self.scanner.$get_byte();
          };
          if ($truthy(($truthy($a = c['$!']()) ? $a : c['$=='](self.delimiter)))) {
            value = nil
          } else if ($truthy(($truthy($a = c['$!=']("=")) ? $a : name['$!']()))) {
            
            name = "" + (name) + ($rb_times(" ", skipped)) + (c) + (self.$scan_to_delimiter());
            value = nil;
          } else {
            
            self.$skip_blank();
            if ($truthy(self.scanner.$peek(1))) {
              if ((c = self.scanner.$get_byte())['$==']("\"")) {
                value = self.$parse_attribute_value(c)
              } else if (c['$==']($$($nesting, 'APOS'))) {
                
                value = self.$parse_attribute_value(c);
                if ($truthy(value['$start_with?']($$($nesting, 'APOS')))) {
                } else {
                  single_quoted_value = true
                };
              } else if (c['$=='](self.delimiter)) {
                value = ""
              } else {
                
                value = "" + (c) + (self.$scan_to_delimiter());
                if (value['$==']("None")) {
                  return true};
              }};
          };
        };
        if ($truthy(value)) {
          $case = name;
          if ("options"['$===']($case) || "opts"['$===']($case)) {
          if ($truthy(value['$include?'](","))) {
            
            if ($truthy(value['$include?'](" "))) {
              value = value.$delete(" ")};
            $send(value.$split(","), 'each', [], (TMP_8 = function(opt){var self = TMP_8.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

            
              
              if (opt == null) {
                opt = nil;
              };
              if ($truthy(opt['$empty?']())) {
                return nil
              } else {
                
                $writer = ["" + (opt) + "-option", ""];
                $send(self.attributes, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              };}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
          } else {
            
            $writer = ["" + ((value = value.$strip())) + "-option", ""];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          
          $writer = ["options", value];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;}
          else {if ($truthy(($truthy($a = single_quoted_value) ? self.block : $a))) {
            $case = name;
            if ("title"['$===']($case) || "reftext"['$===']($case)) {
            $writer = [name, value];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];}
            else {
            $writer = [name, self.block.$apply_subs(value)];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];}
          } else {
            
            $writer = [name, value];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }}
        } else {
          
          resolved_name = (function() {if ($truthy(($truthy($a = single_quoted_value) ? self.block : $a))) {
            
            return self.block.$apply_subs(name);
          } else {
            return name
          }; return nil; })();
          if ($truthy((pos_name = pos_attrs['$[]'](index)))) {
            
            $writer = [pos_name, resolved_name];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          
          $writer = [$rb_plus(index, 1), resolved_name];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        };
        return true;
      }, TMP_AttributeList_parse_attribute_7.$$arity = -1);
      
      Opal.def(self, '$parse_attribute_value', TMP_AttributeList_parse_attribute_value_9 = function $$parse_attribute_value(quote) {
        var self = this, value = nil;

        
        if (self.scanner.$peek(1)['$=='](quote)) {
          
          self.scanner.$get_byte();
          return "";};
        if ($truthy((value = self.$scan_to_quote(quote)))) {
          
          self.scanner.$get_byte();
          if ($truthy(value['$include?']($$($nesting, 'BACKSLASH')))) {
            return value.$gsub($$($nesting, 'EscapedQuotes')['$[]'](quote), quote)
          } else {
            return value
          };
        } else {
          return "" + (quote) + (self.$scan_to_delimiter())
        };
      }, TMP_AttributeList_parse_attribute_value_9.$$arity = 1);
      
      Opal.def(self, '$skip_blank', TMP_AttributeList_skip_blank_10 = function $$skip_blank() {
        var self = this;

        return self.scanner.$skip($$($nesting, 'BlankRx'))
      }, TMP_AttributeList_skip_blank_10.$$arity = 0);
      
      Opal.def(self, '$skip_delimiter', TMP_AttributeList_skip_delimiter_11 = function $$skip_delimiter() {
        var self = this;

        return self.scanner.$skip(self.delimiter_skip_pattern)
      }, TMP_AttributeList_skip_delimiter_11.$$arity = 0);
      
      Opal.def(self, '$scan_name', TMP_AttributeList_scan_name_12 = function $$scan_name() {
        var self = this;

        return self.scanner.$scan($$($nesting, 'NameRx'))
      }, TMP_AttributeList_scan_name_12.$$arity = 0);
      
      Opal.def(self, '$scan_to_delimiter', TMP_AttributeList_scan_to_delimiter_13 = function $$scan_to_delimiter() {
        var self = this;

        return self.scanner.$scan(self.delimiter_boundary_pattern)
      }, TMP_AttributeList_scan_to_delimiter_13.$$arity = 0);
      return (Opal.def(self, '$scan_to_quote', TMP_AttributeList_scan_to_quote_14 = function $$scan_to_quote(quote) {
        var self = this;

        return self.scanner.$scan($$($nesting, 'BoundaryRxs')['$[]'](quote))
      }, TMP_AttributeList_scan_to_quote_14.$$arity = 1), nil) && 'scan_to_quote';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/block"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$default=', '$-', '$attr_accessor', '$[]', '$key?', '$==', '$===', '$drop', '$delete', '$[]=', '$lock_in_subs', '$nil_or_empty?', '$normalize_lines_from_string', '$apply_subs', '$join', '$<', '$size', '$empty?', '$rstrip', '$shift', '$pop', '$warn', '$logger', '$to_s', '$class', '$object_id', '$inspect']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Block(){};
      var self = $Block = $klass($base, $super, 'Block', $Block);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Block_initialize_1, TMP_Block_content_2, TMP_Block_source_3, TMP_Block_to_s_4, $writer = nil;

      def.attributes = def.content_model = def.lines = def.subs = def.blocks = def.context = def.style = nil;
      
      
      $writer = ["simple"];
      $send(Opal.const_set($nesting[0], 'DEFAULT_CONTENT_MODEL', $hash2(["audio", "image", "listing", "literal", "stem", "open", "page_break", "pass", "thematic_break", "video"], {"audio": "empty", "image": "empty", "listing": "verbatim", "literal": "verbatim", "stem": "raw", "open": "compound", "page_break": "empty", "pass": "raw", "thematic_break": "empty", "video": "empty"})), 'default=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.alias(self, "blockname", "context");
      self.$attr_accessor("lines");
      
      Opal.def(self, '$initialize', TMP_Block_initialize_1 = function $$initialize(parent, context, opts) {
        var $a, $iter = TMP_Block_initialize_1.$$p, $yield = $iter || nil, self = this, subs = nil, $writer = nil, raw_source = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Block_initialize_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Block_initialize_1, false), $zuper, $iter);
        self.content_model = ($truthy($a = opts['$[]']("content_model")) ? $a : $$($nesting, 'DEFAULT_CONTENT_MODEL')['$[]'](context));
        if ($truthy(opts['$key?']("subs"))) {
          if ($truthy((subs = opts['$[]']("subs")))) {
            
            if (subs['$==']("default")) {
              self.default_subs = opts['$[]']("default_subs")
            } else if ($truthy($$$('::', 'Array')['$==='](subs))) {
              
              self.default_subs = subs.$drop(0);
              self.attributes.$delete("subs");
            } else {
              
              self.default_subs = nil;
              
              $writer = ["subs", "" + (subs)];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            self.$lock_in_subs();
          } else {
            
            self.default_subs = [];
            self.attributes.$delete("subs");
          }
        } else {
          self.default_subs = nil
        };
        if ($truthy((raw_source = opts['$[]']("source"))['$nil_or_empty?']())) {
          return (self.lines = [])
        } else if ($truthy($$$('::', 'String')['$==='](raw_source))) {
          return (self.lines = $$($nesting, 'Helpers').$normalize_lines_from_string(raw_source))
        } else {
          return (self.lines = raw_source.$drop(0))
        };
      }, TMP_Block_initialize_1.$$arity = -3);
      
      Opal.def(self, '$content', TMP_Block_content_2 = function $$content() {
        var $a, $b, $iter = TMP_Block_content_2.$$p, $yield = $iter || nil, self = this, $case = nil, result = nil, first = nil, last = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Block_content_2.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return (function() {$case = self.content_model;
        if ("compound"['$===']($case)) {return $send(self, Opal.find_super_dispatcher(self, 'content', TMP_Block_content_2, false), $zuper, $iter)}
        else if ("simple"['$===']($case)) {return self.$apply_subs(self.lines.$join($$($nesting, 'LF')), self.subs)}
        else if ("verbatim"['$===']($case) || "raw"['$===']($case)) {
        result = self.$apply_subs(self.lines, self.subs);
        if ($truthy($rb_lt(result.$size(), 2))) {
          return result['$[]'](0)
        } else {
          
          while ($truthy(($truthy($b = (first = result['$[]'](0))) ? first.$rstrip()['$empty?']() : $b))) {
            result.$shift()
          };
          while ($truthy(($truthy($b = (last = result['$[]'](-1))) ? last.$rstrip()['$empty?']() : $b))) {
            result.$pop()
          };
          return result.$join($$($nesting, 'LF'));
        };}
        else {
        if (self.content_model['$==']("empty")) {
        } else {
          self.$logger().$warn("" + "Unknown content model '" + (self.content_model) + "' for block: " + (self.$to_s()))
        };
        return nil;}})()
      }, TMP_Block_content_2.$$arity = 0);
      
      Opal.def(self, '$source', TMP_Block_source_3 = function $$source() {
        var self = this;

        return self.lines.$join($$($nesting, 'LF'))
      }, TMP_Block_source_3.$$arity = 0);
      return (Opal.def(self, '$to_s', TMP_Block_to_s_4 = function $$to_s() {
        var self = this, content_summary = nil;

        
        content_summary = (function() {if (self.content_model['$==']("compound")) {
          return "" + "blocks: " + (self.blocks.$size())
        } else {
          return "" + "lines: " + (self.lines.$size())
        }; return nil; })();
        return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {context: " + (self.context.$inspect()) + ", content_model: " + (self.content_model.$inspect()) + ", style: " + (self.style.$inspect()) + ", " + (content_summary) + "}>";
      }, TMP_Block_to_s_4.$$arity = 0), nil) && 'to_s';
    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/callouts"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$next_list', '$<<', '$current_list', '$to_i', '$generate_next_callout_id', '$+', '$<=', '$size', '$[]', '$-', '$chop', '$join', '$map', '$==', '$<', '$generate_callout_id']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Callouts(){};
      var self = $Callouts = $klass($base, $super, 'Callouts', $Callouts);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Callouts_initialize_1, TMP_Callouts_register_2, TMP_Callouts_read_next_id_3, TMP_Callouts_callout_ids_4, TMP_Callouts_current_list_6, TMP_Callouts_next_list_7, TMP_Callouts_rewind_8, TMP_Callouts_generate_next_callout_id_9, TMP_Callouts_generate_callout_id_10;

      def.co_index = def.lists = def.list_index = nil;
      
      
      Opal.def(self, '$initialize', TMP_Callouts_initialize_1 = function $$initialize() {
        var self = this;

        
        self.lists = [];
        self.list_index = 0;
        return self.$next_list();
      }, TMP_Callouts_initialize_1.$$arity = 0);
      
      Opal.def(self, '$register', TMP_Callouts_register_2 = function $$register(li_ordinal) {
        var self = this, id = nil;

        
        self.$current_list()['$<<']($hash2(["ordinal", "id"], {"ordinal": li_ordinal.$to_i(), "id": (id = self.$generate_next_callout_id())}));
        self.co_index = $rb_plus(self.co_index, 1);
        return id;
      }, TMP_Callouts_register_2.$$arity = 1);
      
      Opal.def(self, '$read_next_id', TMP_Callouts_read_next_id_3 = function $$read_next_id() {
        var self = this, id = nil, list = nil;

        
        id = nil;
        list = self.$current_list();
        if ($truthy($rb_le(self.co_index, list.$size()))) {
          id = list['$[]']($rb_minus(self.co_index, 1))['$[]']("id")};
        self.co_index = $rb_plus(self.co_index, 1);
        return id;
      }, TMP_Callouts_read_next_id_3.$$arity = 0);
      
      Opal.def(self, '$callout_ids', TMP_Callouts_callout_ids_4 = function $$callout_ids(li_ordinal) {
        var TMP_5, self = this;

        return $send(self.$current_list(), 'map', [], (TMP_5 = function(it){var self = TMP_5.$$s || this;

        
          
          if (it == null) {
            it = nil;
          };
          if (it['$[]']("ordinal")['$=='](li_ordinal)) {
            return "" + (it['$[]']("id")) + " "
          } else {
            return ""
          };}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5)).$join().$chop()
      }, TMP_Callouts_callout_ids_4.$$arity = 1);
      
      Opal.def(self, '$current_list', TMP_Callouts_current_list_6 = function $$current_list() {
        var self = this;

        return self.lists['$[]']($rb_minus(self.list_index, 1))
      }, TMP_Callouts_current_list_6.$$arity = 0);
      
      Opal.def(self, '$next_list', TMP_Callouts_next_list_7 = function $$next_list() {
        var self = this;

        
        self.list_index = $rb_plus(self.list_index, 1);
        if ($truthy($rb_lt(self.lists.$size(), self.list_index))) {
          self.lists['$<<']([])};
        self.co_index = 1;
        return nil;
      }, TMP_Callouts_next_list_7.$$arity = 0);
      
      Opal.def(self, '$rewind', TMP_Callouts_rewind_8 = function $$rewind() {
        var self = this;

        
        self.list_index = 1;
        self.co_index = 1;
        return nil;
      }, TMP_Callouts_rewind_8.$$arity = 0);
      
      Opal.def(self, '$generate_next_callout_id', TMP_Callouts_generate_next_callout_id_9 = function $$generate_next_callout_id() {
        var self = this;

        return self.$generate_callout_id(self.list_index, self.co_index)
      }, TMP_Callouts_generate_next_callout_id_9.$$arity = 0);
      return (Opal.def(self, '$generate_callout_id', TMP_Callouts_generate_callout_id_10 = function $$generate_callout_id(list_index, co_index) {
        var self = this;

        return "" + "CO" + (list_index) + "-" + (co_index)
      }, TMP_Callouts_generate_callout_id_10.$$arity = 2), nil) && 'generate_callout_id';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/converter/base"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$node_name', '$empty?', '$send', '$content']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      function $Converter() {};
      var self = $Converter = $module($base, 'Converter', $Converter);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      nil
    })($nesting[0], $nesting);
    (function($base, $super, $parent_nesting) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      
      self.$include($$($nesting, 'Logging'));
      return self.$include($$($nesting, 'Converter'));
    })($$($nesting, 'Converter'), null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $BuiltIn(){};
      var self = $BuiltIn = $klass($base, $super, 'BuiltIn', $BuiltIn);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_BuiltIn_initialize_1, TMP_BuiltIn_convert_2, TMP_BuiltIn_content_3, TMP_BuiltIn_skip_4;

      
      self.$include($$($nesting, 'Logging'));
      
      Opal.def(self, '$initialize', TMP_BuiltIn_initialize_1 = function $$initialize(backend, opts) {
        var self = this;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        return nil;
      }, TMP_BuiltIn_initialize_1.$$arity = -2);
      
      Opal.def(self, '$convert', TMP_BuiltIn_convert_2 = function $$convert(node, transform, opts) {
        var $a, self = this;

        
        
        if (transform == null) {
          transform = nil;
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        transform = ($truthy($a = transform) ? $a : node.$node_name());
        if ($truthy(opts['$empty?']())) {
          
          return self.$send(transform, node);
        } else {
          
          return self.$send(transform, node, opts);
        };
      }, TMP_BuiltIn_convert_2.$$arity = -2);
      Opal.alias(self, "handles?", "respond_to?");
      
      Opal.def(self, '$content', TMP_BuiltIn_content_3 = function $$content(node) {
        var self = this;

        return node.$content()
      }, TMP_BuiltIn_content_3.$$arity = 1);
      Opal.alias(self, "pass", "content");
      return (Opal.def(self, '$skip', TMP_BuiltIn_skip_4 = function $$skip(node) {
        var self = this;

        return nil
      }, TMP_BuiltIn_skip_4.$$arity = 1), nil) && 'skip';
    })($$($nesting, 'Converter'), null, $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/converter/factory"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$new', '$require', '$include?', '$include', '$warn', '$logger', '$register', '$default', '$resolve', '$create', '$converters', '$unregister_all', '$attr_reader', '$each', '$[]=', '$-', '$==', '$[]', '$clear', '$===', '$supports_templates?', '$to_s', '$key?']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      function $Converter() {};
      var self = $Converter = $module($base, 'Converter', $Converter);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Factory(){};
        var self = $Factory = $klass($base, $super, 'Factory', $Factory);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Factory_initialize_7, TMP_Factory_register_8, TMP_Factory_resolve_10, TMP_Factory_unregister_all_11, TMP_Factory_create_12;

        def.converters = def.star_converter = nil;
        
        self.__default__ = nil;
        (function(self, $parent_nesting) {
          var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_default_1, TMP_register_2, TMP_resolve_3, TMP_create_4, TMP_converters_5, TMP_unregister_all_6;

          
          
          Opal.def(self, '$default', TMP_default_1 = function(initialize_singleton) {
            var $a, $b, $c, self = this;
            if (self.__default__ == null) self.__default__ = nil;

            
            
            if (initialize_singleton == null) {
              initialize_singleton = true;
            };
            if ($truthy(initialize_singleton)) {
            } else {
              return ($truthy($a = self.__default__) ? $a : self.$new())
            };
            return (self.__default__ = ($truthy($a = self.__default__) ? $a : (function() { try {
              
              if ($truthy((($c = $$$('::', 'Concurrent', 'skip_raise')) && ($b = $$$($c, 'Hash', 'skip_raise')) ? 'constant' : nil))) {
              } else {
                self.$require((function() {if ($truthy($$$('::', 'RUBY_MIN_VERSION_1_9'))) {
                  return "concurrent/hash"
                } else {
                  return "asciidoctor/core_ext/1.8.7/concurrent/hash"
                }; return nil; })())
              };
              return self.$new($$$($$$('::', 'Concurrent'), 'Hash').$new());
            } catch ($err) {
              if (Opal.rescue($err, [$$$('::', 'LoadError')])) {
                try {
                  
                  if ($truthy(self['$include?']($$($nesting, 'Logging')))) {
                  } else {
                    self.$include($$($nesting, 'Logging'))
                  };
                  self.$logger().$warn("gem 'concurrent-ruby' is not installed. This gem is recommended when registering custom converters.");
                  return self.$new();
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }})()));
          }, TMP_default_1.$$arity = -1);
          
          Opal.def(self, '$register', TMP_register_2 = function $$register(converter, backends) {
            var self = this;

            
            
            if (backends == null) {
              backends = ["*"];
            };
            return self.$default().$register(converter, backends);
          }, TMP_register_2.$$arity = -2);
          
          Opal.def(self, '$resolve', TMP_resolve_3 = function $$resolve(backend) {
            var self = this;

            return self.$default().$resolve(backend)
          }, TMP_resolve_3.$$arity = 1);
          
          Opal.def(self, '$create', TMP_create_4 = function $$create(backend, opts) {
            var self = this;

            
            
            if (opts == null) {
              opts = $hash2([], {});
            };
            return self.$default().$create(backend, opts);
          }, TMP_create_4.$$arity = -2);
          
          Opal.def(self, '$converters', TMP_converters_5 = function $$converters() {
            var self = this;

            return self.$default().$converters()
          }, TMP_converters_5.$$arity = 0);
          return (Opal.def(self, '$unregister_all', TMP_unregister_all_6 = function $$unregister_all() {
            var self = this;

            return self.$default().$unregister_all()
          }, TMP_unregister_all_6.$$arity = 0), nil) && 'unregister_all';
        })(Opal.get_singleton_class(self), $nesting);
        self.$attr_reader("converters");
        
        Opal.def(self, '$initialize', TMP_Factory_initialize_7 = function $$initialize(converters) {
          var $a, self = this;

          
          
          if (converters == null) {
            converters = nil;
          };
          self.converters = ($truthy($a = converters) ? $a : $hash2([], {}));
          return (self.star_converter = nil);
        }, TMP_Factory_initialize_7.$$arity = -1);
        
        Opal.def(self, '$register', TMP_Factory_register_8 = function $$register(converter, backends) {
          var TMP_9, self = this;

          
          
          if (backends == null) {
            backends = ["*"];
          };
          $send(backends, 'each', [], (TMP_9 = function(backend){var self = TMP_9.$$s || this, $writer = nil;
            if (self.converters == null) self.converters = nil;

          
            
            if (backend == null) {
              backend = nil;
            };
            
            $writer = [backend, converter];
            $send(self.converters, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (backend['$==']("*")) {
              return (self.star_converter = converter)
            } else {
              return nil
            };}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
          return nil;
        }, TMP_Factory_register_8.$$arity = -2);
        
        Opal.def(self, '$resolve', TMP_Factory_resolve_10 = function $$resolve(backend) {
          var $a, $b, self = this;

          return ($truthy($a = self.converters) ? ($truthy($b = self.converters['$[]'](backend)) ? $b : self.star_converter) : $a)
        }, TMP_Factory_resolve_10.$$arity = 1);
        
        Opal.def(self, '$unregister_all', TMP_Factory_unregister_all_11 = function $$unregister_all() {
          var self = this;

          
          self.converters.$clear();
          return (self.star_converter = nil);
        }, TMP_Factory_unregister_all_11.$$arity = 0);
        return (Opal.def(self, '$create', TMP_Factory_create_12 = function $$create(backend, opts) {
          var $a, $b, $c, $d, $e, $f, $g, $h, $i, $j, $k, $l, $m, $n, $o, $p, $q, $r, self = this, converter = nil, base_converter = nil, $case = nil, template_converter = nil;

          
          
          if (opts == null) {
            opts = $hash2([], {});
          };
          if ($truthy((converter = self.$resolve(backend)))) {
            
            base_converter = (function() {if ($truthy($$$('::', 'Class')['$==='](converter))) {
              
              return converter.$new(backend, opts);
            } else {
              return converter
            }; return nil; })();
            if ($truthy(($truthy($a = $$$($$($nesting, 'Converter'), 'BackendInfo')['$==='](base_converter)) ? base_converter['$supports_templates?']() : $a))) {
            } else {
              return base_converter
            };
          } else {
            $case = backend;
            if ("html5"['$===']($case)) {
            if ($truthy((($c = $$$('::', 'Asciidoctor', 'skip_raise')) && ($b = $$$($c, 'Converter', 'skip_raise')) && ($a = $$$($b, 'Html5Converter', 'skip_raise')) ? 'constant' : nil))) {
            } else {
              self.$require("asciidoctor/converter/html5".$to_s())
            };
            base_converter = $$($nesting, 'Html5Converter').$new(backend, opts);}
            else if ("docbook5"['$===']($case)) {
            if ($truthy((($f = $$$('::', 'Asciidoctor', 'skip_raise')) && ($e = $$$($f, 'Converter', 'skip_raise')) && ($d = $$$($e, 'DocBook5Converter', 'skip_raise')) ? 'constant' : nil))) {
            } else {
              self.$require("asciidoctor/converter/docbook5".$to_s())
            };
            base_converter = $$($nesting, 'DocBook5Converter').$new(backend, opts);}
            else if ("docbook45"['$===']($case)) {
            if ($truthy((($i = $$$('::', 'Asciidoctor', 'skip_raise')) && ($h = $$$($i, 'Converter', 'skip_raise')) && ($g = $$$($h, 'DocBook45Converter', 'skip_raise')) ? 'constant' : nil))) {
            } else {
              self.$require("asciidoctor/converter/docbook45".$to_s())
            };
            base_converter = $$($nesting, 'DocBook45Converter').$new(backend, opts);}
            else if ("manpage"['$===']($case)) {
            if ($truthy((($l = $$$('::', 'Asciidoctor', 'skip_raise')) && ($k = $$$($l, 'Converter', 'skip_raise')) && ($j = $$$($k, 'ManPageConverter', 'skip_raise')) ? 'constant' : nil))) {
            } else {
              self.$require("asciidoctor/converter/manpage".$to_s())
            };
            base_converter = $$($nesting, 'ManPageConverter').$new(backend, opts);}
          };
          if ($truthy(opts['$key?']("template_dirs"))) {
          } else {
            return base_converter
          };
          if ($truthy((($o = $$$('::', 'Asciidoctor', 'skip_raise')) && ($n = $$$($o, 'Converter', 'skip_raise')) && ($m = $$$($n, 'TemplateConverter', 'skip_raise')) ? 'constant' : nil))) {
          } else {
            self.$require("asciidoctor/converter/template".$to_s())
          };
          template_converter = $$($nesting, 'TemplateConverter').$new(backend, opts['$[]']("template_dirs"), opts);
          if ($truthy((($r = $$$('::', 'Asciidoctor', 'skip_raise')) && ($q = $$$($r, 'Converter', 'skip_raise')) && ($p = $$$($q, 'CompositeConverter', 'skip_raise')) ? 'constant' : nil))) {
          } else {
            self.$require("asciidoctor/converter/composite".$to_s())
          };
          return $$($nesting, 'CompositeConverter').$new(backend, template_converter, base_converter);
        }, TMP_Factory_create_12.$$arity = -2), nil) && 'create';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/converter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$==', '$send', '$include?', '$setup_backend_info', '$raise', '$class', '$sub', '$[]', '$slice', '$length', '$[]=', '$backend_info', '$-', '$extend', '$include', '$respond_to?', '$write', '$chomp', '$require']);
  
  (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      function $Converter() {};
      var self = $Converter = $module($base, 'Converter', $Converter);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Converter_initialize_13, TMP_Converter_convert_14;

      
      (function($base, $parent_nesting) {
        function $Config() {};
        var self = $Config = $module($base, 'Config', $Config);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Config_register_for_1;

        
        Opal.def(self, '$register_for', TMP_Config_register_for_1 = function $$register_for($a) {
          var $post_args, backends, TMP_2, TMP_3, self = this, metaclass = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          backends = $post_args;;
          $$($nesting, 'Factory').$register(self, backends);
          metaclass = (function(self, $parent_nesting) {
            var def = self.prototype, $nesting = [self].concat($parent_nesting);

            return self
          })(Opal.get_singleton_class(self), $nesting);
          if (backends['$=='](["*"])) {
            $send(metaclass, 'send', ["define_method", "converts?"], (TMP_2 = function(name){var self = TMP_2.$$s || this;

            
              
              if (name == null) {
                name = nil;
              };
              return true;}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))
          } else {
            $send(metaclass, 'send', ["define_method", "converts?"], (TMP_3 = function(name){var self = TMP_3.$$s || this;

            
              
              if (name == null) {
                name = nil;
              };
              return backends['$include?'](name);}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
          };
          return nil;
        }, TMP_Config_register_for_1.$$arity = -1)
      })($nesting[0], $nesting);
      (function($base, $parent_nesting) {
        function $BackendInfo() {};
        var self = $BackendInfo = $module($base, 'BackendInfo', $BackendInfo);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_BackendInfo_backend_info_4, TMP_BackendInfo_setup_backend_info_5, TMP_BackendInfo_filetype_6, TMP_BackendInfo_basebackend_7, TMP_BackendInfo_outfilesuffix_8, TMP_BackendInfo_htmlsyntax_9, TMP_BackendInfo_supports_templates_10, TMP_BackendInfo_supports_templates$q_11;

        
        
        Opal.def(self, '$backend_info', TMP_BackendInfo_backend_info_4 = function $$backend_info() {
          var $a, self = this;
          if (self.backend_info == null) self.backend_info = nil;

          return (self.backend_info = ($truthy($a = self.backend_info) ? $a : self.$setup_backend_info()))
        }, TMP_BackendInfo_backend_info_4.$$arity = 0);
        
        Opal.def(self, '$setup_backend_info', TMP_BackendInfo_setup_backend_info_5 = function $$setup_backend_info() {
          var self = this, base = nil, ext = nil, type = nil, syntax = nil;
          if (self.backend == null) self.backend = nil;

          
          if ($truthy(self.backend)) {
          } else {
            self.$raise($$$('::', 'ArgumentError'), "" + "Cannot determine backend for converter: " + (self.$class()))
          };
          base = self.backend.$sub($$($nesting, 'TrailingDigitsRx'), "");
          if ($truthy((ext = $$($nesting, 'DEFAULT_EXTENSIONS')['$[]'](base)))) {
            type = ext.$slice(1, ext.$length())
          } else {
            
            base = "html";
            ext = ".html";
            type = "html";
            syntax = "html";
          };
          return $hash2(["basebackend", "outfilesuffix", "filetype", "htmlsyntax"], {"basebackend": base, "outfilesuffix": ext, "filetype": type, "htmlsyntax": syntax});
        }, TMP_BackendInfo_setup_backend_info_5.$$arity = 0);
        
        Opal.def(self, '$filetype', TMP_BackendInfo_filetype_6 = function $$filetype(value) {
          var self = this, $writer = nil;

          
          
          if (value == null) {
            value = nil;
          };
          if ($truthy(value)) {
            
            $writer = ["filetype", value];
            $send(self.$backend_info(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return self.$backend_info()['$[]']("filetype")
          };
        }, TMP_BackendInfo_filetype_6.$$arity = -1);
        
        Opal.def(self, '$basebackend', TMP_BackendInfo_basebackend_7 = function $$basebackend(value) {
          var self = this, $writer = nil;

          
          
          if (value == null) {
            value = nil;
          };
          if ($truthy(value)) {
            
            $writer = ["basebackend", value];
            $send(self.$backend_info(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return self.$backend_info()['$[]']("basebackend")
          };
        }, TMP_BackendInfo_basebackend_7.$$arity = -1);
        
        Opal.def(self, '$outfilesuffix', TMP_BackendInfo_outfilesuffix_8 = function $$outfilesuffix(value) {
          var self = this, $writer = nil;

          
          
          if (value == null) {
            value = nil;
          };
          if ($truthy(value)) {
            
            $writer = ["outfilesuffix", value];
            $send(self.$backend_info(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return self.$backend_info()['$[]']("outfilesuffix")
          };
        }, TMP_BackendInfo_outfilesuffix_8.$$arity = -1);
        
        Opal.def(self, '$htmlsyntax', TMP_BackendInfo_htmlsyntax_9 = function $$htmlsyntax(value) {
          var self = this, $writer = nil;

          
          
          if (value == null) {
            value = nil;
          };
          if ($truthy(value)) {
            
            $writer = ["htmlsyntax", value];
            $send(self.$backend_info(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return self.$backend_info()['$[]']("htmlsyntax")
          };
        }, TMP_BackendInfo_htmlsyntax_9.$$arity = -1);
        
        Opal.def(self, '$supports_templates', TMP_BackendInfo_supports_templates_10 = function $$supports_templates() {
          var self = this, $writer = nil;

          
          $writer = ["supports_templates", true];
          $send(self.$backend_info(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_BackendInfo_supports_templates_10.$$arity = 0);
        
        Opal.def(self, '$supports_templates?', TMP_BackendInfo_supports_templates$q_11 = function() {
          var self = this;

          return self.$backend_info()['$[]']("supports_templates")
        }, TMP_BackendInfo_supports_templates$q_11.$$arity = 0);
      })($nesting[0], $nesting);
      (function(self, $parent_nesting) {
        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_included_12;

        return (Opal.def(self, '$included', TMP_included_12 = function $$included(converter) {
          var self = this;

          return converter.$extend($$($nesting, 'Config'))
        }, TMP_included_12.$$arity = 1), nil) && 'included'
      })(Opal.get_singleton_class(self), $nesting);
      self.$include($$($nesting, 'Config'));
      self.$include($$($nesting, 'BackendInfo'));
      
      Opal.def(self, '$initialize', TMP_Converter_initialize_13 = function $$initialize(backend, opts) {
        var self = this;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        self.backend = backend;
        return self.$setup_backend_info();
      }, TMP_Converter_initialize_13.$$arity = -2);
      
      Opal.def(self, '$convert', TMP_Converter_convert_14 = function $$convert(node, transform, opts) {
        var self = this;

        
        
        if (transform == null) {
          transform = nil;
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        return self.$raise($$$('::', 'NotImplementedError'));
      }, TMP_Converter_convert_14.$$arity = -2);
      Opal.alias(self, "handles?", "respond_to?");
      Opal.alias(self, "convert_with_options", "convert");
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      function $Writer() {};
      var self = $Writer = $module($base, 'Writer', $Writer);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Writer_write_15;

      
      Opal.def(self, '$write', TMP_Writer_write_15 = function $$write(output, target) {
        var self = this;

        
        if ($truthy(target['$respond_to?']("write"))) {
          
          target.$write(output.$chomp());
          target.$write($$($nesting, 'LF'));
        } else {
          $$$('::', 'IO').$write(target, output)
        };
        return nil;
      }, TMP_Writer_write_15.$$arity = 2)
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      function $VoidWriter() {};
      var self = $VoidWriter = $module($base, 'VoidWriter', $VoidWriter);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_VoidWriter_write_16;

      
      self.$include($$($nesting, 'Writer'));
      
      Opal.def(self, '$write', TMP_VoidWriter_write_16 = function $$write(output, target) {
        var self = this;

        return nil
      }, TMP_VoidWriter_write_16.$$arity = 2);
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
  self.$require("asciidoctor/converter/base");
  return self.$require("asciidoctor/converter/factory");
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/document"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$new', '$attr_reader', '$nil?', '$<<', '$[]', '$[]=', '$-', '$include?', '$strip', '$squeeze', '$gsub', '$empty?', '$!', '$rpartition', '$attr_accessor', '$delete', '$base_dir', '$options', '$inject', '$catalog', '$==', '$dup', '$attributes', '$safe', '$compat_mode', '$sourcemap', '$path_resolver', '$converter', '$extensions', '$each', '$end_with?', '$start_with?', '$slice', '$length', '$chop', '$downcase', '$extname', '$===', '$value_for_name', '$to_s', '$key?', '$freeze', '$attribute_undefined', '$attribute_missing', '$name_for_value', '$expand_path', '$pwd', '$>=', '$+', '$abs', '$to_i', '$delete_if', '$update_doctype_attributes', '$cursor', '$parse', '$restore_attributes', '$update_backend_attributes', '$utc', '$at', '$Integer', '$now', '$index', '$strftime', '$year', '$utc_offset', '$fetch', '$activate', '$create', '$to_proc', '$groups', '$preprocessors?', '$preprocessors', '$process_method', '$tree_processors?', '$tree_processors', '$!=', '$counter', '$nil_or_empty?', '$nextval', '$value', '$save_to', '$chr', '$ord', '$source', '$source_lines', '$doctitle', '$sectname=', '$title=', '$first_section', '$title', '$merge', '$>', '$<', '$find', '$context', '$assign_numeral', '$clear_playback_attributes', '$save_attributes', '$attribute_locked?', '$rewind', '$replace', '$name', '$negate', '$limit_bytesize', '$apply_attribute_value_subs', '$delete?', '$=~', '$apply_subs', '$resolve_pass_subs', '$apply_header_subs', '$create_converter', '$basebackend', '$outfilesuffix', '$filetype', '$sub', '$raise', '$Array', '$backend', '$default', '$start', '$doctype', '$content_model', '$warn', '$logger', '$content', '$convert', '$postprocessors?', '$postprocessors', '$record', '$write', '$respond_to?', '$chomp', '$write_alternate_pages', '$map', '$split', '$resolve_docinfo_subs', '$&', '$normalize_system_path', '$read_asset', '$docinfo_processors?', '$compact', '$join', '$resolve_subs', '$docinfo_processors', '$class', '$object_id', '$inspect', '$size']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Document(){};
      var self = $Document = $klass($base, $super, 'Document', $Document);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Document_1, TMP_Document_initialize_8, TMP_Document_parse_12, TMP_Document_counter_15, TMP_Document_increment_and_store_counter_16, TMP_Document_nextval_17, TMP_Document_register_18, TMP_Document_footnotes$q_19, TMP_Document_footnotes_20, TMP_Document_callouts_21, TMP_Document_nested$q_22, TMP_Document_embedded$q_23, TMP_Document_extensions$q_24, TMP_Document_source_25, TMP_Document_source_lines_26, TMP_Document_basebackend$q_27, TMP_Document_title_28, TMP_Document_title$eq_29, TMP_Document_doctitle_30, TMP_Document_author_31, TMP_Document_authors_32, TMP_Document_revdate_33, TMP_Document_notitle_34, TMP_Document_noheader_35, TMP_Document_nofooter_36, TMP_Document_first_section_37, TMP_Document_has_header$q_39, TMP_Document_$lt$lt_40, TMP_Document_finalize_header_41, TMP_Document_save_attributes_42, TMP_Document_restore_attributes_44, TMP_Document_clear_playback_attributes_45, TMP_Document_playback_attributes_46, TMP_Document_set_attribute_48, TMP_Document_delete_attribute_49, TMP_Document_attribute_locked$q_50, TMP_Document_set_header_attribute_51, TMP_Document_apply_attribute_value_subs_52, TMP_Document_update_backend_attributes_53, TMP_Document_update_doctype_attributes_54, TMP_Document_create_converter_55, TMP_Document_convert_56, TMP_Document_write_58, TMP_Document_content_59, TMP_Document_docinfo_60, TMP_Document_resolve_docinfo_subs_63, TMP_Document_docinfo_processors$q_64, TMP_Document_to_s_65;

      def.attributes = def.safe = def.sourcemap = def.reader = def.base_dir = def.parsed = def.parent_document = def.extensions = def.options = def.counters = def.catalog = def.header = def.blocks = def.attributes_modified = def.id = def.header_attributes = def.max_attribute_value_size = def.attribute_overrides = def.backend = def.doctype = def.converter = def.timings = def.outfilesuffix = def.docinfo_processor_extensions = def.document = nil;
      
      Opal.const_set($nesting[0], 'ImageReference', $send($$$('::', 'Struct'), 'new', ["target", "imagesdir"], (TMP_Document_1 = function(){var self = TMP_Document_1.$$s || this;

      return Opal.alias(self, "to_s", "target")}, TMP_Document_1.$$s = self, TMP_Document_1.$$arity = 0, TMP_Document_1)));
      Opal.const_set($nesting[0], 'Footnote', $$$('::', 'Struct').$new("index", "id", "text"));
      (function($base, $super, $parent_nesting) {
        function $AttributeEntry(){};
        var self = $AttributeEntry = $klass($base, $super, 'AttributeEntry', $AttributeEntry);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_AttributeEntry_initialize_2, TMP_AttributeEntry_save_to_3;

        
        self.$attr_reader("name", "value", "negate");
        
        Opal.def(self, '$initialize', TMP_AttributeEntry_initialize_2 = function $$initialize(name, value, negate) {
          var self = this;

          
          
          if (negate == null) {
            negate = nil;
          };
          self.name = name;
          self.value = value;
          return (self.negate = (function() {if ($truthy(negate['$nil?']())) {
            return value['$nil?']()
          } else {
            return negate
          }; return nil; })());
        }, TMP_AttributeEntry_initialize_2.$$arity = -3);
        return (Opal.def(self, '$save_to', TMP_AttributeEntry_save_to_3 = function $$save_to(block_attributes) {
          var $a, self = this, $writer = nil;

          
          ($truthy($a = block_attributes['$[]']("attribute_entries")) ? $a : (($writer = ["attribute_entries", []]), $send(block_attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<'](self);
          return self;
        }, TMP_AttributeEntry_save_to_3.$$arity = 1), nil) && 'save_to';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        function $Title(){};
        var self = $Title = $klass($base, $super, 'Title', $Title);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Title_initialize_4, TMP_Title_sanitized$q_5, TMP_Title_subtitle$q_6, TMP_Title_to_s_7;

        def.sanitized = def.subtitle = def.combined = nil;
        
        self.$attr_reader("main");
        Opal.alias(self, "title", "main");
        self.$attr_reader("subtitle");
        self.$attr_reader("combined");
        
        Opal.def(self, '$initialize', TMP_Title_initialize_4 = function $$initialize(val, opts) {
          var $a, $b, self = this, sep = nil, _ = nil;

          
          
          if (opts == null) {
            opts = $hash2([], {});
          };
          if ($truthy(($truthy($a = (self.sanitized = opts['$[]']("sanitize"))) ? val['$include?']("<") : $a))) {
            val = val.$gsub($$($nesting, 'XmlSanitizeRx'), "").$squeeze(" ").$strip()};
          if ($truthy(($truthy($a = (sep = ($truthy($b = opts['$[]']("separator")) ? $b : ":"))['$empty?']()) ? $a : val['$include?']((sep = "" + (sep) + " "))['$!']()))) {
            
            self.main = val;
            self.subtitle = nil;
          } else {
            $b = val.$rpartition(sep), $a = Opal.to_ary($b), (self.main = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (self.subtitle = ($a[2] == null ? nil : $a[2])), $b
          };
          return (self.combined = val);
        }, TMP_Title_initialize_4.$$arity = -2);
        
        Opal.def(self, '$sanitized?', TMP_Title_sanitized$q_5 = function() {
          var self = this;

          return self.sanitized
        }, TMP_Title_sanitized$q_5.$$arity = 0);
        
        Opal.def(self, '$subtitle?', TMP_Title_subtitle$q_6 = function() {
          var self = this;

          if ($truthy(self.subtitle)) {
            return true
          } else {
            return false
          }
        }, TMP_Title_subtitle$q_6.$$arity = 0);
        return (Opal.def(self, '$to_s', TMP_Title_to_s_7 = function $$to_s() {
          var self = this;

          return self.combined
        }, TMP_Title_to_s_7.$$arity = 0), nil) && 'to_s';
      })($nesting[0], null, $nesting);
      Opal.const_set($nesting[0], 'Author', $$$('::', 'Struct').$new("name", "firstname", "middlename", "lastname", "initials", "email"));
      self.$attr_reader("safe");
      self.$attr_reader("compat_mode");
      self.$attr_reader("backend");
      self.$attr_reader("doctype");
      self.$attr_accessor("sourcemap");
      self.$attr_reader("catalog");
      Opal.alias(self, "references", "catalog");
      self.$attr_reader("counters");
      self.$attr_reader("header");
      self.$attr_reader("base_dir");
      self.$attr_reader("options");
      self.$attr_reader("outfilesuffix");
      self.$attr_reader("parent_document");
      self.$attr_reader("reader");
      self.$attr_reader("path_resolver");
      self.$attr_reader("converter");
      self.$attr_reader("extensions");
      
      Opal.def(self, '$initialize', TMP_Document_initialize_8 = function $$initialize(data, options) {
        var $a, TMP_9, TMP_10, $b, $c, TMP_11, $d, $iter = TMP_Document_initialize_8.$$p, $yield = $iter || nil, self = this, parent_doc = nil, $writer = nil, attr_overrides = nil, parent_doctype = nil, initialize_extensions = nil, to_file = nil, safe_mode = nil, header_footer = nil, attrs = nil, safe_mode_name = nil, base_dir_val = nil, backend_val = nil, doctype_val = nil, size = nil, now = nil, localdate = nil, localyear = nil, localtime = nil, ext_registry = nil, ext_block = nil;

        if ($iter) TMP_Document_initialize_8.$$p = null;
        
        
        if (data == null) {
          data = nil;
        };
        
        if (options == null) {
          options = $hash2([], {});
        };
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Document_initialize_8, false), [self, "document"], null);
        if ($truthy((parent_doc = options.$delete("parent")))) {
          
          self.parent_document = parent_doc;
          ($truthy($a = options['$[]']("base_dir")) ? $a : (($writer = ["base_dir", parent_doc.$base_dir()]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          if ($truthy(parent_doc.$options()['$[]']("catalog_assets"))) {
            
            $writer = ["catalog_assets", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          self.catalog = $send(parent_doc.$catalog(), 'inject', [$hash2([], {})], (TMP_9 = function(accum, $mlhs_tmp1){var self = TMP_9.$$s || this, $b, $c, key = nil, table = nil;

          
            
            if (accum == null) {
              accum = nil;
            };
            
            if ($mlhs_tmp1 == null) {
              $mlhs_tmp1 = nil;
            };
            $c = $mlhs_tmp1, $b = Opal.to_ary($c), (key = ($b[0] == null ? nil : $b[0])), (table = ($b[1] == null ? nil : $b[1])), $c;
            
            $writer = [key, (function() {if (key['$==']("footnotes")) {
              return []
            } else {
              return table
            }; return nil; })()];
            $send(accum, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return accum;}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9.$$has_top_level_mlhs_arg = true, TMP_9));
          self.attribute_overrides = (attr_overrides = parent_doc.$attributes().$dup());
          parent_doctype = attr_overrides.$delete("doctype");
          attr_overrides.$delete("compat-mode");
          attr_overrides.$delete("toc");
          attr_overrides.$delete("toc-placement");
          attr_overrides.$delete("toc-position");
          self.safe = parent_doc.$safe();
          if ($truthy((self.compat_mode = parent_doc.$compat_mode()))) {
            
            $writer = ["compat-mode", ""];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          self.sourcemap = parent_doc.$sourcemap();
          self.timings = nil;
          self.path_resolver = parent_doc.$path_resolver();
          self.converter = parent_doc.$converter();
          initialize_extensions = false;
          self.extensions = parent_doc.$extensions();
        } else {
          
          self.parent_document = nil;
          self.catalog = $hash2(["ids", "refs", "footnotes", "links", "images", "indexterms", "callouts", "includes"], {"ids": $hash2([], {}), "refs": $hash2([], {}), "footnotes": [], "links": [], "images": [], "indexterms": [], "callouts": $$($nesting, 'Callouts').$new(), "includes": $hash2([], {})});
          self.attribute_overrides = (attr_overrides = $hash2([], {}));
          $send(($truthy($a = options['$[]']("attributes")) ? $a : $hash2([], {})), 'each', [], (TMP_10 = function(key, val){var self = TMP_10.$$s || this, $b;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (val == null) {
              val = nil;
            };
            if ($truthy(key['$end_with?']("@"))) {
              if ($truthy(key['$start_with?']("!"))) {
                $b = [key.$slice(1, $rb_minus(key.$length(), 2)), false], (key = $b[0]), (val = $b[1]), $b
              } else if ($truthy(key['$end_with?']("!@"))) {
                $b = [key.$slice(0, $rb_minus(key.$length(), 2)), false], (key = $b[0]), (val = $b[1]), $b
              } else {
                $b = [key.$chop(), "" + (val) + "@"], (key = $b[0]), (val = $b[1]), $b
              }
            } else if ($truthy(key['$start_with?']("!"))) {
              $b = [key.$slice(1, key.$length()), (function() {if (val['$==']("@")) {
                return false
              } else {
                return nil
              }; return nil; })()], (key = $b[0]), (val = $b[1]), $b
            } else if ($truthy(key['$end_with?']("!"))) {
              $b = [key.$chop(), (function() {if (val['$==']("@")) {
                return false
              } else {
                return nil
              }; return nil; })()], (key = $b[0]), (val = $b[1]), $b};
            
            $writer = [key.$downcase(), val];
            $send(attr_overrides, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10));
          if ($truthy((to_file = options['$[]']("to_file")))) {
            
            $writer = ["outfilesuffix", $$$('::', 'File').$extname(to_file)];
            $send(attr_overrides, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy((safe_mode = options['$[]']("safe"))['$!']())) {
            self.safe = $$$($$($nesting, 'SafeMode'), 'SECURE')
          } else if ($truthy($$$('::', 'Integer')['$==='](safe_mode))) {
            self.safe = safe_mode
          } else {
            
            try {
              self.safe = $$($nesting, 'SafeMode').$value_for_name(safe_mode.$to_s())
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  self.safe = $$$($$($nesting, 'SafeMode'), 'SECURE')
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          };
          self.compat_mode = attr_overrides['$key?']("compat-mode");
          self.sourcemap = options['$[]']("sourcemap");
          self.timings = options.$delete("timings");
          self.path_resolver = $$($nesting, 'PathResolver').$new();
          self.converter = nil;
          initialize_extensions = (($b = $$$('::', 'Asciidoctor', 'skip_raise')) && ($a = $$$($b, 'Extensions', 'skip_raise')) ? 'constant' : nil);
          self.extensions = nil;
        };
        self.parsed = false;
        self.header = (self.header_attributes = nil);
        self.counters = $hash2([], {});
        self.attributes_modified = $$$('::', 'Set').$new();
        self.docinfo_processor_extensions = $hash2([], {});
        header_footer = ($truthy($c = options['$[]']("header_footer")) ? $c : (($writer = ["header_footer", false]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        (self.options = options).$freeze();
        attrs = self.attributes;
        
        $writer = ["sectids", ""];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["toc-placement", "auto"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(header_footer)) {
          
          
          $writer = ["copycss", ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["embedded", nil];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        } else {
          
          
          $writer = ["notitle", ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["embedded", ""];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        };
        
        $writer = ["stylesheet", ""];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["webfonts", ""];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["prewrap", ""];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["attribute-undefined", $$($nesting, 'Compliance').$attribute_undefined()];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["attribute-missing", $$($nesting, 'Compliance').$attribute_missing()];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["iconfont-remote", ""];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["caution-caption", "Caution"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["important-caption", "Important"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["note-caption", "Note"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["tip-caption", "Tip"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["warning-caption", "Warning"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["example-caption", "Example"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["figure-caption", "Figure"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["table-caption", "Table"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["toc-title", "Table of Contents"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["section-refsig", "Section"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["part-refsig", "Part"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["chapter-refsig", "Chapter"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["appendix-caption", (($writer = ["appendix-refsig", "Appendix"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["untitled-label", "Untitled"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["version-label", "Version"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["last-update-label", "Last updated"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["asciidoctor", ""];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["asciidoctor-version", $$($nesting, 'VERSION')];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["safe-mode-name", (safe_mode_name = $$($nesting, 'SafeMode').$name_for_value(self.safe))];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["" + "safe-mode-" + (safe_mode_name), ""];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["safe-mode-level", self.safe];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        ($truthy($c = attr_overrides['$[]']("max-include-depth")) ? $c : (($writer = ["max-include-depth", 64]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        ($truthy($c = attr_overrides['$[]']("allow-uri-read")) ? $c : (($writer = ["allow-uri-read", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        
        $writer = ["user-home", $$($nesting, 'USER_HOME')];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(attr_overrides['$key?']("numbered"))) {
          
          $writer = ["sectnums", attr_overrides.$delete("numbered")];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy((base_dir_val = options['$[]']("base_dir")))) {
          self.base_dir = (($writer = ["docdir", $$$('::', 'File').$expand_path(base_dir_val)]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
        } else if ($truthy(attr_overrides['$[]']("docdir"))) {
          self.base_dir = attr_overrides['$[]']("docdir")
        } else {
          self.base_dir = (($writer = ["docdir", $$$('::', 'Dir').$pwd()]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
        };
        if ($truthy((backend_val = options['$[]']("backend")))) {
          
          $writer = ["backend", "" + (backend_val)];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy((doctype_val = options['$[]']("doctype")))) {
          
          $writer = ["doctype", "" + (doctype_val)];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy($rb_ge(self.safe, $$$($$($nesting, 'SafeMode'), 'SERVER')))) {
          
          ($truthy($c = attr_overrides['$[]']("copycss")) ? $c : (($writer = ["copycss", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attr_overrides['$[]']("source-highlighter")) ? $c : (($writer = ["source-highlighter", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attr_overrides['$[]']("backend")) ? $c : (($writer = ["backend", $$($nesting, 'DEFAULT_BACKEND')]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          if ($truthy(($truthy($c = parent_doc['$!']()) ? attr_overrides['$key?']("docfile") : $c))) {
            
            $writer = ["docfile", attr_overrides['$[]']("docfile")['$[]'](Opal.Range.$new($rb_plus(attr_overrides['$[]']("docdir").$length(), 1), -1, false))];
            $send(attr_overrides, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          
          $writer = ["docdir", ""];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["user-home", "."];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy($rb_ge(self.safe, $$$($$($nesting, 'SafeMode'), 'SECURE')))) {
            
            if ($truthy(attr_overrides['$key?']("max-attribute-value-size"))) {
            } else {
              
              $writer = ["max-attribute-value-size", 4096];
              $send(attr_overrides, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            if ($truthy(attr_overrides['$key?']("linkcss"))) {
            } else {
              
              $writer = ["linkcss", ""];
              $send(attr_overrides, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            ($truthy($c = attr_overrides['$[]']("icons")) ? $c : (($writer = ["icons", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));};};
        self.max_attribute_value_size = (function() {if ($truthy((size = ($truthy($c = attr_overrides['$[]']("max-attribute-value-size")) ? $c : (($writer = ["max-attribute-value-size", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))))) {
          return size.$to_i().$abs()
        } else {
          return nil
        }; return nil; })();
        $send(attr_overrides, 'delete_if', [], (TMP_11 = function(key, val){var self = TMP_11.$$s || this, $d, verdict = nil;

        
          
          if (key == null) {
            key = nil;
          };
          
          if (val == null) {
            val = nil;
          };
          if ($truthy(val)) {
            
            if ($truthy(($truthy($d = $$$('::', 'String')['$==='](val)) ? val['$end_with?']("@") : $d))) {
              $d = [val.$chop(), true], (val = $d[0]), (verdict = $d[1]), $d};
            
            $writer = [key, val];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          } else {
            
            attrs.$delete(key);
            verdict = val['$=='](false);
          };
          return verdict;}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11));
        if ($truthy(parent_doc)) {
          
          self.backend = attrs['$[]']("backend");
          if ((self.doctype = (($writer = ["doctype", parent_doctype]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$==']($$($nesting, 'DEFAULT_DOCTYPE'))) {
          } else {
            self.$update_doctype_attributes($$($nesting, 'DEFAULT_DOCTYPE'))
          };
          self.reader = $$($nesting, 'Reader').$new(data, options['$[]']("cursor"));
          if ($truthy(self.sourcemap)) {
            self.source_location = self.reader.$cursor()};
          $$($nesting, 'Parser').$parse(self.reader, self);
          self.$restore_attributes();
          return (self.parsed = true);
        } else {
          
          self.backend = nil;
          if (($truthy($c = attrs['$[]']("backend")) ? $c : (($writer = ["backend", $$($nesting, 'DEFAULT_BACKEND')]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$==']("manpage")) {
            self.doctype = (($writer = ["doctype", (($writer = ["doctype", "manpage"]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
          } else {
            self.doctype = ($truthy($c = attrs['$[]']("doctype")) ? $c : (($writer = ["doctype", $$($nesting, 'DEFAULT_DOCTYPE')]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
          };
          self.$update_backend_attributes(attrs['$[]']("backend"), true);
          now = (function() {if ($truthy($$$('::', 'ENV')['$[]']("SOURCE_DATE_EPOCH"))) {
            return $$$('::', 'Time').$at(self.$Integer($$$('::', 'ENV')['$[]']("SOURCE_DATE_EPOCH"))).$utc()
          } else {
            return $$$('::', 'Time').$now()
          }; return nil; })();
          if ($truthy((localdate = attrs['$[]']("localdate")))) {
            localyear = ($truthy($c = attrs['$[]']("localyear")) ? $c : (($writer = ["localyear", (function() {if (localdate.$index("-")['$=='](4)) {
              
              return localdate.$slice(0, 4);
            } else {
              return nil
            }; return nil; })()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
          } else {
            
            localdate = (($writer = ["localdate", now.$strftime("%F")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
            localyear = ($truthy($c = attrs['$[]']("localyear")) ? $c : (($writer = ["localyear", now.$year().$to_s()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          };
          localtime = ($truthy($c = attrs['$[]']("localtime")) ? $c : (($writer = ["localtime", now.$strftime("" + "%T " + ((function() {if (now.$utc_offset()['$=='](0)) {
            return "UTC"
          } else {
            return "%z"
          }; return nil; })()))]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("localdatetime")) ? $c : (($writer = ["localdatetime", "" + (localdate) + " " + (localtime)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("docdate")) ? $c : (($writer = ["docdate", localdate]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("docyear")) ? $c : (($writer = ["docyear", localyear]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("doctime")) ? $c : (($writer = ["doctime", localtime]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("docdatetime")) ? $c : (($writer = ["docdatetime", "" + (localdate) + " " + (localtime)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("stylesdir")) ? $c : (($writer = ["stylesdir", "."]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("iconsdir")) ? $c : (($writer = ["iconsdir", "" + (attrs.$fetch("imagesdir", "./images")) + "/icons"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          if ($truthy(initialize_extensions)) {
            if ($truthy((ext_registry = options['$[]']("extension_registry")))) {
              if ($truthy(($truthy($c = $$$($$($nesting, 'Extensions'), 'Registry')['$==='](ext_registry)) ? $c : ($truthy($d = $$$('::', 'RUBY_ENGINE_JRUBY')) ? $$$($$$($$$('::', 'AsciidoctorJ'), 'Extensions'), 'ExtensionRegistry')['$==='](ext_registry) : $d)))) {
                self.extensions = ext_registry.$activate(self)}
            } else if ($truthy($$$('::', 'Proc')['$===']((ext_block = options['$[]']("extensions"))))) {
              self.extensions = $send($$($nesting, 'Extensions'), 'create', [], ext_block.$to_proc()).$activate(self)
            } else if ($truthy($$($nesting, 'Extensions').$groups()['$empty?']()['$!']())) {
              self.extensions = $$$($$($nesting, 'Extensions'), 'Registry').$new().$activate(self)}};
          self.reader = $$($nesting, 'PreprocessorReader').$new(self, data, $$$($$($nesting, 'Reader'), 'Cursor').$new(attrs['$[]']("docfile"), self.base_dir), $hash2(["normalize"], {"normalize": true}));
          if ($truthy(self.sourcemap)) {
            return (self.source_location = self.reader.$cursor())
          } else {
            return nil
          };
        };
      }, TMP_Document_initialize_8.$$arity = -1);
      
      Opal.def(self, '$parse', TMP_Document_parse_12 = function $$parse(data) {
        var $a, TMP_13, TMP_14, self = this, doc = nil, exts = nil;

        
        
        if (data == null) {
          data = nil;
        };
        if ($truthy(self.parsed)) {
          return self
        } else {
          
          doc = self;
          if ($truthy(data)) {
            
            self.reader = $$($nesting, 'PreprocessorReader').$new(doc, data, $$$($$($nesting, 'Reader'), 'Cursor').$new(self.attributes['$[]']("docfile"), self.base_dir), $hash2(["normalize"], {"normalize": true}));
            if ($truthy(self.sourcemap)) {
              self.source_location = self.reader.$cursor()};};
          if ($truthy(($truthy($a = (exts = (function() {if ($truthy(self.parent_document)) {
            return nil
          } else {
            return self.extensions
          }; return nil; })())) ? exts['$preprocessors?']() : $a))) {
            $send(exts.$preprocessors(), 'each', [], (TMP_13 = function(ext){var self = TMP_13.$$s || this, $b;
              if (self.reader == null) self.reader = nil;

            
              
              if (ext == null) {
                ext = nil;
              };
              return (self.reader = ($truthy($b = ext.$process_method()['$[]'](doc, self.reader)) ? $b : self.reader));}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13))};
          $$($nesting, 'Parser').$parse(self.reader, doc, $hash2(["header_only"], {"header_only": self.options['$[]']("parse_header_only")}));
          self.$restore_attributes();
          if ($truthy(($truthy($a = exts) ? exts['$tree_processors?']() : $a))) {
            $send(exts.$tree_processors(), 'each', [], (TMP_14 = function(ext){var self = TMP_14.$$s || this, $b, $c, result = nil;

            
              
              if (ext == null) {
                ext = nil;
              };
              if ($truthy(($truthy($b = ($truthy($c = (result = ext.$process_method()['$[]'](doc))) ? $$($nesting, 'Document')['$==='](result) : $c)) ? result['$!='](doc) : $b))) {
                return (doc = result)
              } else {
                return nil
              };}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14))};
          self.parsed = true;
          return doc;
        };
      }, TMP_Document_parse_12.$$arity = -1);
      
      Opal.def(self, '$counter', TMP_Document_counter_15 = function $$counter(name, seed) {
        var $a, self = this, attr_seed = nil, attr_val = nil, $writer = nil;

        
        
        if (seed == null) {
          seed = nil;
        };
        if ($truthy(self.parent_document)) {
          return self.parent_document.$counter(name, seed)};
        if ($truthy(($truthy($a = (attr_seed = (attr_val = self.attributes['$[]'](name))['$nil_or_empty?']()['$!']())) ? self.counters['$key?'](name) : $a))) {
          
          $writer = [name, (($writer = [name, self.$nextval(attr_val)]), $send(self.counters, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(seed)) {
          
          $writer = [name, (($writer = [name, (function() {if (seed['$=='](seed.$to_i().$to_s())) {
            return seed.$to_i()
          } else {
            return seed
          }; return nil; })()]), $send(self.counters, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [name, (($writer = [name, self.$nextval((function() {if ($truthy(attr_seed)) {
            return attr_val
          } else {
            return 0
          }; return nil; })())]), $send(self.counters, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };
      }, TMP_Document_counter_15.$$arity = -2);
      
      Opal.def(self, '$increment_and_store_counter', TMP_Document_increment_and_store_counter_16 = function $$increment_and_store_counter(counter_name, block) {
        var self = this;

        return $$($nesting, 'AttributeEntry').$new(counter_name, self.$counter(counter_name)).$save_to(block.$attributes()).$value()
      }, TMP_Document_increment_and_store_counter_16.$$arity = 2);
      Opal.alias(self, "counter_increment", "increment_and_store_counter");
      
      Opal.def(self, '$nextval', TMP_Document_nextval_17 = function $$nextval(current) {
        var self = this, intval = nil;

        if ($truthy($$$('::', 'Integer')['$==='](current))) {
          return $rb_plus(current, 1)
        } else {
          
          intval = current.$to_i();
          if ($truthy(intval.$to_s()['$!='](current.$to_s()))) {
            return $rb_plus(current['$[]'](0).$ord(), 1).$chr()
          } else {
            return $rb_plus(intval, 1)
          };
        }
      }, TMP_Document_nextval_17.$$arity = 1);
      
      Opal.def(self, '$register', TMP_Document_register_18 = function $$register(type, value) {
        var $a, $b, self = this, $case = nil, id = nil, reftext = nil, $logical_op_recvr_tmp_1 = nil, $writer = nil, ref = nil, refs = nil;

        return (function() {$case = type;
        if ("ids"['$===']($case)) {
        $b = value, $a = Opal.to_ary($b), (id = ($a[0] == null ? nil : $a[0])), (reftext = ($a[1] == null ? nil : $a[1])), $b;
        
        $logical_op_recvr_tmp_1 = self.catalog['$[]']("ids");
        return ($truthy($a = $logical_op_recvr_tmp_1['$[]'](id)) ? $a : (($writer = [id, ($truthy($b = reftext) ? $b : $rb_plus($rb_plus("[", id), "]"))]), $send($logical_op_recvr_tmp_1, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));;}
        else if ("refs"['$===']($case)) {
        $b = value, $a = Opal.to_ary($b), (id = ($a[0] == null ? nil : $a[0])), (ref = ($a[1] == null ? nil : $a[1])), (reftext = ($a[2] == null ? nil : $a[2])), $b;
        if ($truthy((refs = self.catalog['$[]']("refs"))['$key?'](id))) {
          return nil
        } else {
          
          
          $writer = [id, ($truthy($a = reftext) ? $a : $rb_plus($rb_plus("[", id), "]"))];
          $send(self.catalog['$[]']("ids"), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [id, ref];
          $send(refs, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        };}
        else if ("footnotes"['$===']($case) || "indexterms"['$===']($case)) {return self.catalog['$[]'](type)['$<<'](value)}
        else {if ($truthy(self.options['$[]']("catalog_assets"))) {
          return self.catalog['$[]'](type)['$<<']((function() {if (type['$==']("images")) {
            
            return $$($nesting, 'ImageReference').$new(value['$[]'](0), value['$[]'](1));
          } else {
            return value
          }; return nil; })())
        } else {
          return nil
        }}})()
      }, TMP_Document_register_18.$$arity = 2);
      
      Opal.def(self, '$footnotes?', TMP_Document_footnotes$q_19 = function() {
        var self = this;

        if ($truthy(self.catalog['$[]']("footnotes")['$empty?']())) {
          return false
        } else {
          return true
        }
      }, TMP_Document_footnotes$q_19.$$arity = 0);
      
      Opal.def(self, '$footnotes', TMP_Document_footnotes_20 = function $$footnotes() {
        var self = this;

        return self.catalog['$[]']("footnotes")
      }, TMP_Document_footnotes_20.$$arity = 0);
      
      Opal.def(self, '$callouts', TMP_Document_callouts_21 = function $$callouts() {
        var self = this;

        return self.catalog['$[]']("callouts")
      }, TMP_Document_callouts_21.$$arity = 0);
      
      Opal.def(self, '$nested?', TMP_Document_nested$q_22 = function() {
        var self = this;

        if ($truthy(self.parent_document)) {
          return true
        } else {
          return false
        }
      }, TMP_Document_nested$q_22.$$arity = 0);
      
      Opal.def(self, '$embedded?', TMP_Document_embedded$q_23 = function() {
        var self = this;

        return self.attributes['$key?']("embedded")
      }, TMP_Document_embedded$q_23.$$arity = 0);
      
      Opal.def(self, '$extensions?', TMP_Document_extensions$q_24 = function() {
        var self = this;

        if ($truthy(self.extensions)) {
          return true
        } else {
          return false
        }
      }, TMP_Document_extensions$q_24.$$arity = 0);
      
      Opal.def(self, '$source', TMP_Document_source_25 = function $$source() {
        var self = this;

        if ($truthy(self.reader)) {
          return self.reader.$source()
        } else {
          return nil
        }
      }, TMP_Document_source_25.$$arity = 0);
      
      Opal.def(self, '$source_lines', TMP_Document_source_lines_26 = function $$source_lines() {
        var self = this;

        if ($truthy(self.reader)) {
          return self.reader.$source_lines()
        } else {
          return nil
        }
      }, TMP_Document_source_lines_26.$$arity = 0);
      
      Opal.def(self, '$basebackend?', TMP_Document_basebackend$q_27 = function(base) {
        var self = this;

        return self.attributes['$[]']("basebackend")['$=='](base)
      }, TMP_Document_basebackend$q_27.$$arity = 1);
      
      Opal.def(self, '$title', TMP_Document_title_28 = function $$title() {
        var self = this;

        return self.$doctitle()
      }, TMP_Document_title_28.$$arity = 0);
      
      Opal.def(self, '$title=', TMP_Document_title$eq_29 = function(title) {
        var self = this, sect = nil, $writer = nil;

        
        if ($truthy((sect = self.header))) {
        } else {
          
          $writer = ["header"];
          $send((sect = (self.header = $$($nesting, 'Section').$new(self, 0))), 'sectname=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        
        $writer = [title];
        $send(sect, 'title=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_Document_title$eq_29.$$arity = 1);
      
      Opal.def(self, '$doctitle', TMP_Document_doctitle_30 = function $$doctitle(opts) {
        var $a, self = this, val = nil, sect = nil, separator = nil;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy((val = self.attributes['$[]']("title")))) {
        } else if ($truthy((sect = self.$first_section()))) {
          val = sect.$title()
        } else if ($truthy(($truthy($a = opts['$[]']("use_fallback")) ? (val = self.attributes['$[]']("untitled-label")) : $a)['$!']())) {
          return nil};
        if ($truthy((separator = opts['$[]']("partition")))) {
          return $$($nesting, 'Title').$new(val, opts.$merge($hash2(["separator"], {"separator": (function() {if (separator['$=='](true)) {
            return self.attributes['$[]']("title-separator")
          } else {
            return separator
          }; return nil; })()})))
        } else if ($truthy(($truthy($a = opts['$[]']("sanitize")) ? val['$include?']("<") : $a))) {
          return val.$gsub($$($nesting, 'XmlSanitizeRx'), "").$squeeze(" ").$strip()
        } else {
          return val
        };
      }, TMP_Document_doctitle_30.$$arity = -1);
      Opal.alias(self, "name", "doctitle");
      
      Opal.def(self, '$author', TMP_Document_author_31 = function $$author() {
        var self = this;

        return self.attributes['$[]']("author")
      }, TMP_Document_author_31.$$arity = 0);
      
      Opal.def(self, '$authors', TMP_Document_authors_32 = function $$authors() {
        var $a, self = this, attrs = nil, authors = nil, num_authors = nil, idx = nil;

        if ($truthy((attrs = self.attributes)['$key?']("author"))) {
          
          authors = [$$($nesting, 'Author').$new(attrs['$[]']("author"), attrs['$[]']("firstname"), attrs['$[]']("middlename"), attrs['$[]']("lastname"), attrs['$[]']("authorinitials"), attrs['$[]']("email"))];
          if ($truthy($rb_gt((num_authors = ($truthy($a = attrs['$[]']("authorcount")) ? $a : 0)), 1))) {
            
            idx = 1;
            while ($truthy($rb_lt(idx, num_authors))) {
              
              idx = $rb_plus(idx, 1);
              authors['$<<']($$($nesting, 'Author').$new(attrs['$[]']("" + "author_" + (idx)), attrs['$[]']("" + "firstname_" + (idx)), attrs['$[]']("" + "middlename_" + (idx)), attrs['$[]']("" + "lastname_" + (idx)), attrs['$[]']("" + "authorinitials_" + (idx)), attrs['$[]']("" + "email_" + (idx))));
            };};
          return authors;
        } else {
          return []
        }
      }, TMP_Document_authors_32.$$arity = 0);
      
      Opal.def(self, '$revdate', TMP_Document_revdate_33 = function $$revdate() {
        var self = this;

        return self.attributes['$[]']("revdate")
      }, TMP_Document_revdate_33.$$arity = 0);
      
      Opal.def(self, '$notitle', TMP_Document_notitle_34 = function $$notitle() {
        var $a, self = this;

        return ($truthy($a = self.attributes['$key?']("showtitle")['$!']()) ? self.attributes['$key?']("notitle") : $a)
      }, TMP_Document_notitle_34.$$arity = 0);
      
      Opal.def(self, '$noheader', TMP_Document_noheader_35 = function $$noheader() {
        var self = this;

        return self.attributes['$key?']("noheader")
      }, TMP_Document_noheader_35.$$arity = 0);
      
      Opal.def(self, '$nofooter', TMP_Document_nofooter_36 = function $$nofooter() {
        var self = this;

        return self.attributes['$key?']("nofooter")
      }, TMP_Document_nofooter_36.$$arity = 0);
      
      Opal.def(self, '$first_section', TMP_Document_first_section_37 = function $$first_section() {
        var $a, TMP_38, self = this;

        return ($truthy($a = self.header) ? $a : $send(self.blocks, 'find', [], (TMP_38 = function(e){var self = TMP_38.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return e.$context()['$==']("section");}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38)))
      }, TMP_Document_first_section_37.$$arity = 0);
      
      Opal.def(self, '$has_header?', TMP_Document_has_header$q_39 = function() {
        var self = this;

        if ($truthy(self.header)) {
          return true
        } else {
          return false
        }
      }, TMP_Document_has_header$q_39.$$arity = 0);
      Opal.alias(self, "header?", "has_header?");
      
      Opal.def(self, '$<<', TMP_Document_$lt$lt_40 = function(block) {
        var $iter = TMP_Document_$lt$lt_40.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Document_$lt$lt_40.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        if (block.$context()['$==']("section")) {
          self.$assign_numeral(block)};
        return $send(self, Opal.find_super_dispatcher(self, '<<', TMP_Document_$lt$lt_40, false), $zuper, $iter);
      }, TMP_Document_$lt$lt_40.$$arity = 1);
      
      Opal.def(self, '$finalize_header', TMP_Document_finalize_header_41 = function $$finalize_header(unrooted_attributes, header_valid) {
        var self = this, $writer = nil;

        
        
        if (header_valid == null) {
          header_valid = true;
        };
        self.$clear_playback_attributes(unrooted_attributes);
        self.$save_attributes();
        if ($truthy(header_valid)) {
        } else {
          
          $writer = ["invalid-header", true];
          $send(unrooted_attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        return unrooted_attributes;
      }, TMP_Document_finalize_header_41.$$arity = -2);
      
      Opal.def(self, '$save_attributes', TMP_Document_save_attributes_42 = function $$save_attributes() {
        var $a, $b, TMP_43, self = this, attrs = nil, $writer = nil, val = nil, toc_position_val = nil, toc_val = nil, toc_placement = nil, default_toc_position = nil, default_toc_class = nil, position = nil, $case = nil;

        
        if ((attrs = self.attributes)['$[]']("basebackend")['$==']("docbook")) {
          
          if ($truthy(($truthy($a = self['$attribute_locked?']("toc")) ? $a : self.attributes_modified['$include?']("toc")))) {
          } else {
            
            $writer = ["toc", ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          if ($truthy(($truthy($a = self['$attribute_locked?']("sectnums")) ? $a : self.attributes_modified['$include?']("sectnums")))) {
          } else {
            
            $writer = ["sectnums", ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };};
        if ($truthy(($truthy($a = attrs['$key?']("doctitle")) ? $a : (val = self.$doctitle())['$!']()))) {
        } else {
          
          $writer = ["doctitle", val];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(self.id)) {
        } else {
          self.id = attrs['$[]']("css-signature")
        };
        toc_position_val = (function() {if ($truthy((toc_val = (function() {if ($truthy(attrs.$delete("toc2"))) {
          return "left"
        } else {
          return attrs['$[]']("toc")
        }; return nil; })()))) {
          if ($truthy(($truthy($a = (toc_placement = attrs.$fetch("toc-placement", "macro"))) ? toc_placement['$!=']("auto") : $a))) {
            return toc_placement
          } else {
            return attrs['$[]']("toc-position")
          }
        } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = toc_val) ? ($truthy($b = toc_val['$empty?']()['$!']()) ? $b : toc_position_val['$nil_or_empty?']()['$!']()) : $a))) {
          
          default_toc_position = "left";
          default_toc_class = "toc2";
          if ($truthy(toc_position_val['$nil_or_empty?']()['$!']())) {
            position = toc_position_val
          } else if ($truthy(toc_val['$empty?']()['$!']())) {
            position = toc_val
          } else {
            position = default_toc_position
          };
          
          $writer = ["toc", ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["toc-placement", "auto"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          $case = position;
          if ("left"['$===']($case) || "<"['$===']($case) || "&lt;"['$===']($case)) {
          $writer = ["toc-position", "left"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else if ("right"['$===']($case) || ">"['$===']($case) || "&gt;"['$===']($case)) {
          $writer = ["toc-position", "right"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else if ("top"['$===']($case) || "^"['$===']($case)) {
          $writer = ["toc-position", "top"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else if ("bottom"['$===']($case) || "v"['$===']($case)) {
          $writer = ["toc-position", "bottom"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else if ("preamble"['$===']($case) || "macro"['$===']($case)) {
          
          $writer = ["toc-position", "content"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["toc-placement", position];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          default_toc_class = nil;}
          else {
          attrs.$delete("toc-position");
          default_toc_class = nil;};
          if ($truthy(default_toc_class)) {
            ($truthy($a = attrs['$[]']("toc-class")) ? $a : (($writer = ["toc-class", default_toc_class]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))};};
        if ($truthy((self.compat_mode = attrs['$key?']("compat-mode")))) {
          if ($truthy(attrs['$key?']("language"))) {
            
            $writer = ["source-language", attrs['$[]']("language")];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];}};
        self.outfilesuffix = attrs['$[]']("outfilesuffix");
        self.header_attributes = attrs.$dup();
        if ($truthy(self.parent_document)) {
          return nil
        } else {
          return $send($$($nesting, 'FLEXIBLE_ATTRIBUTES'), 'each', [], (TMP_43 = function(name){var self = TMP_43.$$s || this, $c;
            if (self.attribute_overrides == null) self.attribute_overrides = nil;

          
            
            if (name == null) {
              name = nil;
            };
            if ($truthy(($truthy($c = self.attribute_overrides['$key?'](name)) ? self.attribute_overrides['$[]'](name) : $c))) {
              return self.attribute_overrides.$delete(name)
            } else {
              return nil
            };}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43))
        };
      }, TMP_Document_save_attributes_42.$$arity = 0);
      
      Opal.def(self, '$restore_attributes', TMP_Document_restore_attributes_44 = function $$restore_attributes() {
        var self = this;

        
        if ($truthy(self.parent_document)) {
        } else {
          self.catalog['$[]']("callouts").$rewind()
        };
        return self.attributes.$replace(self.header_attributes);
      }, TMP_Document_restore_attributes_44.$$arity = 0);
      
      Opal.def(self, '$clear_playback_attributes', TMP_Document_clear_playback_attributes_45 = function $$clear_playback_attributes(attributes) {
        var self = this;

        return attributes.$delete("attribute_entries")
      }, TMP_Document_clear_playback_attributes_45.$$arity = 1);
      
      Opal.def(self, '$playback_attributes', TMP_Document_playback_attributes_46 = function $$playback_attributes(block_attributes) {
        var TMP_47, self = this;

        if ($truthy(block_attributes['$key?']("attribute_entries"))) {
          return $send(block_attributes['$[]']("attribute_entries"), 'each', [], (TMP_47 = function(entry){var self = TMP_47.$$s || this, name = nil, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

          
            
            if (entry == null) {
              entry = nil;
            };
            name = entry.$name();
            if ($truthy(entry.$negate())) {
              
              self.attributes.$delete(name);
              if (name['$==']("compat-mode")) {
                return (self.compat_mode = false)
              } else {
                return nil
              };
            } else {
              
              
              $writer = [name, entry.$value()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if (name['$==']("compat-mode")) {
                return (self.compat_mode = true)
              } else {
                return nil
              };
            };}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47))
        } else {
          return nil
        }
      }, TMP_Document_playback_attributes_46.$$arity = 1);
      
      Opal.def(self, '$set_attribute', TMP_Document_set_attribute_48 = function $$set_attribute(name, value) {
        var self = this, resolved_value = nil, $case = nil, $writer = nil;

        
        
        if (value == null) {
          value = "";
        };
        if ($truthy(self['$attribute_locked?'](name))) {
          return false
        } else {
          
          if ($truthy(self.max_attribute_value_size)) {
            resolved_value = self.$apply_attribute_value_subs(value).$limit_bytesize(self.max_attribute_value_size)
          } else {
            resolved_value = self.$apply_attribute_value_subs(value)
          };
          $case = name;
          if ("backend"['$===']($case)) {self.$update_backend_attributes(resolved_value, self.attributes_modified['$delete?']("htmlsyntax"))}
          else if ("doctype"['$===']($case)) {self.$update_doctype_attributes(resolved_value)}
          else {
          $writer = [name, resolved_value];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
          self.attributes_modified['$<<'](name);
          return resolved_value;
        };
      }, TMP_Document_set_attribute_48.$$arity = -2);
      
      Opal.def(self, '$delete_attribute', TMP_Document_delete_attribute_49 = function $$delete_attribute(name) {
        var self = this;

        if ($truthy(self['$attribute_locked?'](name))) {
          return false
        } else {
          
          self.attributes.$delete(name);
          self.attributes_modified['$<<'](name);
          return true;
        }
      }, TMP_Document_delete_attribute_49.$$arity = 1);
      
      Opal.def(self, '$attribute_locked?', TMP_Document_attribute_locked$q_50 = function(name) {
        var self = this;

        return self.attribute_overrides['$key?'](name)
      }, TMP_Document_attribute_locked$q_50.$$arity = 1);
      
      Opal.def(self, '$set_header_attribute', TMP_Document_set_header_attribute_51 = function $$set_header_attribute(name, value, overwrite) {
        var $a, self = this, attrs = nil, $writer = nil;

        
        
        if (value == null) {
          value = "";
        };
        
        if (overwrite == null) {
          overwrite = true;
        };
        attrs = ($truthy($a = self.header_attributes) ? $a : self.attributes);
        if ($truthy((($a = overwrite['$=='](false)) ? attrs['$key?'](name) : overwrite['$=='](false)))) {
          return false
        } else {
          
          
          $writer = [name, value];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return true;
        };
      }, TMP_Document_set_header_attribute_51.$$arity = -2);
      
      Opal.def(self, '$apply_attribute_value_subs', TMP_Document_apply_attribute_value_subs_52 = function $$apply_attribute_value_subs(value) {
        var $a, self = this;

        if ($truthy($$($nesting, 'AttributeEntryPassMacroRx')['$=~'](value))) {
          if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {
            
            return self.$apply_subs((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), self.$resolve_pass_subs((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))));
          } else {
            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))
          }
        } else {
          return self.$apply_header_subs(value)
        }
      }, TMP_Document_apply_attribute_value_subs_52.$$arity = 1);
      
      Opal.def(self, '$update_backend_attributes', TMP_Document_update_backend_attributes_53 = function $$update_backend_attributes(new_backend, force) {
        var $a, $b, self = this, attrs = nil, current_backend = nil, current_basebackend = nil, current_doctype = nil, $writer = nil, resolved_backend = nil, new_basebackend = nil, new_filetype = nil, new_outfilesuffix = nil, current_filetype = nil, page_width = nil;

        
        
        if (force == null) {
          force = nil;
        };
        if ($truthy(($truthy($a = force) ? $a : ($truthy($b = new_backend) ? new_backend['$!='](self.backend) : $b)))) {
          
          $a = [self.backend, (attrs = self.attributes)['$[]']("basebackend"), self.doctype], (current_backend = $a[0]), (current_basebackend = $a[1]), (current_doctype = $a[2]), $a;
          if ($truthy(new_backend['$start_with?']("xhtml"))) {
            
            
            $writer = ["htmlsyntax", "xml"];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            new_backend = new_backend.$slice(1, new_backend.$length());
          } else if ($truthy(new_backend['$start_with?']("html"))) {
            if (attrs['$[]']("htmlsyntax")['$==']("xml")) {
            } else {
              
              $writer = ["htmlsyntax", "html"];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            }};
          if ($truthy((resolved_backend = $$($nesting, 'BACKEND_ALIASES')['$[]'](new_backend)))) {
            new_backend = resolved_backend};
          if ($truthy(current_doctype)) {
            
            if ($truthy(current_backend)) {
              
              attrs.$delete("" + "backend-" + (current_backend));
              attrs.$delete("" + "backend-" + (current_backend) + "-doctype-" + (current_doctype));};
            
            $writer = ["" + "backend-" + (new_backend) + "-doctype-" + (current_doctype), ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["" + "doctype-" + (current_doctype), ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          } else if ($truthy(current_backend)) {
            attrs.$delete("" + "backend-" + (current_backend))};
          
          $writer = ["" + "backend-" + (new_backend), ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.backend = (($writer = ["backend", new_backend]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
          if ($truthy($$$($$($nesting, 'Converter'), 'BackendInfo')['$===']((self.converter = self.$create_converter())))) {
            
            new_basebackend = self.converter.$basebackend();
            if ($truthy(self['$attribute_locked?']("outfilesuffix"))) {
            } else {
              
              $writer = ["outfilesuffix", self.converter.$outfilesuffix()];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            new_filetype = self.converter.$filetype();
          } else if ($truthy(self.converter)) {
            
            new_basebackend = new_backend.$sub($$($nesting, 'TrailingDigitsRx'), "");
            if ($truthy((new_outfilesuffix = $$($nesting, 'DEFAULT_EXTENSIONS')['$[]'](new_basebackend)))) {
              new_filetype = new_outfilesuffix.$slice(1, new_outfilesuffix.$length())
            } else {
              $a = [".html", "html", "html"], (new_outfilesuffix = $a[0]), (new_basebackend = $a[1]), (new_filetype = $a[2]), $a
            };
            if ($truthy(self['$attribute_locked?']("outfilesuffix"))) {
            } else {
              
              $writer = ["outfilesuffix", new_outfilesuffix];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
          } else {
            self.$raise($$$('::', 'NotImplementedError'), "" + "asciidoctor: FAILED: missing converter for backend '" + (new_backend) + "'. Processing aborted.")
          };
          if ($truthy((current_filetype = attrs['$[]']("filetype")))) {
            attrs.$delete("" + "filetype-" + (current_filetype))};
          
          $writer = ["filetype", new_filetype];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["" + "filetype-" + (new_filetype), ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy((page_width = $$($nesting, 'DEFAULT_PAGE_WIDTHS')['$[]'](new_basebackend)))) {
            
            $writer = ["pagewidth", page_width];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          } else {
            attrs.$delete("pagewidth")
          };
          if ($truthy(new_basebackend['$!='](current_basebackend))) {
            
            if ($truthy(current_doctype)) {
              
              if ($truthy(current_basebackend)) {
                
                attrs.$delete("" + "basebackend-" + (current_basebackend));
                attrs.$delete("" + "basebackend-" + (current_basebackend) + "-doctype-" + (current_doctype));};
              
              $writer = ["" + "basebackend-" + (new_basebackend) + "-doctype-" + (current_doctype), ""];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            } else if ($truthy(current_basebackend)) {
              attrs.$delete("" + "basebackend-" + (current_basebackend))};
            
            $writer = ["" + "basebackend-" + (new_basebackend), ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["basebackend", new_basebackend];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          return new_backend;
        } else {
          return nil
        };
      }, TMP_Document_update_backend_attributes_53.$$arity = -2);
      
      Opal.def(self, '$update_doctype_attributes', TMP_Document_update_doctype_attributes_54 = function $$update_doctype_attributes(new_doctype) {
        var $a, self = this, attrs = nil, current_backend = nil, current_basebackend = nil, current_doctype = nil, $writer = nil;

        if ($truthy(($truthy($a = new_doctype) ? new_doctype['$!='](self.doctype) : $a))) {
          
          $a = [self.backend, (attrs = self.attributes)['$[]']("basebackend"), self.doctype], (current_backend = $a[0]), (current_basebackend = $a[1]), (current_doctype = $a[2]), $a;
          if ($truthy(current_doctype)) {
            
            attrs.$delete("" + "doctype-" + (current_doctype));
            if ($truthy(current_backend)) {
              
              attrs.$delete("" + "backend-" + (current_backend) + "-doctype-" + (current_doctype));
              
              $writer = ["" + "backend-" + (current_backend) + "-doctype-" + (new_doctype), ""];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            if ($truthy(current_basebackend)) {
              
              attrs.$delete("" + "basebackend-" + (current_basebackend) + "-doctype-" + (current_doctype));
              
              $writer = ["" + "basebackend-" + (current_basebackend) + "-doctype-" + (new_doctype), ""];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
          } else {
            
            if ($truthy(current_backend)) {
              
              $writer = ["" + "backend-" + (current_backend) + "-doctype-" + (new_doctype), ""];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(current_basebackend)) {
              
              $writer = ["" + "basebackend-" + (current_basebackend) + "-doctype-" + (new_doctype), ""];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
          };
          
          $writer = ["" + "doctype-" + (new_doctype), ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return (self.doctype = (($writer = ["doctype", new_doctype]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        } else {
          return nil
        }
      }, TMP_Document_update_doctype_attributes_54.$$arity = 1);
      
      Opal.def(self, '$create_converter', TMP_Document_create_converter_55 = function $$create_converter() {
        var self = this, converter_opts = nil, $writer = nil, template_dir = nil, template_dirs = nil, converter = nil, converter_factory = nil;

        
        converter_opts = $hash2([], {});
        
        $writer = ["htmlsyntax", self.attributes['$[]']("htmlsyntax")];
        $send(converter_opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy((template_dir = self.options['$[]']("template_dir")))) {
          template_dirs = [template_dir]
        } else if ($truthy((template_dirs = self.options['$[]']("template_dirs")))) {
          template_dirs = self.$Array(template_dirs)};
        if ($truthy(template_dirs)) {
          
          
          $writer = ["template_dirs", template_dirs];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["template_cache", self.options.$fetch("template_cache", true)];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["template_engine", self.options['$[]']("template_engine")];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["template_engine_options", self.options['$[]']("template_engine_options")];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["eruby", self.options['$[]']("eruby")];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["safe", self.safe];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;};
        if ($truthy((converter = self.options['$[]']("converter")))) {
          converter_factory = $$$($$($nesting, 'Converter'), 'Factory').$new($$$('::', 'Hash')['$[]'](self.$backend(), converter))
        } else {
          converter_factory = $$$($$($nesting, 'Converter'), 'Factory').$default(false)
        };
        return converter_factory.$create(self.$backend(), converter_opts);
      }, TMP_Document_create_converter_55.$$arity = 0);
      
      Opal.def(self, '$convert', TMP_Document_convert_56 = function $$convert(opts) {
        var $a, TMP_57, self = this, $writer = nil, block = nil, output = nil, transform = nil, exts = nil;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy(self.timings)) {
          self.timings.$start("convert")};
        if ($truthy(self.parsed)) {
        } else {
          self.$parse()
        };
        if ($truthy(($truthy($a = $rb_ge(self.safe, $$$($$($nesting, 'SafeMode'), 'SERVER'))) ? $a : opts['$empty?']()))) {
        } else {
          
          if ($truthy((($writer = ["outfile", opts['$[]']("outfile")]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))) {
          } else {
            self.attributes.$delete("outfile")
          };
          if ($truthy((($writer = ["outdir", opts['$[]']("outdir")]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))) {
          } else {
            self.attributes.$delete("outdir")
          };
        };
        if (self.$doctype()['$==']("inline")) {
          if ($truthy((block = ($truthy($a = self.blocks['$[]'](0)) ? $a : self.header)))) {
            if ($truthy(($truthy($a = block.$content_model()['$==']("compound")) ? $a : block.$content_model()['$==']("empty")))) {
              self.$logger().$warn("no inline candidate; use the inline doctype to convert a single paragragh, verbatim, or raw block")
            } else {
              output = block.$content()
            }}
        } else {
          
          transform = (function() {if ($truthy((function() {if ($truthy(opts['$key?']("header_footer"))) {
            return opts['$[]']("header_footer")
          } else {
            return self.options['$[]']("header_footer")
          }; return nil; })())) {
            return "document"
          } else {
            return "embedded"
          }; return nil; })();
          output = self.converter.$convert(self, transform);
        };
        if ($truthy(self.parent_document)) {
        } else if ($truthy(($truthy($a = (exts = self.extensions)) ? exts['$postprocessors?']() : $a))) {
          $send(exts.$postprocessors(), 'each', [], (TMP_57 = function(ext){var self = TMP_57.$$s || this;

          
            
            if (ext == null) {
              ext = nil;
            };
            return (output = ext.$process_method()['$[]'](self, output));}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57))};
        if ($truthy(self.timings)) {
          self.timings.$record("convert")};
        return output;
      }, TMP_Document_convert_56.$$arity = -1);
      Opal.alias(self, "render", "convert");
      
      Opal.def(self, '$write', TMP_Document_write_58 = function $$write(output, target) {
        var $a, $b, self = this;

        
        if ($truthy(self.timings)) {
          self.timings.$start("write")};
        if ($truthy($$($nesting, 'Writer')['$==='](self.converter))) {
          self.converter.$write(output, target)
        } else {
          
          if ($truthy(target['$respond_to?']("write"))) {
            if ($truthy(output['$nil_or_empty?']())) {
            } else {
              
              target.$write(output.$chomp());
              target.$write($$($nesting, 'LF'));
            }
          } else if ($truthy($$($nesting, 'COERCE_ENCODING'))) {
            $$$('::', 'IO').$write(target, output, $hash2(["encoding"], {"encoding": $$$($$$('::', 'Encoding'), 'UTF_8')}))
          } else {
            $$$('::', 'IO').$write(target, output)
          };
          if ($truthy(($truthy($a = (($b = self.backend['$==']("manpage")) ? $$$('::', 'String')['$==='](target) : self.backend['$==']("manpage"))) ? self.converter['$respond_to?']("write_alternate_pages") : $a))) {
            self.converter.$write_alternate_pages(self.attributes['$[]']("mannames"), self.attributes['$[]']("manvolnum"), target)};
        };
        if ($truthy(self.timings)) {
          self.timings.$record("write")};
        return nil;
      }, TMP_Document_write_58.$$arity = 2);
      
      Opal.def(self, '$content', TMP_Document_content_59 = function $$content() {
        var $iter = TMP_Document_content_59.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Document_content_59.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        self.attributes.$delete("title");
        return $send(self, Opal.find_super_dispatcher(self, 'content', TMP_Document_content_59, false), $zuper, $iter);
      }, TMP_Document_content_59.$$arity = 0);
      
      Opal.def(self, '$docinfo', TMP_Document_docinfo_60 = function $$docinfo(location, suffix) {
        var TMP_61, $a, TMP_62, self = this, content = nil, qualifier = nil, docinfo = nil, docinfo_file = nil, docinfo_dir = nil, docinfo_subs = nil, docinfo_path = nil, shd_content = nil, pvt_content = nil;

        
        
        if (location == null) {
          location = "head";
        };
        
        if (suffix == null) {
          suffix = nil;
        };
        if ($truthy($rb_ge(self.$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')))) {
          return ""
        } else {
          
          content = [];
          if (location['$==']("head")) {
          } else {
            qualifier = "" + "-" + (location)
          };
          if ($truthy(suffix)) {
          } else {
            suffix = self.outfilesuffix
          };
          if ($truthy((docinfo = self.attributes['$[]']("docinfo"))['$nil_or_empty?']())) {
            if ($truthy(self.attributes['$key?']("docinfo2"))) {
              docinfo = ["private", "shared"]
            } else if ($truthy(self.attributes['$key?']("docinfo1"))) {
              docinfo = ["shared"]
            } else {
              docinfo = (function() {if ($truthy(docinfo)) {
                return ["private"]
              } else {
                return nil
              }; return nil; })()
            }
          } else {
            docinfo = $send(docinfo.$split(","), 'map', [], (TMP_61 = function(it){var self = TMP_61.$$s || this;

            
              
              if (it == null) {
                it = nil;
              };
              return it.$strip();}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61))
          };
          if ($truthy(docinfo)) {
            
            $a = ["" + "docinfo" + (qualifier) + (suffix), self.attributes['$[]']("docinfodir"), self.$resolve_docinfo_subs()], (docinfo_file = $a[0]), (docinfo_dir = $a[1]), (docinfo_subs = $a[2]), $a;
            if ($truthy(docinfo['$&'](["shared", "" + "shared-" + (location)])['$empty?']())) {
            } else {
              
              docinfo_path = self.$normalize_system_path(docinfo_file, docinfo_dir);
              if ($truthy((shd_content = self.$read_asset(docinfo_path, $hash2(["normalize"], {"normalize": true}))))) {
                content['$<<'](self.$apply_subs(shd_content, docinfo_subs))};
            };
            if ($truthy(($truthy($a = self.attributes['$[]']("docname")['$nil_or_empty?']()) ? $a : docinfo['$&'](["private", "" + "private-" + (location)])['$empty?']()))) {
            } else {
              
              docinfo_path = self.$normalize_system_path("" + (self.attributes['$[]']("docname")) + "-" + (docinfo_file), docinfo_dir);
              if ($truthy((pvt_content = self.$read_asset(docinfo_path, $hash2(["normalize"], {"normalize": true}))))) {
                content['$<<'](self.$apply_subs(pvt_content, docinfo_subs))};
            };};
          if ($truthy(($truthy($a = self.extensions) ? self['$docinfo_processors?'](location) : $a))) {
            content = $rb_plus(content, $send(self.docinfo_processor_extensions['$[]'](location), 'map', [], (TMP_62 = function(ext){var self = TMP_62.$$s || this;

            
              
              if (ext == null) {
                ext = nil;
              };
              return ext.$process_method()['$[]'](self);}, TMP_62.$$s = self, TMP_62.$$arity = 1, TMP_62)).$compact())};
          return content.$join($$($nesting, 'LF'));
        };
      }, TMP_Document_docinfo_60.$$arity = -1);
      
      Opal.def(self, '$resolve_docinfo_subs', TMP_Document_resolve_docinfo_subs_63 = function $$resolve_docinfo_subs() {
        var self = this;

        if ($truthy(self.attributes['$key?']("docinfosubs"))) {
          
          return self.$resolve_subs(self.attributes['$[]']("docinfosubs"), "block", nil, "docinfo");
        } else {
          return ["attributes"]
        }
      }, TMP_Document_resolve_docinfo_subs_63.$$arity = 0);
      
      Opal.def(self, '$docinfo_processors?', TMP_Document_docinfo_processors$q_64 = function(location) {
        var $a, self = this, $writer = nil;

        
        
        if (location == null) {
          location = "head";
        };
        if ($truthy(self.docinfo_processor_extensions['$key?'](location))) {
          return self.docinfo_processor_extensions['$[]'](location)['$!='](false)
        } else if ($truthy(($truthy($a = self.extensions) ? self.document.$extensions()['$docinfo_processors?'](location) : $a))) {
          return (($writer = [location, self.document.$extensions().$docinfo_processors(location)]), $send(self.docinfo_processor_extensions, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])['$!']()['$!']()
        } else {
          
          $writer = [location, false];
          $send(self.docinfo_processor_extensions, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };
      }, TMP_Document_docinfo_processors$q_64.$$arity = -1);
      return (Opal.def(self, '$to_s', TMP_Document_to_s_65 = function $$to_s() {
        var self = this;

        return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {doctype: " + (self.$doctype().$inspect()) + ", doctitle: " + ((function() {if ($truthy(self.header['$!='](nil))) {
          return self.header.$title()
        } else {
          return nil
        }; return nil; })().$inspect()) + ", blocks: " + (self.blocks.$size()) + "}>"
      }, TMP_Document_to_s_65.$$arity = 0), nil) && 'to_s';
    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/inline"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$[]', '$dup', '$convert', '$converter', '$attr', '$==', '$apply_reftext_subs', '$reftext']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Inline(){};
      var self = $Inline = $klass($base, $super, 'Inline', $Inline);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Inline_initialize_1, TMP_Inline_block$q_2, TMP_Inline_inline$q_3, TMP_Inline_convert_4, TMP_Inline_alt_5, TMP_Inline_reftext$q_6, TMP_Inline_reftext_7, TMP_Inline_xreftext_8;

      def.text = def.type = nil;
      
      self.$attr_reader("text");
      self.$attr_reader("type");
      self.$attr_accessor("target");
      
      Opal.def(self, '$initialize', TMP_Inline_initialize_1 = function $$initialize(parent, context, text, opts) {
        var $iter = TMP_Inline_initialize_1.$$p, $yield = $iter || nil, self = this, attrs = nil;

        if ($iter) TMP_Inline_initialize_1.$$p = null;
        
        
        if (text == null) {
          text = nil;
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Inline_initialize_1, false), [parent, context], null);
        self.node_name = "" + "inline_" + (context);
        self.text = text;
        self.id = opts['$[]']("id");
        self.type = opts['$[]']("type");
        self.target = opts['$[]']("target");
        if ($truthy((attrs = opts['$[]']("attributes")))) {
          return (self.attributes = attrs.$dup())
        } else {
          return nil
        };
      }, TMP_Inline_initialize_1.$$arity = -3);
      
      Opal.def(self, '$block?', TMP_Inline_block$q_2 = function() {
        var self = this;

        return false
      }, TMP_Inline_block$q_2.$$arity = 0);
      
      Opal.def(self, '$inline?', TMP_Inline_inline$q_3 = function() {
        var self = this;

        return true
      }, TMP_Inline_inline$q_3.$$arity = 0);
      
      Opal.def(self, '$convert', TMP_Inline_convert_4 = function $$convert() {
        var self = this;

        return self.$converter().$convert(self)
      }, TMP_Inline_convert_4.$$arity = 0);
      Opal.alias(self, "render", "convert");
      
      Opal.def(self, '$alt', TMP_Inline_alt_5 = function $$alt() {
        var self = this;

        return self.$attr("alt")
      }, TMP_Inline_alt_5.$$arity = 0);
      
      Opal.def(self, '$reftext?', TMP_Inline_reftext$q_6 = function() {
        var $a, $b, self = this;

        return ($truthy($a = self.text) ? ($truthy($b = self.type['$==']("ref")) ? $b : self.type['$==']("bibref")) : $a)
      }, TMP_Inline_reftext$q_6.$$arity = 0);
      
      Opal.def(self, '$reftext', TMP_Inline_reftext_7 = function $$reftext() {
        var self = this, val = nil;

        if ($truthy((val = self.text))) {
          
          return self.$apply_reftext_subs(val);
        } else {
          return nil
        }
      }, TMP_Inline_reftext_7.$$arity = 0);
      return (Opal.def(self, '$xreftext', TMP_Inline_xreftext_8 = function $$xreftext(xrefstyle) {
        var self = this;

        
        
        if (xrefstyle == null) {
          xrefstyle = nil;
        };
        return self.$reftext();
      }, TMP_Inline_xreftext_8.$$arity = -1), nil) && 'xreftext';
    })($nesting[0], $$($nesting, 'AbstractNode'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/list"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$next_list', '$callouts', '$class', '$object_id', '$inspect', '$size', '$items', '$attr_accessor', '$level', '$drop', '$!', '$nil_or_empty?', '$apply_subs', '$empty?', '$===', '$[]', '$outline?', '$simple?', '$context', '$option?', '$shift', '$blocks', '$unshift', '$lines', '$source', '$parent']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $List(){};
      var self = $List = $klass($base, $super, 'List', $List);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_List_initialize_1, TMP_List_outline$q_2, TMP_List_convert_3, TMP_List_to_s_4;

      def.context = def.document = def.style = nil;
      
      Opal.alias(self, "items", "blocks");
      Opal.alias(self, "content", "blocks");
      Opal.alias(self, "items?", "blocks?");
      
      Opal.def(self, '$initialize', TMP_List_initialize_1 = function $$initialize(parent, context, opts) {
        var $iter = TMP_List_initialize_1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_List_initialize_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_List_initialize_1, false), $zuper, $iter);
      }, TMP_List_initialize_1.$$arity = -3);
      
      Opal.def(self, '$outline?', TMP_List_outline$q_2 = function() {
        var $a, self = this;

        return ($truthy($a = self.context['$==']("ulist")) ? $a : self.context['$==']("olist"))
      }, TMP_List_outline$q_2.$$arity = 0);
      
      Opal.def(self, '$convert', TMP_List_convert_3 = function $$convert() {
        var $iter = TMP_List_convert_3.$$p, $yield = $iter || nil, self = this, result = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_List_convert_3.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if (self.context['$==']("colist")) {
          
          result = $send(self, Opal.find_super_dispatcher(self, 'convert', TMP_List_convert_3, false), $zuper, $iter);
          self.document.$callouts().$next_list();
          return result;
        } else {
          return $send(self, Opal.find_super_dispatcher(self, 'convert', TMP_List_convert_3, false), $zuper, $iter)
        }
      }, TMP_List_convert_3.$$arity = 0);
      Opal.alias(self, "render", "convert");
      return (Opal.def(self, '$to_s', TMP_List_to_s_4 = function $$to_s() {
        var self = this;

        return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {context: " + (self.context.$inspect()) + ", style: " + (self.style.$inspect()) + ", items: " + (self.$items().$size()) + "}>"
      }, TMP_List_to_s_4.$$arity = 0), nil) && 'to_s';
    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ListItem(){};
      var self = $ListItem = $klass($base, $super, 'ListItem', $ListItem);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_ListItem_initialize_5, TMP_ListItem_text$q_6, TMP_ListItem_text_7, TMP_ListItem_text$eq_8, TMP_ListItem_simple$q_9, TMP_ListItem_compound$q_10, TMP_ListItem_fold_first_11, TMP_ListItem_to_s_12;

      def.text = def.subs = def.blocks = nil;
      
      Opal.alias(self, "list", "parent");
      self.$attr_accessor("marker");
      
      Opal.def(self, '$initialize', TMP_ListItem_initialize_5 = function $$initialize(parent, text) {
        var $iter = TMP_ListItem_initialize_5.$$p, $yield = $iter || nil, self = this;

        if ($iter) TMP_ListItem_initialize_5.$$p = null;
        
        
        if (text == null) {
          text = nil;
        };
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ListItem_initialize_5, false), [parent, "list_item"], null);
        self.text = text;
        self.level = parent.$level();
        return (self.subs = $$($nesting, 'NORMAL_SUBS').$drop(0));
      }, TMP_ListItem_initialize_5.$$arity = -2);
      
      Opal.def(self, '$text?', TMP_ListItem_text$q_6 = function() {
        var self = this;

        return self.text['$nil_or_empty?']()['$!']()
      }, TMP_ListItem_text$q_6.$$arity = 0);
      
      Opal.def(self, '$text', TMP_ListItem_text_7 = function $$text() {
        var $a, self = this;

        return ($truthy($a = self.text) ? self.$apply_subs(self.text, self.subs) : $a)
      }, TMP_ListItem_text_7.$$arity = 0);
      
      Opal.def(self, '$text=', TMP_ListItem_text$eq_8 = function(val) {
        var self = this;

        return (self.text = val)
      }, TMP_ListItem_text$eq_8.$$arity = 1);
      
      Opal.def(self, '$simple?', TMP_ListItem_simple$q_9 = function() {
        var $a, $b, $c, self = this, blk = nil;

        return ($truthy($a = self.blocks['$empty?']()) ? $a : ($truthy($b = (($c = self.blocks.$size()['$=='](1)) ? $$($nesting, 'List')['$===']((blk = self.blocks['$[]'](0))) : self.blocks.$size()['$=='](1))) ? blk['$outline?']() : $b))
      }, TMP_ListItem_simple$q_9.$$arity = 0);
      
      Opal.def(self, '$compound?', TMP_ListItem_compound$q_10 = function() {
        var self = this;

        return self['$simple?']()['$!']()
      }, TMP_ListItem_compound$q_10.$$arity = 0);
      
      Opal.def(self, '$fold_first', TMP_ListItem_fold_first_11 = function $$fold_first(continuation_connects_first_block, content_adjacent) {
        var $a, $b, $c, $d, $e, self = this, first_block = nil, block = nil;

        
        
        if (continuation_connects_first_block == null) {
          continuation_connects_first_block = false;
        };
        
        if (content_adjacent == null) {
          content_adjacent = false;
        };
        if ($truthy(($truthy($a = ($truthy($b = (first_block = self.blocks['$[]'](0))) ? $$($nesting, 'Block')['$==='](first_block) : $b)) ? ($truthy($b = (($c = first_block.$context()['$==']("paragraph")) ? continuation_connects_first_block['$!']() : first_block.$context()['$==']("paragraph"))) ? $b : ($truthy($c = ($truthy($d = ($truthy($e = content_adjacent) ? $e : continuation_connects_first_block['$!']())) ? first_block.$context()['$==']("literal") : $d)) ? first_block['$option?']("listparagraph") : $c)) : $a))) {
          
          block = self.$blocks().$shift();
          if ($truthy(self.text['$nil_or_empty?']())) {
          } else {
            block.$lines().$unshift(self.text)
          };
          self.text = block.$source();};
        return nil;
      }, TMP_ListItem_fold_first_11.$$arity = -1);
      return (Opal.def(self, '$to_s', TMP_ListItem_to_s_12 = function $$to_s() {
        var $a, self = this;

        return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {list_context: " + (self.$parent().$context().$inspect()) + ", text: " + (self.text.$inspect()) + ", blocks: " + (($truthy($a = self.blocks) ? $a : []).$size()) + "}>"
      }, TMP_ListItem_to_s_12.$$arity = 0), nil) && 'to_s';
    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/parser"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$include', '$new', '$lambda', '$start_with?', '$match?', '$is_delimited_block?', '$raise', '$parse_document_header', '$[]', '$has_more_lines?', '$next_section', '$assign_numeral', '$<<', '$blocks', '$parse_block_metadata_lines', '$attributes', '$is_next_line_doctitle?', '$finalize_header', '$nil_or_empty?', '$title=', '$-', '$sourcemap', '$cursor', '$parse_section_title', '$id=', '$source_location=', '$header', '$attribute_locked?', '$[]=', '$id', '$parse_header_metadata', '$register', '$==', '$doctype', '$parse_manpage_header', '$=~', '$downcase', '$include?', '$sub_attributes', '$error', '$logger', '$message_with_context', '$cursor_at_line', '$backend', '$skip_blank_lines', '$save', '$update', '$is_next_line_section?', '$initialize_section', '$join', '$map', '$read_lines_until', '$to_proc', '$title', '$split', '$lstrip', '$restore_save', '$discard_save', '$context', '$empty?', '$has_header?', '$delete', '$!', '$!=', '$attr?', '$attr', '$key?', '$document', '$+', '$level', '$special', '$sectname', '$to_i', '$>', '$<', '$warn', '$next_block', '$blocks?', '$style', '$context=', '$style=', '$parent=', '$size', '$content_model', '$shift', '$unwrap_standalone_preamble', '$dup', '$fetch', '$parse_block_metadata_line', '$extensions', '$block_macros?', '$mark', '$read_line', '$terminator', '$to_s', '$masq', '$to_sym', '$registered_for_block?', '$cursor_at_mark', '$strict_verbatim_paragraphs', '$unshift_line', '$markdown_syntax', '$keys', '$chr', '$*', '$length', '$end_with?', '$===', '$parse_attributes', '$attribute_missing', '$clear', '$tr', '$basename', '$assign_caption', '$registered_for_block_macro?', '$config', '$process_method', '$replace', '$parse_callout_list', '$callouts', '$parse_list', '$match', '$parse_description_list', '$underline_style_section_titles', '$is_section_title?', '$peek_line', '$atx_section_title?', '$generate_id', '$level=', '$read_paragraph_lines', '$adjust_indentation!', '$set_option', '$map!', '$slice', '$pop', '$build_block', '$apply_subs', '$chop', '$catalog_inline_anchors', '$rekey', '$index', '$strip', '$parse_table', '$concat', '$each', '$title?', '$lock_in_subs', '$sub?', '$catalog_callouts', '$source', '$remove_sub', '$block_terminates_paragraph', '$<=', '$nil?', '$lines', '$parse_blocks', '$parse_list_item', '$items', '$scan', '$gsub', '$count', '$pre_match', '$advance', '$callout_ids', '$next_list', '$catalog_inline_anchor', '$source_location', '$marker=', '$catalog_inline_biblio_anchor', '$text=', '$resolve_ordered_list_marker', '$read_lines_for_list_item', '$skip_line_comments', '$unshift_lines', '$fold_first', '$text?', '$is_sibling_list_item?', '$find', '$delete_at', '$casecmp', '$sectname=', '$special=', '$numbered=', '$numbered', '$lineno', '$update_attributes', '$peek_lines', '$setext_section_title?', '$abs', '$line_length', '$cursor_at_prev_line', '$process_attribute_entries', '$next_line_empty?', '$process_authors', '$apply_header_subs', '$rstrip', '$each_with_index', '$compact', '$Array', '$squeeze', '$to_a', '$parse_style_attribute', '$process_attribute_entry', '$skip_comment_lines', '$store_attribute', '$sanitize_attribute_name', '$set_attribute', '$save_to', '$delete_attribute', '$ord', '$int_to_roman', '$resolve_list_marker', '$parse_colspecs', '$create_columns', '$format', '$starts_with_delimiter?', '$close_open_cell', '$parse_cellspec', '$delimiter', '$match_delimiter', '$post_match', '$buffer_has_unclosed_quotes?', '$skip_past_delimiter', '$buffer', '$buffer=', '$skip_past_escaped_delimiter', '$keep_cell_open', '$push_cellspec', '$close_cell', '$cell_open?', '$columns', '$assign_column_widths', '$has_header_option=', '$partition_header_footer', '$upto', '$shorthand_property_syntax', '$each_char', '$call', '$sub!', '$gsub!', '$%', '$begin']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Parser_1, TMP_Parser_2, TMP_Parser_3, TMP_Parser_initialize_4, TMP_Parser_parse_5, TMP_Parser_parse_document_header_6, TMP_Parser_parse_manpage_header_7, TMP_Parser_next_section_9, TMP_Parser_next_block_10, TMP_Parser_read_paragraph_lines_14, TMP_Parser_is_delimited_block$q_15, TMP_Parser_build_block_16, TMP_Parser_parse_blocks_17, TMP_Parser_parse_list_18, TMP_Parser_catalog_callouts_19, TMP_Parser_catalog_inline_anchor_21, TMP_Parser_catalog_inline_anchors_22, TMP_Parser_catalog_inline_biblio_anchor_24, TMP_Parser_parse_description_list_25, TMP_Parser_parse_callout_list_26, TMP_Parser_parse_list_item_27, TMP_Parser_read_lines_for_list_item_28, TMP_Parser_initialize_section_34, TMP_Parser_is_next_line_section$q_35, TMP_Parser_is_next_line_doctitle$q_36, TMP_Parser_is_section_title$q_37, TMP_Parser_atx_section_title$q_38, TMP_Parser_setext_section_title$q_39, TMP_Parser_parse_section_title_40, TMP_Parser_line_length_41, TMP_Parser_line_length_42, TMP_Parser_parse_header_metadata_43, TMP_Parser_process_authors_48, TMP_Parser_parse_block_metadata_lines_54, TMP_Parser_parse_block_metadata_line_55, TMP_Parser_process_attribute_entries_56, TMP_Parser_process_attribute_entry_57, TMP_Parser_store_attribute_58, TMP_Parser_resolve_list_marker_59, TMP_Parser_resolve_ordered_list_marker_60, TMP_Parser_is_sibling_list_item$q_62, TMP_Parser_parse_table_63, TMP_Parser_parse_colspecs_64, TMP_Parser_parse_cellspec_68, TMP_Parser_parse_style_attribute_69, TMP_Parser_adjust_indentation$B_73, TMP_Parser_sanitize_attribute_name_81;

      
      self.$include($$($nesting, 'Logging'));
      Opal.const_set($nesting[0], 'BlockMatchData', $$($nesting, 'Struct').$new("context", "masq", "tip", "terminator"));
      Opal.const_set($nesting[0], 'TabRx', /\t/);
      Opal.const_set($nesting[0], 'TabIndentRx', /^\t+/);
      Opal.const_set($nesting[0], 'StartOfBlockProc', $send(self, 'lambda', [], (TMP_Parser_1 = function(l){var self = TMP_Parser_1.$$s || this, $a, $b;

      
        
        if (l == null) {
          l = nil;
        };
        return ($truthy($a = ($truthy($b = l['$start_with?']("[")) ? $$($nesting, 'BlockAttributeLineRx')['$match?'](l) : $b)) ? $a : self['$is_delimited_block?'](l));}, TMP_Parser_1.$$s = self, TMP_Parser_1.$$arity = 1, TMP_Parser_1)));
      Opal.const_set($nesting[0], 'StartOfListProc', $send(self, 'lambda', [], (TMP_Parser_2 = function(l){var self = TMP_Parser_2.$$s || this;

      
        
        if (l == null) {
          l = nil;
        };
        return $$($nesting, 'AnyListRx')['$match?'](l);}, TMP_Parser_2.$$s = self, TMP_Parser_2.$$arity = 1, TMP_Parser_2)));
      Opal.const_set($nesting[0], 'StartOfBlockOrListProc', $send(self, 'lambda', [], (TMP_Parser_3 = function(l){var self = TMP_Parser_3.$$s || this, $a, $b, $c;

      
        
        if (l == null) {
          l = nil;
        };
        return ($truthy($a = ($truthy($b = self['$is_delimited_block?'](l)) ? $b : ($truthy($c = l['$start_with?']("[")) ? $$($nesting, 'BlockAttributeLineRx')['$match?'](l) : $c))) ? $a : $$($nesting, 'AnyListRx')['$match?'](l));}, TMP_Parser_3.$$s = self, TMP_Parser_3.$$arity = 1, TMP_Parser_3)));
      Opal.const_set($nesting[0], 'NoOp', nil);
      Opal.const_set($nesting[0], 'TableCellHorzAlignments', $hash2(["<", ">", "^"], {"<": "left", ">": "right", "^": "center"}));
      Opal.const_set($nesting[0], 'TableCellVertAlignments', $hash2(["<", ">", "^"], {"<": "top", ">": "bottom", "^": "middle"}));
      Opal.const_set($nesting[0], 'TableCellStyles', $hash2(["d", "s", "e", "m", "h", "l", "v", "a"], {"d": "none", "s": "strong", "e": "emphasis", "m": "monospaced", "h": "header", "l": "literal", "v": "verse", "a": "asciidoc"}));
      
      Opal.def(self, '$initialize', TMP_Parser_initialize_4 = function $$initialize() {
        var self = this;

        return self.$raise("Au contraire, mon frere. No parser instances will be running around.")
      }, TMP_Parser_initialize_4.$$arity = 0);
      Opal.defs(self, '$parse', TMP_Parser_parse_5 = function $$parse(reader, document, options) {
        var $a, $b, $c, self = this, block_attributes = nil, new_section = nil;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        block_attributes = self.$parse_document_header(reader, document);
        if ($truthy(options['$[]']("header_only"))) {
        } else {
          while ($truthy(reader['$has_more_lines?']())) {
            
            $c = self.$next_section(reader, document, block_attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (block_attributes = ($b[1] == null ? nil : $b[1])), $c;
            if ($truthy(new_section)) {
              
              document.$assign_numeral(new_section);
              document.$blocks()['$<<'](new_section);};
          }
        };
        return document;
      }, TMP_Parser_parse_5.$$arity = -3);
      Opal.defs(self, '$parse_document_header', TMP_Parser_parse_document_header_6 = function $$parse_document_header(reader, document) {
        var $a, $b, self = this, block_attrs = nil, doc_attrs = nil, implicit_doctitle = nil, assigned_doctitle = nil, val = nil, $writer = nil, source_location = nil, _ = nil, doctitle = nil, atx = nil, separator = nil, section_title = nil, doc_id = nil, doc_role = nil, doc_reftext = nil;

        
        block_attrs = self.$parse_block_metadata_lines(reader, document);
        doc_attrs = document.$attributes();
        if ($truthy(($truthy($a = (implicit_doctitle = self['$is_next_line_doctitle?'](reader, block_attrs, doc_attrs['$[]']("leveloffset")))) ? block_attrs['$[]']("title") : $a))) {
          return document.$finalize_header(block_attrs, false)};
        assigned_doctitle = nil;
        if ($truthy((val = doc_attrs['$[]']("doctitle"))['$nil_or_empty?']())) {
        } else {
          
          $writer = [(assigned_doctitle = val)];
          $send(document, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(implicit_doctitle)) {
          
          if ($truthy(document.$sourcemap())) {
            source_location = reader.$cursor()};
          $b = self.$parse_section_title(reader, document), $a = Opal.to_ary($b), document['$id='](($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (doctitle = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (atx = ($a[4] == null ? nil : $a[4])), $b;
          if ($truthy(assigned_doctitle)) {
          } else {
            
            $writer = [(assigned_doctitle = doctitle)];
            $send(document, 'title=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          if ($truthy(source_location)) {
            
            $writer = [source_location];
            $send(document.$header(), 'source_location=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(($truthy($a = atx) ? $a : document['$attribute_locked?']("compat-mode")))) {
          } else {
            
            $writer = ["compat-mode", ""];
            $send(doc_attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          if ($truthy((separator = block_attrs['$[]']("separator")))) {
            if ($truthy(document['$attribute_locked?']("title-separator"))) {
            } else {
              
              $writer = ["title-separator", separator];
              $send(doc_attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            }};
          
          $writer = ["doctitle", (section_title = doctitle)];
          $send(doc_attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy((doc_id = block_attrs['$[]']("id")))) {
            
            $writer = [doc_id];
            $send(document, 'id=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          } else {
            doc_id = document.$id()
          };
          if ($truthy((doc_role = block_attrs['$[]']("role")))) {
            
            $writer = ["docrole", doc_role];
            $send(doc_attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy((doc_reftext = block_attrs['$[]']("reftext")))) {
            
            $writer = ["reftext", doc_reftext];
            $send(doc_attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          block_attrs = $hash2([], {});
          self.$parse_header_metadata(reader, document);
          if ($truthy(doc_id)) {
            document.$register("refs", [doc_id, document])};};
        if ($truthy(($truthy($a = (val = doc_attrs['$[]']("doctitle"))['$nil_or_empty?']()) ? $a : val['$=='](section_title)))) {
        } else {
          
          $writer = [(assigned_doctitle = val)];
          $send(document, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(assigned_doctitle)) {
          
          $writer = ["doctitle", assigned_doctitle];
          $send(doc_attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if (document.$doctype()['$==']("manpage")) {
          self.$parse_manpage_header(reader, document, block_attrs)};
        return document.$finalize_header(block_attrs);
      }, TMP_Parser_parse_document_header_6.$$arity = 2);
      Opal.defs(self, '$parse_manpage_header', TMP_Parser_parse_manpage_header_7 = function $$parse_manpage_header(reader, document, block_attributes) {
        var $a, $b, TMP_8, self = this, doc_attrs = nil, $writer = nil, manvolnum = nil, mantitle = nil, manname = nil, name_section_level = nil, name_section = nil, name_section_buffer = nil, mannames = nil, error_msg = nil;

        
        if ($truthy($$($nesting, 'ManpageTitleVolnumRx')['$=~']((doc_attrs = document.$attributes())['$[]']("doctitle")))) {
          
          
          $writer = ["manvolnum", (manvolnum = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))];
          $send(doc_attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["mantitle", (function() {if ($truthy((mantitle = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {
            
            return document.$sub_attributes(mantitle);
          } else {
            return mantitle
          }; return nil; })().$downcase()];
          $send(doc_attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        } else {
          
          self.$logger().$error(self.$message_with_context("non-conforming manpage title", $hash2(["source_location"], {"source_location": reader.$cursor_at_line(1)})));
          
          $writer = ["mantitle", ($truthy($a = ($truthy($b = doc_attrs['$[]']("doctitle")) ? $b : doc_attrs['$[]']("docname"))) ? $a : "command")];
          $send(doc_attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["manvolnum", (manvolnum = "1")];
          $send(doc_attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        };
        if ($truthy(($truthy($a = (manname = doc_attrs['$[]']("manname"))) ? doc_attrs['$[]']("manpurpose") : $a))) {
          
          ($truthy($a = doc_attrs['$[]']("manname-title")) ? $a : (($writer = ["manname-title", "Name"]), $send(doc_attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          
          $writer = ["mannames", [manname]];
          $send(doc_attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if (document.$backend()['$==']("manpage")) {
            
            
            $writer = ["docname", manname];
            $send(doc_attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["outfilesuffix", "" + "." + (manvolnum)];
            $send(doc_attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
        } else {
          
          reader.$skip_blank_lines();
          reader.$save();
          block_attributes.$update(self.$parse_block_metadata_lines(reader, document));
          if ($truthy((name_section_level = self['$is_next_line_section?'](reader, $hash2([], {}))))) {
            if (name_section_level['$=='](1)) {
              
              name_section = self.$initialize_section(reader, document, $hash2([], {}));
              name_section_buffer = $send(reader.$read_lines_until($hash2(["break_on_blank_lines", "skip_line_comments"], {"break_on_blank_lines": true, "skip_line_comments": true})), 'map', [], "lstrip".$to_proc()).$join(" ");
              if ($truthy($$($nesting, 'ManpageNamePurposeRx')['$=~'](name_section_buffer))) {
                
                ($truthy($a = doc_attrs['$[]']("manname-title")) ? $a : (($writer = ["manname-title", name_section.$title()]), $send(doc_attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
                if ($truthy(name_section.$id())) {
                  
                  $writer = ["manname-id", name_section.$id()];
                  $send(doc_attrs, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};
                
                $writer = ["manpurpose", (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))];
                $send(doc_attrs, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy((manname = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {
                  manname = document.$sub_attributes(manname)};
                if ($truthy(manname['$include?'](","))) {
                  manname = (mannames = $send(manname.$split(","), 'map', [], (TMP_8 = function(n){var self = TMP_8.$$s || this;

                  
                    
                    if (n == null) {
                      n = nil;
                    };
                    return n.$lstrip();}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8)))['$[]'](0)
                } else {
                  mannames = [manname]
                };
                
                $writer = ["manname", manname];
                $send(doc_attrs, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = ["mannames", mannames];
                $send(doc_attrs, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if (document.$backend()['$==']("manpage")) {
                  
                  
                  $writer = ["docname", manname];
                  $send(doc_attrs, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = ["outfilesuffix", "" + "." + (manvolnum)];
                  $send(doc_attrs, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;};
              } else {
                error_msg = "non-conforming name section body"
              };
            } else {
              error_msg = "name section must be at level 1"
            }
          } else {
            error_msg = "name section expected"
          };
          if ($truthy(error_msg)) {
            
            reader.$restore_save();
            self.$logger().$error(self.$message_with_context(error_msg, $hash2(["source_location"], {"source_location": reader.$cursor()})));
            
            $writer = ["manname", (manname = ($truthy($a = doc_attrs['$[]']("docname")) ? $a : "command"))];
            $send(doc_attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["mannames", [manname]];
            $send(doc_attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (document.$backend()['$==']("manpage")) {
              
              
              $writer = ["docname", manname];
              $send(doc_attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = ["outfilesuffix", "" + "." + (manvolnum)];
              $send(doc_attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
          } else {
            reader.$discard_save()
          };
        };
        return nil;
      }, TMP_Parser_parse_manpage_header_7.$$arity = 3);
      Opal.defs(self, '$next_section', TMP_Parser_next_section_9 = function $$next_section(reader, parent, attributes) {
        var $a, $b, $c, $d, self = this, preamble = nil, intro = nil, part = nil, has_header = nil, book = nil, document = nil, $writer = nil, section = nil, current_level = nil, expected_next_level = nil, expected_next_level_alt = nil, title = nil, sectname = nil, next_level = nil, expected_condition = nil, new_section = nil, block_cursor = nil, new_block = nil, first_block = nil, child_block = nil;

        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        preamble = (intro = (part = false));
        if ($truthy(($truthy($a = (($b = parent.$context()['$==']("document")) ? parent.$blocks()['$empty?']() : parent.$context()['$==']("document"))) ? ($truthy($b = ($truthy($c = (has_header = parent['$has_header?']())) ? $c : attributes.$delete("invalid-header"))) ? $b : self['$is_next_line_section?'](reader, attributes)['$!']()) : $a))) {
          
          book = (document = parent).$doctype()['$==']("book");
          if ($truthy(($truthy($a = has_header) ? $a : ($truthy($b = book) ? attributes['$[]'](1)['$!=']("abstract") : $b)))) {
            
            preamble = (intro = $$($nesting, 'Block').$new(parent, "preamble", $hash2(["content_model"], {"content_model": "compound"})));
            if ($truthy(($truthy($a = book) ? parent['$attr?']("preface-title") : $a))) {
              
              $writer = [parent.$attr("preface-title")];
              $send(preamble, 'title=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            parent.$blocks()['$<<'](preamble);};
          section = parent;
          current_level = 0;
          if ($truthy(parent.$attributes()['$key?']("fragment"))) {
            expected_next_level = -1
          } else if ($truthy(book)) {
            $a = [1, 0], (expected_next_level = $a[0]), (expected_next_level_alt = $a[1]), $a
          } else {
            expected_next_level = 1
          };
        } else {
          
          book = (document = parent.$document()).$doctype()['$==']("book");
          section = self.$initialize_section(reader, parent, attributes);
          attributes = (function() {if ($truthy((title = attributes['$[]']("title")))) {
            return $hash2(["title"], {"title": title})
          } else {
            return $hash2([], {})
          }; return nil; })();
          expected_next_level = $rb_plus((current_level = section.$level()), 1);
          if (current_level['$=='](0)) {
            part = book
          } else if ($truthy((($a = current_level['$=='](1)) ? section.$special() : current_level['$=='](1)))) {
            if ($truthy(($truthy($a = ($truthy($b = (sectname = section.$sectname())['$==']("appendix")) ? $b : sectname['$==']("preface"))) ? $a : sectname['$==']("abstract")))) {
            } else {
              expected_next_level = nil
            }};
        };
        reader.$skip_blank_lines();
        while ($truthy(reader['$has_more_lines?']())) {
          
          self.$parse_block_metadata_lines(reader, document, attributes);
          if ($truthy((next_level = self['$is_next_line_section?'](reader, attributes)))) {
            
            if ($truthy(document['$attr?']("leveloffset"))) {
              next_level = $rb_plus(next_level, document.$attr("leveloffset").$to_i())};
            if ($truthy($rb_gt(next_level, current_level))) {
              
              if ($truthy(expected_next_level)) {
                if ($truthy(($truthy($b = ($truthy($c = next_level['$=='](expected_next_level)) ? $c : ($truthy($d = expected_next_level_alt) ? next_level['$=='](expected_next_level_alt) : $d))) ? $b : $rb_lt(expected_next_level, 0)))) {
                } else {
                  
                  expected_condition = (function() {if ($truthy(expected_next_level_alt)) {
                    return "" + "expected levels " + (expected_next_level_alt) + " or " + (expected_next_level)
                  } else {
                    return "" + "expected level " + (expected_next_level)
                  }; return nil; })();
                  self.$logger().$warn(self.$message_with_context("" + "section title out of sequence: " + (expected_condition) + ", got level " + (next_level), $hash2(["source_location"], {"source_location": reader.$cursor()})));
                }
              } else {
                self.$logger().$error(self.$message_with_context("" + (sectname) + " sections do not support nested sections", $hash2(["source_location"], {"source_location": reader.$cursor()})))
              };
              $c = self.$next_section(reader, section, attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (attributes = ($b[1] == null ? nil : $b[1])), $c;
              section.$assign_numeral(new_section);
              section.$blocks()['$<<'](new_section);
            } else if ($truthy((($b = next_level['$=='](0)) ? section['$=='](document) : next_level['$=='](0)))) {
              
              if ($truthy(book)) {
              } else {
                self.$logger().$error(self.$message_with_context("level 0 sections can only be used when doctype is book", $hash2(["source_location"], {"source_location": reader.$cursor()})))
              };
              $c = self.$next_section(reader, section, attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (attributes = ($b[1] == null ? nil : $b[1])), $c;
              section.$assign_numeral(new_section);
              section.$blocks()['$<<'](new_section);
            } else {
              break;
            };
          } else {
            
            block_cursor = reader.$cursor();
            if ($truthy((new_block = self.$next_block(reader, ($truthy($b = intro) ? $b : section), attributes, $hash2(["parse_metadata"], {"parse_metadata": false}))))) {
              
              if ($truthy(part)) {
                if ($truthy(section['$blocks?']()['$!']())) {
                  if ($truthy(new_block.$style()['$!=']("partintro"))) {
                    if (new_block.$context()['$==']("paragraph")) {
                      
                      
                      $writer = ["open"];
                      $send(new_block, 'context=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      
                      $writer = ["partintro"];
                      $send(new_block, 'style=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                    } else {
                      
                      
                      $writer = [(intro = $$($nesting, 'Block').$new(section, "open", $hash2(["content_model"], {"content_model": "compound"})))];
                      $send(new_block, 'parent=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      
                      $writer = ["partintro"];
                      $send(intro, 'style=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      section.$blocks()['$<<'](intro);
                    }}
                } else if (section.$blocks().$size()['$=='](1)) {
                  
                  first_block = section.$blocks()['$[]'](0);
                  if ($truthy(($truthy($b = intro['$!']()) ? first_block.$content_model()['$==']("compound") : $b))) {
                    self.$logger().$error(self.$message_with_context("illegal block content outside of partintro block", $hash2(["source_location"], {"source_location": block_cursor})))
                  } else if ($truthy(first_block.$content_model()['$!=']("compound"))) {
                    
                    
                    $writer = [(intro = $$($nesting, 'Block').$new(section, "open", $hash2(["content_model"], {"content_model": "compound"})))];
                    $send(new_block, 'parent=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = ["partintro"];
                    $send(intro, 'style=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    section.$blocks().$shift();
                    if (first_block.$style()['$==']("partintro")) {
                      
                      
                      $writer = ["paragraph"];
                      $send(first_block, 'context=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      
                      $writer = [nil];
                      $send(first_block, 'style=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;};
                    intro['$<<'](first_block);
                    section.$blocks()['$<<'](intro);};}};
              ($truthy($b = intro) ? $b : section).$blocks()['$<<'](new_block);
              attributes = $hash2([], {});};
          };
          if ($truthy($b = reader.$skip_blank_lines())) {
            $b
          } else {
            break;
          };
        };
        if ($truthy(part)) {
          if ($truthy(($truthy($a = section['$blocks?']()) ? section.$blocks()['$[]'](-1).$context()['$==']("section") : $a))) {
          } else {
            self.$logger().$error(self.$message_with_context("invalid part, must have at least one section (e.g., chapter, appendix, etc.)", $hash2(["source_location"], {"source_location": reader.$cursor()})))
          }
        } else if ($truthy(preamble)) {
          if ($truthy(preamble['$blocks?']())) {
            if ($truthy(($truthy($a = ($truthy($b = book) ? $b : document.$blocks()['$[]'](1))) ? $a : $$($nesting, 'Compliance').$unwrap_standalone_preamble()['$!']()))) {
            } else {
              
              document.$blocks().$shift();
              while ($truthy((child_block = preamble.$blocks().$shift()))) {
                document['$<<'](child_block)
              };
            }
          } else {
            document.$blocks().$shift()
          }};
        return [(function() {if ($truthy(section['$!='](parent))) {
          return section
        } else {
          return nil
        }; return nil; })(), attributes.$dup()];
      }, TMP_Parser_next_section_9.$$arity = -3);
      Opal.defs(self, '$next_block', TMP_Parser_next_block_10 = function $$next_block(reader, parent, attributes, options) {try {

        var $a, $b, $c, TMP_11, $d, TMP_12, TMP_13, self = this, skipped = nil, text_only = nil, document = nil, extensions = nil, block_extensions = nil, block_macro_extensions = nil, this_line = nil, doc_attrs = nil, style = nil, block = nil, block_context = nil, cloaked_context = nil, terminator = nil, delimited_block = nil, $writer = nil, indented = nil, md_syntax = nil, ch0 = nil, layout_break_chars = nil, ll = nil, blk_ctx = nil, target = nil, blk_attrs = nil, $case = nil, posattrs = nil, scaledwidth = nil, extension = nil, content = nil, default_attrs = nil, match = nil, float_id = nil, float_reftext = nil, float_title = nil, float_level = nil, lines = nil, in_list = nil, admonition_name = nil, credit_line = nil, attribution = nil, citetitle = nil, language = nil, comma_idx = nil, block_cursor = nil, block_reader = nil, content_model = nil, pos_attrs = nil, block_id = nil;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        
        if (options == null) {
          options = $hash2([], {});
        };
        if ($truthy((skipped = reader.$skip_blank_lines()))) {
        } else {
          return nil
        };
        if ($truthy(($truthy($a = (text_only = options['$[]']("text"))) ? $rb_gt(skipped, 0) : $a))) {
          
          options.$delete("text");
          text_only = false;};
        document = parent.$document();
        if ($truthy(options.$fetch("parse_metadata", true))) {
          while ($truthy(self.$parse_block_metadata_line(reader, document, attributes, options))) {
            
            reader.$shift();
            ($truthy($b = reader.$skip_blank_lines()) ? $b : Opal.ret(nil));
          }};
        if ($truthy((extensions = document.$extensions()))) {
          $a = [extensions['$blocks?'](), extensions['$block_macros?']()], (block_extensions = $a[0]), (block_macro_extensions = $a[1]), $a};
        reader.$mark();
        $a = [reader.$read_line(), document.$attributes(), attributes['$[]'](1)], (this_line = $a[0]), (doc_attrs = $a[1]), (style = $a[2]), $a;
        block = (block_context = (cloaked_context = (terminator = nil)));
        if ($truthy((delimited_block = self['$is_delimited_block?'](this_line, true)))) {
          
          block_context = (cloaked_context = delimited_block.$context());
          terminator = delimited_block.$terminator();
          if ($truthy(style['$!']())) {
            style = (($writer = ["style", block_context.$to_s()]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
          } else if ($truthy(style['$!='](block_context.$to_s()))) {
            if ($truthy(delimited_block.$masq()['$include?'](style))) {
              block_context = style.$to_sym()
            } else if ($truthy(($truthy($a = delimited_block.$masq()['$include?']("admonition")) ? $$($nesting, 'ADMONITION_STYLES')['$include?'](style) : $a))) {
              block_context = "admonition"
            } else if ($truthy(($truthy($a = block_extensions) ? extensions['$registered_for_block?'](style, block_context) : $a))) {
              block_context = style.$to_sym()
            } else {
              
              self.$logger().$warn(self.$message_with_context("" + "invalid style for " + (block_context) + " block: " + (style), $hash2(["source_location"], {"source_location": reader.$cursor_at_mark()})));
              style = block_context.$to_s();
            }};};
        if ($truthy(delimited_block)) {
        } else {
          while ($truthy(true)) {
            
            if ($truthy(($truthy($b = ($truthy($c = style) ? $$($nesting, 'Compliance').$strict_verbatim_paragraphs() : $c)) ? $$($nesting, 'VERBATIM_STYLES')['$include?'](style) : $b))) {
              
              block_context = style.$to_sym();
              reader.$unshift_line(this_line);
              break;;};
            if ($truthy(text_only)) {
              indented = this_line['$start_with?'](" ", $$($nesting, 'TAB'))
            } else {
              
              md_syntax = $$($nesting, 'Compliance').$markdown_syntax();
              if ($truthy(this_line['$start_with?'](" "))) {
                
                $b = [true, " "], (indented = $b[0]), (ch0 = $b[1]), $b;
                if ($truthy(($truthy($b = ($truthy($c = md_syntax) ? $send(this_line.$lstrip(), 'start_with?', Opal.to_a($$($nesting, 'MARKDOWN_THEMATIC_BREAK_CHARS').$keys())) : $c)) ? $$($nesting, 'MarkdownThematicBreakRx')['$match?'](this_line) : $b))) {
                  
                  block = $$($nesting, 'Block').$new(parent, "thematic_break", $hash2(["content_model"], {"content_model": "empty"}));
                  break;;};
              } else if ($truthy(this_line['$start_with?']($$($nesting, 'TAB')))) {
                $b = [true, $$($nesting, 'TAB')], (indented = $b[0]), (ch0 = $b[1]), $b
              } else {
                
                $b = [false, this_line.$chr()], (indented = $b[0]), (ch0 = $b[1]), $b;
                layout_break_chars = (function() {if ($truthy(md_syntax)) {
                  return $$($nesting, 'HYBRID_LAYOUT_BREAK_CHARS')
                } else {
                  return $$($nesting, 'LAYOUT_BREAK_CHARS')
                }; return nil; })();
                if ($truthy(($truthy($b = layout_break_chars['$key?'](ch0)) ? (function() {if ($truthy(md_syntax)) {
                  
                  return $$($nesting, 'ExtLayoutBreakRx')['$match?'](this_line);
                } else {
                  
                  return (($c = this_line['$==']($rb_times(ch0, (ll = this_line.$length())))) ? $rb_gt(ll, 2) : this_line['$==']($rb_times(ch0, (ll = this_line.$length()))));
                }; return nil; })() : $b))) {
                  
                  block = $$($nesting, 'Block').$new(parent, layout_break_chars['$[]'](ch0), $hash2(["content_model"], {"content_model": "empty"}));
                  break;;
                } else if ($truthy(($truthy($b = this_line['$end_with?']("]")) ? this_line['$include?']("::") : $b))) {
                  if ($truthy(($truthy($b = ($truthy($c = ch0['$==']("i")) ? $c : this_line['$start_with?']("video:", "audio:"))) ? $$($nesting, 'BlockMediaMacroRx')['$=~'](this_line) : $b))) {
                    
                    $b = [(($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$to_sym(), (($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))], (blk_ctx = $b[0]), (target = $b[1]), (blk_attrs = $b[2]), $b;
                    block = $$($nesting, 'Block').$new(parent, blk_ctx, $hash2(["content_model"], {"content_model": "empty"}));
                    if ($truthy(blk_attrs)) {
                      
                      $case = blk_ctx;
                      if ("video"['$===']($case)) {posattrs = ["poster", "width", "height"]}
                      else if ("audio"['$===']($case)) {posattrs = []}
                      else {posattrs = ["alt", "width", "height"]};
                      block.$parse_attributes(blk_attrs, posattrs, $hash2(["sub_input", "into"], {"sub_input": true, "into": attributes}));};
                    if ($truthy(attributes['$key?']("style"))) {
                      attributes.$delete("style")};
                    if ($truthy(($truthy($b = target['$include?']($$($nesting, 'ATTR_REF_HEAD'))) ? (target = block.$sub_attributes(target, $hash2(["attribute_missing"], {"attribute_missing": "drop-line"})))['$empty?']() : $b))) {
                      if (($truthy($b = doc_attrs['$[]']("attribute-missing")) ? $b : $$($nesting, 'Compliance').$attribute_missing())['$==']("skip")) {
                        return $$($nesting, 'Block').$new(parent, "paragraph", $hash2(["content_model", "source"], {"content_model": "simple", "source": [this_line]}))
                      } else {
                        
                        attributes.$clear();
                        return nil;
                      }};
                    if (blk_ctx['$==']("image")) {
                      
                      document.$register("images", [target, (($writer = ["imagesdir", doc_attrs['$[]']("imagesdir")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])]);
                      ($truthy($b = attributes['$[]']("alt")) ? $b : (($writer = ["alt", ($truthy($c = style) ? $c : (($writer = ["default-alt", $$($nesting, 'Helpers').$basename(target, true).$tr("_-", " ")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
                      if ($truthy((scaledwidth = attributes.$delete("scaledwidth"))['$nil_or_empty?']())) {
                      } else {
                        
                        $writer = ["scaledwidth", (function() {if ($truthy($$($nesting, 'TrailingDigitsRx')['$match?'](scaledwidth))) {
                          return "" + (scaledwidth) + "%"
                        } else {
                          return scaledwidth
                        }; return nil; })()];
                        $send(attributes, '[]=', Opal.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                      };
                      if ($truthy(attributes['$key?']("title"))) {
                        
                        
                        $writer = [attributes.$delete("title")];
                        $send(block, 'title=', Opal.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];;
                        block.$assign_caption(attributes.$delete("caption"), "figure");};};
                    
                    $writer = ["target", target];
                    $send(attributes, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    break;;
                  } else if ($truthy(($truthy($b = (($c = ch0['$==']("t")) ? this_line['$start_with?']("toc:") : ch0['$==']("t"))) ? $$($nesting, 'BlockTocMacroRx')['$=~'](this_line) : $b))) {
                    
                    block = $$($nesting, 'Block').$new(parent, "toc", $hash2(["content_model"], {"content_model": "empty"}));
                    if ($truthy((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)))) {
                      block.$parse_attributes((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), [], $hash2(["into"], {"into": attributes}))};
                    break;;
                  } else if ($truthy(($truthy($b = ($truthy($c = block_macro_extensions) ? $$($nesting, 'CustomBlockMacroRx')['$=~'](this_line) : $c)) ? (extension = extensions['$registered_for_block_macro?']((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) : $b))) {
                    
                    $b = [(($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))], (target = $b[0]), (content = $b[1]), $b;
                    if ($truthy(($truthy($b = ($truthy($c = target['$include?']($$($nesting, 'ATTR_REF_HEAD'))) ? (target = parent.$sub_attributes(target))['$empty?']() : $c)) ? ($truthy($c = doc_attrs['$[]']("attribute-missing")) ? $c : $$($nesting, 'Compliance').$attribute_missing())['$==']("drop-line") : $b))) {
                      
                      attributes.$clear();
                      return nil;};
                    if (extension.$config()['$[]']("content_model")['$==']("attributes")) {
                      if ($truthy(content)) {
                        document.$parse_attributes(content, ($truthy($b = extension.$config()['$[]']("pos_attrs")) ? $b : []), $hash2(["sub_input", "into"], {"sub_input": true, "into": attributes}))}
                    } else {
                      
                      $writer = ["text", ($truthy($b = content) ? $b : "")];
                      $send(attributes, '[]=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                    };
                    if ($truthy((default_attrs = extension.$config()['$[]']("default_attrs")))) {
                      $send(attributes, 'update', [default_attrs], (TMP_11 = function(_, old_v){var self = TMP_11.$$s || this;

                      
                        
                        if (_ == null) {
                          _ = nil;
                        };
                        
                        if (old_v == null) {
                          old_v = nil;
                        };
                        return old_v;}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11))};
                    if ($truthy((block = extension.$process_method()['$[]'](parent, target, attributes)))) {
                      
                      attributes.$replace(block.$attributes());
                      break;;
                    } else {
                      
                      attributes.$clear();
                      return nil;
                    };}};
              };
            };
            if ($truthy(($truthy($b = ($truthy($c = indented['$!']()) ? (ch0 = ($truthy($d = ch0) ? $d : this_line.$chr()))['$==']("<") : $c)) ? $$($nesting, 'CalloutListRx')['$=~'](this_line) : $b))) {
              
              reader.$unshift_line(this_line);
              block = self.$parse_callout_list(reader, $gvars["~"], parent, document.$callouts());
              
              $writer = ["style", "arabic"];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              break;;
            } else if ($truthy($$($nesting, 'UnorderedListRx')['$match?'](this_line))) {
              
              reader.$unshift_line(this_line);
              if ($truthy(($truthy($b = ($truthy($c = style['$!']()) ? $$($nesting, 'Section')['$==='](parent) : $c)) ? parent.$sectname()['$==']("bibliography") : $b))) {
                
                $writer = ["style", (style = "bibliography")];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              block = self.$parse_list(reader, "ulist", parent, style);
              break;;
            } else if ($truthy((match = $$($nesting, 'OrderedListRx').$match(this_line)))) {
              
              reader.$unshift_line(this_line);
              block = self.$parse_list(reader, "olist", parent, style);
              if ($truthy(block.$style())) {
                
                $writer = ["style", block.$style()];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              break;;
            } else if ($truthy((match = $$($nesting, 'DescriptionListRx').$match(this_line)))) {
              
              reader.$unshift_line(this_line);
              block = self.$parse_description_list(reader, match, parent);
              break;;
            } else if ($truthy(($truthy($b = ($truthy($c = style['$==']("float")) ? $c : style['$==']("discrete"))) ? (function() {if ($truthy($$($nesting, 'Compliance').$underline_style_section_titles())) {
              
              return self['$is_section_title?'](this_line, reader.$peek_line());
            } else {
              return ($truthy($c = indented['$!']()) ? self['$atx_section_title?'](this_line) : $c)
            }; return nil; })() : $b))) {
              
              reader.$unshift_line(this_line);
              $c = self.$parse_section_title(reader, document, attributes['$[]']("id")), $b = Opal.to_ary($c), (float_id = ($b[0] == null ? nil : $b[0])), (float_reftext = ($b[1] == null ? nil : $b[1])), (float_title = ($b[2] == null ? nil : $b[2])), (float_level = ($b[3] == null ? nil : $b[3])), $c;
              if ($truthy(float_reftext)) {
                
                $writer = ["reftext", float_reftext];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              block = $$($nesting, 'Block').$new(parent, "floating_title", $hash2(["content_model"], {"content_model": "empty"}));
              
              $writer = [float_title];
              $send(block, 'title=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              attributes.$delete("title");
              
              $writer = [($truthy($b = float_id) ? $b : (function() {if ($truthy(doc_attrs['$key?']("sectids"))) {
                
                return $$($nesting, 'Section').$generate_id(block.$title(), document);
              } else {
                return nil
              }; return nil; })())];
              $send(block, 'id=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [float_level];
              $send(block, 'level=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              break;;
            } else if ($truthy(($truthy($b = style) ? style['$!=']("normal") : $b))) {
              if ($truthy($$($nesting, 'PARAGRAPH_STYLES')['$include?'](style))) {
                
                block_context = style.$to_sym();
                cloaked_context = "paragraph";
                reader.$unshift_line(this_line);
                break;;
              } else if ($truthy($$($nesting, 'ADMONITION_STYLES')['$include?'](style))) {
                
                block_context = "admonition";
                cloaked_context = "paragraph";
                reader.$unshift_line(this_line);
                break;;
              } else if ($truthy(($truthy($b = block_extensions) ? extensions['$registered_for_block?'](style, "paragraph") : $b))) {
                
                block_context = style.$to_sym();
                cloaked_context = "paragraph";
                reader.$unshift_line(this_line);
                break;;
              } else {
                
                self.$logger().$warn(self.$message_with_context("" + "invalid style for paragraph: " + (style), $hash2(["source_location"], {"source_location": reader.$cursor_at_mark()})));
                style = nil;
              }};
            reader.$unshift_line(this_line);
            if ($truthy(($truthy($b = indented) ? style['$!']() : $b))) {
              
              lines = self.$read_paragraph_lines(reader, ($truthy($b = (in_list = $$($nesting, 'ListItem')['$==='](parent))) ? skipped['$=='](0) : $b), $hash2(["skip_line_comments"], {"skip_line_comments": text_only}));
              self['$adjust_indentation!'](lines);
              block = $$($nesting, 'Block').$new(parent, "literal", $hash2(["content_model", "source", "attributes"], {"content_model": "verbatim", "source": lines, "attributes": attributes}));
              if ($truthy(in_list)) {
                block.$set_option("listparagraph")};
            } else {
              
              lines = self.$read_paragraph_lines(reader, (($b = skipped['$=='](0)) ? $$($nesting, 'ListItem')['$==='](parent) : skipped['$=='](0)), $hash2(["skip_line_comments"], {"skip_line_comments": true}));
              if ($truthy(text_only)) {
                
                if ($truthy(($truthy($b = indented) ? style['$==']("normal") : $b))) {
                  self['$adjust_indentation!'](lines)};
                block = $$($nesting, 'Block').$new(parent, "paragraph", $hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
              } else if ($truthy(($truthy($b = ($truthy($c = $$($nesting, 'ADMONITION_STYLE_HEADS')['$include?'](ch0)) ? this_line['$include?'](":") : $c)) ? $$($nesting, 'AdmonitionParagraphRx')['$=~'](this_line) : $b))) {
                
                
                $writer = [0, (($b = $gvars['~']) === nil ? nil : $b.$post_match())];
                $send(lines, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = ["name", (admonition_name = (($writer = ["style", (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]).$downcase())];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = ["textlabel", ($truthy($b = attributes.$delete("caption")) ? $b : doc_attrs['$[]']("" + (admonition_name) + "-caption"))];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                block = $$($nesting, 'Block').$new(parent, "admonition", $hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
              } else if ($truthy(($truthy($b = ($truthy($c = md_syntax) ? ch0['$=='](">") : $c)) ? this_line['$start_with?']("> ") : $b))) {
                
                $send(lines, 'map!', [], (TMP_12 = function(line){var self = TMP_12.$$s || this;

                
                  
                  if (line == null) {
                    line = nil;
                  };
                  if (line['$=='](">")) {
                    
                    return line.$slice(1, line.$length());
                  } else {
                    
                    if ($truthy(line['$start_with?']("> "))) {
                      
                      return line.$slice(2, line.$length());
                    } else {
                      return line
                    };
                  };}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
                if ($truthy(lines['$[]'](-1)['$start_with?']("-- "))) {
                  
                  credit_line = (credit_line = lines.$pop()).$slice(3, credit_line.$length());
                  while ($truthy(lines['$[]'](-1)['$empty?']())) {
                    lines.$pop()
                  };};
                
                $writer = ["style", "quote"];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                block = self.$build_block("quote", "compound", false, parent, $$($nesting, 'Reader').$new(lines), attributes);
                if ($truthy(credit_line)) {
                  
                  $c = block.$apply_subs(credit_line).$split(", ", 2), $b = Opal.to_ary($c), (attribution = ($b[0] == null ? nil : $b[0])), (citetitle = ($b[1] == null ? nil : $b[1])), $c;
                  if ($truthy(attribution)) {
                    
                    $writer = ["attribution", attribution];
                    $send(attributes, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];};
                  if ($truthy(citetitle)) {
                    
                    $writer = ["citetitle", citetitle];
                    $send(attributes, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];};};
              } else if ($truthy(($truthy($b = ($truthy($c = (($d = ch0['$==']("\"")) ? $rb_gt(lines.$size(), 1) : ch0['$==']("\""))) ? lines['$[]'](-1)['$start_with?']("-- ") : $c)) ? lines['$[]'](-2)['$end_with?']("\"") : $b))) {
                
                
                $writer = [0, this_line.$slice(1, this_line.$length())];
                $send(lines, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                credit_line = (credit_line = lines.$pop()).$slice(3, credit_line.$length());
                while ($truthy(lines['$[]'](-1)['$empty?']())) {
                  lines.$pop()
                };
                lines['$<<'](lines.$pop().$chop());
                
                $writer = ["style", "quote"];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                block = $$($nesting, 'Block').$new(parent, "quote", $hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
                $c = block.$apply_subs(credit_line).$split(", ", 2), $b = Opal.to_ary($c), (attribution = ($b[0] == null ? nil : $b[0])), (citetitle = ($b[1] == null ? nil : $b[1])), $c;
                if ($truthy(attribution)) {
                  
                  $writer = ["attribution", attribution];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};
                if ($truthy(citetitle)) {
                  
                  $writer = ["citetitle", citetitle];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};
              } else {
                
                if ($truthy(($truthy($b = indented) ? style['$==']("normal") : $b))) {
                  self['$adjust_indentation!'](lines)};
                block = $$($nesting, 'Block').$new(parent, "paragraph", $hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
              };
              self.$catalog_inline_anchors(lines.$join($$($nesting, 'LF')), block, document, reader);
            };
            break;;
          }
        };
        if ($truthy(block)) {
        } else {
          
          if ($truthy(($truthy($a = block_context['$==']("abstract")) ? $a : block_context['$==']("partintro")))) {
            block_context = "open"};
          $case = block_context;
          if ("admonition"['$===']($case)) {
          
          $writer = ["name", (admonition_name = style.$downcase())];
          $send(attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["textlabel", ($truthy($a = attributes.$delete("caption")) ? $a : doc_attrs['$[]']("" + (admonition_name) + "-caption"))];
          $send(attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          block = self.$build_block(block_context, "compound", terminator, parent, reader, attributes);}
          else if ("comment"['$===']($case)) {
          self.$build_block(block_context, "skip", terminator, parent, reader, attributes);
          attributes.$clear();
          return nil;}
          else if ("example"['$===']($case)) {block = self.$build_block(block_context, "compound", terminator, parent, reader, attributes)}
          else if ("listing"['$===']($case) || "literal"['$===']($case)) {block = self.$build_block(block_context, "verbatim", terminator, parent, reader, attributes)}
          else if ("source"['$===']($case)) {
          $$($nesting, 'AttributeList').$rekey(attributes, [nil, "language", "linenums"]);
          if ($truthy(attributes['$key?']("language"))) {
          } else if ($truthy(doc_attrs['$key?']("source-language"))) {
            
            $writer = ["language", ($truthy($a = doc_attrs['$[]']("source-language")) ? $a : "text")];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(attributes['$key?']("linenums"))) {
          } else if ($truthy(($truthy($a = attributes['$key?']("linenums-option")) ? $a : doc_attrs['$key?']("source-linenums-option")))) {
            
            $writer = ["linenums", ""];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(attributes['$key?']("indent"))) {
          } else if ($truthy(doc_attrs['$key?']("source-indent"))) {
            
            $writer = ["indent", doc_attrs['$[]']("source-indent")];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          block = self.$build_block("listing", "verbatim", terminator, parent, reader, attributes);}
          else if ("fenced_code"['$===']($case)) {
          
          $writer = ["style", "source"];
          $send(attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ((ll = this_line.$length())['$=='](3)) {
            language = nil
          } else if ($truthy((comma_idx = (language = this_line.$slice(3, ll)).$index(",")))) {
            if ($truthy($rb_gt(comma_idx, 0))) {
              
              language = language.$slice(0, comma_idx).$strip();
              if ($truthy($rb_lt(comma_idx, $rb_minus(ll, 4)))) {
                
                $writer = ["linenums", ""];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
            } else {
              
              language = nil;
              if ($truthy($rb_gt(ll, 4))) {
                
                $writer = ["linenums", ""];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
            }
          } else {
            language = language.$lstrip()
          };
          if ($truthy(language['$nil_or_empty?']())) {
            if ($truthy(doc_attrs['$key?']("source-language"))) {
              
              $writer = ["language", ($truthy($a = doc_attrs['$[]']("source-language")) ? $a : "text")];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];}
          } else {
            
            $writer = ["language", language];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          if ($truthy(attributes['$key?']("linenums"))) {
          } else if ($truthy(($truthy($a = attributes['$key?']("linenums-option")) ? $a : doc_attrs['$key?']("source-linenums-option")))) {
            
            $writer = ["linenums", ""];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(attributes['$key?']("indent"))) {
          } else if ($truthy(doc_attrs['$key?']("source-indent"))) {
            
            $writer = ["indent", doc_attrs['$[]']("source-indent")];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          terminator = terminator.$slice(0, 3);
          block = self.$build_block("listing", "verbatim", terminator, parent, reader, attributes);}
          else if ("pass"['$===']($case)) {block = self.$build_block(block_context, "raw", terminator, parent, reader, attributes)}
          else if ("stem"['$===']($case) || "latexmath"['$===']($case) || "asciimath"['$===']($case)) {
          if (block_context['$==']("stem")) {
            
            $writer = ["style", $$($nesting, 'STEM_TYPE_ALIASES')['$[]'](($truthy($a = attributes['$[]'](2)) ? $a : doc_attrs['$[]']("stem")))];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          block = self.$build_block("stem", "raw", terminator, parent, reader, attributes);}
          else if ("open"['$===']($case) || "sidebar"['$===']($case)) {block = self.$build_block(block_context, "compound", terminator, parent, reader, attributes)}
          else if ("table"['$===']($case)) {
          block_cursor = reader.$cursor();
          block_reader = $$($nesting, 'Reader').$new(reader.$read_lines_until($hash2(["terminator", "skip_line_comments", "context", "cursor"], {"terminator": terminator, "skip_line_comments": true, "context": "table", "cursor": "at_mark"})), block_cursor);
          if ($truthy(terminator['$start_with?']("|", "!"))) {
          } else {
            ($truthy($a = attributes['$[]']("format")) ? $a : (($writer = ["format", (function() {if ($truthy(terminator['$start_with?'](","))) {
              return "csv"
            } else {
              return "dsv"
            }; return nil; })()]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
          };
          block = self.$parse_table(block_reader, parent, attributes);}
          else if ("quote"['$===']($case) || "verse"['$===']($case)) {
          $$($nesting, 'AttributeList').$rekey(attributes, [nil, "attribution", "citetitle"]);
          block = self.$build_block(block_context, (function() {if (block_context['$==']("verse")) {
            return "verbatim"
          } else {
            return "compound"
          }; return nil; })(), terminator, parent, reader, attributes);}
          else {if ($truthy(($truthy($a = block_extensions) ? (extension = extensions['$registered_for_block?'](block_context, cloaked_context)) : $a))) {
            
            if ($truthy((content_model = extension.$config()['$[]']("content_model"))['$!=']("skip"))) {
              
              if ($truthy((pos_attrs = ($truthy($a = extension.$config()['$[]']("pos_attrs")) ? $a : []))['$empty?']()['$!']())) {
                $$($nesting, 'AttributeList').$rekey(attributes, [nil].$concat(pos_attrs))};
              if ($truthy((default_attrs = extension.$config()['$[]']("default_attrs")))) {
                $send(default_attrs, 'each', [], (TMP_13 = function(k, v){var self = TMP_13.$$s || this, $e;

                
                  
                  if (k == null) {
                    k = nil;
                  };
                  
                  if (v == null) {
                    v = nil;
                  };
                  return ($truthy($e = attributes['$[]'](k)) ? $e : (($writer = [k, v]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13))};
              
              $writer = ["cloaked-context", cloaked_context];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            block = self.$build_block(block_context, content_model, terminator, parent, reader, attributes, $hash2(["extension"], {"extension": extension}));
            if ($truthy(block)) {
            } else {
              
              attributes.$clear();
              return nil;
            };
          } else {
            self.$raise("" + "Unsupported block type " + (block_context) + " at " + (reader.$cursor()))
          }};
        };
        if ($truthy(document.$sourcemap())) {
          
          $writer = [reader.$cursor_at_mark()];
          $send(block, 'source_location=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(attributes['$key?']("title"))) {
          
          $writer = [attributes.$delete("title")];
          $send(block, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = [attributes['$[]']("style")];
        $send(block, 'style=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy((block_id = ($truthy($a = block.$id()) ? $a : (($writer = [attributes['$[]']("id")]), $send(block, 'id=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))))) {
          if ($truthy(document.$register("refs", [block_id, block, ($truthy($a = attributes['$[]']("reftext")) ? $a : (function() {if ($truthy(block['$title?']())) {
            return block.$title()
          } else {
            return nil
          }; return nil; })())]))) {
          } else {
            self.$logger().$warn(self.$message_with_context("" + "id assigned to block already in use: " + (block_id), $hash2(["source_location"], {"source_location": reader.$cursor_at_mark()})))
          }};
        if ($truthy(attributes['$empty?']())) {
        } else {
          block.$attributes().$update(attributes)
        };
        block.$lock_in_subs();
        if ($truthy(block['$sub?']("callouts"))) {
          if ($truthy(self.$catalog_callouts(block.$source(), document))) {
          } else {
            block.$remove_sub("callouts")
          }};
        return block;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_Parser_next_block_10.$$arity = -3);
      Opal.defs(self, '$read_paragraph_lines', TMP_Parser_read_paragraph_lines_14 = function $$read_paragraph_lines(reader, break_at_list, opts) {
        var self = this, $writer = nil, break_condition = nil;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        
        $writer = ["break_on_blank_lines", true];
        $send(opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["break_on_list_continuation", true];
        $send(opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["preserve_last_line", true];
        $send(opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        break_condition = (function() {if ($truthy(break_at_list)) {
          
          if ($truthy($$($nesting, 'Compliance').$block_terminates_paragraph())) {
            return $$($nesting, 'StartOfBlockOrListProc')
          } else {
            return $$($nesting, 'StartOfListProc')
          };
        } else {
          
          if ($truthy($$($nesting, 'Compliance').$block_terminates_paragraph())) {
            return $$($nesting, 'StartOfBlockProc')
          } else {
            return $$($nesting, 'NoOp')
          };
        }; return nil; })();
        return $send(reader, 'read_lines_until', [opts], break_condition.$to_proc());
      }, TMP_Parser_read_paragraph_lines_14.$$arity = -3);
      Opal.defs(self, '$is_delimited_block?', TMP_Parser_is_delimited_block$q_15 = function(line, return_match_data) {
        var $a, $b, self = this, line_len = nil, tip = nil, tl = nil, fenced_code = nil, tip_3 = nil, context = nil, masq = nil;

        
        
        if (return_match_data == null) {
          return_match_data = false;
        };
        if ($truthy(($truthy($a = $rb_gt((line_len = line.$length()), 1)) ? $$($nesting, 'DELIMITED_BLOCK_HEADS')['$include?'](line.$slice(0, 2)) : $a))) {
        } else {
          return nil
        };
        if (line_len['$=='](2)) {
          
          tip = line;
          tl = 2;
        } else {
          
          if ($truthy($rb_le(line_len, 4))) {
            
            tip = line;
            tl = line_len;
          } else {
            
            tip = line.$slice(0, 4);
            tl = 4;
          };
          fenced_code = false;
          if ($truthy($$($nesting, 'Compliance').$markdown_syntax())) {
            
            tip_3 = (function() {if (tl['$=='](4)) {
              return tip.$chop()
            } else {
              return tip
            }; return nil; })();
            if (tip_3['$==']("```")) {
              
              if ($truthy((($a = tl['$=='](4)) ? tip['$end_with?']("`") : tl['$=='](4)))) {
                return nil};
              tip = tip_3;
              tl = 3;
              fenced_code = true;};};
          if ($truthy((($a = tl['$=='](3)) ? fenced_code['$!']() : tl['$=='](3)))) {
            return nil};
        };
        if ($truthy($$($nesting, 'DELIMITED_BLOCKS')['$key?'](tip))) {
          if ($truthy(($truthy($a = $rb_lt(tl, 4)) ? $a : tl['$=='](line_len)))) {
            if ($truthy(return_match_data)) {
              
              $b = $$($nesting, 'DELIMITED_BLOCKS')['$[]'](tip), $a = Opal.to_ary($b), (context = ($a[0] == null ? nil : $a[0])), (masq = ($a[1] == null ? nil : $a[1])), $b;
              return $$($nesting, 'BlockMatchData').$new(context, masq, tip, tip);
            } else {
              return true
            }
          } else if ((("" + (tip)) + ($rb_times(tip.$slice(-1, 1), $rb_minus(line_len, tl))))['$=='](line)) {
            if ($truthy(return_match_data)) {
              
              $b = $$($nesting, 'DELIMITED_BLOCKS')['$[]'](tip), $a = Opal.to_ary($b), (context = ($a[0] == null ? nil : $a[0])), (masq = ($a[1] == null ? nil : $a[1])), $b;
              return $$($nesting, 'BlockMatchData').$new(context, masq, tip, line);
            } else {
              return true
            }
          } else {
            return nil
          }
        } else {
          return nil
        };
      }, TMP_Parser_is_delimited_block$q_15.$$arity = -2);
      Opal.defs(self, '$build_block', TMP_Parser_build_block_16 = function $$build_block(block_context, content_model, terminator, parent, reader, attributes, options) {
        var $a, $b, self = this, skip_processing = nil, parse_as_content_model = nil, lines = nil, block_reader = nil, block_cursor = nil, indent = nil, tab_size = nil, extension = nil, block = nil, $writer = nil;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        if (content_model['$==']("skip")) {
          $a = [true, "simple"], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a
        } else if (content_model['$==']("raw")) {
          $a = [false, "simple"], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a
        } else {
          $a = [false, content_model], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a
        };
        if ($truthy(terminator['$nil?']())) {
          
          if (parse_as_content_model['$==']("verbatim")) {
            lines = reader.$read_lines_until($hash2(["break_on_blank_lines", "break_on_list_continuation"], {"break_on_blank_lines": true, "break_on_list_continuation": true}))
          } else {
            
            if (content_model['$==']("compound")) {
              content_model = "simple"};
            lines = self.$read_paragraph_lines(reader, false, $hash2(["skip_line_comments", "skip_processing"], {"skip_line_comments": true, "skip_processing": skip_processing}));
          };
          block_reader = nil;
        } else if ($truthy(parse_as_content_model['$!=']("compound"))) {
          
          lines = reader.$read_lines_until($hash2(["terminator", "skip_processing", "context", "cursor"], {"terminator": terminator, "skip_processing": skip_processing, "context": block_context, "cursor": "at_mark"}));
          block_reader = nil;
        } else if (terminator['$=='](false)) {
          
          lines = nil;
          block_reader = reader;
        } else {
          
          lines = nil;
          block_cursor = reader.$cursor();
          block_reader = $$($nesting, 'Reader').$new(reader.$read_lines_until($hash2(["terminator", "skip_processing", "context", "cursor"], {"terminator": terminator, "skip_processing": skip_processing, "context": block_context, "cursor": "at_mark"})), block_cursor);
        };
        if (content_model['$==']("verbatim")) {
          if ($truthy((indent = attributes['$[]']("indent")))) {
            self['$adjust_indentation!'](lines, indent, ($truthy($a = attributes['$[]']("tabsize")) ? $a : parent.$document().$attributes()['$[]']("tabsize")))
          } else if ($truthy($rb_gt((tab_size = ($truthy($a = attributes['$[]']("tabsize")) ? $a : parent.$document().$attributes()['$[]']("tabsize")).$to_i()), 0))) {
            self['$adjust_indentation!'](lines, nil, tab_size)}
        } else if (content_model['$==']("skip")) {
          return nil};
        if ($truthy((extension = options['$[]']("extension")))) {
          
          attributes.$delete("style");
          if ($truthy((block = extension.$process_method()['$[]'](parent, ($truthy($a = block_reader) ? $a : $$($nesting, 'Reader').$new(lines)), attributes.$dup())))) {
            
            attributes.$replace(block.$attributes());
            if ($truthy((($a = block.$content_model()['$==']("compound")) ? (lines = block.$lines())['$nil_or_empty?']()['$!']() : block.$content_model()['$==']("compound")))) {
              
              content_model = "compound";
              block_reader = $$($nesting, 'Reader').$new(lines);};
          } else {
            return nil
          };
        } else {
          block = $$($nesting, 'Block').$new(parent, block_context, $hash2(["content_model", "source", "attributes"], {"content_model": content_model, "source": lines, "attributes": attributes}))
        };
        if ($truthy(($truthy($a = ($truthy($b = attributes['$key?']("title")) ? block.$context()['$!=']("admonition") : $b)) ? parent.$document().$attributes()['$key?']("" + (block.$context()) + "-caption") : $a))) {
          
          
          $writer = [attributes.$delete("title")];
          $send(block, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          block.$assign_caption(attributes.$delete("caption"));};
        if (content_model['$==']("compound")) {
          self.$parse_blocks(block_reader, block)};
        return block;
      }, TMP_Parser_build_block_16.$$arity = -7);
      Opal.defs(self, '$parse_blocks', TMP_Parser_parse_blocks_17 = function $$parse_blocks(reader, parent) {
        var $a, $b, $c, self = this, block = nil;

        while ($truthy(($truthy($b = ($truthy($c = (block = self.$next_block(reader, parent))) ? parent.$blocks()['$<<'](block) : $c)) ? $b : reader['$has_more_lines?']()))) {
          
        }
      }, TMP_Parser_parse_blocks_17.$$arity = 2);
      Opal.defs(self, '$parse_list', TMP_Parser_parse_list_18 = function $$parse_list(reader, list_type, parent, style) {
        var $a, $b, $c, self = this, list_block = nil, list_rx = nil, list_item = nil;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        
        list_block = $$($nesting, 'List').$new(parent, list_type);
        while ($truthy(($truthy($b = reader['$has_more_lines?']()) ? (list_rx = ($truthy($c = list_rx) ? $c : $$($nesting, 'ListRxMap')['$[]'](list_type)))['$=~'](reader.$peek_line()) : $b))) {
          
          if ($truthy((list_item = self.$parse_list_item(reader, list_block, $gvars["~"], (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), style)))) {
            list_block.$items()['$<<'](list_item)};
          if ($truthy($b = reader.$skip_blank_lines())) {
            $b
          } else {
            break;
          };
        };
        return list_block;
      }, TMP_Parser_parse_list_18.$$arity = 4);
      Opal.defs(self, '$catalog_callouts', TMP_Parser_catalog_callouts_19 = function $$catalog_callouts(text, document) {
        var TMP_20, self = this, found = nil, autonum = nil;

        
        found = false;
        autonum = 0;
        if ($truthy(text['$include?']("<"))) {
          $send(text, 'scan', [$$($nesting, 'CalloutScanRx')], (TMP_20 = function(){var self = TMP_20.$$s || this, $a, $b, captured = nil, num = nil;

          
            $a = [(($b = $gvars['~']) === nil ? nil : $b['$[]'](0)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))], (captured = $a[0]), (num = $a[1]), $a;
            if ($truthy(captured['$start_with?']("\\"))) {
            } else {
              document.$callouts().$register((function() {if (num['$=='](".")) {
                return (autonum = $rb_plus(autonum, 1)).$to_s()
              } else {
                return num
              }; return nil; })())
            };
            return (found = true);}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20))};
        return found;
      }, TMP_Parser_catalog_callouts_19.$$arity = 2);
      Opal.defs(self, '$catalog_inline_anchor', TMP_Parser_catalog_inline_anchor_21 = function $$catalog_inline_anchor(id, reftext, node, location, doc) {
        var $a, self = this;

        
        
        if (doc == null) {
          doc = nil;
        };
        doc = ($truthy($a = doc) ? $a : node.$document());
        if ($truthy(($truthy($a = reftext) ? reftext['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $a))) {
          reftext = doc.$sub_attributes(reftext)};
        if ($truthy(doc.$register("refs", [id, $$($nesting, 'Inline').$new(node, "anchor", reftext, $hash2(["type", "id"], {"type": "ref", "id": id})), reftext]))) {
        } else {
          
          if ($truthy($$($nesting, 'Reader')['$==='](location))) {
            location = location.$cursor()};
          self.$logger().$warn(self.$message_with_context("" + "id assigned to anchor already in use: " + (id), $hash2(["source_location"], {"source_location": location})));
        };
        return nil;
      }, TMP_Parser_catalog_inline_anchor_21.$$arity = -5);
      Opal.defs(self, '$catalog_inline_anchors', TMP_Parser_catalog_inline_anchors_22 = function $$catalog_inline_anchors(text, block, document, reader) {
        var $a, TMP_23, self = this;

        
        if ($truthy(($truthy($a = text['$include?']("[[")) ? $a : text['$include?']("or:")))) {
          $send(text, 'scan', [$$($nesting, 'InlineAnchorScanRx')], (TMP_23 = function(){var self = TMP_23.$$s || this, $b, m = nil, id = nil, reftext = nil, location = nil, offset = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy((id = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))))) {
              if ($truthy((reftext = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))))) {
                if ($truthy(($truthy($b = reftext['$include?']($$($nesting, 'ATTR_REF_HEAD'))) ? (reftext = document.$sub_attributes(reftext))['$empty?']() : $b))) {
                  return nil;}}
            } else {
              
              id = (($b = $gvars['~']) === nil ? nil : $b['$[]'](3));
              if ($truthy((reftext = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4))))) {
                
                if ($truthy(reftext['$include?']("]"))) {
                  reftext = reftext.$gsub("\\]", "]")};
                if ($truthy(($truthy($b = reftext['$include?']($$($nesting, 'ATTR_REF_HEAD'))) ? (reftext = document.$sub_attributes(reftext))['$empty?']() : $b))) {
                  return nil;};};
            };
            if ($truthy(document.$register("refs", [id, $$($nesting, 'Inline').$new(block, "anchor", reftext, $hash2(["type", "id"], {"type": "ref", "id": id})), reftext]))) {
              return nil
            } else {
              
              location = reader.$cursor_at_mark();
              if ($truthy($rb_gt((offset = $rb_plus(m.$pre_match().$count($$($nesting, 'LF')), (function() {if ($truthy(m['$[]'](0)['$start_with?']($$($nesting, 'LF')))) {
                return 1
              } else {
                return 0
              }; return nil; })())), 0))) {
                (location = location.$dup()).$advance(offset)};
              return self.$logger().$warn(self.$message_with_context("" + "id assigned to anchor already in use: " + (id), $hash2(["source_location"], {"source_location": location})));
            };}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23))};
        return nil;
      }, TMP_Parser_catalog_inline_anchors_22.$$arity = 4);
      Opal.defs(self, '$catalog_inline_biblio_anchor', TMP_Parser_catalog_inline_biblio_anchor_24 = function $$catalog_inline_biblio_anchor(id, reftext, node, reader) {
        var $a, self = this, styled_reftext = nil;

        
        if ($truthy(node.$document().$register("refs", [id, $$($nesting, 'Inline').$new(node, "anchor", (styled_reftext = "" + "[" + (($truthy($a = reftext) ? $a : id)) + "]"), $hash2(["type", "id"], {"type": "bibref", "id": id})), styled_reftext]))) {
        } else {
          self.$logger().$warn(self.$message_with_context("" + "id assigned to bibliography anchor already in use: " + (id), $hash2(["source_location"], {"source_location": reader.$cursor()})))
        };
        return nil;
      }, TMP_Parser_catalog_inline_biblio_anchor_24.$$arity = 4);
      Opal.defs(self, '$parse_description_list', TMP_Parser_parse_description_list_25 = function $$parse_description_list(reader, match, parent) {
        var $a, $b, $c, self = this, list_block = nil, previous_pair = nil, sibling_pattern = nil, term = nil, item = nil, $writer = nil;

        
        list_block = $$($nesting, 'List').$new(parent, "dlist");
        previous_pair = nil;
        sibling_pattern = $$($nesting, 'DescriptionListSiblingRx')['$[]'](match['$[]'](2));
        while ($truthy(($truthy($b = match) ? $b : ($truthy($c = reader['$has_more_lines?']()) ? (match = sibling_pattern.$match(reader.$peek_line())) : $c)))) {
          
          $c = self.$parse_list_item(reader, list_block, match, sibling_pattern), $b = Opal.to_ary($c), (term = ($b[0] == null ? nil : $b[0])), (item = ($b[1] == null ? nil : $b[1])), $c;
          if ($truthy(($truthy($b = previous_pair) ? previous_pair['$[]'](1)['$!']() : $b))) {
            
            previous_pair['$[]'](0)['$<<'](term);
            
            $writer = [1, item];
            $send(previous_pair, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          } else {
            list_block.$items()['$<<']((previous_pair = [[term], item]))
          };
          match = nil;
        };
        return list_block;
      }, TMP_Parser_parse_description_list_25.$$arity = 3);
      Opal.defs(self, '$parse_callout_list', TMP_Parser_parse_callout_list_26 = function $$parse_callout_list(reader, match, parent, callouts) {
        var $a, $b, $c, self = this, list_block = nil, next_index = nil, autonum = nil, num = nil, list_item = nil, coids = nil, $writer = nil;

        
        list_block = $$($nesting, 'List').$new(parent, "colist");
        next_index = 1;
        autonum = 0;
        while ($truthy(($truthy($b = match) ? $b : ($truthy($c = (match = $$($nesting, 'CalloutListRx').$match(reader.$peek_line()))) ? reader.$mark() : $c)))) {
          
          if ((num = match['$[]'](1))['$=='](".")) {
            num = (autonum = $rb_plus(autonum, 1)).$to_s()};
          if (num['$=='](next_index.$to_s())) {
          } else {
            self.$logger().$warn(self.$message_with_context("" + "callout list item index: expected " + (next_index) + ", got " + (num), $hash2(["source_location"], {"source_location": reader.$cursor_at_mark()})))
          };
          if ($truthy((list_item = self.$parse_list_item(reader, list_block, match, "<1>")))) {
            
            list_block.$items()['$<<'](list_item);
            if ($truthy((coids = callouts.$callout_ids(list_block.$items().$size()))['$empty?']())) {
              self.$logger().$warn(self.$message_with_context("" + "no callout found for <" + (list_block.$items().$size()) + ">", $hash2(["source_location"], {"source_location": reader.$cursor_at_mark()})))
            } else {
              
              $writer = ["coids", coids];
              $send(list_item.$attributes(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };};
          next_index = $rb_plus(next_index, 1);
          match = nil;
        };
        callouts.$next_list();
        return list_block;
      }, TMP_Parser_parse_callout_list_26.$$arity = 4);
      Opal.defs(self, '$parse_list_item', TMP_Parser_parse_list_item_27 = function $$parse_list_item(reader, list_block, match, sibling_trait, style) {
        var $a, $b, self = this, list_type = nil, dlist = nil, list_term = nil, term_text = nil, item_text = nil, has_text = nil, list_item = nil, $writer = nil, sourcemap_assignment_deferred = nil, ordinal = nil, implicit_style = nil, block_cursor = nil, list_item_reader = nil, comment_lines = nil, subsequent_line = nil, continuation_connects_first_block = nil, content_adjacent = nil, block = nil;

        
        
        if (style == null) {
          style = nil;
        };
        if ((list_type = list_block.$context())['$==']("dlist")) {
          
          dlist = true;
          list_term = $$($nesting, 'ListItem').$new(list_block, (term_text = match['$[]'](1)));
          if ($truthy(($truthy($a = term_text['$start_with?']("[[")) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](term_text) : $a))) {
            self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), ($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) ? $a : (($b = $gvars['~']) === nil ? nil : $b.$post_match()).$lstrip()), list_term, reader)};
          if ($truthy((item_text = match['$[]'](3)))) {
            has_text = true};
          list_item = $$($nesting, 'ListItem').$new(list_block, item_text);
          if ($truthy(list_block.$document().$sourcemap())) {
            
            
            $writer = [reader.$cursor()];
            $send(list_term, 'source_location=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(has_text)) {
              
              $writer = [list_term.$source_location()];
              $send(list_item, 'source_location=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            } else {
              sourcemap_assignment_deferred = true
            };};
        } else {
          
          has_text = true;
          list_item = $$($nesting, 'ListItem').$new(list_block, (item_text = match['$[]'](2)));
          if ($truthy(list_block.$document().$sourcemap())) {
            
            $writer = [reader.$cursor()];
            $send(list_item, 'source_location=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if (list_type['$==']("ulist")) {
            
            
            $writer = [sibling_trait];
            $send(list_item, 'marker=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(item_text['$start_with?']("["))) {
              if ($truthy(($truthy($a = style) ? style['$==']("bibliography") : $a))) {
                if ($truthy($$($nesting, 'InlineBiblioAnchorRx')['$=~'](item_text))) {
                  self.$catalog_inline_biblio_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)}
              } else if ($truthy(item_text['$start_with?']("[["))) {
                if ($truthy($$($nesting, 'LeadingInlineAnchorRx')['$=~'](item_text))) {
                  self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)}
              } else if ($truthy(item_text['$start_with?']("[ ] ", "[x] ", "[*] "))) {
                
                
                $writer = ["checklist-option", ""];
                $send(list_block.$attributes(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = ["checkbox", ""];
                $send(list_item.$attributes(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy(item_text['$start_with?']("[ "))) {
                } else {
                  
                  $writer = ["checked", ""];
                  $send(list_item.$attributes(), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                };
                
                $writer = [item_text.$slice(4, item_text.$length())];
                $send(list_item, 'text=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;}};
          } else if (list_type['$==']("olist")) {
            
            $b = self.$resolve_ordered_list_marker(sibling_trait, (ordinal = list_block.$items().$size()), true, reader), $a = Opal.to_ary($b), (sibling_trait = ($a[0] == null ? nil : $a[0])), (implicit_style = ($a[1] == null ? nil : $a[1])), $b;
            
            $writer = [sibling_trait];
            $send(list_item, 'marker=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy((($a = ordinal['$=='](0)) ? style['$!']() : ordinal['$=='](0)))) {
              
              $writer = [($truthy($a = implicit_style) ? $a : ($truthy($b = $$($nesting, 'ORDERED_LIST_STYLES')['$[]']($rb_minus(sibling_trait.$length(), 1))) ? $b : "arabic").$to_s())];
              $send(list_block, 'style=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(($truthy($a = item_text['$start_with?']("[[")) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](item_text) : $a))) {
              self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)};
          } else {
            
            $writer = [sibling_trait];
            $send(list_item, 'marker=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
        };
        reader.$shift();
        block_cursor = reader.$cursor();
        list_item_reader = $$($nesting, 'Reader').$new(self.$read_lines_for_list_item(reader, list_type, sibling_trait, has_text), block_cursor);
        if ($truthy(list_item_reader['$has_more_lines?']())) {
          
          if ($truthy(sourcemap_assignment_deferred)) {
            
            $writer = [block_cursor];
            $send(list_item, 'source_location=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          comment_lines = list_item_reader.$skip_line_comments();
          if ($truthy((subsequent_line = list_item_reader.$peek_line()))) {
            
            if ($truthy(comment_lines['$empty?']())) {
            } else {
              list_item_reader.$unshift_lines(comment_lines)
            };
            if ($truthy((continuation_connects_first_block = subsequent_line['$empty?']()))) {
              content_adjacent = false
            } else {
              
              content_adjacent = true;
              if ($truthy(dlist)) {
              } else {
                has_text = nil
              };
            };
          } else {
            
            continuation_connects_first_block = false;
            content_adjacent = false;
          };
          if ($truthy((block = self.$next_block(list_item_reader, list_item, $hash2([], {}), $hash2(["text"], {"text": has_text['$!']()}))))) {
            list_item.$blocks()['$<<'](block)};
          while ($truthy(list_item_reader['$has_more_lines?']())) {
            if ($truthy((block = self.$next_block(list_item_reader, list_item)))) {
              list_item.$blocks()['$<<'](block)}
          };
          list_item.$fold_first(continuation_connects_first_block, content_adjacent);};
        if ($truthy(dlist)) {
          if ($truthy(($truthy($a = list_item['$text?']()) ? $a : list_item['$blocks?']()))) {
            return [list_term, list_item]
          } else {
            return [list_term]
          }
        } else {
          return list_item
        };
      }, TMP_Parser_parse_list_item_27.$$arity = -5);
      Opal.defs(self, '$read_lines_for_list_item', TMP_Parser_read_lines_for_list_item_28 = function $$read_lines_for_list_item(reader, list_type, sibling_trait, has_text) {
        var $a, $b, $c, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, self = this, buffer = nil, continuation = nil, within_nested_list = nil, detached_continuation = nil, this_line = nil, prev_line = nil, $writer = nil, match = nil, nested_list_type = nil;

        
        
        if (sibling_trait == null) {
          sibling_trait = nil;
        };
        
        if (has_text == null) {
          has_text = true;
        };
        buffer = [];
        continuation = "inactive";
        within_nested_list = false;
        detached_continuation = nil;
        while ($truthy(reader['$has_more_lines?']())) {
          
          this_line = reader.$read_line();
          if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {
            break;};
          prev_line = (function() {if ($truthy(buffer['$empty?']())) {
            return nil
          } else {
            return buffer['$[]'](-1)
          }; return nil; })();
          if (prev_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {
            
            if (continuation['$==']("inactive")) {
              
              continuation = "active";
              has_text = true;
              if ($truthy(within_nested_list)) {
              } else {
                
                $writer = [-1, ""];
                $send(buffer, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };};
            if (this_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {
              
              if ($truthy(continuation['$!=']("frozen"))) {
                
                continuation = "frozen";
                buffer['$<<'](this_line);};
              this_line = nil;
              continue;;};};
          if ($truthy((match = self['$is_delimited_block?'](this_line, true)))) {
            if (continuation['$==']("active")) {
              
              buffer['$<<'](this_line);
              buffer.$concat(reader.$read_lines_until($hash2(["terminator", "read_last_line", "context"], {"terminator": match.$terminator(), "read_last_line": true, "context": nil})));
              continuation = "inactive";
            } else {
              break;
            }
          } else if ($truthy(($truthy($b = (($c = list_type['$==']("dlist")) ? continuation['$!=']("active") : list_type['$==']("dlist"))) ? $$($nesting, 'BlockAttributeLineRx')['$match?'](this_line) : $b))) {
            break;
          } else if ($truthy((($b = continuation['$==']("active")) ? this_line['$empty?']()['$!']() : continuation['$==']("active")))) {
            if ($truthy($$($nesting, 'LiteralParagraphRx')['$match?'](this_line))) {
              
              reader.$unshift_line(this_line);
              buffer.$concat($send(reader, 'read_lines_until', [$hash2(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], {"preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true})], (TMP_29 = function(line){var self = TMP_29.$$s || this, $d;

              
                
                if (line == null) {
                  line = nil;
                };
                return (($d = list_type['$==']("dlist")) ? self['$is_sibling_list_item?'](line, list_type, sibling_trait) : list_type['$==']("dlist"));}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29)));
              continuation = "inactive";
            } else if ($truthy(($truthy($b = ($truthy($c = $$($nesting, 'BlockTitleRx')['$match?'](this_line)) ? $c : $$($nesting, 'BlockAttributeLineRx')['$match?'](this_line))) ? $b : $$($nesting, 'AttributeEntryRx')['$match?'](this_line)))) {
              buffer['$<<'](this_line)
            } else {
              
              if ($truthy((nested_list_type = $send((function() {if ($truthy(within_nested_list)) {
                return ["dlist"]
              } else {
                return $$($nesting, 'NESTABLE_LIST_CONTEXTS')
              }; return nil; })(), 'find', [], (TMP_30 = function(ctx){var self = TMP_30.$$s || this;

              
                
                if (ctx == null) {
                  ctx = nil;
                };
                return $$($nesting, 'ListRxMap')['$[]'](ctx)['$match?'](this_line);}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30))))) {
                
                within_nested_list = true;
                if ($truthy((($b = nested_list_type['$==']("dlist")) ? (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))['$nil_or_empty?']() : nested_list_type['$==']("dlist")))) {
                  has_text = false};};
              buffer['$<<'](this_line);
              continuation = "inactive";
            }
          } else if ($truthy(($truthy($b = prev_line) ? prev_line['$empty?']() : $b))) {
            
            if ($truthy(this_line['$empty?']())) {
              
              if ($truthy((this_line = ($truthy($b = reader.$skip_blank_lines()) ? reader.$read_line() : $b)))) {
              } else {
                break;
              };
              if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {
                break;};};
            if (this_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {
              
              detached_continuation = buffer.$size();
              buffer['$<<'](this_line);
            } else if ($truthy(has_text)) {
              if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {
                break;
              } else if ($truthy((nested_list_type = $send($$($nesting, 'NESTABLE_LIST_CONTEXTS'), 'find', [], (TMP_31 = function(ctx){var self = TMP_31.$$s || this;

              
                
                if (ctx == null) {
                  ctx = nil;
                };
                return $$($nesting, 'ListRxMap')['$[]'](ctx)['$=~'](this_line);}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31))))) {
                
                buffer['$<<'](this_line);
                within_nested_list = true;
                if ($truthy((($b = nested_list_type['$==']("dlist")) ? (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))['$nil_or_empty?']() : nested_list_type['$==']("dlist")))) {
                  has_text = false};
              } else if ($truthy($$($nesting, 'LiteralParagraphRx')['$match?'](this_line))) {
                
                reader.$unshift_line(this_line);
                buffer.$concat($send(reader, 'read_lines_until', [$hash2(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], {"preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true})], (TMP_32 = function(line){var self = TMP_32.$$s || this, $d;

                
                  
                  if (line == null) {
                    line = nil;
                  };
                  return (($d = list_type['$==']("dlist")) ? self['$is_sibling_list_item?'](line, list_type, sibling_trait) : list_type['$==']("dlist"));}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32)));
              } else {
                break;
              }
            } else {
              
              if ($truthy(within_nested_list)) {
              } else {
                buffer.$pop()
              };
              buffer['$<<'](this_line);
              has_text = true;
            };
          } else {
            
            if ($truthy(this_line['$empty?']()['$!']())) {
              has_text = true};
            if ($truthy((nested_list_type = $send((function() {if ($truthy(within_nested_list)) {
              return ["dlist"]
            } else {
              return $$($nesting, 'NESTABLE_LIST_CONTEXTS')
            }; return nil; })(), 'find', [], (TMP_33 = function(ctx){var self = TMP_33.$$s || this;

            
              
              if (ctx == null) {
                ctx = nil;
              };
              return $$($nesting, 'ListRxMap')['$[]'](ctx)['$=~'](this_line);}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33))))) {
              
              within_nested_list = true;
              if ($truthy((($b = nested_list_type['$==']("dlist")) ? (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))['$nil_or_empty?']() : nested_list_type['$==']("dlist")))) {
                has_text = false};};
            buffer['$<<'](this_line);
          };
          this_line = nil;
        };
        if ($truthy(this_line)) {
          reader.$unshift_line(this_line)};
        if ($truthy(detached_continuation)) {
          buffer.$delete_at(detached_continuation)};
        while ($truthy(($truthy($b = buffer['$empty?']()['$!']()) ? buffer['$[]'](-1)['$empty?']() : $b))) {
          buffer.$pop()
        };
        if ($truthy(($truthy($a = buffer['$empty?']()['$!']()) ? buffer['$[]'](-1)['$==']($$($nesting, 'LIST_CONTINUATION')) : $a))) {
          buffer.$pop()};
        return buffer;
      }, TMP_Parser_read_lines_for_list_item_28.$$arity = -3);
      Opal.defs(self, '$initialize_section', TMP_Parser_initialize_section_34 = function $$initialize_section(reader, parent, attributes) {
        var $a, $b, self = this, document = nil, book = nil, doctype = nil, source_location = nil, sect_style = nil, sect_id = nil, sect_reftext = nil, sect_title = nil, sect_level = nil, sect_atx = nil, $writer = nil, sect_name = nil, sect_special = nil, sect_numbered = nil, section = nil, id = nil;

        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        document = parent.$document();
        book = (doctype = document.$doctype())['$==']("book");
        if ($truthy(document.$sourcemap())) {
          source_location = reader.$cursor()};
        sect_style = attributes['$[]'](1);
        $b = self.$parse_section_title(reader, document, attributes['$[]']("id")), $a = Opal.to_ary($b), (sect_id = ($a[0] == null ? nil : $a[0])), (sect_reftext = ($a[1] == null ? nil : $a[1])), (sect_title = ($a[2] == null ? nil : $a[2])), (sect_level = ($a[3] == null ? nil : $a[3])), (sect_atx = ($a[4] == null ? nil : $a[4])), $b;
        if ($truthy(sect_reftext)) {
          
          $writer = ["reftext", sect_reftext];
          $send(attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          sect_reftext = attributes['$[]']("reftext")
        };
        if ($truthy(sect_style)) {
          if ($truthy(($truthy($a = book) ? sect_style['$==']("abstract") : $a))) {
            $a = ["chapter", 1], (sect_name = $a[0]), (sect_level = $a[1]), $a
          } else {
            
            $a = [sect_style, true], (sect_name = $a[0]), (sect_special = $a[1]), $a;
            if (sect_level['$=='](0)) {
              sect_level = 1};
            sect_numbered = sect_style['$==']("appendix");
          }
        } else if ($truthy(book)) {
          sect_name = (function() {if (sect_level['$=='](0)) {
            return "part"
          } else {
            
            if ($truthy($rb_gt(sect_level, 1))) {
              return "section"
            } else {
              return "chapter"
            };
          }; return nil; })()
        } else if ($truthy((($a = doctype['$==']("manpage")) ? sect_title.$casecmp("synopsis")['$=='](0) : doctype['$==']("manpage")))) {
          $a = ["synopsis", true], (sect_name = $a[0]), (sect_special = $a[1]), $a
        } else {
          sect_name = "section"
        };
        section = $$($nesting, 'Section').$new(parent, sect_level);
        $a = [sect_id, sect_title, sect_name, source_location], section['$id=']($a[0]), section['$title=']($a[1]), section['$sectname=']($a[2]), section['$source_location=']($a[3]), $a;
        if ($truthy(sect_special)) {
          
          
          $writer = [true];
          $send(section, 'special=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(sect_numbered)) {
            
            $writer = [true];
            $send(section, 'numbered=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          } else if (document.$attributes()['$[]']("sectnums")['$==']("all")) {
            
            $writer = [(function() {if ($truthy(($truthy($a = book) ? sect_level['$=='](1) : $a))) {
              return "chapter"
            } else {
              return true
            }; return nil; })()];
            $send(section, 'numbered=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
        } else if ($truthy(($truthy($a = document.$attributes()['$[]']("sectnums")) ? $rb_gt(sect_level, 0) : $a))) {
          
          $writer = [(function() {if ($truthy(section.$special())) {
            return ($truthy($a = parent.$numbered()) ? true : $a)
          } else {
            return true
          }; return nil; })()];
          $send(section, 'numbered=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(($truthy($a = ($truthy($b = book) ? sect_level['$=='](0) : $b)) ? document.$attributes()['$[]']("partnums") : $a))) {
          
          $writer = [true];
          $send(section, 'numbered=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy((id = ($truthy($a = section.$id()) ? $a : (($writer = [(function() {if ($truthy(document.$attributes()['$key?']("sectids"))) {
          
          return $$($nesting, 'Section').$generate_id(section.$title(), document);
        } else {
          return nil
        }; return nil; })()]), $send(section, 'id=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))))) {
          if ($truthy(document.$register("refs", [id, section, ($truthy($a = sect_reftext) ? $a : section.$title())]))) {
          } else {
            self.$logger().$warn(self.$message_with_context("" + "id assigned to section already in use: " + (id), $hash2(["source_location"], {"source_location": reader.$cursor_at_line($rb_minus(reader.$lineno(), (function() {if ($truthy(sect_atx)) {
              return 1
            } else {
              return 2
            }; return nil; })()))})))
          }};
        section.$update_attributes(attributes);
        reader.$skip_blank_lines();
        return section;
      }, TMP_Parser_initialize_section_34.$$arity = -3);
      Opal.defs(self, '$is_next_line_section?', TMP_Parser_is_next_line_section$q_35 = function(reader, attributes) {
        var $a, $b, self = this, style = nil, next_lines = nil;

        if ($truthy(($truthy($a = (style = attributes['$[]'](1))) ? ($truthy($b = style['$==']("discrete")) ? $b : style['$==']("float")) : $a))) {
          return nil
        } else if ($truthy($$($nesting, 'Compliance').$underline_style_section_titles())) {
          
          next_lines = reader.$peek_lines(2, ($truthy($a = style) ? style['$==']("comment") : $a));
          return self['$is_section_title?'](($truthy($a = next_lines['$[]'](0)) ? $a : ""), next_lines['$[]'](1));
        } else {
          return self['$atx_section_title?'](($truthy($a = reader.$peek_line()) ? $a : ""))
        }
      }, TMP_Parser_is_next_line_section$q_35.$$arity = 2);
      Opal.defs(self, '$is_next_line_doctitle?', TMP_Parser_is_next_line_doctitle$q_36 = function(reader, attributes, leveloffset) {
        var $a, self = this, sect_level = nil;

        if ($truthy(leveloffset)) {
          return ($truthy($a = (sect_level = self['$is_next_line_section?'](reader, attributes))) ? $rb_plus(sect_level, leveloffset.$to_i())['$=='](0) : $a)
        } else {
          return self['$is_next_line_section?'](reader, attributes)['$=='](0)
        }
      }, TMP_Parser_is_next_line_doctitle$q_36.$$arity = 3);
      Opal.defs(self, '$is_section_title?', TMP_Parser_is_section_title$q_37 = function(line1, line2) {
        var $a, self = this;

        
        
        if (line2 == null) {
          line2 = nil;
        };
        return ($truthy($a = self['$atx_section_title?'](line1)) ? $a : (function() {if ($truthy(line2['$nil_or_empty?']())) {
          return nil
        } else {
          return self['$setext_section_title?'](line1, line2)
        }; return nil; })());
      }, TMP_Parser_is_section_title$q_37.$$arity = -2);
      Opal.defs(self, '$atx_section_title?', TMP_Parser_atx_section_title$q_38 = function(line) {
        var $a, self = this;

        if ($truthy((function() {if ($truthy($$($nesting, 'Compliance').$markdown_syntax())) {
          
          return ($truthy($a = line['$start_with?']("=", "#")) ? $$($nesting, 'ExtAtxSectionTitleRx')['$=~'](line) : $a);
        } else {
          
          return ($truthy($a = line['$start_with?']("=")) ? $$($nesting, 'AtxSectionTitleRx')['$=~'](line) : $a);
        }; return nil; })())) {
          return $rb_minus((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$length(), 1)
        } else {
          return nil
        }
      }, TMP_Parser_atx_section_title$q_38.$$arity = 1);
      Opal.defs(self, '$setext_section_title?', TMP_Parser_setext_section_title$q_39 = function(line1, line2) {
        var $a, $b, $c, self = this, level = nil, line2_ch1 = nil, line2_len = nil;

        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (level = $$($nesting, 'SETEXT_SECTION_LEVELS')['$[]']((line2_ch1 = line2.$chr())))) ? $rb_times(line2_ch1, (line2_len = line2.$length()))['$=='](line2) : $c)) ? $$($nesting, 'SetextSectionTitleRx')['$match?'](line1) : $b)) ? $rb_lt($rb_minus(self.$line_length(line1), line2_len).$abs(), 2) : $a))) {
          return level
        } else {
          return nil
        }
      }, TMP_Parser_setext_section_title$q_39.$$arity = 2);
      Opal.defs(self, '$parse_section_title', TMP_Parser_parse_section_title_40 = function $$parse_section_title(reader, document, sect_id) {
        var $a, $b, $c, $d, $e, self = this, sect_reftext = nil, line1 = nil, sect_level = nil, sect_title = nil, atx = nil, line2 = nil, line2_ch1 = nil, line2_len = nil;

        
        
        if (sect_id == null) {
          sect_id = nil;
        };
        sect_reftext = nil;
        line1 = reader.$read_line();
        if ($truthy((function() {if ($truthy($$($nesting, 'Compliance').$markdown_syntax())) {
          
          return ($truthy($a = line1['$start_with?']("=", "#")) ? $$($nesting, 'ExtAtxSectionTitleRx')['$=~'](line1) : $a);
        } else {
          
          return ($truthy($a = line1['$start_with?']("=")) ? $$($nesting, 'AtxSectionTitleRx')['$=~'](line1) : $a);
        }; return nil; })())) {
          
          $a = [$rb_minus((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)).$length(), 1), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), true], (sect_level = $a[0]), (sect_title = $a[1]), (atx = $a[2]), $a;
          if ($truthy(sect_id)) {
          } else if ($truthy(($truthy($a = ($truthy($b = sect_title['$end_with?']("]]")) ? $$($nesting, 'InlineSectionAnchorRx')['$=~'](sect_title) : $b)) ? (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$!']() : $a))) {
            $a = [sect_title.$slice(0, $rb_minus(sect_title.$length(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length())), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))], (sect_title = $a[0]), (sect_id = $a[1]), (sect_reftext = $a[2]), $a};
        } else if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = ($truthy($e = $$($nesting, 'Compliance').$underline_style_section_titles()) ? (line2 = reader.$peek_line(true)) : $e)) ? (sect_level = $$($nesting, 'SETEXT_SECTION_LEVELS')['$[]']((line2_ch1 = line2.$chr()))) : $d)) ? $rb_times(line2_ch1, (line2_len = line2.$length()))['$=='](line2) : $c)) ? (sect_title = ($truthy($c = $$($nesting, 'SetextSectionTitleRx')['$=~'](line1)) ? (($d = $gvars['~']) === nil ? nil : $d['$[]'](1)) : $c)) : $b)) ? $rb_lt($rb_minus(self.$line_length(line1), line2_len).$abs(), 2) : $a))) {
          
          atx = false;
          if ($truthy(sect_id)) {
          } else if ($truthy(($truthy($a = ($truthy($b = sect_title['$end_with?']("]]")) ? $$($nesting, 'InlineSectionAnchorRx')['$=~'](sect_title) : $b)) ? (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$!']() : $a))) {
            $a = [sect_title.$slice(0, $rb_minus(sect_title.$length(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length())), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))], (sect_title = $a[0]), (sect_id = $a[1]), (sect_reftext = $a[2]), $a};
          reader.$shift();
        } else {
          self.$raise("" + "Unrecognized section at " + (reader.$cursor_at_prev_line()))
        };
        if ($truthy(document['$attr?']("leveloffset"))) {
          sect_level = $rb_plus(sect_level, document.$attr("leveloffset").$to_i())};
        return [sect_id, sect_reftext, sect_title, sect_level, atx];
      }, TMP_Parser_parse_section_title_40.$$arity = -3);
      if ($truthy($$($nesting, 'FORCE_UNICODE_LINE_LENGTH'))) {
        Opal.defs(self, '$line_length', TMP_Parser_line_length_41 = function $$line_length(line) {
          var self = this;

          return line.$scan($$($nesting, 'UnicodeCharScanRx')).$size()
        }, TMP_Parser_line_length_41.$$arity = 1)
      } else {
        Opal.defs(self, '$line_length', TMP_Parser_line_length_42 = function $$line_length(line) {
          var self = this;

          return line.$length()
        }, TMP_Parser_line_length_42.$$arity = 1)
      };
      Opal.defs(self, '$parse_header_metadata', TMP_Parser_parse_header_metadata_43 = function $$parse_header_metadata(reader, document) {
        var $a, TMP_44, TMP_45, TMP_46, self = this, doc_attrs = nil, implicit_authors = nil, metadata = nil, implicit_author = nil, implicit_authorinitials = nil, author_metadata = nil, rev_metadata = nil, rev_line = nil, match = nil, $writer = nil, component = nil, author_line = nil, authors = nil, author_idx = nil, author_key = nil, explicit = nil, sparse = nil, author_override = nil;

        
        
        if (document == null) {
          document = nil;
        };
        doc_attrs = ($truthy($a = document) ? document.$attributes() : $a);
        self.$process_attribute_entries(reader, document);
        $a = [(implicit_authors = $hash2([], {})), nil, nil], (metadata = $a[0]), (implicit_author = $a[1]), (implicit_authorinitials = $a[2]), $a;
        if ($truthy(($truthy($a = reader['$has_more_lines?']()) ? reader['$next_line_empty?']()['$!']() : $a))) {
          
          if ($truthy((author_metadata = self.$process_authors(reader.$read_line()))['$empty?']())) {
          } else {
            
            if ($truthy(document)) {
              
              $send(author_metadata, 'each', [], (TMP_44 = function(key, val){var self = TMP_44.$$s || this, $writer = nil;

              
                
                if (key == null) {
                  key = nil;
                };
                
                if (val == null) {
                  val = nil;
                };
                if ($truthy(doc_attrs['$key?'](key))) {
                  return nil
                } else {
                  
                  $writer = [key, (function() {if ($truthy($$$('::', 'String')['$==='](val))) {
                    
                    return document.$apply_header_subs(val);
                  } else {
                    return val
                  }; return nil; })()];
                  $send(doc_attrs, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                };}, TMP_44.$$s = self, TMP_44.$$arity = 2, TMP_44));
              implicit_author = doc_attrs['$[]']("author");
              implicit_authorinitials = doc_attrs['$[]']("authorinitials");
              implicit_authors = doc_attrs['$[]']("authors");};
            metadata = author_metadata;
          };
          self.$process_attribute_entries(reader, document);
          rev_metadata = $hash2([], {});
          if ($truthy(($truthy($a = reader['$has_more_lines?']()) ? reader['$next_line_empty?']()['$!']() : $a))) {
            
            rev_line = reader.$read_line();
            if ($truthy((match = $$($nesting, 'RevisionInfoLineRx').$match(rev_line)))) {
              
              if ($truthy(match['$[]'](1))) {
                
                $writer = ["revnumber", match['$[]'](1).$rstrip()];
                $send(rev_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy((component = match['$[]'](2).$strip())['$empty?']())) {
              } else if ($truthy(($truthy($a = match['$[]'](1)['$!']()) ? component['$start_with?']("v") : $a))) {
                
                $writer = ["revnumber", component.$slice(1, component.$length())];
                $send(rev_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else {
                
                $writer = ["revdate", component];
                $send(rev_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              if ($truthy(match['$[]'](3))) {
                
                $writer = ["revremark", match['$[]'](3).$rstrip()];
                $send(rev_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
            } else {
              reader.$unshift_line(rev_line)
            };};
          if ($truthy(rev_metadata['$empty?']())) {
          } else {
            
            if ($truthy(document)) {
              $send(rev_metadata, 'each', [], (TMP_45 = function(key, val){var self = TMP_45.$$s || this;

              
                
                if (key == null) {
                  key = nil;
                };
                
                if (val == null) {
                  val = nil;
                };
                if ($truthy(doc_attrs['$key?'](key))) {
                  return nil
                } else {
                  
                  $writer = [key, document.$apply_header_subs(val)];
                  $send(doc_attrs, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                };}, TMP_45.$$s = self, TMP_45.$$arity = 2, TMP_45))};
            metadata.$update(rev_metadata);
          };
          self.$process_attribute_entries(reader, document);
          reader.$skip_blank_lines();
        } else {
          author_metadata = $hash2([], {})
        };
        if ($truthy(document)) {
          
          if ($truthy(($truthy($a = doc_attrs['$key?']("author")) ? (author_line = doc_attrs['$[]']("author"))['$!='](implicit_author) : $a))) {
            
            author_metadata = self.$process_authors(author_line, true, false);
            if ($truthy(doc_attrs['$[]']("authorinitials")['$!='](implicit_authorinitials))) {
              author_metadata.$delete("authorinitials")};
          } else if ($truthy(($truthy($a = doc_attrs['$key?']("authors")) ? (author_line = doc_attrs['$[]']("authors"))['$!='](implicit_authors) : $a))) {
            author_metadata = self.$process_authors(author_line, true)
          } else {
            
            $a = [[], 1, "author_1", false, false], (authors = $a[0]), (author_idx = $a[1]), (author_key = $a[2]), (explicit = $a[3]), (sparse = $a[4]), $a;
            while ($truthy(doc_attrs['$key?'](author_key))) {
              
              if ((author_override = doc_attrs['$[]'](author_key))['$=='](author_metadata['$[]'](author_key))) {
                
                authors['$<<'](nil);
                sparse = true;
              } else {
                
                authors['$<<'](author_override);
                explicit = true;
              };
              author_key = "" + "author_" + ((author_idx = $rb_plus(author_idx, 1)));
            };
            if ($truthy(explicit)) {
              
              if ($truthy(sparse)) {
                $send(authors, 'each_with_index', [], (TMP_46 = function(author, idx){var self = TMP_46.$$s || this, TMP_47, name_idx = nil;

                
                  
                  if (author == null) {
                    author = nil;
                  };
                  
                  if (idx == null) {
                    idx = nil;
                  };
                  if ($truthy(author)) {
                    return nil
                  } else {
                    
                    $writer = [idx, $send([author_metadata['$[]']("" + "firstname_" + ((name_idx = $rb_plus(idx, 1)))), author_metadata['$[]']("" + "middlename_" + (name_idx)), author_metadata['$[]']("" + "lastname_" + (name_idx))].$compact(), 'map', [], (TMP_47 = function(it){var self = TMP_47.$$s || this;

                    
                      
                      if (it == null) {
                        it = nil;
                      };
                      return it.$tr(" ", "_");}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47)).$join(" ")];
                    $send(authors, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                  };}, TMP_46.$$s = self, TMP_46.$$arity = 2, TMP_46))};
              author_metadata = self.$process_authors(authors, true, false);
            } else {
              author_metadata = $hash2([], {})
            };
          };
          if ($truthy(author_metadata['$empty?']())) {
            ($truthy($a = metadata['$[]']("authorcount")) ? $a : (($writer = ["authorcount", (($writer = ["authorcount", 0]), $send(doc_attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])]), $send(metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
          } else {
            
            doc_attrs.$update(author_metadata);
            if ($truthy(($truthy($a = doc_attrs['$key?']("email")['$!']()) ? doc_attrs['$key?']("email_1") : $a))) {
              
              $writer = ["email", doc_attrs['$[]']("email_1")];
              $send(doc_attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
          };};
        return metadata;
      }, TMP_Parser_parse_header_metadata_43.$$arity = -2);
      Opal.defs(self, '$process_authors', TMP_Parser_process_authors_48 = function $$process_authors(author_line, names_only, multiple) {
        var TMP_49, TMP_50, self = this, author_metadata = nil, author_idx = nil, keys = nil, author_entries = nil, $writer = nil;

        
        
        if (names_only == null) {
          names_only = false;
        };
        
        if (multiple == null) {
          multiple = true;
        };
        author_metadata = $hash2([], {});
        author_idx = 0;
        keys = ["author", "authorinitials", "firstname", "middlename", "lastname", "email"];
        author_entries = (function() {if ($truthy(multiple)) {
          return $send(author_line.$split(";"), 'map', [], (TMP_49 = function(it){var self = TMP_49.$$s || this;

          
            
            if (it == null) {
              it = nil;
            };
            return it.$strip();}, TMP_49.$$s = self, TMP_49.$$arity = 1, TMP_49))
        } else {
          return self.$Array(author_line)
        }; return nil; })();
        $send(author_entries, 'each', [], (TMP_50 = function(author_entry){var self = TMP_50.$$s || this, TMP_51, TMP_52, $a, TMP_53, key_map = nil, $writer = nil, segments = nil, match = nil, author = nil, fname = nil, mname = nil, lname = nil;

        
          
          if (author_entry == null) {
            author_entry = nil;
          };
          if ($truthy(author_entry['$empty?']())) {
            return nil;};
          author_idx = $rb_plus(author_idx, 1);
          key_map = $hash2([], {});
          if (author_idx['$=='](1)) {
            $send(keys, 'each', [], (TMP_51 = function(key){var self = TMP_51.$$s || this, $writer = nil;

            
              
              if (key == null) {
                key = nil;
              };
              $writer = [key.$to_sym(), key];
              $send(key_map, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_51.$$s = self, TMP_51.$$arity = 1, TMP_51))
          } else {
            $send(keys, 'each', [], (TMP_52 = function(key){var self = TMP_52.$$s || this, $writer = nil;

            
              
              if (key == null) {
                key = nil;
              };
              $writer = [key.$to_sym(), "" + (key) + "_" + (author_idx)];
              $send(key_map, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_52.$$s = self, TMP_52.$$arity = 1, TMP_52))
          };
          if ($truthy(names_only)) {
            
            if ($truthy(author_entry['$include?']("<"))) {
              
              
              $writer = [key_map['$[]']("author"), author_entry.$tr("_", " ")];
              $send(author_metadata, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              author_entry = author_entry.$gsub($$($nesting, 'XmlSanitizeRx'), "");};
            if ((segments = author_entry.$split(nil, 3)).$size()['$=='](3)) {
              segments['$<<'](segments.$pop().$squeeze(" "))};
          } else if ($truthy((match = $$($nesting, 'AuthorInfoLineRx').$match(author_entry)))) {
            (segments = match.$to_a()).$shift()};
          if ($truthy(segments)) {
            
            author = (($writer = [key_map['$[]']("firstname"), (fname = segments['$[]'](0).$tr("_", " "))]), $send(author_metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
            
            $writer = [key_map['$[]']("authorinitials"), fname.$chr()];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(segments['$[]'](1))) {
              if ($truthy(segments['$[]'](2))) {
                
                
                $writer = [key_map['$[]']("middlename"), (mname = segments['$[]'](1).$tr("_", " "))];
                $send(author_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = [key_map['$[]']("lastname"), (lname = segments['$[]'](2).$tr("_", " "))];
                $send(author_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                author = $rb_plus($rb_plus($rb_plus($rb_plus(fname, " "), mname), " "), lname);
                
                $writer = [key_map['$[]']("authorinitials"), "" + (fname.$chr()) + (mname.$chr()) + (lname.$chr())];
                $send(author_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
              } else {
                
                
                $writer = [key_map['$[]']("lastname"), (lname = segments['$[]'](1).$tr("_", " "))];
                $send(author_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                author = $rb_plus($rb_plus(fname, " "), lname);
                
                $writer = [key_map['$[]']("authorinitials"), "" + (fname.$chr()) + (lname.$chr())];
                $send(author_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
              }};
            ($truthy($a = author_metadata['$[]'](key_map['$[]']("author"))) ? $a : (($writer = [key_map['$[]']("author"), author]), $send(author_metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            if ($truthy(($truthy($a = names_only) ? $a : segments['$[]'](3)['$!']()))) {
            } else {
              
              $writer = [key_map['$[]']("email"), segments['$[]'](3)];
              $send(author_metadata, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
          } else {
            
            
            $writer = [key_map['$[]']("author"), (($writer = [key_map['$[]']("firstname"), (fname = author_entry.$squeeze(" ").$strip())]), $send(author_metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [key_map['$[]']("authorinitials"), fname.$chr()];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          };
          if (author_idx['$=='](1)) {
            
            $writer = ["authors", author_metadata['$[]'](key_map['$[]']("author"))];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            
            if (author_idx['$=='](2)) {
              $send(keys, 'each', [], (TMP_53 = function(key){var self = TMP_53.$$s || this;

              
                
                if (key == null) {
                  key = nil;
                };
                if ($truthy(author_metadata['$key?'](key))) {
                  
                  $writer = ["" + (key) + "_1", author_metadata['$[]'](key)];
                  $send(author_metadata, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                } else {
                  return nil
                };}, TMP_53.$$s = self, TMP_53.$$arity = 1, TMP_53))};
            
            $writer = ["authors", "" + (author_metadata['$[]']("authors")) + ", " + (author_metadata['$[]'](key_map['$[]']("author")))];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          };}, TMP_50.$$s = self, TMP_50.$$arity = 1, TMP_50));
        
        $writer = ["authorcount", author_idx];
        $send(author_metadata, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return author_metadata;
      }, TMP_Parser_process_authors_48.$$arity = -2);
      Opal.defs(self, '$parse_block_metadata_lines', TMP_Parser_parse_block_metadata_lines_54 = function $$parse_block_metadata_lines(reader, document, attributes, options) {
        var $a, $b, self = this;

        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        
        if (options == null) {
          options = $hash2([], {});
        };
        while ($truthy(self.$parse_block_metadata_line(reader, document, attributes, options))) {
          
          reader.$shift();
          if ($truthy($b = reader.$skip_blank_lines())) {
            $b
          } else {
            break;
          };
        };
        return attributes;
      }, TMP_Parser_parse_block_metadata_lines_54.$$arity = -3);
      Opal.defs(self, '$parse_block_metadata_line', TMP_Parser_parse_block_metadata_line_55 = function $$parse_block_metadata_line(reader, document, attributes, options) {
        var $a, $b, self = this, next_line = nil, normal = nil, $writer = nil, reftext = nil, current_style = nil, ll = nil;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        if ($truthy(($truthy($a = (next_line = reader.$peek_line())) ? (function() {if ($truthy(options['$[]']("text"))) {
          
          return next_line['$start_with?']("[", "/");
        } else {
          
          return (normal = next_line['$start_with?']("[", ".", "/", ":"));
        }; return nil; })() : $a))) {
          if ($truthy(next_line['$start_with?']("["))) {
            if ($truthy(next_line['$start_with?']("[["))) {
              if ($truthy(($truthy($a = next_line['$end_with?']("]]")) ? $$($nesting, 'BlockAnchorRx')['$=~'](next_line) : $a))) {
                
                
                $writer = ["id", (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy((reftext = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))))) {
                  
                  $writer = ["reftext", (function() {if ($truthy(reftext['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {
                    
                    return document.$sub_attributes(reftext);
                  } else {
                    return reftext
                  }; return nil; })()];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};
                return true;
              } else {
                return nil
              }
            } else if ($truthy(($truthy($a = next_line['$end_with?']("]")) ? $$($nesting, 'BlockAttributeListRx')['$=~'](next_line) : $a))) {
              
              current_style = attributes['$[]'](1);
              if ($truthy(document.$parse_attributes((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), [], $hash2(["sub_input", "sub_result", "into"], {"sub_input": true, "sub_result": true, "into": attributes}))['$[]'](1))) {
                
                $writer = [1, ($truthy($a = self.$parse_style_attribute(attributes, reader)) ? $a : current_style)];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              return true;
            } else {
              return nil
            }
          } else if ($truthy(($truthy($a = normal) ? next_line['$start_with?'](".") : $a))) {
            if ($truthy($$($nesting, 'BlockTitleRx')['$=~'](next_line))) {
              
              
              $writer = ["title", (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return true;
            } else {
              return nil
            }
          } else if ($truthy(($truthy($a = normal['$!']()) ? $a : next_line['$start_with?']("/")))) {
            if ($truthy(next_line['$start_with?']("//"))) {
              if (next_line['$==']("//")) {
                return true
              } else if ($truthy(($truthy($a = normal) ? $rb_times("/", (ll = next_line.$length()))['$=='](next_line) : $a))) {
                if (ll['$=='](3)) {
                  return nil
                } else {
                  
                  reader.$read_lines_until($hash2(["terminator", "skip_first_line", "preserve_last_line", "skip_processing", "context"], {"terminator": next_line, "skip_first_line": true, "preserve_last_line": true, "skip_processing": true, "context": "comment"}));
                  return true;
                }
              } else if ($truthy(next_line['$start_with?']("///"))) {
                return nil
              } else {
                return true
              }
            } else {
              return nil
            }
          } else if ($truthy(($truthy($a = ($truthy($b = normal) ? next_line['$start_with?'](":") : $b)) ? $$($nesting, 'AttributeEntryRx')['$=~'](next_line) : $a))) {
            
            self.$process_attribute_entry(reader, document, attributes, $gvars["~"]);
            return true;
          } else {
            return nil
          }
        } else {
          return nil
        };
      }, TMP_Parser_parse_block_metadata_line_55.$$arity = -4);
      Opal.defs(self, '$process_attribute_entries', TMP_Parser_process_attribute_entries_56 = function $$process_attribute_entries(reader, document, attributes) {
        var $a, self = this;

        
        
        if (attributes == null) {
          attributes = nil;
        };
        reader.$skip_comment_lines();
        while ($truthy(self.$process_attribute_entry(reader, document, attributes))) {
          
          reader.$shift();
          reader.$skip_comment_lines();
        };
      }, TMP_Parser_process_attribute_entries_56.$$arity = -3);
      Opal.defs(self, '$process_attribute_entry', TMP_Parser_process_attribute_entry_57 = function $$process_attribute_entry(reader, document, attributes, match) {
        var $a, $b, $c, self = this, value = nil, con = nil, next_line = nil, keep_open = nil;

        
        
        if (attributes == null) {
          attributes = nil;
        };
        
        if (match == null) {
          match = nil;
        };
        if ($truthy((match = ($truthy($a = match) ? $a : (function() {if ($truthy(reader['$has_more_lines?']())) {
          
          return $$($nesting, 'AttributeEntryRx').$match(reader.$peek_line());
        } else {
          return nil
        }; return nil; })())))) {
          
          if ($truthy((value = match['$[]'](2))['$nil_or_empty?']())) {
            value = ""
          } else if ($truthy(value['$end_with?']($$($nesting, 'LINE_CONTINUATION'), $$($nesting, 'LINE_CONTINUATION_LEGACY')))) {
            
            $a = [value.$slice(-2, 2), value.$slice(0, $rb_minus(value.$length(), 2)).$rstrip()], (con = $a[0]), (value = $a[1]), $a;
            while ($truthy(($truthy($b = reader.$advance()) ? (next_line = ($truthy($c = reader.$peek_line()) ? $c : ""))['$empty?']()['$!']() : $b))) {
              
              next_line = next_line.$lstrip();
              if ($truthy((keep_open = next_line['$end_with?'](con)))) {
                next_line = next_line.$slice(0, $rb_minus(next_line.$length(), 2)).$rstrip()};
              value = "" + (value) + ((function() {if ($truthy(value['$end_with?']($$($nesting, 'HARD_LINE_BREAK')))) {
                return $$($nesting, 'LF')
              } else {
                return " "
              }; return nil; })()) + (next_line);
              if ($truthy(keep_open)) {
              } else {
                break;
              };
            };};
          self.$store_attribute(match['$[]'](1), value, document, attributes);
          return true;
        } else {
          return nil
        };
      }, TMP_Parser_process_attribute_entry_57.$$arity = -3);
      Opal.defs(self, '$store_attribute', TMP_Parser_store_attribute_58 = function $$store_attribute(name, value, doc, attrs) {
        var $a, self = this, resolved_value = nil;

        
        
        if (doc == null) {
          doc = nil;
        };
        
        if (attrs == null) {
          attrs = nil;
        };
        if ($truthy(name['$end_with?']("!"))) {
          $a = [name.$chop(), nil], (name = $a[0]), (value = $a[1]), $a
        } else if ($truthy(name['$start_with?']("!"))) {
          $a = [name.$slice(1, name.$length()), nil], (name = $a[0]), (value = $a[1]), $a};
        name = self.$sanitize_attribute_name(name);
        if (name['$==']("numbered")) {
          name = "sectnums"};
        if ($truthy(doc)) {
          if ($truthy(value)) {
            
            if (name['$==']("leveloffset")) {
              if ($truthy(value['$start_with?']("+"))) {
                value = $rb_plus(doc.$attr("leveloffset", 0).$to_i(), value.$slice(1, value.$length()).$to_i()).$to_s()
              } else if ($truthy(value['$start_with?']("-"))) {
                value = $rb_minus(doc.$attr("leveloffset", 0).$to_i(), value.$slice(1, value.$length()).$to_i()).$to_s()}};
            if ($truthy((resolved_value = doc.$set_attribute(name, value)))) {
              
              value = resolved_value;
              if ($truthy(attrs)) {
                $$$($$($nesting, 'Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)};};
          } else if ($truthy(($truthy($a = doc.$delete_attribute(name)) ? attrs : $a))) {
            $$$($$($nesting, 'Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)}
        } else if ($truthy(attrs)) {
          $$$($$($nesting, 'Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)};
        return [name, value];
      }, TMP_Parser_store_attribute_58.$$arity = -3);
      Opal.defs(self, '$resolve_list_marker', TMP_Parser_resolve_list_marker_59 = function $$resolve_list_marker(list_type, marker, ordinal, validate, reader) {
        var self = this;

        
        
        if (ordinal == null) {
          ordinal = 0;
        };
        
        if (validate == null) {
          validate = false;
        };
        
        if (reader == null) {
          reader = nil;
        };
        if (list_type['$==']("ulist")) {
          return marker
        } else if (list_type['$==']("olist")) {
          return self.$resolve_ordered_list_marker(marker, ordinal, validate, reader)['$[]'](0)
        } else {
          return "<1>"
        };
      }, TMP_Parser_resolve_list_marker_59.$$arity = -3);
      Opal.defs(self, '$resolve_ordered_list_marker', TMP_Parser_resolve_ordered_list_marker_60 = function $$resolve_ordered_list_marker(marker, ordinal, validate, reader) {
        var TMP_61, $a, self = this, $case = nil, style = nil, expected = nil, actual = nil;

        
        
        if (ordinal == null) {
          ordinal = 0;
        };
        
        if (validate == null) {
          validate = false;
        };
        
        if (reader == null) {
          reader = nil;
        };
        if ($truthy(marker['$start_with?']("."))) {
          return [marker]};
        $case = (style = $send($$($nesting, 'ORDERED_LIST_STYLES'), 'find', [], (TMP_61 = function(s){var self = TMP_61.$$s || this;

        
          
          if (s == null) {
            s = nil;
          };
          return $$($nesting, 'OrderedListMarkerRxMap')['$[]'](s)['$match?'](marker);}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61)));
        if ("arabic"['$===']($case)) {
        if ($truthy(validate)) {
          
          expected = $rb_plus(ordinal, 1);
          actual = marker.$to_i();};
        marker = "1.";}
        else if ("loweralpha"['$===']($case)) {
        if ($truthy(validate)) {
          
          expected = $rb_plus("a"['$[]'](0).$ord(), ordinal).$chr();
          actual = marker.$chop();};
        marker = "a.";}
        else if ("upperalpha"['$===']($case)) {
        if ($truthy(validate)) {
          
          expected = $rb_plus("A"['$[]'](0).$ord(), ordinal).$chr();
          actual = marker.$chop();};
        marker = "A.";}
        else if ("lowerroman"['$===']($case)) {
        if ($truthy(validate)) {
          
          expected = $$($nesting, 'Helpers').$int_to_roman($rb_plus(ordinal, 1)).$downcase();
          actual = marker.$chop();};
        marker = "i)";}
        else if ("upperroman"['$===']($case)) {
        if ($truthy(validate)) {
          
          expected = $$($nesting, 'Helpers').$int_to_roman($rb_plus(ordinal, 1));
          actual = marker.$chop();};
        marker = "I)";};
        if ($truthy(($truthy($a = validate) ? expected['$!='](actual) : $a))) {
          self.$logger().$warn(self.$message_with_context("" + "list item index: expected " + (expected) + ", got " + (actual), $hash2(["source_location"], {"source_location": reader.$cursor()})))};
        return [marker, style];
      }, TMP_Parser_resolve_ordered_list_marker_60.$$arity = -2);
      Opal.defs(self, '$is_sibling_list_item?', TMP_Parser_is_sibling_list_item$q_62 = function(line, list_type, sibling_trait) {
        var $a, self = this, matcher = nil, expected_marker = nil;

        
        if ($truthy($$$('::', 'Regexp')['$==='](sibling_trait))) {
          matcher = sibling_trait
        } else {
          
          matcher = $$($nesting, 'ListRxMap')['$[]'](list_type);
          expected_marker = sibling_trait;
        };
        if ($truthy(matcher['$=~'](line))) {
          if ($truthy(expected_marker)) {
            return expected_marker['$=='](self.$resolve_list_marker(list_type, (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))))
          } else {
            return true
          }
        } else {
          return false
        };
      }, TMP_Parser_is_sibling_list_item$q_62.$$arity = 3);
      Opal.defs(self, '$parse_table', TMP_Parser_parse_table_63 = function $$parse_table(table_reader, parent, attributes) {
        var $a, $b, $c, $d, self = this, table = nil, $writer = nil, colspecs = nil, explicit_colspecs = nil, skipped = nil, parser_ctx = nil, format = nil, loop_idx = nil, implicit_header_boundary = nil, implicit_header = nil, line = nil, beyond_first = nil, next_cellspec = nil, m = nil, pre_match = nil, post_match = nil, $case = nil, cell_text = nil, $logical_op_recvr_tmp_2 = nil;

        
        table = $$($nesting, 'Table').$new(parent, attributes);
        if ($truthy(attributes['$key?']("title"))) {
          
          
          $writer = [attributes.$delete("title")];
          $send(table, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          table.$assign_caption(attributes.$delete("caption"));};
        if ($truthy(($truthy($a = attributes['$key?']("cols")) ? (colspecs = self.$parse_colspecs(attributes['$[]']("cols")))['$empty?']()['$!']() : $a))) {
          
          table.$create_columns(colspecs);
          explicit_colspecs = true;};
        skipped = ($truthy($a = table_reader.$skip_blank_lines()) ? $a : 0);
        parser_ctx = $$$($$($nesting, 'Table'), 'ParserContext').$new(table_reader, table, attributes);
        $a = [parser_ctx.$format(), -1, nil], (format = $a[0]), (loop_idx = $a[1]), (implicit_header_boundary = $a[2]), $a;
        if ($truthy(($truthy($a = ($truthy($b = $rb_gt(skipped, 0)) ? $b : attributes['$key?']("header-option"))) ? $a : attributes['$key?']("noheader-option")))) {
        } else {
          implicit_header = true
        };
        $a = false; while ($a || $truthy((line = table_reader.$read_line()))) {$a = false;
          
          if ($truthy(($truthy($b = (beyond_first = $rb_gt((loop_idx = $rb_plus(loop_idx, 1)), 0))) ? line['$empty?']() : $b))) {
            
            line = nil;
            if ($truthy(implicit_header_boundary)) {
              implicit_header_boundary = $rb_plus(implicit_header_boundary, 1)};
          } else if (format['$==']("psv")) {
            if ($truthy(parser_ctx['$starts_with_delimiter?'](line))) {
              
              line = line.$slice(1, line.$length());
              parser_ctx.$close_open_cell();
              if ($truthy(implicit_header_boundary)) {
                implicit_header_boundary = nil};
            } else {
              
              $c = self.$parse_cellspec(line, "start", parser_ctx.$delimiter()), $b = Opal.to_ary($c), (next_cellspec = ($b[0] == null ? nil : $b[0])), (line = ($b[1] == null ? nil : $b[1])), $c;
              if ($truthy(next_cellspec)) {
                
                parser_ctx.$close_open_cell(next_cellspec);
                if ($truthy(implicit_header_boundary)) {
                  implicit_header_boundary = nil};
              } else if ($truthy(($truthy($b = implicit_header_boundary) ? implicit_header_boundary['$=='](loop_idx) : $b))) {
                $b = [false, nil], (implicit_header = $b[0]), (implicit_header_boundary = $b[1]), $b};
            }};
          if ($truthy(beyond_first)) {
          } else {
            
            table_reader.$mark();
            if ($truthy(implicit_header)) {
              if ($truthy(($truthy($b = table_reader['$has_more_lines?']()) ? table_reader.$peek_line()['$empty?']() : $b))) {
                implicit_header_boundary = 1
              } else {
                implicit_header = false
              }};
          };
          $b = false; while ($b || $truthy(true)) {$b = false;
            if ($truthy(($truthy($c = line) ? (m = parser_ctx.$match_delimiter(line)) : $c))) {
              
              $c = [m.$pre_match(), m.$post_match()], (pre_match = $c[0]), (post_match = $c[1]), $c;
              $case = format;
              if ("csv"['$===']($case)) {
              if ($truthy(parser_ctx['$buffer_has_unclosed_quotes?'](pre_match))) {
                
                parser_ctx.$skip_past_delimiter(pre_match);
                if ($truthy((line = post_match)['$empty?']())) {
                  break;};
                $b = true; continue;;};
              
              $writer = ["" + (parser_ctx.$buffer()) + (pre_match)];
              $send(parser_ctx, 'buffer=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;}
              else if ("dsv"['$===']($case)) {
              if ($truthy(pre_match['$end_with?']("\\"))) {
                
                parser_ctx.$skip_past_escaped_delimiter(pre_match);
                if ($truthy((line = post_match)['$empty?']())) {
                  
                  
                  $writer = ["" + (parser_ctx.$buffer()) + ($$($nesting, 'LF'))];
                  $send(parser_ctx, 'buffer=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  parser_ctx.$keep_cell_open();
                  break;;};
                $b = true; continue;;};
              
              $writer = ["" + (parser_ctx.$buffer()) + (pre_match)];
              $send(parser_ctx, 'buffer=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;}
              else {
              if ($truthy(pre_match['$end_with?']("\\"))) {
                
                parser_ctx.$skip_past_escaped_delimiter(pre_match);
                if ($truthy((line = post_match)['$empty?']())) {
                  
                  
                  $writer = ["" + (parser_ctx.$buffer()) + ($$($nesting, 'LF'))];
                  $send(parser_ctx, 'buffer=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  parser_ctx.$keep_cell_open();
                  break;;};
                $b = true; continue;;};
              $d = self.$parse_cellspec(pre_match), $c = Opal.to_ary($d), (next_cellspec = ($c[0] == null ? nil : $c[0])), (cell_text = ($c[1] == null ? nil : $c[1])), $d;
              parser_ctx.$push_cellspec(next_cellspec);
              
              $writer = ["" + (parser_ctx.$buffer()) + (cell_text)];
              $send(parser_ctx, 'buffer=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
              if ($truthy((line = post_match)['$empty?']())) {
                line = nil};
              parser_ctx.$close_cell();
            } else {
              
              
              $writer = ["" + (parser_ctx.$buffer()) + (line) + ($$($nesting, 'LF'))];
              $send(parser_ctx, 'buffer=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              $case = format;
              if ("csv"['$===']($case)) {if ($truthy(parser_ctx['$buffer_has_unclosed_quotes?']())) {
                
                if ($truthy(($truthy($c = implicit_header_boundary) ? loop_idx['$=='](0) : $c))) {
                  $c = [false, nil], (implicit_header = $c[0]), (implicit_header_boundary = $c[1]), $c};
                parser_ctx.$keep_cell_open();
              } else {
                parser_ctx.$close_cell(true)
              }}
              else if ("dsv"['$===']($case)) {parser_ctx.$close_cell(true)}
              else {parser_ctx.$keep_cell_open()};
              break;;
            }
          };
          if ($truthy(parser_ctx['$cell_open?']())) {
            if ($truthy(table_reader['$has_more_lines?']())) {
            } else {
              parser_ctx.$close_cell(true)
            }
          } else {
            if ($truthy($b = table_reader.$skip_blank_lines())) {
              $b
            } else {
              break;
            }
          };
        };
        if ($truthy(($truthy($a = (($logical_op_recvr_tmp_2 = table.$attributes()), ($truthy($b = $logical_op_recvr_tmp_2['$[]']("colcount")) ? $b : (($writer = ["colcount", table.$columns().$size()]), $send($logical_op_recvr_tmp_2, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])))['$=='](0)) ? $a : explicit_colspecs))) {
        } else {
          table.$assign_column_widths()
        };
        if ($truthy(implicit_header)) {
          
          
          $writer = [true];
          $send(table, 'has_header_option=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["header-option", ""];
          $send(attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["options", (function() {if ($truthy(attributes['$key?']("options"))) {
            return "" + (attributes['$[]']("options")) + ",header"
          } else {
            return "header"
          }; return nil; })()];
          $send(attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;};
        table.$partition_header_footer(attributes);
        return table;
      }, TMP_Parser_parse_table_63.$$arity = 3);
      Opal.defs(self, '$parse_colspecs', TMP_Parser_parse_colspecs_64 = function $$parse_colspecs(records) {
        var TMP_65, TMP_66, self = this, specs = nil;

        
        if ($truthy(records['$include?'](" "))) {
          records = records.$delete(" ")};
        if (records['$=='](records.$to_i().$to_s())) {
          return $send($$$('::', 'Array'), 'new', [records.$to_i()], (TMP_65 = function(){var self = TMP_65.$$s || this;

          return $hash2(["width"], {"width": 1})}, TMP_65.$$s = self, TMP_65.$$arity = 0, TMP_65))};
        specs = [];
        $send((function() {if ($truthy(records['$include?'](","))) {
          
          return records.$split(",", -1);
        } else {
          
          return records.$split(";", -1);
        }; return nil; })(), 'each', [], (TMP_66 = function(record){var self = TMP_66.$$s || this, $a, $b, TMP_67, m = nil, spec = nil, colspec = nil, rowspec = nil, $writer = nil, width = nil;

        
          
          if (record == null) {
            record = nil;
          };
          if ($truthy(record['$empty?']())) {
            return specs['$<<']($hash2(["width"], {"width": 1}))
          } else if ($truthy((m = $$($nesting, 'ColumnSpecRx').$match(record)))) {
            
            spec = $hash2([], {});
            if ($truthy(m['$[]'](2))) {
              
              $b = m['$[]'](2).$split("."), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;
              if ($truthy(($truthy($a = colspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellHorzAlignments')['$key?'](colspec) : $a))) {
                
                $writer = ["halign", $$($nesting, 'TableCellHorzAlignments')['$[]'](colspec)];
                $send(spec, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(($truthy($a = rowspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellVertAlignments')['$key?'](rowspec) : $a))) {
                
                $writer = ["valign", $$($nesting, 'TableCellVertAlignments')['$[]'](rowspec)];
                $send(spec, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};};
            if ($truthy((width = m['$[]'](3)))) {
              
              $writer = ["width", (function() {if (width['$==']("~")) {
                return -1
              } else {
                return width.$to_i()
              }; return nil; })()];
              $send(spec, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            } else {
              
              $writer = ["width", 1];
              $send(spec, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            if ($truthy(($truthy($a = m['$[]'](4)) ? $$($nesting, 'TableCellStyles')['$key?'](m['$[]'](4)) : $a))) {
              
              $writer = ["style", $$($nesting, 'TableCellStyles')['$[]'](m['$[]'](4))];
              $send(spec, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(m['$[]'](1))) {
              return $send((1), 'upto', [m['$[]'](1).$to_i()], (TMP_67 = function(){var self = TMP_67.$$s || this;

              return specs['$<<'](spec.$dup())}, TMP_67.$$s = self, TMP_67.$$arity = 0, TMP_67))
            } else {
              return specs['$<<'](spec)
            };
          } else {
            return nil
          };}, TMP_66.$$s = self, TMP_66.$$arity = 1, TMP_66));
        return specs;
      }, TMP_Parser_parse_colspecs_64.$$arity = 1);
      Opal.defs(self, '$parse_cellspec', TMP_Parser_parse_cellspec_68 = function $$parse_cellspec(line, pos, delimiter) {
        var $a, $b, self = this, m = nil, rest = nil, spec_part = nil, spec = nil, colspec = nil, rowspec = nil, $writer = nil;

        
        
        if (pos == null) {
          pos = "end";
        };
        
        if (delimiter == null) {
          delimiter = nil;
        };
        $a = [nil, ""], (m = $a[0]), (rest = $a[1]), $a;
        if (pos['$==']("start")) {
          if ($truthy(line['$include?'](delimiter))) {
            
            $b = line.$split(delimiter, 2), $a = Opal.to_ary($b), (spec_part = ($a[0] == null ? nil : $a[0])), (rest = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy((m = $$($nesting, 'CellSpecStartRx').$match(spec_part)))) {
              if ($truthy(m['$[]'](0)['$empty?']())) {
                return [$hash2([], {}), rest]}
            } else {
              return [nil, line]
            };
          } else {
            return [nil, line]
          }
        } else if ($truthy((m = $$($nesting, 'CellSpecEndRx').$match(line)))) {
          
          if ($truthy(m['$[]'](0).$lstrip()['$empty?']())) {
            return [$hash2([], {}), line.$rstrip()]};
          rest = m.$pre_match();
        } else {
          return [$hash2([], {}), line]
        };
        spec = $hash2([], {});
        if ($truthy(m['$[]'](1))) {
          
          $b = m['$[]'](1).$split("."), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;
          colspec = (function() {if ($truthy(colspec['$nil_or_empty?']())) {
            return 1
          } else {
            return colspec.$to_i()
          }; return nil; })();
          rowspec = (function() {if ($truthy(rowspec['$nil_or_empty?']())) {
            return 1
          } else {
            return rowspec.$to_i()
          }; return nil; })();
          if (m['$[]'](2)['$==']("+")) {
            
            if (colspec['$=='](1)) {
            } else {
              
              $writer = ["colspan", colspec];
              $send(spec, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            if (rowspec['$=='](1)) {
            } else {
              
              $writer = ["rowspan", rowspec];
              $send(spec, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
          } else if (m['$[]'](2)['$==']("*")) {
            if (colspec['$=='](1)) {
            } else {
              
              $writer = ["repeatcol", colspec];
              $send(spec, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            }};};
        if ($truthy(m['$[]'](3))) {
          
          $b = m['$[]'](3).$split("."), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(($truthy($a = colspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellHorzAlignments')['$key?'](colspec) : $a))) {
            
            $writer = ["halign", $$($nesting, 'TableCellHorzAlignments')['$[]'](colspec)];
            $send(spec, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(($truthy($a = rowspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellVertAlignments')['$key?'](rowspec) : $a))) {
            
            $writer = ["valign", $$($nesting, 'TableCellVertAlignments')['$[]'](rowspec)];
            $send(spec, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};};
        if ($truthy(($truthy($a = m['$[]'](4)) ? $$($nesting, 'TableCellStyles')['$key?'](m['$[]'](4)) : $a))) {
          
          $writer = ["style", $$($nesting, 'TableCellStyles')['$[]'](m['$[]'](4))];
          $send(spec, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return [spec, rest];
      }, TMP_Parser_parse_cellspec_68.$$arity = -2);
      Opal.defs(self, '$parse_style_attribute', TMP_Parser_parse_style_attribute_69 = function $$parse_style_attribute(attributes, reader) {
        var $a, $b, TMP_70, TMP_71, TMP_72, self = this, raw_style = nil, type = nil, collector = nil, parsed = nil, save_current = nil, $writer = nil, parsed_style = nil, existing_role = nil, opts = nil, existing_opts = nil;

        
        
        if (reader == null) {
          reader = nil;
        };
        if ($truthy(($truthy($a = ($truthy($b = (raw_style = attributes['$[]'](1))) ? raw_style['$include?'](" ")['$!']() : $b)) ? $$($nesting, 'Compliance').$shorthand_property_syntax() : $a))) {
          
          $a = ["style", [], $hash2([], {})], (type = $a[0]), (collector = $a[1]), (parsed = $a[2]), $a;
          save_current = $send(self, 'lambda', [], (TMP_70 = function(){var self = TMP_70.$$s || this, $c, $case = nil, $writer = nil;

          if ($truthy(collector['$empty?']())) {
              if (type['$==']("style")) {
                return nil
              } else if ($truthy(reader)) {
                return self.$logger().$warn(self.$message_with_context("" + "invalid empty " + (type) + " detected in style attribute", $hash2(["source_location"], {"source_location": reader.$cursor_at_prev_line()})))
              } else {
                return self.$logger().$warn("" + "invalid empty " + (type) + " detected in style attribute")
              }
            } else {
              
              $case = type;
              if ("role"['$===']($case) || "option"['$===']($case)) {($truthy($c = parsed['$[]'](type)) ? $c : (($writer = [type, []]), $send(parsed, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<'](collector.$join())}
              else if ("id"['$===']($case)) {
              if ($truthy(parsed['$key?']("id"))) {
                if ($truthy(reader)) {
                  self.$logger().$warn(self.$message_with_context("multiple ids detected in style attribute", $hash2(["source_location"], {"source_location": reader.$cursor_at_prev_line()})))
                } else {
                  self.$logger().$warn("multiple ids detected in style attribute")
                }};
              
              $writer = [type, collector.$join()];
              $send(parsed, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;}
              else {
              $writer = [type, collector.$join()];
              $send(parsed, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
              return (collector = []);
            }}, TMP_70.$$s = self, TMP_70.$$arity = 0, TMP_70));
          $send(raw_style, 'each_char', [], (TMP_71 = function(c){var self = TMP_71.$$s || this, $c, $d, $case = nil;

          
            
            if (c == null) {
              c = nil;
            };
            if ($truthy(($truthy($c = ($truthy($d = c['$=='](".")) ? $d : c['$==']("#"))) ? $c : c['$==']("%")))) {
              
              save_current.$call();
              return (function() {$case = c;
              if ("."['$===']($case)) {return (type = "role")}
              else if ("#"['$===']($case)) {return (type = "id")}
              else if ("%"['$===']($case)) {return (type = "option")}
              else { return nil }})();
            } else {
              return collector['$<<'](c)
            };}, TMP_71.$$s = self, TMP_71.$$arity = 1, TMP_71));
          if (type['$==']("style")) {
            
            $writer = ["style", raw_style];
            $send(attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            
            save_current.$call();
            if ($truthy(parsed['$key?']("style"))) {
              parsed_style = (($writer = ["style", parsed['$[]']("style")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])};
            if ($truthy(parsed['$key?']("id"))) {
              
              $writer = ["id", parsed['$[]']("id")];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(parsed['$key?']("role"))) {
              
              $writer = ["role", (function() {if ($truthy((existing_role = attributes['$[]']("role"))['$nil_or_empty?']())) {
                
                return parsed['$[]']("role").$join(" ");
              } else {
                return "" + (existing_role) + " " + (parsed['$[]']("role").$join(" "))
              }; return nil; })()];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(parsed['$key?']("option"))) {
              
              $send((opts = parsed['$[]']("option")), 'each', [], (TMP_72 = function(opt){var self = TMP_72.$$s || this;

              
                
                if (opt == null) {
                  opt = nil;
                };
                $writer = ["" + (opt) + "-option", ""];
                $send(attributes, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_72.$$s = self, TMP_72.$$arity = 1, TMP_72));
              
              $writer = ["options", (function() {if ($truthy((existing_opts = attributes['$[]']("options"))['$nil_or_empty?']())) {
                
                return opts.$join(",");
              } else {
                return "" + (existing_opts) + "," + (opts.$join(","))
              }; return nil; })()];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            return parsed_style;
          };
        } else {
          
          $writer = ["style", raw_style];
          $send(attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };
      }, TMP_Parser_parse_style_attribute_69.$$arity = -2);
      Opal.defs(self, '$adjust_indentation!', TMP_Parser_adjust_indentation$B_73 = function(lines, indent, tab_size) {
        var $a, TMP_74, TMP_77, TMP_78, TMP_79, TMP_80, self = this, full_tab_space = nil, gutter_width = nil, padding = nil;

        
        
        if (indent == null) {
          indent = 0;
        };
        
        if (tab_size == null) {
          tab_size = 0;
        };
        if ($truthy(lines['$empty?']())) {
          return nil};
        if ($truthy(($truthy($a = $rb_gt((tab_size = tab_size.$to_i()), 0)) ? lines.$join()['$include?']($$($nesting, 'TAB')) : $a))) {
          
          full_tab_space = $rb_times(" ", tab_size);
          $send(lines, 'map!', [], (TMP_74 = function(line){var self = TMP_74.$$s || this, TMP_75, TMP_76, spaces_added = nil;

          
            
            if (line == null) {
              line = nil;
            };
            if ($truthy(line['$empty?']())) {
              return line;};
            if ($truthy(line['$start_with?']($$($nesting, 'TAB')))) {
              line = $send(line, 'sub', [$$($nesting, 'TabIndentRx')], (TMP_75 = function(){var self = TMP_75.$$s || this, $b;

              return $rb_times(full_tab_space, (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length())}, TMP_75.$$s = self, TMP_75.$$arity = 0, TMP_75))};
            if ($truthy(line['$include?']($$($nesting, 'TAB')))) {
              
              spaces_added = 0;
              return line = $send(line, 'gsub', [$$($nesting, 'TabRx')], (TMP_76 = function(){var self = TMP_76.$$s || this, offset = nil, spaces = nil;
                if ($gvars["~"] == null) $gvars["~"] = nil;

              if ((offset = $rb_plus($gvars["~"].$begin(0), spaces_added))['$%'](tab_size)['$=='](0)) {
                  
                  spaces_added = $rb_plus(spaces_added, $rb_minus(tab_size, 1));
                  return full_tab_space;
                } else {
                  
                  if ((spaces = $rb_minus(tab_size, offset['$%'](tab_size)))['$=='](1)) {
                  } else {
                    spaces_added = $rb_plus(spaces_added, $rb_minus(spaces, 1))
                  };
                  return $rb_times(" ", spaces);
                }}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76));
            } else {
              return line
            };}, TMP_74.$$s = self, TMP_74.$$arity = 1, TMP_74));};
        if ($truthy(($truthy($a = indent) ? $rb_gt((indent = indent.$to_i()), -1) : $a))) {
        } else {
          return nil
        };
        gutter_width = nil;
        (function(){var $brk = Opal.new_brk(); try {return $send(lines, 'each', [], (TMP_77 = function(line){var self = TMP_77.$$s || this, $b, line_indent = nil;

        
          
          if (line == null) {
            line = nil;
          };
          if ($truthy(line['$empty?']())) {
            return nil;};
          if ((line_indent = $rb_minus(line.$length(), line.$lstrip().$length()))['$=='](0)) {
            
            gutter_width = nil;
            
            Opal.brk(nil, $brk);
          } else if ($truthy(($truthy($b = gutter_width) ? $rb_gt(line_indent, gutter_width) : $b))) {
            return nil
          } else {
            return (gutter_width = line_indent)
          };}, TMP_77.$$s = self, TMP_77.$$brk = $brk, TMP_77.$$arity = 1, TMP_77))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        if (indent['$=='](0)) {
          if ($truthy(gutter_width)) {
            $send(lines, 'map!', [], (TMP_78 = function(line){var self = TMP_78.$$s || this;

            
              
              if (line == null) {
                line = nil;
              };
              if ($truthy(line['$empty?']())) {
                return line
              } else {
                
                return line.$slice(gutter_width, line.$length());
              };}, TMP_78.$$s = self, TMP_78.$$arity = 1, TMP_78))}
        } else {
          
          padding = $rb_times(" ", indent);
          if ($truthy(gutter_width)) {
            $send(lines, 'map!', [], (TMP_79 = function(line){var self = TMP_79.$$s || this;

            
              
              if (line == null) {
                line = nil;
              };
              if ($truthy(line['$empty?']())) {
                return line
              } else {
                return $rb_plus(padding, line.$slice(gutter_width, line.$length()))
              };}, TMP_79.$$s = self, TMP_79.$$arity = 1, TMP_79))
          } else {
            $send(lines, 'map!', [], (TMP_80 = function(line){var self = TMP_80.$$s || this;

            
              
              if (line == null) {
                line = nil;
              };
              if ($truthy(line['$empty?']())) {
                return line
              } else {
                return $rb_plus(padding, line)
              };}, TMP_80.$$s = self, TMP_80.$$arity = 1, TMP_80))
          };
        };
        return nil;
      }, TMP_Parser_adjust_indentation$B_73.$$arity = -2);
      return (Opal.defs(self, '$sanitize_attribute_name', TMP_Parser_sanitize_attribute_name_81 = function $$sanitize_attribute_name(name) {
        var self = this;

        return name.$gsub($$($nesting, 'InvalidAttributeNameCharsRx'), "").$downcase()
      }, TMP_Parser_sanitize_attribute_name_81.$$arity = 1), nil) && 'sanitize_attribute_name';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/path_resolver"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$include', '$attr_accessor', '$root?', '$posixify', '$expand_path', '$pwd', '$start_with?', '$==', '$match?', '$absolute_path?', '$+', '$length', '$descends_from?', '$slice', '$to_s', '$relative_path_from', '$new', '$include?', '$tr', '$partition_path', '$each', '$pop', '$<<', '$join_path', '$[]', '$web_root?', '$unc?', '$index', '$split', '$delete', '$[]=', '$-', '$join', '$raise', '$!', '$fetch', '$warn', '$logger', '$empty?', '$nil_or_empty?', '$chomp', '$!=', '$>', '$size', '$end_with?', '$uri_prefix', '$gsub']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $PathResolver(){};
      var self = $PathResolver = $klass($base, $super, 'PathResolver', $PathResolver);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_PathResolver_initialize_1, TMP_PathResolver_absolute_path$q_2, $a, TMP_PathResolver_root$q_3, TMP_PathResolver_unc$q_4, TMP_PathResolver_web_root$q_5, TMP_PathResolver_descends_from$q_6, TMP_PathResolver_relative_path_7, TMP_PathResolver_posixify_8, TMP_PathResolver_expand_path_9, TMP_PathResolver_partition_path_11, TMP_PathResolver_join_path_12, TMP_PathResolver_system_path_13, TMP_PathResolver_web_path_16;

      def.file_separator = def._partition_path_web = def._partition_path_sys = def.working_dir = nil;
      
      self.$include($$($nesting, 'Logging'));
      Opal.const_set($nesting[0], 'DOT', ".");
      Opal.const_set($nesting[0], 'DOT_DOT', "..");
      Opal.const_set($nesting[0], 'DOT_SLASH', "./");
      Opal.const_set($nesting[0], 'SLASH', "/");
      Opal.const_set($nesting[0], 'BACKSLASH', "\\");
      Opal.const_set($nesting[0], 'DOUBLE_SLASH', "//");
      Opal.const_set($nesting[0], 'WindowsRootRx', /^(?:[a-zA-Z]:)?[\\\/]/);
      self.$attr_accessor("file_separator");
      self.$attr_accessor("working_dir");
      
      Opal.def(self, '$initialize', TMP_PathResolver_initialize_1 = function $$initialize(file_separator, working_dir) {
        var $a, $b, self = this;

        
        
        if (file_separator == null) {
          file_separator = nil;
        };
        
        if (working_dir == null) {
          working_dir = nil;
        };
        self.file_separator = ($truthy($a = ($truthy($b = file_separator) ? $b : $$$($$$('::', 'File'), 'ALT_SEPARATOR'))) ? $a : $$$($$$('::', 'File'), 'SEPARATOR'));
        self.working_dir = (function() {if ($truthy(working_dir)) {
          
          if ($truthy(self['$root?'](working_dir))) {
            
            return self.$posixify(working_dir);
          } else {
            
            return $$$('::', 'File').$expand_path(working_dir);
          };
        } else {
          return $$$('::', 'Dir').$pwd()
        }; return nil; })();
        self._partition_path_sys = $hash2([], {});
        return (self._partition_path_web = $hash2([], {}));
      }, TMP_PathResolver_initialize_1.$$arity = -1);
      
      Opal.def(self, '$absolute_path?', TMP_PathResolver_absolute_path$q_2 = function(path) {
        var $a, $b, self = this;

        return ($truthy($a = path['$start_with?']($$($nesting, 'SLASH'))) ? $a : (($b = self.file_separator['$==']($$($nesting, 'BACKSLASH'))) ? $$($nesting, 'WindowsRootRx')['$match?'](path) : self.file_separator['$==']($$($nesting, 'BACKSLASH'))))
      }, TMP_PathResolver_absolute_path$q_2.$$arity = 1);
      if ($truthy((($a = $$($nesting, 'RUBY_ENGINE')['$==']("opal")) ? $$$('::', 'JAVASCRIPT_IO_MODULE')['$==']("xmlhttprequest") : $$($nesting, 'RUBY_ENGINE')['$==']("opal")))) {
        
        Opal.def(self, '$root?', TMP_PathResolver_root$q_3 = function(path) {
          var $a, self = this;

          return ($truthy($a = self['$absolute_path?'](path)) ? $a : path['$start_with?']("file://", "http://", "https://"))
        }, TMP_PathResolver_root$q_3.$$arity = 1)
      } else {
        Opal.alias(self, "root?", "absolute_path?")
      };
      
      Opal.def(self, '$unc?', TMP_PathResolver_unc$q_4 = function(path) {
        var self = this;

        return path['$start_with?']($$($nesting, 'DOUBLE_SLASH'))
      }, TMP_PathResolver_unc$q_4.$$arity = 1);
      
      Opal.def(self, '$web_root?', TMP_PathResolver_web_root$q_5 = function(path) {
        var self = this;

        return path['$start_with?']($$($nesting, 'SLASH'))
      }, TMP_PathResolver_web_root$q_5.$$arity = 1);
      
      Opal.def(self, '$descends_from?', TMP_PathResolver_descends_from$q_6 = function(path, base) {
        var $a, self = this;

        if (base['$=='](path)) {
          return 0
        } else if (base['$==']($$($nesting, 'SLASH'))) {
          return ($truthy($a = path['$start_with?']($$($nesting, 'SLASH'))) ? 1 : $a)
        } else {
          return ($truthy($a = path['$start_with?']($rb_plus(base, $$($nesting, 'SLASH')))) ? $rb_plus(base.$length(), 1) : $a)
        }
      }, TMP_PathResolver_descends_from$q_6.$$arity = 2);
      
      Opal.def(self, '$relative_path', TMP_PathResolver_relative_path_7 = function $$relative_path(path, base) {
        var self = this, offset = nil;

        if ($truthy(self['$root?'](path))) {
          if ($truthy((offset = self['$descends_from?'](path, base)))) {
            return path.$slice(offset, path.$length())
          } else {
            return $$($nesting, 'Pathname').$new(path).$relative_path_from($$($nesting, 'Pathname').$new(base)).$to_s()
          }
        } else {
          return path
        }
      }, TMP_PathResolver_relative_path_7.$$arity = 2);
      
      Opal.def(self, '$posixify', TMP_PathResolver_posixify_8 = function $$posixify(path) {
        var $a, self = this;

        if ($truthy(path)) {
          if ($truthy((($a = self.file_separator['$==']($$($nesting, 'BACKSLASH'))) ? path['$include?']($$($nesting, 'BACKSLASH')) : self.file_separator['$==']($$($nesting, 'BACKSLASH'))))) {
            
            return path.$tr($$($nesting, 'BACKSLASH'), $$($nesting, 'SLASH'));
          } else {
            return path
          }
        } else {
          return ""
        }
      }, TMP_PathResolver_posixify_8.$$arity = 1);
      Opal.alias(self, "posixfy", "posixify");
      
      Opal.def(self, '$expand_path', TMP_PathResolver_expand_path_9 = function $$expand_path(path) {
        var $a, $b, TMP_10, self = this, path_segments = nil, path_root = nil, resolved_segments = nil;

        
        $b = self.$partition_path(path), $a = Opal.to_ary($b), (path_segments = ($a[0] == null ? nil : $a[0])), (path_root = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(path['$include?']($$($nesting, 'DOT_DOT')))) {
          
          resolved_segments = [];
          $send(path_segments, 'each', [], (TMP_10 = function(segment){var self = TMP_10.$$s || this;

          
            
            if (segment == null) {
              segment = nil;
            };
            if (segment['$==']($$($nesting, 'DOT_DOT'))) {
              return resolved_segments.$pop()
            } else {
              return resolved_segments['$<<'](segment)
            };}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
          return self.$join_path(resolved_segments, path_root);
        } else {
          return self.$join_path(path_segments, path_root)
        };
      }, TMP_PathResolver_expand_path_9.$$arity = 1);
      
      Opal.def(self, '$partition_path', TMP_PathResolver_partition_path_11 = function $$partition_path(path, web) {
        var self = this, result = nil, cache = nil, posix_path = nil, root = nil, path_segments = nil, $writer = nil;

        
        
        if (web == null) {
          web = nil;
        };
        if ($truthy((result = (cache = (function() {if ($truthy(web)) {
          return self._partition_path_web
        } else {
          return self._partition_path_sys
        }; return nil; })())['$[]'](path)))) {
          return result};
        posix_path = self.$posixify(path);
        if ($truthy(web)) {
          if ($truthy(self['$web_root?'](posix_path))) {
            root = $$($nesting, 'SLASH')
          } else if ($truthy(posix_path['$start_with?']($$($nesting, 'DOT_SLASH')))) {
            root = $$($nesting, 'DOT_SLASH')}
        } else if ($truthy(self['$root?'](posix_path))) {
          if ($truthy(self['$unc?'](posix_path))) {
            root = $$($nesting, 'DOUBLE_SLASH')
          } else if ($truthy(posix_path['$start_with?']($$($nesting, 'SLASH')))) {
            root = $$($nesting, 'SLASH')
          } else {
            root = posix_path.$slice(0, $rb_plus(posix_path.$index($$($nesting, 'SLASH')), 1))
          }
        } else if ($truthy(posix_path['$start_with?']($$($nesting, 'DOT_SLASH')))) {
          root = $$($nesting, 'DOT_SLASH')};
        path_segments = (function() {if ($truthy(root)) {
          
          return posix_path.$slice(root.$length(), posix_path.$length());
        } else {
          return posix_path
        }; return nil; })().$split($$($nesting, 'SLASH'));
        path_segments.$delete($$($nesting, 'DOT'));
        
        $writer = [path, [path_segments, root]];
        $send(cache, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_PathResolver_partition_path_11.$$arity = -2);
      
      Opal.def(self, '$join_path', TMP_PathResolver_join_path_12 = function $$join_path(segments, root) {
        var self = this;

        
        
        if (root == null) {
          root = nil;
        };
        if ($truthy(root)) {
          return "" + (root) + (segments.$join($$($nesting, 'SLASH')))
        } else {
          
          return segments.$join($$($nesting, 'SLASH'));
        };
      }, TMP_PathResolver_join_path_12.$$arity = -2);
      
      Opal.def(self, '$system_path', TMP_PathResolver_system_path_13 = function $$system_path(target, start, jail, opts) {
        var $a, $b, TMP_14, TMP_15, self = this, target_path = nil, target_segments = nil, _ = nil, jail_segments = nil, jail_root = nil, recheck = nil, start_segments = nil, start_root = nil, resolved_segments = nil, unresolved_segments = nil, warned = nil;

        
        
        if (start == null) {
          start = nil;
        };
        
        if (jail == null) {
          jail = nil;
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy(jail)) {
          
          if ($truthy(self['$root?'](jail))) {
          } else {
            self.$raise($$$('::', 'SecurityError'), "" + "Jail is not an absolute path: " + (jail))
          };
          jail = self.$posixify(jail);};
        if ($truthy(target)) {
          if ($truthy(self['$root?'](target))) {
            
            target_path = self.$expand_path(target);
            if ($truthy(($truthy($a = jail) ? self['$descends_from?'](target_path, jail)['$!']() : $a))) {
              if ($truthy(opts.$fetch("recover", true))) {
                
                self.$logger().$warn("" + (($truthy($a = opts['$[]']("target_name")) ? $a : "path")) + " is outside of jail; recovering automatically");
                $b = self.$partition_path(target_path), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
                $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b;
                return self.$join_path($rb_plus(jail_segments, target_segments), jail_root);
              } else {
                self.$raise($$$('::', 'SecurityError'), "" + (($truthy($a = opts['$[]']("target_name")) ? $a : "path")) + " " + (target) + " is outside of jail: " + (jail) + " (disallowed in safe mode)")
              }};
            return target_path;
          } else {
            $b = self.$partition_path(target), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b
          }
        } else {
          target_segments = []
        };
        if ($truthy(target_segments['$empty?']())) {
          if ($truthy(start['$nil_or_empty?']())) {
            return ($truthy($a = jail) ? $a : self.working_dir)
          } else if ($truthy(self['$root?'](start))) {
            if ($truthy(jail)) {
              start = self.$posixify(start)
            } else {
              return self.$expand_path(start)
            }
          } else {
            
            $b = self.$partition_path(start), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
            start = ($truthy($a = jail) ? $a : self.working_dir);
          }
        } else if ($truthy(start['$nil_or_empty?']())) {
          start = ($truthy($a = jail) ? $a : self.working_dir)
        } else if ($truthy(self['$root?'](start))) {
          if ($truthy(jail)) {
            start = self.$posixify(start)}
        } else {
          start = "" + (($truthy($a = jail) ? $a : self.working_dir).$chomp("/")) + "/" + (start)
        };
        if ($truthy(($truthy($a = ($truthy($b = jail) ? (recheck = self['$descends_from?'](start, jail)['$!']()) : $b)) ? self.file_separator['$==']($$($nesting, 'BACKSLASH')) : $a))) {
          
          $b = self.$partition_path(start), $a = Opal.to_ary($b), (start_segments = ($a[0] == null ? nil : $a[0])), (start_root = ($a[1] == null ? nil : $a[1])), $b;
          $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(start_root['$!='](jail_root))) {
            if ($truthy(opts.$fetch("recover", true))) {
              
              self.$logger().$warn("" + "start path for " + (($truthy($a = opts['$[]']("target_name")) ? $a : "path")) + " is outside of jail root; recovering automatically");
              start_segments = jail_segments;
              recheck = false;
            } else {
              self.$raise($$$('::', 'SecurityError'), "" + "start path for " + (($truthy($a = opts['$[]']("target_name")) ? $a : "path")) + " " + (start) + " refers to location outside jail root: " + (jail) + " (disallowed in safe mode)")
            }};
        } else {
          $b = self.$partition_path(start), $a = Opal.to_ary($b), (start_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b
        };
        if ($truthy((resolved_segments = $rb_plus(start_segments, target_segments))['$include?']($$($nesting, 'DOT_DOT')))) {
          
          $a = [resolved_segments, []], (unresolved_segments = $a[0]), (resolved_segments = $a[1]), $a;
          if ($truthy(jail)) {
            
            if ($truthy(jail_segments)) {
            } else {
              $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b
            };
            warned = false;
            $send(unresolved_segments, 'each', [], (TMP_14 = function(segment){var self = TMP_14.$$s || this, $c;

            
              
              if (segment == null) {
                segment = nil;
              };
              if (segment['$==']($$($nesting, 'DOT_DOT'))) {
                if ($truthy($rb_gt(resolved_segments.$size(), jail_segments.$size()))) {
                  return resolved_segments.$pop()
                } else if ($truthy(opts.$fetch("recover", true))) {
                  if ($truthy(warned)) {
                    return nil
                  } else {
                    
                    self.$logger().$warn("" + (($truthy($c = opts['$[]']("target_name")) ? $c : "path")) + " has illegal reference to ancestor of jail; recovering automatically");
                    return (warned = true);
                  }
                } else {
                  return self.$raise($$$('::', 'SecurityError'), "" + (($truthy($c = opts['$[]']("target_name")) ? $c : "path")) + " " + (target) + " refers to location outside jail: " + (jail) + " (disallowed in safe mode)")
                }
              } else {
                return resolved_segments['$<<'](segment)
              };}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
          } else {
            $send(unresolved_segments, 'each', [], (TMP_15 = function(segment){var self = TMP_15.$$s || this;

            
              
              if (segment == null) {
                segment = nil;
              };
              if (segment['$==']($$($nesting, 'DOT_DOT'))) {
                return resolved_segments.$pop()
              } else {
                return resolved_segments['$<<'](segment)
              };}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))
          };};
        if ($truthy(recheck)) {
          
          target_path = self.$join_path(resolved_segments, jail_root);
          if ($truthy(self['$descends_from?'](target_path, jail))) {
            return target_path
          } else if ($truthy(opts.$fetch("recover", true))) {
            
            self.$logger().$warn("" + (($truthy($a = opts['$[]']("target_name")) ? $a : "path")) + " is outside of jail; recovering automatically");
            if ($truthy(jail_segments)) {
            } else {
              $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b
            };
            return self.$join_path($rb_plus(jail_segments, target_segments), jail_root);
          } else {
            return self.$raise($$$('::', 'SecurityError'), "" + (($truthy($a = opts['$[]']("target_name")) ? $a : "path")) + " " + (target) + " is outside of jail: " + (jail) + " (disallowed in safe mode)")
          };
        } else {
          return self.$join_path(resolved_segments, jail_root)
        };
      }, TMP_PathResolver_system_path_13.$$arity = -2);
      return (Opal.def(self, '$web_path', TMP_PathResolver_web_path_16 = function $$web_path(target, start) {
        var $a, $b, TMP_17, self = this, uri_prefix = nil, target_segments = nil, target_root = nil, resolved_segments = nil, resolved_path = nil;

        
        
        if (start == null) {
          start = nil;
        };
        target = self.$posixify(target);
        start = self.$posixify(start);
        uri_prefix = nil;
        if ($truthy(($truthy($a = start['$nil_or_empty?']()) ? $a : self['$web_root?'](target)))) {
        } else {
          
          target = (function() {if ($truthy(start['$end_with?']($$($nesting, 'SLASH')))) {
            return "" + (start) + (target)
          } else {
            return "" + (start) + ($$($nesting, 'SLASH')) + (target)
          }; return nil; })();
          if ($truthy((uri_prefix = $$($nesting, 'Helpers').$uri_prefix(target)))) {
            target = target['$[]'](Opal.Range.$new(uri_prefix.$length(), -1, false))};
        };
        $b = self.$partition_path(target, true), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), (target_root = ($a[1] == null ? nil : $a[1])), $b;
        resolved_segments = [];
        $send(target_segments, 'each', [], (TMP_17 = function(segment){var self = TMP_17.$$s || this, $c;

        
          
          if (segment == null) {
            segment = nil;
          };
          if (segment['$==']($$($nesting, 'DOT_DOT'))) {
            if ($truthy(resolved_segments['$empty?']())) {
              if ($truthy(($truthy($c = target_root) ? target_root['$!=']($$($nesting, 'DOT_SLASH')) : $c))) {
                return nil
              } else {
                return resolved_segments['$<<'](segment)
              }
            } else if (resolved_segments['$[]'](-1)['$==']($$($nesting, 'DOT_DOT'))) {
              return resolved_segments['$<<'](segment)
            } else {
              return resolved_segments.$pop()
            }
          } else {
            return resolved_segments['$<<'](segment)
          };}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
        if ($truthy((resolved_path = self.$join_path(resolved_segments, target_root))['$include?'](" "))) {
          resolved_path = resolved_path.$gsub(" ", "%20")};
        if ($truthy(uri_prefix)) {
          return "" + (uri_prefix) + (resolved_path)
        } else {
          return resolved_path
        };
      }, TMP_PathResolver_web_path_16.$$arity = -2), nil) && 'web_path';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/reader"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars, $hash = Opal.hash;

  Opal.add_stubs(['$include', '$attr_reader', '$+', '$attr_accessor', '$!', '$===', '$split', '$file', '$dir', '$dirname', '$path', '$basename', '$lineno', '$prepare_lines', '$drop', '$[]', '$normalize_lines_from_string', '$normalize_lines_array', '$empty?', '$nil_or_empty?', '$peek_line', '$>', '$slice', '$length', '$process_line', '$times', '$shift', '$read_line', '$<<', '$-', '$unshift_all', '$has_more_lines?', '$join', '$read_lines', '$unshift', '$start_with?', '$==', '$*', '$read_lines_until', '$size', '$clear', '$cursor', '$[]=', '$!=', '$fetch', '$cursor_at_mark', '$warn', '$logger', '$message_with_context', '$new', '$each', '$instance_variables', '$instance_variable_get', '$dup', '$instance_variable_set', '$to_i', '$attributes', '$<', '$catalog', '$skip_front_matter!', '$pop', '$adjust_indentation!', '$attr', '$end_with?', '$include?', '$=~', '$preprocess_conditional_directive', '$preprocess_include_directive', '$pop_include', '$downcase', '$error', '$none?', '$key?', '$any?', '$all?', '$strip', '$resolve_expr_val', '$send', '$to_sym', '$replace_next_line', '$rstrip', '$sub_attributes', '$attribute_missing', '$include_processors?', '$find', '$handles?', '$instance', '$process_method', '$parse_attributes', '$>=', '$safe', '$resolve_include_path', '$split_delimited_value', '$/', '$to_a', '$uniq', '$sort', '$open', '$each_line', '$infinite?', '$push_include', '$delete', '$value?', '$force_encoding', '$create_include_cursor', '$rindex', '$delete_at', '$nil?', '$keys', '$read', '$uriish?', '$attr?', '$require_library', '$parse', '$normalize_system_path', '$file?', '$relative_path', '$path_resolver', '$base_dir', '$to_s', '$path=', '$extname', '$rootname', '$<=', '$to_f', '$extensions?', '$extensions', '$include_processors', '$class', '$object_id', '$inspect', '$map']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Reader(){};
      var self = $Reader = $klass($base, $super, 'Reader', $Reader);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Reader_initialize_4, TMP_Reader_prepare_lines_5, TMP_Reader_process_line_6, TMP_Reader_has_more_lines$q_7, TMP_Reader_empty$q_8, TMP_Reader_next_line_empty$q_9, TMP_Reader_peek_line_10, TMP_Reader_peek_lines_11, TMP_Reader_read_line_13, TMP_Reader_read_lines_14, TMP_Reader_read_15, TMP_Reader_advance_16, TMP_Reader_unshift_line_17, TMP_Reader_unshift_lines_18, TMP_Reader_replace_next_line_19, TMP_Reader_skip_blank_lines_20, TMP_Reader_skip_comment_lines_21, TMP_Reader_skip_line_comments_22, TMP_Reader_terminate_23, TMP_Reader_read_lines_until_24, TMP_Reader_shift_25, TMP_Reader_unshift_26, TMP_Reader_unshift_all_27, TMP_Reader_cursor_28, TMP_Reader_cursor_at_line_29, TMP_Reader_cursor_at_mark_30, TMP_Reader_cursor_before_mark_31, TMP_Reader_cursor_at_prev_line_32, TMP_Reader_mark_33, TMP_Reader_line_info_34, TMP_Reader_lines_35, TMP_Reader_string_36, TMP_Reader_source_37, TMP_Reader_save_38, TMP_Reader_restore_save_40, TMP_Reader_discard_save_42;

      def.file = def.lines = def.process_lines = def.look_ahead = def.unescape_next_line = def.lineno = def.dir = def.path = def.mark = def.source_lines = def.saved = nil;
      
      self.$include($$($nesting, 'Logging'));
      (function($base, $super, $parent_nesting) {
        function $Cursor(){};
        var self = $Cursor = $klass($base, $super, 'Cursor', $Cursor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Cursor_initialize_1, TMP_Cursor_advance_2, TMP_Cursor_line_info_3;

        def.lineno = def.path = nil;
        
        self.$attr_reader("file", "dir", "path", "lineno");
        
        Opal.def(self, '$initialize', TMP_Cursor_initialize_1 = function $$initialize(file, dir, path, lineno) {
          var $a, self = this;

          
          
          if (dir == null) {
            dir = nil;
          };
          
          if (path == null) {
            path = nil;
          };
          
          if (lineno == null) {
            lineno = 1;
          };
          return $a = [file, dir, path, lineno], (self.file = $a[0]), (self.dir = $a[1]), (self.path = $a[2]), (self.lineno = $a[3]), $a;
        }, TMP_Cursor_initialize_1.$$arity = -2);
        
        Opal.def(self, '$advance', TMP_Cursor_advance_2 = function $$advance(num) {
          var self = this;

          return (self.lineno = $rb_plus(self.lineno, num))
        }, TMP_Cursor_advance_2.$$arity = 1);
        
        Opal.def(self, '$line_info', TMP_Cursor_line_info_3 = function $$line_info() {
          var self = this;

          return "" + (self.path) + ": line " + (self.lineno)
        }, TMP_Cursor_line_info_3.$$arity = 0);
        return Opal.alias(self, "to_s", "line_info");
      })($nesting[0], null, $nesting);
      self.$attr_reader("file");
      self.$attr_reader("dir");
      self.$attr_reader("path");
      self.$attr_reader("lineno");
      self.$attr_reader("source_lines");
      self.$attr_accessor("process_lines");
      self.$attr_accessor("unterminated");
      
      Opal.def(self, '$initialize', TMP_Reader_initialize_4 = function $$initialize(data, cursor, opts) {
        var $a, $b, self = this;

        
        
        if (data == null) {
          data = nil;
        };
        
        if (cursor == null) {
          cursor = nil;
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy(cursor['$!']())) {
          
          self.file = nil;
          self.dir = ".";
          self.path = "<stdin>";
          self.lineno = 1;
        } else if ($truthy($$$('::', 'String')['$==='](cursor))) {
          
          self.file = cursor;
          $b = $$$('::', 'File').$split(self.file), $a = Opal.to_ary($b), (self.dir = ($a[0] == null ? nil : $a[0])), (self.path = ($a[1] == null ? nil : $a[1])), $b;
          self.lineno = 1;
        } else {
          
          if ($truthy((self.file = cursor.$file()))) {
            
            self.dir = ($truthy($a = cursor.$dir()) ? $a : $$$('::', 'File').$dirname(self.file));
            self.path = ($truthy($a = cursor.$path()) ? $a : $$$('::', 'File').$basename(self.file));
          } else {
            
            self.dir = ($truthy($a = cursor.$dir()) ? $a : ".");
            self.path = ($truthy($a = cursor.$path()) ? $a : "<stdin>");
          };
          self.lineno = ($truthy($a = cursor.$lineno()) ? $a : 1);
        };
        self.lines = (function() {if ($truthy(data)) {
          
          return self.$prepare_lines(data, opts);
        } else {
          return []
        }; return nil; })();
        self.source_lines = self.lines.$drop(0);
        self.mark = nil;
        self.look_ahead = 0;
        self.process_lines = true;
        self.unescape_next_line = false;
        self.unterminated = nil;
        return (self.saved = nil);
      }, TMP_Reader_initialize_4.$$arity = -1);
      
      Opal.def(self, '$prepare_lines', TMP_Reader_prepare_lines_5 = function $$prepare_lines(data, opts) {
        var self = this;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy($$$('::', 'String')['$==='](data))) {
          if ($truthy(opts['$[]']("normalize"))) {
            return $$($nesting, 'Helpers').$normalize_lines_from_string(data)
          } else {
            return data.$split($$($nesting, 'LF'), -1)
          }
        } else if ($truthy(opts['$[]']("normalize"))) {
          return $$($nesting, 'Helpers').$normalize_lines_array(data)
        } else {
          return data.$drop(0)
        };
      }, TMP_Reader_prepare_lines_5.$$arity = -2);
      
      Opal.def(self, '$process_line', TMP_Reader_process_line_6 = function $$process_line(line) {
        var self = this;

        
        if ($truthy(self.process_lines)) {
          self.look_ahead = $rb_plus(self.look_ahead, 1)};
        return line;
      }, TMP_Reader_process_line_6.$$arity = 1);
      
      Opal.def(self, '$has_more_lines?', TMP_Reader_has_more_lines$q_7 = function() {
        var self = this;

        if ($truthy(self.lines['$empty?']())) {
          
          self.look_ahead = 0;
          return false;
        } else {
          return true
        }
      }, TMP_Reader_has_more_lines$q_7.$$arity = 0);
      
      Opal.def(self, '$empty?', TMP_Reader_empty$q_8 = function() {
        var self = this;

        if ($truthy(self.lines['$empty?']())) {
          
          self.look_ahead = 0;
          return true;
        } else {
          return false
        }
      }, TMP_Reader_empty$q_8.$$arity = 0);
      Opal.alias(self, "eof?", "empty?");
      
      Opal.def(self, '$next_line_empty?', TMP_Reader_next_line_empty$q_9 = function() {
        var self = this;

        return self.$peek_line()['$nil_or_empty?']()
      }, TMP_Reader_next_line_empty$q_9.$$arity = 0);
      
      Opal.def(self, '$peek_line', TMP_Reader_peek_line_10 = function $$peek_line(direct) {
        var $a, self = this, line = nil;

        
        
        if (direct == null) {
          direct = false;
        };
        if ($truthy(($truthy($a = direct) ? $a : $rb_gt(self.look_ahead, 0)))) {
          if ($truthy(self.unescape_next_line)) {
            
            return (line = self.lines['$[]'](0)).$slice(1, line.$length());
          } else {
            return self.lines['$[]'](0)
          }
        } else if ($truthy(self.lines['$empty?']())) {
          
          self.look_ahead = 0;
          return nil;
        } else if ($truthy((line = self.$process_line(self.lines['$[]'](0))))) {
          return line
        } else {
          return self.$peek_line()
        };
      }, TMP_Reader_peek_line_10.$$arity = -1);
      
      Opal.def(self, '$peek_lines', TMP_Reader_peek_lines_11 = function $$peek_lines(num, direct) {
        var $a, TMP_12, self = this, old_look_ahead = nil, result = nil;

        
        
        if (num == null) {
          num = nil;
        };
        
        if (direct == null) {
          direct = false;
        };
        old_look_ahead = self.look_ahead;
        result = [];
        (function(){var $brk = Opal.new_brk(); try {return $send(($truthy($a = num) ? $a : $$($nesting, 'MAX_INT')), 'times', [], (TMP_12 = function(){var self = TMP_12.$$s || this, line = nil;
          if (self.lineno == null) self.lineno = nil;

        if ($truthy((line = (function() {if ($truthy(direct)) {
            return self.$shift()
          } else {
            return self.$read_line()
          }; return nil; })()))) {
            return result['$<<'](line)
          } else {
            
            if ($truthy(direct)) {
              self.lineno = $rb_minus(self.lineno, 1)};
            
            Opal.brk(nil, $brk);
          }}, TMP_12.$$s = self, TMP_12.$$brk = $brk, TMP_12.$$arity = 0, TMP_12))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        if ($truthy(result['$empty?']())) {
        } else {
          
          self.$unshift_all(result);
          if ($truthy(direct)) {
            self.look_ahead = old_look_ahead};
        };
        return result;
      }, TMP_Reader_peek_lines_11.$$arity = -1);
      
      Opal.def(self, '$read_line', TMP_Reader_read_line_13 = function $$read_line() {
        var $a, self = this;

        if ($truthy(($truthy($a = $rb_gt(self.look_ahead, 0)) ? $a : self['$has_more_lines?']()))) {
          return self.$shift()
        } else {
          return nil
        }
      }, TMP_Reader_read_line_13.$$arity = 0);
      
      Opal.def(self, '$read_lines', TMP_Reader_read_lines_14 = function $$read_lines() {
        var $a, self = this, lines = nil;

        
        lines = [];
        while ($truthy(self['$has_more_lines?']())) {
          lines['$<<'](self.$shift())
        };
        return lines;
      }, TMP_Reader_read_lines_14.$$arity = 0);
      Opal.alias(self, "readlines", "read_lines");
      
      Opal.def(self, '$read', TMP_Reader_read_15 = function $$read() {
        var self = this;

        return self.$read_lines().$join($$($nesting, 'LF'))
      }, TMP_Reader_read_15.$$arity = 0);
      
      Opal.def(self, '$advance', TMP_Reader_advance_16 = function $$advance() {
        var self = this;

        if ($truthy(self.$shift())) {
          return true
        } else {
          return false
        }
      }, TMP_Reader_advance_16.$$arity = 0);
      
      Opal.def(self, '$unshift_line', TMP_Reader_unshift_line_17 = function $$unshift_line(line_to_restore) {
        var self = this;

        
        self.$unshift(line_to_restore);
        return nil;
      }, TMP_Reader_unshift_line_17.$$arity = 1);
      Opal.alias(self, "restore_line", "unshift_line");
      
      Opal.def(self, '$unshift_lines', TMP_Reader_unshift_lines_18 = function $$unshift_lines(lines_to_restore) {
        var self = this;

        
        self.$unshift_all(lines_to_restore);
        return nil;
      }, TMP_Reader_unshift_lines_18.$$arity = 1);
      Opal.alias(self, "restore_lines", "unshift_lines");
      
      Opal.def(self, '$replace_next_line', TMP_Reader_replace_next_line_19 = function $$replace_next_line(replacement) {
        var self = this;

        
        self.$shift();
        self.$unshift(replacement);
        return true;
      }, TMP_Reader_replace_next_line_19.$$arity = 1);
      Opal.alias(self, "replace_line", "replace_next_line");
      
      Opal.def(self, '$skip_blank_lines', TMP_Reader_skip_blank_lines_20 = function $$skip_blank_lines() {
        var $a, self = this, num_skipped = nil, next_line = nil;

        
        if ($truthy(self['$empty?']())) {
          return nil};
        num_skipped = 0;
        while ($truthy((next_line = self.$peek_line()))) {
          if ($truthy(next_line['$empty?']())) {
            
            self.$shift();
            num_skipped = $rb_plus(num_skipped, 1);
          } else {
            return num_skipped
          }
        };
      }, TMP_Reader_skip_blank_lines_20.$$arity = 0);
      
      Opal.def(self, '$skip_comment_lines', TMP_Reader_skip_comment_lines_21 = function $$skip_comment_lines() {
        var $a, $b, self = this, next_line = nil, ll = nil;

        
        if ($truthy(self['$empty?']())) {
          return nil};
        while ($truthy(($truthy($b = (next_line = self.$peek_line())) ? next_line['$empty?']()['$!']() : $b))) {
          if ($truthy(next_line['$start_with?']("//"))) {
            if ($truthy(next_line['$start_with?']("///"))) {
              if ($truthy(($truthy($b = $rb_gt((ll = next_line.$length()), 3)) ? next_line['$==']($rb_times("/", ll)) : $b))) {
                self.$read_lines_until($hash2(["terminator", "skip_first_line", "read_last_line", "skip_processing", "context"], {"terminator": next_line, "skip_first_line": true, "read_last_line": true, "skip_processing": true, "context": "comment"}))
              } else {
                break;
              }
            } else {
              self.$shift()
            }
          } else {
            break;
          }
        };
        return nil;
      }, TMP_Reader_skip_comment_lines_21.$$arity = 0);
      
      Opal.def(self, '$skip_line_comments', TMP_Reader_skip_line_comments_22 = function $$skip_line_comments() {
        var $a, $b, self = this, comment_lines = nil, next_line = nil;

        
        if ($truthy(self['$empty?']())) {
          return []};
        comment_lines = [];
        while ($truthy(($truthy($b = (next_line = self.$peek_line())) ? next_line['$empty?']()['$!']() : $b))) {
          if ($truthy(next_line['$start_with?']("//"))) {
            comment_lines['$<<'](self.$shift())
          } else {
            break;
          }
        };
        return comment_lines;
      }, TMP_Reader_skip_line_comments_22.$$arity = 0);
      
      Opal.def(self, '$terminate', TMP_Reader_terminate_23 = function $$terminate() {
        var self = this;

        
        self.lineno = $rb_plus(self.lineno, self.lines.$size());
        self.lines.$clear();
        self.look_ahead = 0;
        return nil;
      }, TMP_Reader_terminate_23.$$arity = 0);
      
      Opal.def(self, '$read_lines_until', TMP_Reader_read_lines_until_24 = function $$read_lines_until(options) {
        var $a, $b, $c, $d, $iter = TMP_Reader_read_lines_until_24.$$p, $yield = $iter || nil, self = this, result = nil, restore_process_lines = nil, terminator = nil, start_cursor = nil, break_on_blank_lines = nil, break_on_list_continuation = nil, skip_comments = nil, complete = nil, line_read = nil, line_restored = nil, line = nil, $writer = nil, context = nil;

        if ($iter) TMP_Reader_read_lines_until_24.$$p = null;
        
        
        if (options == null) {
          options = $hash2([], {});
        };
        result = [];
        if ($truthy(($truthy($a = self.process_lines) ? options['$[]']("skip_processing") : $a))) {
          
          self.process_lines = false;
          restore_process_lines = true;};
        if ($truthy((terminator = options['$[]']("terminator")))) {
          
          start_cursor = ($truthy($a = options['$[]']("cursor")) ? $a : self.$cursor());
          break_on_blank_lines = false;
          break_on_list_continuation = false;
        } else {
          
          break_on_blank_lines = options['$[]']("break_on_blank_lines");
          break_on_list_continuation = options['$[]']("break_on_list_continuation");
        };
        skip_comments = options['$[]']("skip_line_comments");
        complete = (line_read = (line_restored = nil));
        if ($truthy(options['$[]']("skip_first_line"))) {
          self.$shift()};
        while ($truthy(($truthy($b = complete['$!']()) ? (line = self.$read_line()) : $b))) {
          
          complete = (function() {while ($truthy(true)) {
            
            if ($truthy(($truthy($c = terminator) ? line['$=='](terminator) : $c))) {
              return true};
            if ($truthy(($truthy($c = break_on_blank_lines) ? line['$empty?']() : $c))) {
              return true};
            if ($truthy(($truthy($c = ($truthy($d = break_on_list_continuation) ? line_read : $d)) ? line['$==']($$($nesting, 'LIST_CONTINUATION')) : $c))) {
              
              
              $writer = ["preserve_last_line", true];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return true;};
            if ($truthy((($c = ($yield !== nil)) ? Opal.yield1($yield, line) : ($yield !== nil)))) {
              return true};
            return false;
          }; return nil; })();
          if ($truthy(complete)) {
            
            if ($truthy(options['$[]']("read_last_line"))) {
              
              result['$<<'](line);
              line_read = true;};
            if ($truthy(options['$[]']("preserve_last_line"))) {
              
              self.$unshift(line);
              line_restored = true;};
          } else if ($truthy(($truthy($b = ($truthy($c = skip_comments) ? line['$start_with?']("//") : $c)) ? line['$start_with?']("///")['$!']() : $b))) {
          } else {
            
            result['$<<'](line);
            line_read = true;
          };
        };
        if ($truthy(restore_process_lines)) {
          
          self.process_lines = true;
          if ($truthy(($truthy($a = line_restored) ? terminator['$!']() : $a))) {
            self.look_ahead = $rb_minus(self.look_ahead, 1)};};
        if ($truthy(($truthy($a = ($truthy($b = terminator) ? terminator['$!='](line) : $b)) ? (context = options.$fetch("context", terminator)) : $a))) {
          
          if (start_cursor['$==']("at_mark")) {
            start_cursor = self.$cursor_at_mark()};
          self.$logger().$warn(self.$message_with_context("" + "unterminated " + (context) + " block", $hash2(["source_location"], {"source_location": start_cursor})));
          self.unterminated = true;};
        return result;
      }, TMP_Reader_read_lines_until_24.$$arity = -1);
      
      Opal.def(self, '$shift', TMP_Reader_shift_25 = function $$shift() {
        var self = this;

        
        self.lineno = $rb_plus(self.lineno, 1);
        if (self.look_ahead['$=='](0)) {
        } else {
          self.look_ahead = $rb_minus(self.look_ahead, 1)
        };
        return self.lines.$shift();
      }, TMP_Reader_shift_25.$$arity = 0);
      
      Opal.def(self, '$unshift', TMP_Reader_unshift_26 = function $$unshift(line) {
        var self = this;

        
        self.lineno = $rb_minus(self.lineno, 1);
        self.look_ahead = $rb_plus(self.look_ahead, 1);
        return self.lines.$unshift(line);
      }, TMP_Reader_unshift_26.$$arity = 1);
      
      Opal.def(self, '$unshift_all', TMP_Reader_unshift_all_27 = function $$unshift_all(lines) {
        var self = this;

        
        self.lineno = $rb_minus(self.lineno, lines.$size());
        self.look_ahead = $rb_plus(self.look_ahead, lines.$size());
        return $send(self.lines, 'unshift', Opal.to_a(lines));
      }, TMP_Reader_unshift_all_27.$$arity = 1);
      
      Opal.def(self, '$cursor', TMP_Reader_cursor_28 = function $$cursor() {
        var self = this;

        return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, self.lineno)
      }, TMP_Reader_cursor_28.$$arity = 0);
      
      Opal.def(self, '$cursor_at_line', TMP_Reader_cursor_at_line_29 = function $$cursor_at_line(lineno) {
        var self = this;

        return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, lineno)
      }, TMP_Reader_cursor_at_line_29.$$arity = 1);
      
      Opal.def(self, '$cursor_at_mark', TMP_Reader_cursor_at_mark_30 = function $$cursor_at_mark() {
        var self = this;

        if ($truthy(self.mark)) {
          return $send($$($nesting, 'Cursor'), 'new', Opal.to_a(self.mark))
        } else {
          return self.$cursor()
        }
      }, TMP_Reader_cursor_at_mark_30.$$arity = 0);
      
      Opal.def(self, '$cursor_before_mark', TMP_Reader_cursor_before_mark_31 = function $$cursor_before_mark() {
        var $a, $b, self = this, m_file = nil, m_dir = nil, m_path = nil, m_lineno = nil;

        if ($truthy(self.mark)) {
          
          $b = self.mark, $a = Opal.to_ary($b), (m_file = ($a[0] == null ? nil : $a[0])), (m_dir = ($a[1] == null ? nil : $a[1])), (m_path = ($a[2] == null ? nil : $a[2])), (m_lineno = ($a[3] == null ? nil : $a[3])), $b;
          return $$($nesting, 'Cursor').$new(m_file, m_dir, m_path, $rb_minus(m_lineno, 1));
        } else {
          return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, $rb_minus(self.lineno, 1))
        }
      }, TMP_Reader_cursor_before_mark_31.$$arity = 0);
      
      Opal.def(self, '$cursor_at_prev_line', TMP_Reader_cursor_at_prev_line_32 = function $$cursor_at_prev_line() {
        var self = this;

        return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, $rb_minus(self.lineno, 1))
      }, TMP_Reader_cursor_at_prev_line_32.$$arity = 0);
      
      Opal.def(self, '$mark', TMP_Reader_mark_33 = function $$mark() {
        var self = this;

        return (self.mark = [self.file, self.dir, self.path, self.lineno])
      }, TMP_Reader_mark_33.$$arity = 0);
      
      Opal.def(self, '$line_info', TMP_Reader_line_info_34 = function $$line_info() {
        var self = this;

        return "" + (self.path) + ": line " + (self.lineno)
      }, TMP_Reader_line_info_34.$$arity = 0);
      
      Opal.def(self, '$lines', TMP_Reader_lines_35 = function $$lines() {
        var self = this;

        return self.lines.$drop(0)
      }, TMP_Reader_lines_35.$$arity = 0);
      
      Opal.def(self, '$string', TMP_Reader_string_36 = function $$string() {
        var self = this;

        return self.lines.$join($$($nesting, 'LF'))
      }, TMP_Reader_string_36.$$arity = 0);
      
      Opal.def(self, '$source', TMP_Reader_source_37 = function $$source() {
        var self = this;

        return self.source_lines.$join($$($nesting, 'LF'))
      }, TMP_Reader_source_37.$$arity = 0);
      
      Opal.def(self, '$save', TMP_Reader_save_38 = function $$save() {
        var TMP_39, self = this, accum = nil;

        
        accum = $hash2([], {});
        $send(self.$instance_variables(), 'each', [], (TMP_39 = function(name){var self = TMP_39.$$s || this, $a, $writer = nil, val = nil;

        
          
          if (name == null) {
            name = nil;
          };
          if ($truthy(($truthy($a = name['$==']("@saved")) ? $a : name['$==']("@source_lines")))) {
            return nil
          } else {
            
            $writer = [name, (function() {if ($truthy($$$('::', 'Array')['$===']((val = self.$instance_variable_get(name))))) {
              return val.$dup()
            } else {
              return val
            }; return nil; })()];
            $send(accum, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          };}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39));
        self.saved = accum;
        return nil;
      }, TMP_Reader_save_38.$$arity = 0);
      
      Opal.def(self, '$restore_save', TMP_Reader_restore_save_40 = function $$restore_save() {
        var TMP_41, self = this;

        if ($truthy(self.saved)) {
          
          $send(self.saved, 'each', [], (TMP_41 = function(name, val){var self = TMP_41.$$s || this;

          
            
            if (name == null) {
              name = nil;
            };
            
            if (val == null) {
              val = nil;
            };
            return self.$instance_variable_set(name, val);}, TMP_41.$$s = self, TMP_41.$$arity = 2, TMP_41));
          return (self.saved = nil);
        } else {
          return nil
        }
      }, TMP_Reader_restore_save_40.$$arity = 0);
      
      Opal.def(self, '$discard_save', TMP_Reader_discard_save_42 = function $$discard_save() {
        var self = this;

        return (self.saved = nil)
      }, TMP_Reader_discard_save_42.$$arity = 0);
      return Opal.alias(self, "to_s", "line_info");
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $PreprocessorReader(){};
      var self = $PreprocessorReader = $klass($base, $super, 'PreprocessorReader', $PreprocessorReader);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_PreprocessorReader_initialize_43, TMP_PreprocessorReader_prepare_lines_44, TMP_PreprocessorReader_process_line_45, TMP_PreprocessorReader_has_more_lines$q_46, TMP_PreprocessorReader_empty$q_47, TMP_PreprocessorReader_peek_line_48, TMP_PreprocessorReader_preprocess_conditional_directive_49, TMP_PreprocessorReader_preprocess_include_directive_54, TMP_PreprocessorReader_resolve_include_path_66, TMP_PreprocessorReader_push_include_67, TMP_PreprocessorReader_create_include_cursor_68, TMP_PreprocessorReader_pop_include_69, TMP_PreprocessorReader_include_depth_70, TMP_PreprocessorReader_exceeded_max_depth$q_71, TMP_PreprocessorReader_shift_72, TMP_PreprocessorReader_split_delimited_value_73, TMP_PreprocessorReader_skip_front_matter$B_74, TMP_PreprocessorReader_resolve_expr_val_75, TMP_PreprocessorReader_include_processors$q_76, TMP_PreprocessorReader_to_s_77;

      def.document = def.lineno = def.process_lines = def.look_ahead = def.skipping = def.include_stack = def.conditional_stack = def.path = def.include_processor_extensions = def.maxdepth = def.dir = def.lines = def.file = def.includes = def.unescape_next_line = nil;
      
      self.$attr_reader("include_stack");
      
      Opal.def(self, '$initialize', TMP_PreprocessorReader_initialize_43 = function $$initialize(document, data, cursor, opts) {
        var $iter = TMP_PreprocessorReader_initialize_43.$$p, $yield = $iter || nil, self = this, include_depth_default = nil;

        if ($iter) TMP_PreprocessorReader_initialize_43.$$p = null;
        
        
        if (data == null) {
          data = nil;
        };
        
        if (cursor == null) {
          cursor = nil;
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        self.document = document;
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_PreprocessorReader_initialize_43, false), [data, cursor, opts], null);
        include_depth_default = document.$attributes().$fetch("max-include-depth", 64).$to_i();
        if ($truthy($rb_lt(include_depth_default, 0))) {
          include_depth_default = 0};
        self.maxdepth = $hash2(["abs", "rel"], {"abs": include_depth_default, "rel": include_depth_default});
        self.include_stack = [];
        self.includes = document.$catalog()['$[]']("includes");
        self.skipping = false;
        self.conditional_stack = [];
        return (self.include_processor_extensions = nil);
      }, TMP_PreprocessorReader_initialize_43.$$arity = -2);
      
      Opal.def(self, '$prepare_lines', TMP_PreprocessorReader_prepare_lines_44 = function $$prepare_lines(data, opts) {
        var $a, $b, $iter = TMP_PreprocessorReader_prepare_lines_44.$$p, $yield = $iter || nil, self = this, result = nil, front_matter = nil, $writer = nil, first = nil, last = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_PreprocessorReader_prepare_lines_44.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        result = $send(self, Opal.find_super_dispatcher(self, 'prepare_lines', TMP_PreprocessorReader_prepare_lines_44, false), $zuper, $iter);
        if ($truthy(($truthy($a = self.document) ? self.document.$attributes()['$[]']("skip-front-matter") : $a))) {
          if ($truthy((front_matter = self['$skip_front_matter!'](result)))) {
            
            $writer = ["front-matter", front_matter.$join($$($nesting, 'LF'))];
            $send(self.document.$attributes(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];}};
        if ($truthy(opts.$fetch("condense", true))) {
          
          while ($truthy(($truthy($b = (first = result['$[]'](0))) ? first['$empty?']() : $b))) {
            ($truthy($b = result.$shift()) ? (self.lineno = $rb_plus(self.lineno, 1)) : $b)
          };
          while ($truthy(($truthy($b = (last = result['$[]'](-1))) ? last['$empty?']() : $b))) {
            result.$pop()
          };};
        if ($truthy(opts['$[]']("indent"))) {
          $$($nesting, 'Parser')['$adjust_indentation!'](result, opts['$[]']("indent"), self.document.$attr("tabsize"))};
        return result;
      }, TMP_PreprocessorReader_prepare_lines_44.$$arity = -2);
      
      Opal.def(self, '$process_line', TMP_PreprocessorReader_process_line_45 = function $$process_line(line) {
        var $a, $b, self = this;

        
        if ($truthy(self.process_lines)) {
        } else {
          return line
        };
        if ($truthy(line['$empty?']())) {
          
          self.look_ahead = $rb_plus(self.look_ahead, 1);
          return line;};
        if ($truthy(($truthy($a = ($truthy($b = line['$end_with?']("]")) ? line['$start_with?']("[")['$!']() : $b)) ? line['$include?']("::") : $a))) {
          if ($truthy(($truthy($a = line['$include?']("if")) ? $$($nesting, 'ConditionalDirectiveRx')['$=~'](line) : $a))) {
            if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))['$==']("\\")) {
              
              self.unescape_next_line = true;
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line.$slice(1, line.$length());
            } else if ($truthy(self.$preprocess_conditional_directive((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](4)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](5))))) {
              
              self.$shift();
              return nil;
            } else {
              
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line;
            }
          } else if ($truthy(self.skipping)) {
            
            self.$shift();
            return nil;
          } else if ($truthy(($truthy($a = line['$start_with?']("inc", "\\inc")) ? $$($nesting, 'IncludeDirectiveRx')['$=~'](line) : $a))) {
            if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))['$==']("\\")) {
              
              self.unescape_next_line = true;
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line.$slice(1, line.$length());
            } else if ($truthy(self.$preprocess_include_directive((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](3))))) {
              return nil
            } else {
              
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line;
            }
          } else {
            
            self.look_ahead = $rb_plus(self.look_ahead, 1);
            return line;
          }
        } else if ($truthy(self.skipping)) {
          
          self.$shift();
          return nil;
        } else {
          
          self.look_ahead = $rb_plus(self.look_ahead, 1);
          return line;
        };
      }, TMP_PreprocessorReader_process_line_45.$$arity = 1);
      
      Opal.def(self, '$has_more_lines?', TMP_PreprocessorReader_has_more_lines$q_46 = function() {
        var self = this;

        if ($truthy(self.$peek_line())) {
          return true
        } else {
          return false
        }
      }, TMP_PreprocessorReader_has_more_lines$q_46.$$arity = 0);
      
      Opal.def(self, '$empty?', TMP_PreprocessorReader_empty$q_47 = function() {
        var self = this;

        if ($truthy(self.$peek_line())) {
          return false
        } else {
          return true
        }
      }, TMP_PreprocessorReader_empty$q_47.$$arity = 0);
      Opal.alias(self, "eof?", "empty?");
      
      Opal.def(self, '$peek_line', TMP_PreprocessorReader_peek_line_48 = function $$peek_line(direct) {
        var $iter = TMP_PreprocessorReader_peek_line_48.$$p, $yield = $iter || nil, self = this, line = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_PreprocessorReader_peek_line_48.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        if (direct == null) {
          direct = false;
        };
        if ($truthy((line = $send(self, Opal.find_super_dispatcher(self, 'peek_line', TMP_PreprocessorReader_peek_line_48, false), $zuper, $iter)))) {
          return line
        } else if ($truthy(self.include_stack['$empty?']())) {
          return nil
        } else {
          
          self.$pop_include();
          return self.$peek_line(direct);
        };
      }, TMP_PreprocessorReader_peek_line_48.$$arity = -1);
      
      Opal.def(self, '$preprocess_conditional_directive', TMP_PreprocessorReader_preprocess_conditional_directive_49 = function $$preprocess_conditional_directive(keyword, target, delimiter, text) {
        var $a, $b, $c, TMP_50, TMP_51, TMP_52, TMP_53, self = this, no_target = nil, pair = nil, skip = nil, $case = nil, lhs = nil, op = nil, rhs = nil;

        
        if ($truthy((no_target = target['$empty?']()))) {
        } else {
          target = target.$downcase()
        };
        if ($truthy(($truthy($a = ($truthy($b = no_target) ? ($truthy($c = keyword['$==']("ifdef")) ? $c : keyword['$==']("ifndef")) : $b)) ? $a : ($truthy($b = text) ? keyword['$==']("endif") : $b)))) {
          return false};
        if (keyword['$==']("endif")) {
          
          if ($truthy(self.conditional_stack['$empty?']())) {
            self.$logger().$error(self.$message_with_context("" + "unmatched macro: endif::" + (target) + "[]", $hash2(["source_location"], {"source_location": self.$cursor()})))
          } else if ($truthy(($truthy($a = no_target) ? $a : target['$==']((pair = self.conditional_stack['$[]'](-1))['$[]']("target"))))) {
            
            self.conditional_stack.$pop();
            self.skipping = (function() {if ($truthy(self.conditional_stack['$empty?']())) {
              return false
            } else {
              return self.conditional_stack['$[]'](-1)['$[]']("skipping")
            }; return nil; })();
          } else {
            self.$logger().$error(self.$message_with_context("" + "mismatched macro: endif::" + (target) + "[], expected endif::" + (pair['$[]']("target")) + "[]", $hash2(["source_location"], {"source_location": self.$cursor()})))
          };
          return true;};
        if ($truthy(self.skipping)) {
          skip = false
        } else {
          $case = keyword;
          if ("ifdef"['$===']($case)) {$case = delimiter;
          if (","['$===']($case)) {skip = $send(target.$split(",", -1), 'none?', [], (TMP_50 = function(name){var self = TMP_50.$$s || this;
            if (self.document == null) self.document = nil;

          
            
            if (name == null) {
              name = nil;
            };
            return self.document.$attributes()['$key?'](name);}, TMP_50.$$s = self, TMP_50.$$arity = 1, TMP_50))}
          else if ("+"['$===']($case)) {skip = $send(target.$split("+", -1), 'any?', [], (TMP_51 = function(name){var self = TMP_51.$$s || this;
            if (self.document == null) self.document = nil;

          
            
            if (name == null) {
              name = nil;
            };
            return self.document.$attributes()['$key?'](name)['$!']();}, TMP_51.$$s = self, TMP_51.$$arity = 1, TMP_51))}
          else {skip = self.document.$attributes()['$key?'](target)['$!']()}}
          else if ("ifndef"['$===']($case)) {$case = delimiter;
          if (","['$===']($case)) {skip = $send(target.$split(",", -1), 'any?', [], (TMP_52 = function(name){var self = TMP_52.$$s || this;
            if (self.document == null) self.document = nil;

          
            
            if (name == null) {
              name = nil;
            };
            return self.document.$attributes()['$key?'](name);}, TMP_52.$$s = self, TMP_52.$$arity = 1, TMP_52))}
          else if ("+"['$===']($case)) {skip = $send(target.$split("+", -1), 'all?', [], (TMP_53 = function(name){var self = TMP_53.$$s || this;
            if (self.document == null) self.document = nil;

          
            
            if (name == null) {
              name = nil;
            };
            return self.document.$attributes()['$key?'](name);}, TMP_53.$$s = self, TMP_53.$$arity = 1, TMP_53))}
          else {skip = self.document.$attributes()['$key?'](target)}}
          else if ("ifeval"['$===']($case)) {
          if ($truthy(($truthy($a = no_target) ? $$($nesting, 'EvalExpressionRx')['$=~'](text.$strip()) : $a))) {
          } else {
            return false
          };
          $a = [(($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))], (lhs = $a[0]), (op = $a[1]), (rhs = $a[2]), $a;
          lhs = self.$resolve_expr_val(lhs);
          rhs = self.$resolve_expr_val(rhs);
          if (op['$==']("!=")) {
            skip = lhs.$send("==", rhs)
          } else {
            skip = lhs.$send(op.$to_sym(), rhs)['$!']()
          };}
        };
        if ($truthy(($truthy($a = keyword['$==']("ifeval")) ? $a : text['$!']()))) {
          
          if ($truthy(skip)) {
            self.skipping = true};
          self.conditional_stack['$<<']($hash2(["target", "skip", "skipping"], {"target": target, "skip": skip, "skipping": self.skipping}));
        } else if ($truthy(($truthy($a = self.skipping) ? $a : skip))) {
        } else {
          
          self.$replace_next_line(text.$rstrip());
          self.$unshift("");
          if ($truthy(text['$start_with?']("include::"))) {
            self.look_ahead = $rb_minus(self.look_ahead, 1)};
        };
        return true;
      }, TMP_PreprocessorReader_preprocess_conditional_directive_49.$$arity = 4);
      
      Opal.def(self, '$preprocess_include_directive', TMP_PreprocessorReader_preprocess_include_directive_54 = function $$preprocess_include_directive(target, attrlist) {
        var $a, TMP_55, $b, TMP_56, TMP_57, TMP_58, TMP_60, TMP_63, TMP_64, TMP_65, self = this, doc = nil, expanded_target = nil, ext = nil, abs_maxdepth = nil, parsed_attrs = nil, inc_path = nil, target_type = nil, relpath = nil, inc_linenos = nil, inc_tags = nil, tag = nil, inc_lines = nil, inc_offset = nil, inc_lineno = nil, $writer = nil, tag_stack = nil, tags_used = nil, active_tag = nil, select = nil, base_select = nil, wildcard = nil, missing_tags = nil, inc_content = nil;

        
        doc = self.document;
        if ($truthy(($truthy($a = (expanded_target = target)['$include?']($$($nesting, 'ATTR_REF_HEAD'))) ? (expanded_target = doc.$sub_attributes(target, $hash2(["attribute_missing"], {"attribute_missing": "drop-line"})))['$empty?']() : $a))) {
          
          self.$shift();
          if (($truthy($a = doc.$attributes()['$[]']("attribute-missing")) ? $a : $$($nesting, 'Compliance').$attribute_missing())['$==']("skip")) {
            self.$unshift("" + "Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (attrlist) + "]")};
          return true;
        } else if ($truthy(($truthy($a = self['$include_processors?']()) ? (ext = $send(self.include_processor_extensions, 'find', [], (TMP_55 = function(candidate){var self = TMP_55.$$s || this;

        
          
          if (candidate == null) {
            candidate = nil;
          };
          return candidate.$instance()['$handles?'](expanded_target);}, TMP_55.$$s = self, TMP_55.$$arity = 1, TMP_55))) : $a))) {
          
          self.$shift();
          ext.$process_method()['$[]'](doc, self, expanded_target, doc.$parse_attributes(attrlist, [], $hash2(["sub_input"], {"sub_input": true})));
          return true;
        } else if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')))) {
          return self.$replace_next_line("" + "link:" + (expanded_target) + "[]")
        } else if ($truthy($rb_gt((abs_maxdepth = self.maxdepth['$[]']("abs")), 0))) {
          
          if ($truthy($rb_ge(self.include_stack.$size(), abs_maxdepth))) {
            
            self.$logger().$error(self.$message_with_context("" + "maximum include depth of " + (self.maxdepth['$[]']("rel")) + " exceeded", $hash2(["source_location"], {"source_location": self.$cursor()})));
            return nil;};
          parsed_attrs = doc.$parse_attributes(attrlist, [], $hash2(["sub_input"], {"sub_input": true}));
          $b = self.$resolve_include_path(expanded_target, attrlist, parsed_attrs), $a = Opal.to_ary($b), (inc_path = ($a[0] == null ? nil : $a[0])), (target_type = ($a[1] == null ? nil : $a[1])), (relpath = ($a[2] == null ? nil : $a[2])), $b;
          if ($truthy(target_type)) {
          } else {
            return inc_path
          };
          inc_linenos = (inc_tags = nil);
          if ($truthy(attrlist)) {
            if ($truthy(parsed_attrs['$key?']("lines"))) {
              
              inc_linenos = [];
              $send(self.$split_delimited_value(parsed_attrs['$[]']("lines")), 'each', [], (TMP_56 = function(linedef){var self = TMP_56.$$s || this, $c, $d, from = nil, to = nil;

              
                
                if (linedef == null) {
                  linedef = nil;
                };
                if ($truthy(linedef['$include?'](".."))) {
                  
                  $d = linedef.$split("..", 2), $c = Opal.to_ary($d), (from = ($c[0] == null ? nil : $c[0])), (to = ($c[1] == null ? nil : $c[1])), $d;
                  return (inc_linenos = $rb_plus(inc_linenos, (function() {if ($truthy(($truthy($c = to['$empty?']()) ? $c : $rb_lt((to = to.$to_i()), 0)))) {
                    return [from.$to_i(), $rb_divide(1, 0)]
                  } else {
                    return $$$('::', 'Range').$new(from.$to_i(), to).$to_a()
                  }; return nil; })()));
                } else {
                  return inc_linenos['$<<'](linedef.$to_i())
                };}, TMP_56.$$s = self, TMP_56.$$arity = 1, TMP_56));
              inc_linenos = (function() {if ($truthy(inc_linenos['$empty?']())) {
                return nil
              } else {
                return inc_linenos.$sort().$uniq()
              }; return nil; })();
            } else if ($truthy(parsed_attrs['$key?']("tag"))) {
              if ($truthy(($truthy($a = (tag = parsed_attrs['$[]']("tag"))['$empty?']()) ? $a : tag['$==']("!")))) {
              } else {
                inc_tags = (function() {if ($truthy(tag['$start_with?']("!"))) {
                  return $hash(tag.$slice(1, tag.$length()), false)
                } else {
                  return $hash(tag, true)
                }; return nil; })()
              }
            } else if ($truthy(parsed_attrs['$key?']("tags"))) {
              
              inc_tags = $hash2([], {});
              $send(self.$split_delimited_value(parsed_attrs['$[]']("tags")), 'each', [], (TMP_57 = function(tagdef){var self = TMP_57.$$s || this, $c, $writer = nil;

              
                
                if (tagdef == null) {
                  tagdef = nil;
                };
                if ($truthy(($truthy($c = tagdef['$empty?']()) ? $c : tagdef['$==']("!")))) {
                  return nil
                } else if ($truthy(tagdef['$start_with?']("!"))) {
                  
                  $writer = [tagdef.$slice(1, tagdef.$length()), false];
                  $send(inc_tags, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                } else {
                  
                  $writer = [tagdef, true];
                  $send(inc_tags, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                };}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57));
              if ($truthy(inc_tags['$empty?']())) {
                inc_tags = nil};}};
          if ($truthy(inc_linenos)) {
            
            $a = [[], nil, 0], (inc_lines = $a[0]), (inc_offset = $a[1]), (inc_lineno = $a[2]), $a;
            
            try {
              (function(){var $brk = Opal.new_brk(); try {return $send(self, 'open', [inc_path, "rb"], (TMP_58 = function(f){var self = TMP_58.$$s || this, TMP_59, select_remaining = nil;

              
                
                if (f == null) {
                  f = nil;
                };
                select_remaining = nil;
                return (function(){var $brk = Opal.new_brk(); try {return $send(f, 'each_line', [], (TMP_59 = function(l){var self = TMP_59.$$s || this, $c, $d, select = nil;

                
                  
                  if (l == null) {
                    l = nil;
                  };
                  inc_lineno = $rb_plus(inc_lineno, 1);
                  if ($truthy(($truthy($c = select_remaining) ? $c : ($truthy($d = $$$('::', 'Float')['$===']((select = inc_linenos['$[]'](0)))) ? (select_remaining = select['$infinite?']()) : $d)))) {
                    
                    inc_offset = ($truthy($c = inc_offset) ? $c : inc_lineno);
                    return inc_lines['$<<'](l);
                  } else {
                    
                    if (select['$=='](inc_lineno)) {
                      
                      inc_offset = ($truthy($c = inc_offset) ? $c : inc_lineno);
                      inc_lines['$<<'](l);
                      inc_linenos.$shift();};
                    if ($truthy(inc_linenos['$empty?']())) {
                      
                      Opal.brk(nil, $brk)
                    } else {
                      return nil
                    };
                  };}, TMP_59.$$s = self, TMP_59.$$brk = $brk, TMP_59.$$arity = 1, TMP_59))
                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();}, TMP_58.$$s = self, TMP_58.$$brk = $brk, TMP_58.$$arity = 1, TMP_58))
              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  
                  self.$logger().$error(self.$message_with_context("" + "include " + (target_type) + " not readable: " + (inc_path), $hash2(["source_location"], {"source_location": self.$cursor()})));
                  return self.$replace_next_line("" + "Unresolved directive in " + (self.path) + " - include::" + (expanded_target) + "[" + (attrlist) + "]");
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;
            self.$shift();
            if ($truthy(inc_offset)) {
              
              
              $writer = ["partial-option", true];
              $send(parsed_attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.$push_include(inc_lines, inc_path, relpath, inc_offset, parsed_attrs);};
          } else if ($truthy(inc_tags)) {
            
            $a = [[], nil, 0, [], $$$('::', 'Set').$new(), nil], (inc_lines = $a[0]), (inc_offset = $a[1]), (inc_lineno = $a[2]), (tag_stack = $a[3]), (tags_used = $a[4]), (active_tag = $a[5]), $a;
            if ($truthy(inc_tags['$key?']("**"))) {
              if ($truthy(inc_tags['$key?']("*"))) {
                
                select = (base_select = inc_tags.$delete("**"));
                wildcard = inc_tags.$delete("*");
              } else {
                select = (base_select = (wildcard = inc_tags.$delete("**")))
              }
            } else {
              
              select = (base_select = inc_tags['$value?'](true)['$!']());
              wildcard = inc_tags.$delete("*");
            };
            
            try {
              $send(self, 'open', [inc_path, "rb"], (TMP_60 = function(f){var self = TMP_60.$$s || this, $c, TMP_61, dbl_co = nil, dbl_sb = nil, encoding = nil;

              
                
                if (f == null) {
                  f = nil;
                };
                $c = ["::", "[]"], (dbl_co = $c[0]), (dbl_sb = $c[1]), $c;
                if ($truthy($$($nesting, 'COERCE_ENCODING'))) {
                  encoding = $$$($$$('::', 'Encoding'), 'UTF_8')};
                return $send(f, 'each_line', [], (TMP_61 = function(l){var self = TMP_61.$$s || this, $d, $e, TMP_62, this_tag = nil, include_cursor = nil, idx = nil;

                
                  
                  if (l == null) {
                    l = nil;
                  };
                  inc_lineno = $rb_plus(inc_lineno, 1);
                  if ($truthy(encoding)) {
                    l.$force_encoding(encoding)};
                  if ($truthy(($truthy($d = ($truthy($e = l['$include?'](dbl_co)) ? l['$include?'](dbl_sb) : $e)) ? $$($nesting, 'TagDirectiveRx')['$=~'](l) : $d))) {
                    if ($truthy((($d = $gvars['~']) === nil ? nil : $d['$[]'](1)))) {
                      if ((this_tag = (($d = $gvars['~']) === nil ? nil : $d['$[]'](2)))['$=='](active_tag)) {
                        
                        tag_stack.$pop();
                        return $e = (function() {if ($truthy(tag_stack['$empty?']())) {
                          return [nil, base_select]
                        } else {
                          return tag_stack['$[]'](-1)
                        }; return nil; })(), $d = Opal.to_ary($e), (active_tag = ($d[0] == null ? nil : $d[0])), (select = ($d[1] == null ? nil : $d[1])), $e;
                      } else if ($truthy(inc_tags['$key?'](this_tag))) {
                        
                        include_cursor = self.$create_include_cursor(inc_path, expanded_target, inc_lineno);
                        if ($truthy((idx = $send(tag_stack, 'rindex', [], (TMP_62 = function(key, _){var self = TMP_62.$$s || this;

                        
                          
                          if (key == null) {
                            key = nil;
                          };
                          
                          if (_ == null) {
                            _ = nil;
                          };
                          return key['$=='](this_tag);}, TMP_62.$$s = self, TMP_62.$$arity = 2, TMP_62))))) {
                          
                          if (idx['$=='](0)) {
                            tag_stack.$shift()
                          } else {
                            
                            tag_stack.$delete_at(idx);
                          };
                          return self.$logger().$warn(self.$message_with_context("" + "mismatched end tag (expected '" + (active_tag) + "' but found '" + (this_tag) + "') at line " + (inc_lineno) + " of include " + (target_type) + ": " + (inc_path), $hash2(["source_location", "include_location"], {"source_location": self.$cursor(), "include_location": include_cursor})));
                        } else {
                          return self.$logger().$warn(self.$message_with_context("" + "unexpected end tag '" + (this_tag) + "' at line " + (inc_lineno) + " of include " + (target_type) + ": " + (inc_path), $hash2(["source_location", "include_location"], {"source_location": self.$cursor(), "include_location": include_cursor})))
                        };
                      } else {
                        return nil
                      }
                    } else if ($truthy(inc_tags['$key?']((this_tag = (($d = $gvars['~']) === nil ? nil : $d['$[]'](2)))))) {
                      
                      tags_used['$<<'](this_tag);
                      return tag_stack['$<<']([(active_tag = this_tag), (select = inc_tags['$[]'](this_tag)), inc_lineno]);
                    } else if ($truthy(wildcard['$nil?']()['$!']())) {
                      
                      select = (function() {if ($truthy(($truthy($d = active_tag) ? select['$!']() : $d))) {
                        return false
                      } else {
                        return wildcard
                      }; return nil; })();
                      return tag_stack['$<<']([(active_tag = this_tag), select, inc_lineno]);
                    } else {
                      return nil
                    }
                  } else if ($truthy(select)) {
                    
                    inc_offset = ($truthy($d = inc_offset) ? $d : inc_lineno);
                    return inc_lines['$<<'](l);
                  } else {
                    return nil
                  };}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61));}, TMP_60.$$s = self, TMP_60.$$arity = 1, TMP_60))
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  
                  self.$logger().$error(self.$message_with_context("" + "include " + (target_type) + " not readable: " + (inc_path), $hash2(["source_location"], {"source_location": self.$cursor()})));
                  return self.$replace_next_line("" + "Unresolved directive in " + (self.path) + " - include::" + (expanded_target) + "[" + (attrlist) + "]");
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;
            if ($truthy(tag_stack['$empty?']())) {
            } else {
              $send(tag_stack, 'each', [], (TMP_63 = function(tag_name, _, tag_lineno){var self = TMP_63.$$s || this;

              
                
                if (tag_name == null) {
                  tag_name = nil;
                };
                
                if (_ == null) {
                  _ = nil;
                };
                
                if (tag_lineno == null) {
                  tag_lineno = nil;
                };
                return self.$logger().$warn(self.$message_with_context("" + "detected unclosed tag '" + (tag_name) + "' starting at line " + (tag_lineno) + " of include " + (target_type) + ": " + (inc_path), $hash2(["source_location", "include_location"], {"source_location": self.$cursor(), "include_location": self.$create_include_cursor(inc_path, expanded_target, tag_lineno)})));}, TMP_63.$$s = self, TMP_63.$$arity = 3, TMP_63))
            };
            if ($truthy((missing_tags = $rb_minus(inc_tags.$keys().$to_a(), tags_used.$to_a()))['$empty?']())) {
            } else {
              self.$logger().$warn(self.$message_with_context("" + "tag" + ((function() {if ($truthy($rb_gt(missing_tags.$size(), 1))) {
                return "s"
              } else {
                return ""
              }; return nil; })()) + " '" + (missing_tags.$join(", ")) + "' not found in include " + (target_type) + ": " + (inc_path), $hash2(["source_location"], {"source_location": self.$cursor()})))
            };
            self.$shift();
            if ($truthy(inc_offset)) {
              
              if ($truthy(($truthy($a = ($truthy($b = base_select) ? wildcard : $b)) ? inc_tags['$empty?']() : $a))) {
              } else {
                
                $writer = ["partial-option", true];
                $send(parsed_attrs, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              self.$push_include(inc_lines, inc_path, relpath, inc_offset, parsed_attrs);};
          } else {
            
            try {
              
              inc_content = (function() {if (false) {
                return $send($$$('::', 'File'), 'open', [inc_path, "rb"], (TMP_64 = function(f){var self = TMP_64.$$s || this;

                
                  
                  if (f == null) {
                    f = nil;
                  };
                  return f.$read();}, TMP_64.$$s = self, TMP_64.$$arity = 1, TMP_64))
              } else {
                return $send(self, 'open', [inc_path, "rb"], (TMP_65 = function(f){var self = TMP_65.$$s || this;

                
                  
                  if (f == null) {
                    f = nil;
                  };
                  return f.$read();}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65))
              }; return nil; })();
              self.$shift();
              self.$push_include(inc_content, inc_path, relpath, 1, parsed_attrs);
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  
                  self.$logger().$error(self.$message_with_context("" + "include " + (target_type) + " not readable: " + (inc_path), $hash2(["source_location"], {"source_location": self.$cursor()})));
                  return self.$replace_next_line("" + "Unresolved directive in " + (self.path) + " - include::" + (expanded_target) + "[" + (attrlist) + "]");
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          };
          return true;
        } else {
          return nil
        };
      }, TMP_PreprocessorReader_preprocess_include_directive_54.$$arity = 2);
      
      Opal.def(self, '$resolve_include_path', TMP_PreprocessorReader_resolve_include_path_66 = function $$resolve_include_path(target, attrlist, attributes) {
        var $a, $b, self = this, doc = nil, inc_path = nil, relpath = nil;

        
        doc = self.document;
        if ($truthy(($truthy($a = $$($nesting, 'Helpers')['$uriish?'](target)) ? $a : (function() {if ($truthy($$$('::', 'String')['$==='](self.dir))) {
          return nil
        } else {
          
          return (target = "" + (self.dir) + "/" + (target));
        }; return nil; })()))) {
          
          if ($truthy(doc['$attr?']("allow-uri-read"))) {
          } else {
            return self.$replace_next_line("" + "link:" + (target) + "[" + (attrlist) + "]")
          };
          if ($truthy(doc['$attr?']("cache-uri"))) {
            if ($truthy((($b = $$$('::', 'OpenURI', 'skip_raise')) && ($a = $$$($b, 'Cache', 'skip_raise')) ? 'constant' : nil))) {
            } else {
              $$($nesting, 'Helpers').$require_library("open-uri/cached", "open-uri-cached")
            }
          } else if ($truthy($$$('::', 'RUBY_ENGINE_OPAL')['$!']())) {
            $$$('::', 'OpenURI')};
          return [$$$('::', 'URI').$parse(target), "uri", target];
        } else {
          
          inc_path = doc.$normalize_system_path(target, self.dir, nil, $hash2(["target_name"], {"target_name": "include file"}));
          if ($truthy($$$('::', 'File')['$file?'](inc_path))) {
          } else if ($truthy(attributes['$key?']("optional-option"))) {
            
            self.$shift();
            return true;
          } else {
            
            self.$logger().$error(self.$message_with_context("" + "include file not found: " + (inc_path), $hash2(["source_location"], {"source_location": self.$cursor()})));
            return self.$replace_next_line("" + "Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (attrlist) + "]");
          };
          relpath = doc.$path_resolver().$relative_path(inc_path, doc.$base_dir());
          return [inc_path, "file", relpath];
        };
      }, TMP_PreprocessorReader_resolve_include_path_66.$$arity = 3);
      
      Opal.def(self, '$push_include', TMP_PreprocessorReader_push_include_67 = function $$push_include(data, file, path, lineno, attributes) {
        var $a, self = this, $writer = nil, dir = nil, depth = nil, old_leveloffset = nil;

        
        
        if (file == null) {
          file = nil;
        };
        
        if (path == null) {
          path = nil;
        };
        
        if (lineno == null) {
          lineno = 1;
        };
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        self.include_stack['$<<']([self.lines, self.file, self.dir, self.path, self.lineno, self.maxdepth, self.process_lines]);
        if ($truthy((self.file = file))) {
          
          if ($truthy($$$('::', 'String')['$==='](file))) {
            self.dir = $$$('::', 'File').$dirname(file)
          } else if ($truthy($$$('::', 'RUBY_ENGINE_OPAL'))) {
            self.dir = $$$('::', 'URI').$parse($$$('::', 'File').$dirname((file = file.$to_s())))
          } else {
            
            
            $writer = [(function() {if ((dir = $$$('::', 'File').$dirname(file.$path()))['$==']("/")) {
              return ""
            } else {
              return dir
            }; return nil; })()];
            $send((self.dir = file.$dup()), 'path=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            file = file.$to_s();
          };
          path = ($truthy($a = path) ? $a : $$$('::', 'File').$basename(file));
          self.process_lines = $$($nesting, 'ASCIIDOC_EXTENSIONS')['$[]']($$$('::', 'File').$extname(file));
        } else {
          
          self.dir = ".";
          self.process_lines = true;
        };
        if ($truthy(path)) {
          
          self.path = path;
          if ($truthy(self.process_lines)) {
            
            $writer = [$$($nesting, 'Helpers').$rootname(path), (function() {if ($truthy(attributes['$[]']("partial-option"))) {
              return nil
            } else {
              return true
            }; return nil; })()];
            $send(self.includes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
        } else {
          self.path = "<stdin>"
        };
        self.lineno = lineno;
        if ($truthy(attributes['$key?']("depth"))) {
          
          depth = attributes['$[]']("depth").$to_i();
          if ($truthy($rb_le(depth, 0))) {
            depth = 1};
          self.maxdepth = $hash2(["abs", "rel"], {"abs": $rb_plus($rb_minus(self.include_stack.$size(), 1), depth), "rel": depth});};
        if ($truthy((self.lines = self.$prepare_lines(data, $hash2(["normalize", "condense", "indent"], {"normalize": true, "condense": false, "indent": attributes['$[]']("indent")})))['$empty?']())) {
          self.$pop_include()
        } else {
          
          if ($truthy(attributes['$key?']("leveloffset"))) {
            
            self.lines.$unshift("");
            self.lines.$unshift("" + ":leveloffset: " + (attributes['$[]']("leveloffset")));
            self.lines['$<<']("");
            if ($truthy((old_leveloffset = self.document.$attr("leveloffset")))) {
              self.lines['$<<']("" + ":leveloffset: " + (old_leveloffset))
            } else {
              self.lines['$<<'](":leveloffset!:")
            };
            self.lineno = $rb_minus(self.lineno, 2);};
          self.look_ahead = 0;
        };
        return self;
      }, TMP_PreprocessorReader_push_include_67.$$arity = -2);
      
      Opal.def(self, '$create_include_cursor', TMP_PreprocessorReader_create_include_cursor_68 = function $$create_include_cursor(file, path, lineno) {
        var self = this, dir = nil;

        
        if ($truthy($$$('::', 'String')['$==='](file))) {
          dir = $$$('::', 'File').$dirname(file)
        } else if ($truthy($$$('::', 'RUBY_ENGINE_OPAL'))) {
          dir = $$$('::', 'File').$dirname((file = file.$to_s()))
        } else {
          
          dir = (function() {if ((dir = $$$('::', 'File').$dirname(file.$path()))['$==']("")) {
            return "/"
          } else {
            return dir
          }; return nil; })();
          file = file.$to_s();
        };
        return $$($nesting, 'Cursor').$new(file, dir, path, lineno);
      }, TMP_PreprocessorReader_create_include_cursor_68.$$arity = 3);
      
      Opal.def(self, '$pop_include', TMP_PreprocessorReader_pop_include_69 = function $$pop_include() {
        var $a, $b, self = this;

        if ($truthy($rb_gt(self.include_stack.$size(), 0))) {
          
          $b = self.include_stack.$pop(), $a = Opal.to_ary($b), (self.lines = ($a[0] == null ? nil : $a[0])), (self.file = ($a[1] == null ? nil : $a[1])), (self.dir = ($a[2] == null ? nil : $a[2])), (self.path = ($a[3] == null ? nil : $a[3])), (self.lineno = ($a[4] == null ? nil : $a[4])), (self.maxdepth = ($a[5] == null ? nil : $a[5])), (self.process_lines = ($a[6] == null ? nil : $a[6])), $b;
          self.look_ahead = 0;
          return nil;
        } else {
          return nil
        }
      }, TMP_PreprocessorReader_pop_include_69.$$arity = 0);
      
      Opal.def(self, '$include_depth', TMP_PreprocessorReader_include_depth_70 = function $$include_depth() {
        var self = this;

        return self.include_stack.$size()
      }, TMP_PreprocessorReader_include_depth_70.$$arity = 0);
      
      Opal.def(self, '$exceeded_max_depth?', TMP_PreprocessorReader_exceeded_max_depth$q_71 = function() {
        var $a, self = this, abs_maxdepth = nil;

        if ($truthy(($truthy($a = $rb_gt((abs_maxdepth = self.maxdepth['$[]']("abs")), 0)) ? $rb_ge(self.include_stack.$size(), abs_maxdepth) : $a))) {
          return self.maxdepth['$[]']("rel")
        } else {
          return false
        }
      }, TMP_PreprocessorReader_exceeded_max_depth$q_71.$$arity = 0);
      
      Opal.def(self, '$shift', TMP_PreprocessorReader_shift_72 = function $$shift() {
        var $iter = TMP_PreprocessorReader_shift_72.$$p, $yield = $iter || nil, self = this, line = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_PreprocessorReader_shift_72.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if ($truthy(self.unescape_next_line)) {
          
          self.unescape_next_line = false;
          return (line = $send(self, Opal.find_super_dispatcher(self, 'shift', TMP_PreprocessorReader_shift_72, false), $zuper, $iter)).$slice(1, line.$length());
        } else {
          return $send(self, Opal.find_super_dispatcher(self, 'shift', TMP_PreprocessorReader_shift_72, false), $zuper, $iter)
        }
      }, TMP_PreprocessorReader_shift_72.$$arity = 0);
      
      Opal.def(self, '$split_delimited_value', TMP_PreprocessorReader_split_delimited_value_73 = function $$split_delimited_value(val) {
        var self = this;

        if ($truthy(val['$include?'](","))) {
          
          return val.$split(",");
        } else {
          
          return val.$split(";");
        }
      }, TMP_PreprocessorReader_split_delimited_value_73.$$arity = 1);
      
      Opal.def(self, '$skip_front_matter!', TMP_PreprocessorReader_skip_front_matter$B_74 = function(data, increment_linenos) {
        var $a, $b, self = this, front_matter = nil, original_data = nil;

        
        
        if (increment_linenos == null) {
          increment_linenos = true;
        };
        front_matter = nil;
        if (data['$[]'](0)['$==']("---")) {
          
          original_data = data.$drop(0);
          data.$shift();
          front_matter = [];
          if ($truthy(increment_linenos)) {
            self.lineno = $rb_plus(self.lineno, 1)};
          while ($truthy(($truthy($b = data['$empty?']()['$!']()) ? data['$[]'](0)['$!=']("---") : $b))) {
            
            front_matter['$<<'](data.$shift());
            if ($truthy(increment_linenos)) {
              self.lineno = $rb_plus(self.lineno, 1)};
          };
          if ($truthy(data['$empty?']())) {
            
            $send(data, 'unshift', Opal.to_a(original_data));
            if ($truthy(increment_linenos)) {
              self.lineno = 0};
            front_matter = nil;
          } else {
            
            data.$shift();
            if ($truthy(increment_linenos)) {
              self.lineno = $rb_plus(self.lineno, 1)};
          };};
        return front_matter;
      }, TMP_PreprocessorReader_skip_front_matter$B_74.$$arity = -2);
      
      Opal.def(self, '$resolve_expr_val', TMP_PreprocessorReader_resolve_expr_val_75 = function $$resolve_expr_val(val) {
        var $a, $b, self = this, quoted = nil;

        
        if ($truthy(($truthy($a = ($truthy($b = val['$start_with?']("\"")) ? val['$end_with?']("\"") : $b)) ? $a : ($truthy($b = val['$start_with?']("'")) ? val['$end_with?']("'") : $b)))) {
          
          quoted = true;
          val = val.$slice(1, $rb_minus(val.$length(), 1));
        } else {
          quoted = false
        };
        if ($truthy(val['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {
          val = self.document.$sub_attributes(val, $hash2(["attribute_missing"], {"attribute_missing": "drop"}))};
        if ($truthy(quoted)) {
          return val
        } else if ($truthy(val['$empty?']())) {
          return nil
        } else if (val['$==']("true")) {
          return true
        } else if (val['$==']("false")) {
          return false
        } else if ($truthy(val.$rstrip()['$empty?']())) {
          return " "
        } else if ($truthy(val['$include?']("."))) {
          return val.$to_f()
        } else {
          return val.$to_i()
        };
      }, TMP_PreprocessorReader_resolve_expr_val_75.$$arity = 1);
      
      Opal.def(self, '$include_processors?', TMP_PreprocessorReader_include_processors$q_76 = function() {
        var $a, self = this;

        if ($truthy(self.include_processor_extensions['$nil?']())) {
          if ($truthy(($truthy($a = self.document['$extensions?']()) ? self.document.$extensions()['$include_processors?']() : $a))) {
            return (self.include_processor_extensions = self.document.$extensions().$include_processors())['$!']()['$!']()
          } else {
            return (self.include_processor_extensions = false)
          }
        } else {
          return self.include_processor_extensions['$!='](false)
        }
      }, TMP_PreprocessorReader_include_processors$q_76.$$arity = 0);
      return (Opal.def(self, '$to_s', TMP_PreprocessorReader_to_s_77 = function $$to_s() {
        var TMP_78, self = this;

        return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {path: " + (self.path.$inspect()) + ", line #: " + (self.lineno) + ", include depth: " + (self.include_stack.$size()) + ", include stack: [" + ($send(self.include_stack, 'map', [], (TMP_78 = function(inc){var self = TMP_78.$$s || this;

        
          
          if (inc == null) {
            inc = nil;
          };
          return inc.$to_s();}, TMP_78.$$s = self, TMP_78.$$arity = 1, TMP_78)).$join(", ")) + "]}>"
      }, TMP_PreprocessorReader_to_s_77.$$arity = 0), nil) && 'to_s';
    })($nesting[0], $$($nesting, 'Reader'), $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/section"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$===', '$+', '$level', '$special', '$generate_id', '$title', '$==', '$>', '$sectnum', '$int_to_roman', '$to_i', '$reftext', '$!', '$empty?', '$sprintf', '$sub_quotes', '$compat_mode', '$[]', '$attributes', '$context', '$assign_numeral', '$class', '$object_id', '$inspect', '$size', '$length', '$chr', '$[]=', '$-', '$gsub', '$downcase', '$delete', '$tr_s', '$end_with?', '$chop', '$start_with?', '$slice', '$key?', '$catalog', '$unique_id_start_index']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Section(){};
      var self = $Section = $klass($base, $super, 'Section', $Section);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Section_initialize_1, TMP_Section_generate_id_2, TMP_Section_sectnum_3, TMP_Section_xreftext_4, TMP_Section_$lt$lt_5, TMP_Section_to_s_6, TMP_Section_generate_id_7;

      def.document = def.level = def.numeral = def.parent = def.numbered = def.sectname = def.title = def.blocks = nil;
      
      self.$attr_accessor("index");
      self.$attr_accessor("sectname");
      self.$attr_accessor("special");
      self.$attr_accessor("numbered");
      self.$attr_reader("caption");
      
      Opal.def(self, '$initialize', TMP_Section_initialize_1 = function $$initialize(parent, level, numbered, opts) {
        var $a, $b, $iter = TMP_Section_initialize_1.$$p, $yield = $iter || nil, self = this;

        if ($iter) TMP_Section_initialize_1.$$p = null;
        
        
        if (parent == null) {
          parent = nil;
        };
        
        if (level == null) {
          level = nil;
        };
        
        if (numbered == null) {
          numbered = false;
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Section_initialize_1, false), [parent, "section", opts], null);
        if ($truthy($$($nesting, 'Section')['$==='](parent))) {
          $a = [($truthy($b = level) ? $b : $rb_plus(parent.$level(), 1)), parent.$special()], (self.level = $a[0]), (self.special = $a[1]), $a
        } else {
          $a = [($truthy($b = level) ? $b : 1), false], (self.level = $a[0]), (self.special = $a[1]), $a
        };
        self.numbered = numbered;
        return (self.index = 0);
      }, TMP_Section_initialize_1.$$arity = -1);
      Opal.alias(self, "name", "title");
      
      Opal.def(self, '$generate_id', TMP_Section_generate_id_2 = function $$generate_id() {
        var self = this;

        return $$($nesting, 'Section').$generate_id(self.$title(), self.document)
      }, TMP_Section_generate_id_2.$$arity = 0);
      
      Opal.def(self, '$sectnum', TMP_Section_sectnum_3 = function $$sectnum(delimiter, append) {
        var $a, self = this;

        
        
        if (delimiter == null) {
          delimiter = ".";
        };
        
        if (append == null) {
          append = nil;
        };
        append = ($truthy($a = append) ? $a : (function() {if (append['$=='](false)) {
          return ""
        } else {
          return delimiter
        }; return nil; })());
        if (self.level['$=='](1)) {
          return "" + (self.numeral) + (append)
        } else if ($truthy($rb_gt(self.level, 1))) {
          if ($truthy($$($nesting, 'Section')['$==='](self.parent))) {
            return "" + (self.parent.$sectnum(delimiter, delimiter)) + (self.numeral) + (append)
          } else {
            return "" + (self.numeral) + (append)
          }
        } else {
          return "" + ($$($nesting, 'Helpers').$int_to_roman(self.numeral.$to_i())) + (append)
        };
      }, TMP_Section_sectnum_3.$$arity = -1);
      
      Opal.def(self, '$xreftext', TMP_Section_xreftext_4 = function $$xreftext(xrefstyle) {
        var $a, self = this, val = nil, $case = nil, type = nil, quoted_title = nil, signifier = nil;

        
        
        if (xrefstyle == null) {
          xrefstyle = nil;
        };
        if ($truthy(($truthy($a = (val = self.$reftext())) ? val['$empty?']()['$!']() : $a))) {
          return val
        } else if ($truthy(xrefstyle)) {
          if ($truthy(self.numbered)) {
            return (function() {$case = xrefstyle;
            if ("full"['$===']($case)) {
            if ($truthy(($truthy($a = (type = self.sectname)['$==']("chapter")) ? $a : type['$==']("appendix")))) {
              quoted_title = self.$sprintf(self.$sub_quotes("_%s_"), self.$title())
            } else {
              quoted_title = self.$sprintf(self.$sub_quotes((function() {if ($truthy(self.document.$compat_mode())) {
                return "``%s''"
              } else {
                return "\"`%s`\""
              }; return nil; })()), self.$title())
            };
            if ($truthy((signifier = self.document.$attributes()['$[]']("" + (type) + "-refsig")))) {
              return "" + (signifier) + " " + (self.$sectnum(".", ",")) + " " + (quoted_title)
            } else {
              return "" + (self.$sectnum(".", ",")) + " " + (quoted_title)
            };}
            else if ("short"['$===']($case)) {if ($truthy((signifier = self.document.$attributes()['$[]']("" + (self.sectname) + "-refsig")))) {
              return "" + (signifier) + " " + (self.$sectnum(".", ""))
            } else {
              return self.$sectnum(".", "")
            }}
            else {if ($truthy(($truthy($a = (type = self.sectname)['$==']("chapter")) ? $a : type['$==']("appendix")))) {
              
              return self.$sprintf(self.$sub_quotes("_%s_"), self.$title());
            } else {
              return self.$title()
            }}})()
          } else if ($truthy(($truthy($a = (type = self.sectname)['$==']("chapter")) ? $a : type['$==']("appendix")))) {
            
            return self.$sprintf(self.$sub_quotes("_%s_"), self.$title());
          } else {
            return self.$title()
          }
        } else {
          return self.$title()
        };
      }, TMP_Section_xreftext_4.$$arity = -1);
      
      Opal.def(self, '$<<', TMP_Section_$lt$lt_5 = function(block) {
        var $iter = TMP_Section_$lt$lt_5.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Section_$lt$lt_5.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        if (block.$context()['$==']("section")) {
          self.$assign_numeral(block)};
        return $send(self, Opal.find_super_dispatcher(self, '<<', TMP_Section_$lt$lt_5, false), $zuper, $iter);
      }, TMP_Section_$lt$lt_5.$$arity = 1);
      
      Opal.def(self, '$to_s', TMP_Section_to_s_6 = function $$to_s() {
        var $iter = TMP_Section_to_s_6.$$p, $yield = $iter || nil, self = this, formal_title = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Section_to_s_6.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if ($truthy(self.title)) {
          
          formal_title = (function() {if ($truthy(self.numbered)) {
            return "" + (self.$sectnum()) + " " + (self.title)
          } else {
            return self.title
          }; return nil; })();
          return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {level: " + (self.level) + ", title: " + (formal_title.$inspect()) + ", blocks: " + (self.blocks.$size()) + "}>";
        } else {
          return $send(self, Opal.find_super_dispatcher(self, 'to_s', TMP_Section_to_s_6, false), $zuper, $iter)
        }
      }, TMP_Section_to_s_6.$$arity = 0);
      return (Opal.defs(self, '$generate_id', TMP_Section_generate_id_7 = function $$generate_id(title, document) {
        var $a, $b, self = this, attrs = nil, pre = nil, sep = nil, no_sep = nil, $writer = nil, sep_sub = nil, gen_id = nil, ids = nil, cnt = nil, candidate_id = nil;

        
        attrs = document.$attributes();
        pre = ($truthy($a = attrs['$[]']("idprefix")) ? $a : "_");
        if ($truthy((sep = attrs['$[]']("idseparator")))) {
          if ($truthy(($truthy($a = sep.$length()['$=='](1)) ? $a : ($truthy($b = (no_sep = sep['$empty?']())['$!']()) ? (sep = (($writer = ["idseparator", sep.$chr()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])) : $b)))) {
            sep_sub = (function() {if ($truthy(($truthy($a = sep['$==']("-")) ? $a : sep['$=='](".")))) {
              return " .-"
            } else {
              return "" + " " + (sep) + ".-"
            }; return nil; })()}
        } else {
          $a = ["_", " _.-"], (sep = $a[0]), (sep_sub = $a[1]), $a
        };
        gen_id = "" + (pre) + (title.$downcase().$gsub($$($nesting, 'InvalidSectionIdCharsRx'), ""));
        if ($truthy(no_sep)) {
          gen_id = gen_id.$delete(" ")
        } else {
          
          gen_id = gen_id.$tr_s(sep_sub, sep);
          if ($truthy(gen_id['$end_with?'](sep))) {
            gen_id = gen_id.$chop()};
          if ($truthy(($truthy($a = pre['$empty?']()) ? gen_id['$start_with?'](sep) : $a))) {
            gen_id = gen_id.$slice(1, gen_id.$length())};
        };
        if ($truthy(document.$catalog()['$[]']("ids")['$key?'](gen_id))) {
          
          $a = [document.$catalog()['$[]']("ids"), $$($nesting, 'Compliance').$unique_id_start_index()], (ids = $a[0]), (cnt = $a[1]), $a;
          while ($truthy(ids['$key?']((candidate_id = "" + (gen_id) + (sep) + (cnt))))) {
            cnt = $rb_plus(cnt, 1)
          };
          return candidate_id;
        } else {
          return gen_id
        };
      }, TMP_Section_generate_id_7.$$arity = 2), nil) && 'generate_id';
    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/stylesheets"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$join', '$new', '$rstrip', '$read', '$primary_stylesheet_data', '$write', '$primary_stylesheet_name', '$coderay_stylesheet_data', '$coderay_stylesheet_name', '$load_pygments', '$=~', '$css', '$[]', '$sub', '$[]=', '$-', '$pygments_stylesheet_data', '$pygments_stylesheet_name', '$!', '$nil?', '$require_library']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Stylesheets(){};
      var self = $Stylesheets = $klass($base, $super, 'Stylesheets', $Stylesheets);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Stylesheets_instance_1, TMP_Stylesheets_primary_stylesheet_name_2, TMP_Stylesheets_primary_stylesheet_data_3, TMP_Stylesheets_embed_primary_stylesheet_4, TMP_Stylesheets_write_primary_stylesheet_5, TMP_Stylesheets_coderay_stylesheet_name_6, TMP_Stylesheets_coderay_stylesheet_data_7, TMP_Stylesheets_embed_coderay_stylesheet_8, TMP_Stylesheets_write_coderay_stylesheet_9, TMP_Stylesheets_pygments_stylesheet_name_10, TMP_Stylesheets_pygments_background_11, TMP_Stylesheets_pygments_stylesheet_data_12, TMP_Stylesheets_embed_pygments_stylesheet_13, TMP_Stylesheets_write_pygments_stylesheet_14, TMP_Stylesheets_load_pygments_15;

      def.primary_stylesheet_data = def.coderay_stylesheet_data = def.pygments_stylesheet_data = nil;
      
      Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_NAME', "asciidoctor.css");
      Opal.const_set($nesting[0], 'DEFAULT_PYGMENTS_STYLE', "default");
      Opal.const_set($nesting[0], 'STYLESHEETS_DATA_PATH', $$$('::', 'File').$join($$($nesting, 'DATA_PATH'), "stylesheets"));
      Opal.const_set($nesting[0], 'PygmentsBgColorRx', /^\.pygments +\{ *background: *([^;]+);/);
      self.__instance__ = self.$new();
      Opal.defs(self, '$instance', TMP_Stylesheets_instance_1 = function $$instance() {
        var self = this;
        if (self.__instance__ == null) self.__instance__ = nil;

        return self.__instance__
      }, TMP_Stylesheets_instance_1.$$arity = 0);
      
      Opal.def(self, '$primary_stylesheet_name', TMP_Stylesheets_primary_stylesheet_name_2 = function $$primary_stylesheet_name() {
        var self = this;

        return $$($nesting, 'DEFAULT_STYLESHEET_NAME')
      }, TMP_Stylesheets_primary_stylesheet_name_2.$$arity = 0);
      
      Opal.def(self, '$primary_stylesheet_data', TMP_Stylesheets_primary_stylesheet_data_3 = function $$primary_stylesheet_data() {

var File = Opal.const_get_relative([], "File");
var stylesheetsPath;
if (Opal.const_get_relative([], "JAVASCRIPT_PLATFORM")["$=="]("node")) {
  if (File.$basename(__dirname) === "node" && File.$basename(File.$dirname(__dirname)) === "dist") {
    stylesheetsPath = File.$join(File.$dirname(__dirname), "css");
  } else {
    stylesheetsPath = File.$join(__dirname, "css");
  }
} else if (Opal.const_get_relative([], "JAVASCRIPT_ENGINE")["$=="]("nashorn")) {
  if (File.$basename(__DIR__) === "nashorn" && File.$basename(File.$dirname(__DIR__)) === "dist") {
    stylesheetsPath = File.$join(File.$dirname(__DIR__), "css");
  } else {
    stylesheetsPath = File.$join(__DIR__, "css");
  }
} else {
  stylesheetsPath = "css";
}
return ((($a = self.primary_stylesheet_data) !== false && $a !== nil && $a != null) ? $a : self.primary_stylesheet_data = Opal.const_get_relative([], "IO").$read(File.$join(stylesheetsPath, "asciidoctor.css")).$chomp());
  
      }, TMP_Stylesheets_primary_stylesheet_data_3.$$arity = 0);
      
      Opal.def(self, '$embed_primary_stylesheet', TMP_Stylesheets_embed_primary_stylesheet_4 = function $$embed_primary_stylesheet() {
        var self = this;

        return "" + "<style>\n" + (self.$primary_stylesheet_data()) + "\n" + "</style>"
      }, TMP_Stylesheets_embed_primary_stylesheet_4.$$arity = 0);
      
      Opal.def(self, '$write_primary_stylesheet', TMP_Stylesheets_write_primary_stylesheet_5 = function $$write_primary_stylesheet(target_dir) {
        var self = this;

        
        
        if (target_dir == null) {
          target_dir = ".";
        };
        return $$$('::', 'IO').$write($$$('::', 'File').$join(target_dir, self.$primary_stylesheet_name()), self.$primary_stylesheet_data());
      }, TMP_Stylesheets_write_primary_stylesheet_5.$$arity = -1);
      
      Opal.def(self, '$coderay_stylesheet_name', TMP_Stylesheets_coderay_stylesheet_name_6 = function $$coderay_stylesheet_name() {
        var self = this;

        return "coderay-asciidoctor.css"
      }, TMP_Stylesheets_coderay_stylesheet_name_6.$$arity = 0);
      
      Opal.def(self, '$coderay_stylesheet_data', TMP_Stylesheets_coderay_stylesheet_data_7 = function $$coderay_stylesheet_data() {
        var $a, self = this;

        return (self.coderay_stylesheet_data = ($truthy($a = self.coderay_stylesheet_data) ? $a : $$$('::', 'IO').$read($$$('::', 'File').$join($$($nesting, 'STYLESHEETS_DATA_PATH'), "coderay-asciidoctor.css")).$rstrip()))
      }, TMP_Stylesheets_coderay_stylesheet_data_7.$$arity = 0);
      
      Opal.def(self, '$embed_coderay_stylesheet', TMP_Stylesheets_embed_coderay_stylesheet_8 = function $$embed_coderay_stylesheet() {
        var self = this;

        return "" + "<style>\n" + (self.$coderay_stylesheet_data()) + "\n" + "</style>"
      }, TMP_Stylesheets_embed_coderay_stylesheet_8.$$arity = 0);
      
      Opal.def(self, '$write_coderay_stylesheet', TMP_Stylesheets_write_coderay_stylesheet_9 = function $$write_coderay_stylesheet(target_dir) {
        var self = this;

        
        
        if (target_dir == null) {
          target_dir = ".";
        };
        return $$$('::', 'IO').$write($$$('::', 'File').$join(target_dir, self.$coderay_stylesheet_name()), self.$coderay_stylesheet_data());
      }, TMP_Stylesheets_write_coderay_stylesheet_9.$$arity = -1);
      
      Opal.def(self, '$pygments_stylesheet_name', TMP_Stylesheets_pygments_stylesheet_name_10 = function $$pygments_stylesheet_name(style) {
        var $a, self = this;

        
        
        if (style == null) {
          style = nil;
        };
        return "" + "pygments-" + (($truthy($a = style) ? $a : $$($nesting, 'DEFAULT_PYGMENTS_STYLE'))) + ".css";
      }, TMP_Stylesheets_pygments_stylesheet_name_10.$$arity = -1);
      
      Opal.def(self, '$pygments_background', TMP_Stylesheets_pygments_background_11 = function $$pygments_background(style) {
        var $a, $b, self = this;

        
        
        if (style == null) {
          style = nil;
        };
        if ($truthy(($truthy($a = self.$load_pygments()) ? $$($nesting, 'PygmentsBgColorRx')['$=~']($$$('::', 'Pygments').$css(".pygments", $hash2(["style"], {"style": ($truthy($b = style) ? $b : $$($nesting, 'DEFAULT_PYGMENTS_STYLE'))}))) : $a))) {
          return (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))
        } else {
          return nil
        };
      }, TMP_Stylesheets_pygments_background_11.$$arity = -1);
      
      Opal.def(self, '$pygments_stylesheet_data', TMP_Stylesheets_pygments_stylesheet_data_12 = function $$pygments_stylesheet_data(style) {
        var $a, $b, self = this, $writer = nil;

        
        
        if (style == null) {
          style = nil;
        };
        if ($truthy(self.$load_pygments())) {
          
          style = ($truthy($a = style) ? $a : $$($nesting, 'DEFAULT_PYGMENTS_STYLE'));
          return ($truthy($a = (self.pygments_stylesheet_data = ($truthy($b = self.pygments_stylesheet_data) ? $b : $hash2([], {})))['$[]'](style)) ? $a : (($writer = [style, ($truthy($b = $$$('::', 'Pygments').$css(".listingblock .pygments", $hash2(["classprefix", "style"], {"classprefix": "tok-", "style": style}))) ? $b : "/* Failed to load Pygments CSS. */").$sub(".listingblock .pygments  {", ".listingblock .pygments, .listingblock .pygments code {")]), $send((self.pygments_stylesheet_data = ($truthy($b = self.pygments_stylesheet_data) ? $b : $hash2([], {}))), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        } else {
          return "/* Pygments CSS disabled. Pygments is not available. */"
        };
      }, TMP_Stylesheets_pygments_stylesheet_data_12.$$arity = -1);
      
      Opal.def(self, '$embed_pygments_stylesheet', TMP_Stylesheets_embed_pygments_stylesheet_13 = function $$embed_pygments_stylesheet(style) {
        var self = this;

        
        
        if (style == null) {
          style = nil;
        };
        return "" + "<style>\n" + (self.$pygments_stylesheet_data(style)) + "\n" + "</style>";
      }, TMP_Stylesheets_embed_pygments_stylesheet_13.$$arity = -1);
      
      Opal.def(self, '$write_pygments_stylesheet', TMP_Stylesheets_write_pygments_stylesheet_14 = function $$write_pygments_stylesheet(target_dir, style) {
        var self = this;

        
        
        if (target_dir == null) {
          target_dir = ".";
        };
        
        if (style == null) {
          style = nil;
        };
        return $$$('::', 'IO').$write($$$('::', 'File').$join(target_dir, self.$pygments_stylesheet_name(style)), self.$pygments_stylesheet_data(style));
      }, TMP_Stylesheets_write_pygments_stylesheet_14.$$arity = -1);
      return (Opal.def(self, '$load_pygments', TMP_Stylesheets_load_pygments_15 = function $$load_pygments() {
        var $a, self = this;

        if ($truthy((($a = $$$('::', 'Pygments', 'skip_raise')) ? 'constant' : nil))) {
          return true
        } else {
          return $$($nesting, 'Helpers').$require_library("pygments", "pygments.rb", "ignore")['$nil?']()['$!']()
        }
      }, TMP_Stylesheets_load_pygments_15.$$arity = 0), nil) && 'load_pygments';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/table"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$new', '$key?', '$[]', '$>', '$to_i', '$<', '$==', '$[]=', '$-', '$attributes', '$round', '$*', '$/', '$to_f', '$empty?', '$body', '$each', '$<<', '$size', '$+', '$assign_column_widths', '$warn', '$logger', '$update_attributes', '$assign_width', '$shift', '$style=', '$head=', '$pop', '$foot=', '$parent', '$sourcemap', '$dup', '$header_row?', '$table', '$delete', '$start_with?', '$rstrip', '$slice', '$length', '$advance', '$lstrip', '$strip', '$split', '$include?', '$readlines', '$unshift', '$nil?', '$=~', '$catalog_inline_anchor', '$apply_subs', '$convert', '$map', '$text', '$!', '$file', '$lineno', '$to_s', '$include', '$to_set', '$mark', '$nested?', '$document', '$error', '$message_with_context', '$cursor_at_prev_line', '$nil_or_empty?', '$escape', '$columns', '$match', '$chop', '$end_with?', '$gsub', '$push_cellspec', '$cell_open?', '$close_cell', '$take_cellspec', '$squeeze', '$upto', '$times', '$cursor_before_mark', '$rowspan', '$activate_rowspan', '$colspan', '$end_of_row?', '$!=', '$close_row', '$rows', '$effective_column_visits']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Table(){};
      var self = $Table = $klass($base, $super, 'Table', $Table);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Table_initialize_3, TMP_Table_header_row$q_4, TMP_Table_create_columns_5, TMP_Table_assign_column_widths_7, TMP_Table_partition_header_footer_11;

      def.attributes = def.document = def.has_header_option = def.rows = def.columns = nil;
      
      Opal.const_set($nesting[0], 'DEFAULT_PRECISION_FACTOR', 10000);
      (function($base, $super, $parent_nesting) {
        function $Rows(){};
        var self = $Rows = $klass($base, $super, 'Rows', $Rows);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Rows_initialize_1, TMP_Rows_by_section_2;

        def.head = def.body = def.foot = nil;
        
        self.$attr_accessor("head", "foot", "body");
        
        Opal.def(self, '$initialize', TMP_Rows_initialize_1 = function $$initialize(head, foot, body) {
          var self = this;

          
          
          if (head == null) {
            head = [];
          };
          
          if (foot == null) {
            foot = [];
          };
          
          if (body == null) {
            body = [];
          };
          self.head = head;
          self.foot = foot;
          return (self.body = body);
        }, TMP_Rows_initialize_1.$$arity = -1);
        Opal.alias(self, "[]", "send");
        return (Opal.def(self, '$by_section', TMP_Rows_by_section_2 = function $$by_section() {
          var self = this;

          return [["head", self.head], ["body", self.body], ["foot", self.foot]]
        }, TMP_Rows_by_section_2.$$arity = 0), nil) && 'by_section';
      })($nesting[0], null, $nesting);
      self.$attr_accessor("columns");
      self.$attr_accessor("rows");
      self.$attr_accessor("has_header_option");
      self.$attr_reader("caption");
      
      Opal.def(self, '$initialize', TMP_Table_initialize_3 = function $$initialize(parent, attributes) {
        var $a, $b, $iter = TMP_Table_initialize_3.$$p, $yield = $iter || nil, self = this, pcwidth = nil, pcwidth_intval = nil, $writer = nil;

        if ($iter) TMP_Table_initialize_3.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Table_initialize_3, false), [parent, "table"], null);
        self.rows = $$($nesting, 'Rows').$new();
        self.columns = [];
        self.has_header_option = attributes['$key?']("header-option");
        if ($truthy((pcwidth = attributes['$[]']("width")))) {
          if ($truthy(($truthy($a = $rb_gt((pcwidth_intval = pcwidth.$to_i()), 100)) ? $a : $rb_lt(pcwidth_intval, 1)))) {
            if ($truthy((($a = pcwidth_intval['$=='](0)) ? ($truthy($b = pcwidth['$==']("0")) ? $b : pcwidth['$==']("0%")) : pcwidth_intval['$=='](0)))) {
            } else {
              pcwidth_intval = 100
            }}
        } else {
          pcwidth_intval = 100
        };
        
        $writer = ["tablepcwidth", pcwidth_intval];
        $send(self.attributes, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(self.document.$attributes()['$key?']("pagewidth"))) {
          ($truthy($a = self.attributes['$[]']("tableabswidth")) ? $a : (($writer = ["tableabswidth", $rb_times($rb_divide(self.attributes['$[]']("tablepcwidth").$to_f(), 100), self.document.$attributes()['$[]']("pagewidth")).$round()]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))};
        if ($truthy(attributes['$key?']("rotate-option"))) {
          
          $writer = ["orientation", "landscape"];
          $send(attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        };
      }, TMP_Table_initialize_3.$$arity = 2);
      
      Opal.def(self, '$header_row?', TMP_Table_header_row$q_4 = function() {
        var $a, self = this;

        return ($truthy($a = self.has_header_option) ? self.rows.$body()['$empty?']() : $a)
      }, TMP_Table_header_row$q_4.$$arity = 0);
      
      Opal.def(self, '$create_columns', TMP_Table_create_columns_5 = function $$create_columns(colspecs) {
        var TMP_6, $a, self = this, cols = nil, autowidth_cols = nil, width_base = nil, num_cols = nil, $writer = nil;

        
        cols = [];
        autowidth_cols = nil;
        width_base = 0;
        $send(colspecs, 'each', [], (TMP_6 = function(colspec){var self = TMP_6.$$s || this, $a, colwidth = nil;

        
          
          if (colspec == null) {
            colspec = nil;
          };
          colwidth = colspec['$[]']("width");
          cols['$<<']($$($nesting, 'Column').$new(self, cols.$size(), colspec));
          if ($truthy($rb_lt(colwidth, 0))) {
            return (autowidth_cols = ($truthy($a = autowidth_cols) ? $a : []))['$<<'](cols['$[]'](-1))
          } else {
            return (width_base = $rb_plus(width_base, colwidth))
          };}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
        if ($truthy($rb_gt((num_cols = (self.columns = cols).$size()), 0))) {
          
          
          $writer = ["colcount", num_cols];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(($truthy($a = $rb_gt(width_base, 0)) ? $a : autowidth_cols))) {
          } else {
            width_base = nil
          };
          self.$assign_column_widths(width_base, autowidth_cols);};
        return nil;
      }, TMP_Table_create_columns_5.$$arity = 1);
      
      Opal.def(self, '$assign_column_widths', TMP_Table_assign_column_widths_7 = function $$assign_column_widths(width_base, autowidth_cols) {
        var TMP_8, TMP_9, TMP_10, self = this, pf = nil, total_width = nil, col_pcwidth = nil, autowidth = nil, autowidth_attrs = nil;

        
        
        if (width_base == null) {
          width_base = nil;
        };
        
        if (autowidth_cols == null) {
          autowidth_cols = nil;
        };
        pf = $$($nesting, 'DEFAULT_PRECISION_FACTOR');
        total_width = (col_pcwidth = 0);
        if ($truthy(width_base)) {
          
          if ($truthy(autowidth_cols)) {
            
            if ($truthy($rb_gt(width_base, 100))) {
              
              autowidth = 0;
              self.$logger().$warn("" + "total column width must not exceed 100% when using autowidth columns; got " + (width_base) + "%");
            } else {
              
              autowidth = $rb_divide($rb_times($rb_divide($rb_minus(100, width_base), autowidth_cols.$size()), pf).$to_i(), pf);
              if (autowidth.$to_i()['$=='](autowidth)) {
                autowidth = autowidth.$to_i()};
              width_base = 100;
            };
            autowidth_attrs = $hash2(["width", "autowidth-option"], {"width": autowidth, "autowidth-option": ""});
            $send(autowidth_cols, 'each', [], (TMP_8 = function(col){var self = TMP_8.$$s || this;

            
              
              if (col == null) {
                col = nil;
              };
              return col.$update_attributes(autowidth_attrs);}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));};
          $send(self.columns, 'each', [], (TMP_9 = function(col){var self = TMP_9.$$s || this;

          
            
            if (col == null) {
              col = nil;
            };
            return (total_width = $rb_plus(total_width, (col_pcwidth = col.$assign_width(nil, width_base, pf))));}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
        } else {
          
          col_pcwidth = $rb_divide($rb_divide($rb_times(100, pf), self.columns.$size()).$to_i(), pf);
          if (col_pcwidth.$to_i()['$=='](col_pcwidth)) {
            col_pcwidth = col_pcwidth.$to_i()};
          $send(self.columns, 'each', [], (TMP_10 = function(col){var self = TMP_10.$$s || this;

          
            
            if (col == null) {
              col = nil;
            };
            return (total_width = $rb_plus(total_width, col.$assign_width(col_pcwidth)));}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
        };
        if (total_width['$=='](100)) {
        } else {
          self.columns['$[]'](-1).$assign_width($rb_divide($rb_times($rb_plus($rb_minus(100, total_width), col_pcwidth), pf).$round(), pf))
        };
        return nil;
      }, TMP_Table_assign_column_widths_7.$$arity = -1);
      return (Opal.def(self, '$partition_header_footer', TMP_Table_partition_header_footer_11 = function $$partition_header_footer(attrs) {
        var $a, TMP_12, self = this, $writer = nil, num_body_rows = nil, head = nil;

        
        
        $writer = ["rowcount", self.rows.$body().$size()];
        $send(self.attributes, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        num_body_rows = self.rows.$body().$size();
        if ($truthy(($truthy($a = $rb_gt(num_body_rows, 0)) ? self.has_header_option : $a))) {
          
          head = self.rows.$body().$shift();
          num_body_rows = $rb_minus(num_body_rows, 1);
          $send(head, 'each', [], (TMP_12 = function(c){var self = TMP_12.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            $writer = [nil];
            $send(c, 'style=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
          
          $writer = [[head]];
          $send(self.rows, 'head=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;};
        if ($truthy(($truthy($a = $rb_gt(num_body_rows, 0)) ? attrs['$key?']("footer-option") : $a))) {
          
          $writer = [[self.rows.$body().$pop()]];
          $send(self.rows, 'foot=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return nil;
      }, TMP_Table_partition_header_footer_11.$$arity = 1), nil) && 'partition_header_footer';
    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $Column(){};
      var self = $Column = $klass($base, $super, 'Column', $Column);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Column_initialize_13, TMP_Column_assign_width_14;

      def.attributes = nil;
      
      self.$attr_accessor("style");
      
      Opal.def(self, '$initialize', TMP_Column_initialize_13 = function $$initialize(table, index, attributes) {
        var $a, $iter = TMP_Column_initialize_13.$$p, $yield = $iter || nil, self = this, $writer = nil;

        if ($iter) TMP_Column_initialize_13.$$p = null;
        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Column_initialize_13, false), [table, "column"], null);
        self.style = attributes['$[]']("style");
        
        $writer = ["colnumber", $rb_plus(index, 1)];
        $send(attributes, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        ($truthy($a = attributes['$[]']("width")) ? $a : (($writer = ["width", 1]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        ($truthy($a = attributes['$[]']("halign")) ? $a : (($writer = ["halign", "left"]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        ($truthy($a = attributes['$[]']("valign")) ? $a : (($writer = ["valign", "top"]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        return self.$update_attributes(attributes);
      }, TMP_Column_initialize_13.$$arity = -3);
      Opal.alias(self, "table", "parent");
      return (Opal.def(self, '$assign_width', TMP_Column_assign_width_14 = function $$assign_width(col_pcwidth, width_base, pf) {
        var self = this, $writer = nil;

        
        
        if (width_base == null) {
          width_base = nil;
        };
        
        if (pf == null) {
          pf = 10000;
        };
        if ($truthy(width_base)) {
          
          col_pcwidth = $rb_divide($rb_times($rb_times($rb_divide(self.attributes['$[]']("width").$to_f(), width_base), 100), pf).$to_i(), pf);
          if (col_pcwidth.$to_i()['$=='](col_pcwidth)) {
            col_pcwidth = col_pcwidth.$to_i()};};
        
        $writer = ["colpcwidth", col_pcwidth];
        $send(self.attributes, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(self.$parent().$attributes()['$key?']("tableabswidth"))) {
          
          $writer = ["colabswidth", $rb_times($rb_divide(col_pcwidth, 100), self.$parent().$attributes()['$[]']("tableabswidth")).$round()];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return col_pcwidth;
      }, TMP_Column_assign_width_14.$$arity = -2), nil) && 'assign_width';
    })($$($nesting, 'Table'), $$($nesting, 'AbstractNode'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $Cell(){};
      var self = $Cell = $klass($base, $super, 'Cell', $Cell);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Cell_initialize_15, TMP_Cell_text_16, TMP_Cell_text$eq_17, TMP_Cell_content_18, TMP_Cell_file_20, TMP_Cell_lineno_21, TMP_Cell_to_s_22;

      def.document = def.text = def.subs = def.style = def.inner_document = def.source_location = def.colspan = def.rowspan = def.attributes = nil;
      
      self.$attr_reader("source_location");
      self.$attr_accessor("style");
      self.$attr_accessor("subs");
      self.$attr_accessor("colspan");
      self.$attr_accessor("rowspan");
      Opal.alias(self, "column", "parent");
      self.$attr_reader("inner_document");
      
      Opal.def(self, '$initialize', TMP_Cell_initialize_15 = function $$initialize(column, cell_text, attributes, opts) {
        var $a, $b, $iter = TMP_Cell_initialize_15.$$p, $yield = $iter || nil, self = this, in_header_row = nil, cell_style = nil, asciidoc = nil, inner_document_cursor = nil, lines_advanced = nil, literal = nil, normal_psv = nil, parent_doctitle = nil, inner_document_lines = nil, unprocessed_line1 = nil, preprocessed_lines = nil, $writer = nil;

        if ($iter) TMP_Cell_initialize_15.$$p = null;
        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Cell_initialize_15, false), [column, "cell"], null);
        if ($truthy(self.document.$sourcemap())) {
          self.source_location = opts['$[]']("cursor").$dup()};
        if ($truthy(column)) {
          
          if ($truthy((in_header_row = column.$table()['$header_row?']()))) {
          } else {
            cell_style = column.$attributes()['$[]']("style")
          };
          self.$update_attributes(column.$attributes());};
        if ($truthy(attributes)) {
          
          if ($truthy(attributes['$empty?']())) {
            self.colspan = (self.rowspan = nil)
          } else {
            
            $a = [attributes.$delete("colspan"), attributes.$delete("rowspan")], (self.colspan = $a[0]), (self.rowspan = $a[1]), $a;
            if ($truthy(in_header_row)) {
            } else {
              cell_style = ($truthy($a = attributes['$[]']("style")) ? $a : cell_style)
            };
            self.$update_attributes(attributes);
          };
          if (cell_style['$==']("asciidoc")) {
            
            asciidoc = true;
            inner_document_cursor = opts['$[]']("cursor");
            if ($truthy((cell_text = cell_text.$rstrip())['$start_with?']($$($nesting, 'LF')))) {
              
              lines_advanced = 1;
              while ($truthy((cell_text = cell_text.$slice(1, cell_text.$length()))['$start_with?']($$($nesting, 'LF')))) {
                lines_advanced = $rb_plus(lines_advanced, 1)
              };
              inner_document_cursor.$advance(lines_advanced);
            } else {
              cell_text = cell_text.$lstrip()
            };
          } else if ($truthy(($truthy($a = (literal = cell_style['$==']("literal"))) ? $a : cell_style['$==']("verse")))) {
            
            cell_text = cell_text.$rstrip();
            while ($truthy(cell_text['$start_with?']($$($nesting, 'LF')))) {
              cell_text = cell_text.$slice(1, cell_text.$length())
            };
          } else {
            
            normal_psv = true;
            cell_text = (function() {if ($truthy(cell_text)) {
              return cell_text.$strip()
            } else {
              return ""
            }; return nil; })();
          };
        } else {
          
          self.colspan = (self.rowspan = nil);
          if (cell_style['$==']("asciidoc")) {
            
            asciidoc = true;
            inner_document_cursor = opts['$[]']("cursor");};
        };
        if ($truthy(asciidoc)) {
          
          parent_doctitle = self.document.$attributes().$delete("doctitle");
          inner_document_lines = cell_text.$split($$($nesting, 'LF'), -1);
          if ($truthy(inner_document_lines['$empty?']())) {
          } else if ($truthy((unprocessed_line1 = inner_document_lines['$[]'](0))['$include?']("::"))) {
            
            preprocessed_lines = $$($nesting, 'PreprocessorReader').$new(self.document, [unprocessed_line1]).$readlines();
            if ($truthy((($a = unprocessed_line1['$=='](preprocessed_lines['$[]'](0))) ? $rb_lt(preprocessed_lines.$size(), 2) : unprocessed_line1['$=='](preprocessed_lines['$[]'](0))))) {
            } else {
              
              inner_document_lines.$shift();
              if ($truthy(preprocessed_lines['$empty?']())) {
              } else {
                $send(inner_document_lines, 'unshift', Opal.to_a(preprocessed_lines))
              };
            };};
          self.inner_document = $$($nesting, 'Document').$new(inner_document_lines, $hash2(["header_footer", "parent", "cursor"], {"header_footer": false, "parent": self.document, "cursor": inner_document_cursor}));
          if ($truthy(parent_doctitle['$nil?']())) {
          } else {
            
            $writer = ["doctitle", parent_doctitle];
            $send(self.document.$attributes(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          self.subs = nil;
        } else if ($truthy(literal)) {
          self.subs = $$($nesting, 'BASIC_SUBS')
        } else {
          
          if ($truthy(($truthy($a = ($truthy($b = normal_psv) ? cell_text['$start_with?']("[[") : $b)) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](cell_text) : $a))) {
            $$($nesting, 'Parser').$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), self, opts['$[]']("cursor"), self.document)};
          self.subs = $$($nesting, 'NORMAL_SUBS');
        };
        self.text = cell_text;
        return (self.style = cell_style);
      }, TMP_Cell_initialize_15.$$arity = -3);
      
      Opal.def(self, '$text', TMP_Cell_text_16 = function $$text() {
        var self = this;

        return self.$apply_subs(self.text, self.subs)
      }, TMP_Cell_text_16.$$arity = 0);
      
      Opal.def(self, '$text=', TMP_Cell_text$eq_17 = function(val) {
        var self = this;

        return (self.text = val)
      }, TMP_Cell_text$eq_17.$$arity = 1);
      
      Opal.def(self, '$content', TMP_Cell_content_18 = function $$content() {
        var TMP_19, self = this;

        if (self.style['$==']("asciidoc")) {
          return self.inner_document.$convert()
        } else {
          return $send(self.$text().$split($$($nesting, 'BlankLineRx')), 'map', [], (TMP_19 = function(p){var self = TMP_19.$$s || this, $a;
            if (self.style == null) self.style = nil;

          
            
            if (p == null) {
              p = nil;
            };
            if ($truthy(($truthy($a = self.style['$!']()) ? $a : self.style['$==']("header")))) {
              return p
            } else {
              return $$($nesting, 'Inline').$new(self.$parent(), "quoted", p, $hash2(["type"], {"type": self.style})).$convert()
            };}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19))
        }
      }, TMP_Cell_content_18.$$arity = 0);
      
      Opal.def(self, '$file', TMP_Cell_file_20 = function $$file() {
        var $a, self = this;

        return ($truthy($a = self.source_location) ? self.source_location.$file() : $a)
      }, TMP_Cell_file_20.$$arity = 0);
      
      Opal.def(self, '$lineno', TMP_Cell_lineno_21 = function $$lineno() {
        var $a, self = this;

        return ($truthy($a = self.source_location) ? self.source_location.$lineno() : $a)
      }, TMP_Cell_lineno_21.$$arity = 0);
      return (Opal.def(self, '$to_s', TMP_Cell_to_s_22 = function $$to_s() {
        var $a, $iter = TMP_Cell_to_s_22.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Cell_to_s_22.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return "" + ($send(self, Opal.find_super_dispatcher(self, 'to_s', TMP_Cell_to_s_22, false), $zuper, $iter).$to_s()) + " - [text: " + (self.text) + ", colspan: " + (($truthy($a = self.colspan) ? $a : 1)) + ", rowspan: " + (($truthy($a = self.rowspan) ? $a : 1)) + ", attributes: " + (self.attributes) + "]"
      }, TMP_Cell_to_s_22.$$arity = 0), nil) && 'to_s';
    })($$($nesting, 'Table'), $$($nesting, 'AbstractNode'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ParserContext(){};
      var self = $ParserContext = $klass($base, $super, 'ParserContext', $ParserContext);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_ParserContext_initialize_23, TMP_ParserContext_starts_with_delimiter$q_24, TMP_ParserContext_match_delimiter_25, TMP_ParserContext_skip_past_delimiter_26, TMP_ParserContext_skip_past_escaped_delimiter_27, TMP_ParserContext_buffer_has_unclosed_quotes$q_28, TMP_ParserContext_take_cellspec_29, TMP_ParserContext_push_cellspec_30, TMP_ParserContext_keep_cell_open_31, TMP_ParserContext_mark_cell_closed_32, TMP_ParserContext_cell_open$q_33, TMP_ParserContext_cell_closed$q_34, TMP_ParserContext_close_open_cell_35, TMP_ParserContext_close_cell_36, TMP_ParserContext_close_row_39, TMP_ParserContext_activate_rowspan_40, TMP_ParserContext_end_of_row$q_42, TMP_ParserContext_effective_column_visits_43, TMP_ParserContext_advance_44;

      def.delimiter = def.delimiter_re = def.buffer = def.cellspecs = def.cell_open = def.format = def.start_cursor_data = def.reader = def.table = def.current_row = def.colcount = def.column_visits = def.active_rowspans = def.linenum = nil;
      
      self.$include($$($nesting, 'Logging'));
      Opal.const_set($nesting[0], 'FORMATS', ["psv", "csv", "dsv", "tsv"].$to_set());
      Opal.const_set($nesting[0], 'DELIMITERS', $hash2(["psv", "csv", "dsv", "tsv", "!sv"], {"psv": ["|", /\|/], "csv": [",", /,/], "dsv": [":", /:/], "tsv": ["\t", /\t/], "!sv": ["!", /!/]}));
      self.$attr_accessor("table");
      self.$attr_accessor("format");
      self.$attr_reader("colcount");
      self.$attr_accessor("buffer");
      self.$attr_reader("delimiter");
      self.$attr_reader("delimiter_re");
      
      Opal.def(self, '$initialize', TMP_ParserContext_initialize_23 = function $$initialize(reader, table, attributes) {
        var $a, $b, self = this, xsv = nil, sep = nil;

        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        self.start_cursor_data = (self.reader = reader).$mark();
        self.table = table;
        if ($truthy(attributes['$key?']("format"))) {
          if ($truthy($$($nesting, 'FORMATS')['$include?']((xsv = attributes['$[]']("format"))))) {
            if (xsv['$==']("tsv")) {
              self.format = "csv"
            } else if ($truthy((($a = (self.format = xsv)['$==']("psv")) ? table.$document()['$nested?']() : (self.format = xsv)['$==']("psv")))) {
              xsv = "!sv"}
          } else {
            
            self.$logger().$error(self.$message_with_context("" + "illegal table format: " + (xsv), $hash2(["source_location"], {"source_location": reader.$cursor_at_prev_line()})));
            $a = ["psv", (function() {if ($truthy(table.$document()['$nested?']())) {
              return "!sv"
            } else {
              return "psv"
            }; return nil; })()], (self.format = $a[0]), (xsv = $a[1]), $a;
          }
        } else {
          $a = ["psv", (function() {if ($truthy(table.$document()['$nested?']())) {
            return "!sv"
          } else {
            return "psv"
          }; return nil; })()], (self.format = $a[0]), (xsv = $a[1]), $a
        };
        if ($truthy(attributes['$key?']("separator"))) {
          if ($truthy((sep = attributes['$[]']("separator"))['$nil_or_empty?']())) {
            $b = $$($nesting, 'DELIMITERS')['$[]'](xsv), $a = Opal.to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_re = ($a[1] == null ? nil : $a[1])), $b
          } else if (sep['$==']("\\t")) {
            $b = $$($nesting, 'DELIMITERS')['$[]']("tsv"), $a = Opal.to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_re = ($a[1] == null ? nil : $a[1])), $b
          } else {
            $a = [sep, new RegExp($$$('::', 'Regexp').$escape(sep))], (self.delimiter = $a[0]), (self.delimiter_re = $a[1]), $a
          }
        } else {
          $b = $$($nesting, 'DELIMITERS')['$[]'](xsv), $a = Opal.to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_re = ($a[1] == null ? nil : $a[1])), $b
        };
        self.colcount = (function() {if ($truthy(table.$columns()['$empty?']())) {
          return -1
        } else {
          return table.$columns().$size()
        }; return nil; })();
        self.buffer = "";
        self.cellspecs = [];
        self.cell_open = false;
        self.active_rowspans = [0];
        self.column_visits = 0;
        self.current_row = [];
        return (self.linenum = -1);
      }, TMP_ParserContext_initialize_23.$$arity = -3);
      
      Opal.def(self, '$starts_with_delimiter?', TMP_ParserContext_starts_with_delimiter$q_24 = function(line) {
        var self = this;

        return line['$start_with?'](self.delimiter)
      }, TMP_ParserContext_starts_with_delimiter$q_24.$$arity = 1);
      
      Opal.def(self, '$match_delimiter', TMP_ParserContext_match_delimiter_25 = function $$match_delimiter(line) {
        var self = this;

        return self.delimiter_re.$match(line)
      }, TMP_ParserContext_match_delimiter_25.$$arity = 1);
      
      Opal.def(self, '$skip_past_delimiter', TMP_ParserContext_skip_past_delimiter_26 = function $$skip_past_delimiter(pre) {
        var self = this;

        
        self.buffer = "" + (self.buffer) + (pre) + (self.delimiter);
        return nil;
      }, TMP_ParserContext_skip_past_delimiter_26.$$arity = 1);
      
      Opal.def(self, '$skip_past_escaped_delimiter', TMP_ParserContext_skip_past_escaped_delimiter_27 = function $$skip_past_escaped_delimiter(pre) {
        var self = this;

        
        self.buffer = "" + (self.buffer) + (pre.$chop()) + (self.delimiter);
        return nil;
      }, TMP_ParserContext_skip_past_escaped_delimiter_27.$$arity = 1);
      
      Opal.def(self, '$buffer_has_unclosed_quotes?', TMP_ParserContext_buffer_has_unclosed_quotes$q_28 = function(append) {
        var $a, $b, self = this, record = nil, trailing_quote = nil;

        
        
        if (append == null) {
          append = nil;
        };
        if ((record = (function() {if ($truthy(append)) {
          return $rb_plus(self.buffer, append).$strip()
        } else {
          return self.buffer.$strip()
        }; return nil; })())['$==']("\"")) {
          return true
        } else if ($truthy(record['$start_with?']("\""))) {
          if ($truthy(($truthy($a = ($truthy($b = (trailing_quote = record['$end_with?']("\""))) ? record['$end_with?']("\"\"") : $b)) ? $a : record['$start_with?']("\"\"")))) {
            return ($truthy($a = (record = record.$gsub("\"\"", ""))['$start_with?']("\"")) ? record['$end_with?']("\"")['$!']() : $a)
          } else {
            return trailing_quote['$!']()
          }
        } else {
          return false
        };
      }, TMP_ParserContext_buffer_has_unclosed_quotes$q_28.$$arity = -1);
      
      Opal.def(self, '$take_cellspec', TMP_ParserContext_take_cellspec_29 = function $$take_cellspec() {
        var self = this;

        return self.cellspecs.$shift()
      }, TMP_ParserContext_take_cellspec_29.$$arity = 0);
      
      Opal.def(self, '$push_cellspec', TMP_ParserContext_push_cellspec_30 = function $$push_cellspec(cellspec) {
        var $a, self = this;

        
        
        if (cellspec == null) {
          cellspec = $hash2([], {});
        };
        self.cellspecs['$<<'](($truthy($a = cellspec) ? $a : $hash2([], {})));
        return nil;
      }, TMP_ParserContext_push_cellspec_30.$$arity = -1);
      
      Opal.def(self, '$keep_cell_open', TMP_ParserContext_keep_cell_open_31 = function $$keep_cell_open() {
        var self = this;

        
        self.cell_open = true;
        return nil;
      }, TMP_ParserContext_keep_cell_open_31.$$arity = 0);
      
      Opal.def(self, '$mark_cell_closed', TMP_ParserContext_mark_cell_closed_32 = function $$mark_cell_closed() {
        var self = this;

        
        self.cell_open = false;
        return nil;
      }, TMP_ParserContext_mark_cell_closed_32.$$arity = 0);
      
      Opal.def(self, '$cell_open?', TMP_ParserContext_cell_open$q_33 = function() {
        var self = this;

        return self.cell_open
      }, TMP_ParserContext_cell_open$q_33.$$arity = 0);
      
      Opal.def(self, '$cell_closed?', TMP_ParserContext_cell_closed$q_34 = function() {
        var self = this;

        return self.cell_open['$!']()
      }, TMP_ParserContext_cell_closed$q_34.$$arity = 0);
      
      Opal.def(self, '$close_open_cell', TMP_ParserContext_close_open_cell_35 = function $$close_open_cell(next_cellspec) {
        var self = this;

        
        
        if (next_cellspec == null) {
          next_cellspec = $hash2([], {});
        };
        self.$push_cellspec(next_cellspec);
        if ($truthy(self['$cell_open?']())) {
          self.$close_cell(true)};
        self.$advance();
        return nil;
      }, TMP_ParserContext_close_open_cell_35.$$arity = -1);
      
      Opal.def(self, '$close_cell', TMP_ParserContext_close_cell_36 = function $$close_cell(eol) {try {

        var $a, $b, TMP_37, self = this, cell_text = nil, cellspec = nil, repeat = nil;

        
        
        if (eol == null) {
          eol = false;
        };
        if (self.format['$==']("psv")) {
          
          cell_text = self.buffer;
          self.buffer = "";
          if ($truthy((cellspec = self.$take_cellspec()))) {
            repeat = ($truthy($a = cellspec.$delete("repeatcol")) ? $a : 1)
          } else {
            
            self.$logger().$error(self.$message_with_context("table missing leading separator; recovering automatically", $hash2(["source_location"], {"source_location": $send($$$($$($nesting, 'Reader'), 'Cursor'), 'new', Opal.to_a(self.start_cursor_data))})));
            cellspec = $hash2([], {});
            repeat = 1;
          };
        } else {
          
          cell_text = self.buffer.$strip();
          self.buffer = "";
          cellspec = nil;
          repeat = 1;
          if ($truthy(($truthy($a = (($b = self.format['$==']("csv")) ? cell_text['$empty?']()['$!']() : self.format['$==']("csv"))) ? cell_text['$include?']("\"") : $a))) {
            if ($truthy(($truthy($a = cell_text['$start_with?']("\"")) ? cell_text['$end_with?']("\"") : $a))) {
              if ($truthy((cell_text = cell_text.$slice(1, $rb_minus(cell_text.$length(), 2))))) {
                cell_text = cell_text.$strip().$squeeze("\"")
              } else {
                
                self.$logger().$error(self.$message_with_context("unclosed quote in CSV data; setting cell to empty", $hash2(["source_location"], {"source_location": self.reader.$cursor_at_prev_line()})));
                cell_text = "";
              }
            } else {
              cell_text = cell_text.$squeeze("\"")
            }};
        };
        $send((1), 'upto', [repeat], (TMP_37 = function(i){var self = TMP_37.$$s || this, $c, $d, TMP_38, $e, column = nil, extra_cols = nil, offset = nil, cell = nil;
          if (self.colcount == null) self.colcount = nil;
          if (self.table == null) self.table = nil;
          if (self.current_row == null) self.current_row = nil;
          if (self.reader == null) self.reader = nil;
          if (self.column_visits == null) self.column_visits = nil;
          if (self.linenum == null) self.linenum = nil;

        
          
          if (i == null) {
            i = nil;
          };
          if (self.colcount['$=='](-1)) {
            
            self.table.$columns()['$<<']((column = $$$($$($nesting, 'Table'), 'Column').$new(self.table, $rb_minus($rb_plus(self.table.$columns().$size(), i), 1))));
            if ($truthy(($truthy($c = ($truthy($d = cellspec) ? cellspec['$key?']("colspan") : $d)) ? $rb_gt((extra_cols = $rb_minus(cellspec['$[]']("colspan").$to_i(), 1)), 0) : $c))) {
              
              offset = self.table.$columns().$size();
              $send(extra_cols, 'times', [], (TMP_38 = function(j){var self = TMP_38.$$s || this;
                if (self.table == null) self.table = nil;

              
                
                if (j == null) {
                  j = nil;
                };
                return self.table.$columns()['$<<']($$$($$($nesting, 'Table'), 'Column').$new(self.table, $rb_plus(offset, j)));}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38));};
          } else if ($truthy((column = self.table.$columns()['$[]'](self.current_row.$size())))) {
          } else {
            
            self.$logger().$error(self.$message_with_context("dropping cell because it exceeds specified number of columns", $hash2(["source_location"], {"source_location": self.reader.$cursor_before_mark()})));
            Opal.ret(nil);
          };
          cell = $$$($$($nesting, 'Table'), 'Cell').$new(column, cell_text, cellspec, $hash2(["cursor"], {"cursor": self.reader.$cursor_before_mark()}));
          self.reader.$mark();
          if ($truthy(($truthy($c = cell.$rowspan()['$!']()) ? $c : cell.$rowspan()['$=='](1)))) {
          } else {
            self.$activate_rowspan(cell.$rowspan(), ($truthy($c = cell.$colspan()) ? $c : 1))
          };
          self.column_visits = $rb_plus(self.column_visits, ($truthy($c = cell.$colspan()) ? $c : 1));
          self.current_row['$<<'](cell);
          if ($truthy(($truthy($c = self['$end_of_row?']()) ? ($truthy($d = ($truthy($e = self.colcount['$!='](-1)) ? $e : $rb_gt(self.linenum, 0))) ? $d : ($truthy($e = eol) ? i['$=='](repeat) : $e)) : $c))) {
            return self.$close_row()
          } else {
            return nil
          };}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37));
        self.cell_open = false;
        return nil;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_ParserContext_close_cell_36.$$arity = -1);
      
      Opal.def(self, '$close_row', TMP_ParserContext_close_row_39 = function $$close_row() {
        var $a, self = this, $writer = nil;

        
        self.table.$rows().$body()['$<<'](self.current_row);
        if (self.colcount['$=='](-1)) {
          self.colcount = self.column_visits};
        self.column_visits = 0;
        self.current_row = [];
        self.active_rowspans.$shift();
        ($truthy($a = self.active_rowspans['$[]'](0)) ? $a : (($writer = [0, 0]), $send(self.active_rowspans, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        return nil;
      }, TMP_ParserContext_close_row_39.$$arity = 0);
      
      Opal.def(self, '$activate_rowspan', TMP_ParserContext_activate_rowspan_40 = function $$activate_rowspan(rowspan, colspan) {
        var TMP_41, self = this;

        
        $send((1).$upto($rb_minus(rowspan, 1)), 'each', [], (TMP_41 = function(i){var self = TMP_41.$$s || this, $a, $writer = nil;
          if (self.active_rowspans == null) self.active_rowspans = nil;

        
          
          if (i == null) {
            i = nil;
          };
          $writer = [i, $rb_plus(($truthy($a = self.active_rowspans['$[]'](i)) ? $a : 0), colspan)];
          $send(self.active_rowspans, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41));
        return nil;
      }, TMP_ParserContext_activate_rowspan_40.$$arity = 2);
      
      Opal.def(self, '$end_of_row?', TMP_ParserContext_end_of_row$q_42 = function() {
        var $a, self = this;

        return ($truthy($a = self.colcount['$=='](-1)) ? $a : self.$effective_column_visits()['$=='](self.colcount))
      }, TMP_ParserContext_end_of_row$q_42.$$arity = 0);
      
      Opal.def(self, '$effective_column_visits', TMP_ParserContext_effective_column_visits_43 = function $$effective_column_visits() {
        var self = this;

        return $rb_plus(self.column_visits, self.active_rowspans['$[]'](0))
      }, TMP_ParserContext_effective_column_visits_43.$$arity = 0);
      return (Opal.def(self, '$advance', TMP_ParserContext_advance_44 = function $$advance() {
        var self = this;

        return (self.linenum = $rb_plus(self.linenum, 1))
      }, TMP_ParserContext_advance_44.$$arity = 0), nil) && 'advance';
    })($$($nesting, 'Table'), null, $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/converter/composite"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$each', '$compact', '$flatten', '$respond_to?', '$composed', '$node_name', '$convert', '$converter_for', '$[]', '$find_converter', '$[]=', '$-', '$handles?', '$raise']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $CompositeConverter(){};
      var self = $CompositeConverter = $klass($base, $super, 'CompositeConverter', $CompositeConverter);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_CompositeConverter_initialize_1, TMP_CompositeConverter_convert_3, TMP_CompositeConverter_converter_for_4, TMP_CompositeConverter_find_converter_5;

      def.converter_map = def.converters = nil;
      
      self.$attr_reader("converters");
      
      Opal.def(self, '$initialize', TMP_CompositeConverter_initialize_1 = function $$initialize(backend, $a) {
        var $post_args, converters, TMP_2, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        converters = $post_args;;
        self.backend = backend;
        $send((self.converters = converters.$flatten().$compact()), 'each', [], (TMP_2 = function(converter){var self = TMP_2.$$s || this;

        
          
          if (converter == null) {
            converter = nil;
          };
          if ($truthy(converter['$respond_to?']("composed"))) {
            return converter.$composed(self)
          } else {
            return nil
          };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        return (self.converter_map = $hash2([], {}));
      }, TMP_CompositeConverter_initialize_1.$$arity = -2);
      
      Opal.def(self, '$convert', TMP_CompositeConverter_convert_3 = function $$convert(node, transform, opts) {
        var $a, self = this;

        
        
        if (transform == null) {
          transform = nil;
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        transform = ($truthy($a = transform) ? $a : node.$node_name());
        return self.$converter_for(transform).$convert(node, transform, opts);
      }, TMP_CompositeConverter_convert_3.$$arity = -2);
      Opal.alias(self, "convert_with_options", "convert");
      
      Opal.def(self, '$converter_for', TMP_CompositeConverter_converter_for_4 = function $$converter_for(transform) {
        var $a, self = this, $writer = nil;

        return ($truthy($a = self.converter_map['$[]'](transform)) ? $a : (($writer = [transform, self.$find_converter(transform)]), $send(self.converter_map, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
      }, TMP_CompositeConverter_converter_for_4.$$arity = 1);
      return (Opal.def(self, '$find_converter', TMP_CompositeConverter_find_converter_5 = function $$find_converter(transform) {try {

        var TMP_6, self = this;

        
        $send(self.converters, 'each', [], (TMP_6 = function(candidate){var self = TMP_6.$$s || this;

        
          
          if (candidate == null) {
            candidate = nil;
          };
          if ($truthy(candidate['$handles?'](transform))) {
            Opal.ret(candidate)
          } else {
            return nil
          };}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
        return self.$raise("" + "Could not find a converter to handle transform: " + (transform));
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_CompositeConverter_find_converter_5.$$arity = 1), nil) && 'find_converter';
    })($$($nesting, 'Converter'), $$$($$($nesting, 'Converter'), 'Base'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/converter/html5"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$default=', '$-', '$==', '$[]', '$instance', '$empty?', '$attr', '$attr?', '$<<', '$include?', '$gsub', '$extname', '$slice', '$length', '$doctitle', '$normalize_web_path', '$embed_primary_stylesheet', '$read_asset', '$normalize_system_path', '$===', '$coderay_stylesheet_name', '$embed_coderay_stylesheet', '$pygments_stylesheet_name', '$embed_pygments_stylesheet', '$docinfo', '$id', '$sections?', '$doctype', '$join', '$noheader', '$outline', '$generate_manname_section', '$has_header?', '$notitle', '$title', '$header', '$each', '$authors', '$>', '$name', '$email', '$sub_macros', '$+', '$downcase', '$concat', '$content', '$footnotes?', '$!', '$footnotes', '$index', '$text', '$nofooter', '$inspect', '$!=', '$to_i', '$attributes', '$document', '$sections', '$level', '$caption', '$captioned_title', '$numbered', '$<=', '$<', '$sectname', '$sectnum', '$role', '$title?', '$icon_uri', '$compact', '$media_uri', '$option?', '$append_boolean_attribute', '$style', '$items', '$blocks?', '$text?', '$chomp', '$safe', '$read_svg_contents', '$alt', '$image_uri', '$encode_quotes', '$append_link_constraint_attrs', '$pygments_background', '$to_sym', '$*', '$count', '$start_with?', '$end_with?', '$list_marker_keyword', '$parent', '$warn', '$logger', '$context', '$error', '$new', '$size', '$columns', '$by_section', '$rows', '$colspan', '$rowspan', '$role?', '$unshift', '$shift', '$split', '$nil_or_empty?', '$type', '$catalog', '$xreftext', '$target', '$map', '$chop', '$upcase', '$read_contents', '$sub', '$match']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Html5Converter(){};
      var self = $Html5Converter = $klass($base, $super, 'Html5Converter', $Html5Converter);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Html5Converter_initialize_1, TMP_Html5Converter_document_2, TMP_Html5Converter_embedded_5, TMP_Html5Converter_outline_7, TMP_Html5Converter_section_9, TMP_Html5Converter_admonition_10, TMP_Html5Converter_audio_11, TMP_Html5Converter_colist_12, TMP_Html5Converter_dlist_15, TMP_Html5Converter_example_22, TMP_Html5Converter_floating_title_23, TMP_Html5Converter_image_24, TMP_Html5Converter_listing_25, TMP_Html5Converter_literal_26, TMP_Html5Converter_stem_27, TMP_Html5Converter_olist_29, TMP_Html5Converter_open_31, TMP_Html5Converter_page_break_32, TMP_Html5Converter_paragraph_33, TMP_Html5Converter_preamble_34, TMP_Html5Converter_quote_35, TMP_Html5Converter_thematic_break_36, TMP_Html5Converter_sidebar_37, TMP_Html5Converter_table_38, TMP_Html5Converter_toc_43, TMP_Html5Converter_ulist_44, TMP_Html5Converter_verse_46, TMP_Html5Converter_video_47, TMP_Html5Converter_inline_anchor_48, TMP_Html5Converter_inline_break_49, TMP_Html5Converter_inline_button_50, TMP_Html5Converter_inline_callout_51, TMP_Html5Converter_inline_footnote_52, TMP_Html5Converter_inline_image_53, TMP_Html5Converter_inline_indexterm_56, TMP_Html5Converter_inline_kbd_57, TMP_Html5Converter_inline_menu_58, TMP_Html5Converter_inline_quoted_59, TMP_Html5Converter_append_boolean_attribute_60, TMP_Html5Converter_encode_quotes_61, TMP_Html5Converter_generate_manname_section_62, TMP_Html5Converter_append_link_constraint_attrs_63, TMP_Html5Converter_read_svg_contents_64, $writer = nil;

      def.xml_mode = def.void_element_slash = def.stylesheets = def.pygments_bg = def.refs = nil;
      
      
      $writer = [["", "", false]];
      $send(Opal.const_set($nesting[0], 'QUOTE_TAGS', $hash2(["monospaced", "emphasis", "strong", "double", "single", "mark", "superscript", "subscript", "asciimath", "latexmath"], {"monospaced": ["<code>", "</code>", true], "emphasis": ["<em>", "</em>", true], "strong": ["<strong>", "</strong>", true], "double": ["&#8220;", "&#8221;", false], "single": ["&#8216;", "&#8217;", false], "mark": ["<mark>", "</mark>", true], "superscript": ["<sup>", "</sup>", true], "subscript": ["<sub>", "</sub>", true], "asciimath": ["\\$", "\\$", false], "latexmath": ["\\(", "\\)", false]})), 'default=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.const_set($nesting[0], 'DropAnchorRx', /<(?:a[^>+]+|\/a)>/);
      Opal.const_set($nesting[0], 'StemBreakRx', / *\\\n(?:\\?\n)*|\n\n+/);
      Opal.const_set($nesting[0], 'SvgPreambleRx', /^.*?(?=<svg\b)/m);
      Opal.const_set($nesting[0], 'SvgStartTagRx', /^<svg[^>]*>/);
      Opal.const_set($nesting[0], 'DimensionAttributeRx', /\s(?:width|height|style)=(["']).*?\1/);
      
      Opal.def(self, '$initialize', TMP_Html5Converter_initialize_1 = function $$initialize(backend, opts) {
        var self = this;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        self.xml_mode = opts['$[]']("htmlsyntax")['$==']("xml");
        self.void_element_slash = (function() {if ($truthy(self.xml_mode)) {
          return "/"
        } else {
          return nil
        }; return nil; })();
        return (self.stylesheets = $$($nesting, 'Stylesheets').$instance());
      }, TMP_Html5Converter_initialize_1.$$arity = -2);
      
      Opal.def(self, '$document', TMP_Html5Converter_document_2 = function $$document(node) {
        var $a, $b, $c, TMP_3, TMP_4, self = this, slash = nil, br = nil, asset_uri_scheme = nil, cdn_base = nil, linkcss = nil, result = nil, lang_attribute = nil, authors = nil, icon_href = nil, icon_type = nil, icon_ext = nil, webfonts = nil, iconfont_stylesheet = nil, $case = nil, highlighter = nil, pygments_style = nil, docinfo_content = nil, body_attrs = nil, sectioned = nil, classes = nil, details = nil, idx = nil, highlightjs_path = nil, prettify_path = nil, eqnums_val = nil, eqnums_opt = nil;

        
        slash = self.void_element_slash;
        br = "" + "<br" + (slash) + ">";
        if ($truthy((asset_uri_scheme = node.$attr("asset-uri-scheme", "https"))['$empty?']())) {
        } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        cdn_base = "" + (asset_uri_scheme) + "//cdnjs.cloudflare.com/ajax/libs";
        linkcss = node['$attr?']("linkcss");
        result = ["<!DOCTYPE html>"];
        lang_attribute = (function() {if ($truthy(node['$attr?']("nolang"))) {
          return ""
        } else {
          return "" + " lang=\"" + (node.$attr("lang", "en")) + "\""
        }; return nil; })();
        result['$<<']("" + "<html" + ((function() {if ($truthy(self.xml_mode)) {
          return " xmlns=\"http://www.w3.org/1999/xhtml\""
        } else {
          return ""
        }; return nil; })()) + (lang_attribute) + ">");
        result['$<<']("" + "<head>\n" + "<meta charset=\"" + (node.$attr("encoding", "UTF-8")) + "\"" + (slash) + ">\n" + "<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"" + (slash) + "><![endif]-->\n" + "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"" + (slash) + ">\n" + "<meta name=\"generator\" content=\"Asciidoctor " + (node.$attr("asciidoctor-version")) + "\"" + (slash) + ">");
        if ($truthy(node['$attr?']("app-name"))) {
          result['$<<']("" + "<meta name=\"application-name\" content=\"" + (node.$attr("app-name")) + "\"" + (slash) + ">")};
        if ($truthy(node['$attr?']("description"))) {
          result['$<<']("" + "<meta name=\"description\" content=\"" + (node.$attr("description")) + "\"" + (slash) + ">")};
        if ($truthy(node['$attr?']("keywords"))) {
          result['$<<']("" + "<meta name=\"keywords\" content=\"" + (node.$attr("keywords")) + "\"" + (slash) + ">")};
        if ($truthy(node['$attr?']("authors"))) {
          result['$<<']("" + "<meta name=\"author\" content=\"" + ((function() {if ($truthy((authors = node.$attr("authors"))['$include?']("<"))) {
            
            return authors.$gsub($$($nesting, 'XmlSanitizeRx'), "");
          } else {
            return authors
          }; return nil; })()) + "\"" + (slash) + ">")};
        if ($truthy(node['$attr?']("copyright"))) {
          result['$<<']("" + "<meta name=\"copyright\" content=\"" + (node.$attr("copyright")) + "\"" + (slash) + ">")};
        if ($truthy(node['$attr?']("favicon"))) {
          
          if ($truthy((icon_href = node.$attr("favicon"))['$empty?']())) {
            $a = ["favicon.ico", "image/x-icon"], (icon_href = $a[0]), (icon_type = $a[1]), $a
          } else {
            icon_type = (function() {if ((icon_ext = $$$('::', 'File').$extname(icon_href))['$=='](".ico")) {
              return "image/x-icon"
            } else {
              return "" + "image/" + (icon_ext.$slice(1, icon_ext.$length()))
            }; return nil; })()
          };
          result['$<<']("" + "<link rel=\"icon\" type=\"" + (icon_type) + "\" href=\"" + (icon_href) + "\"" + (slash) + ">");};
        result['$<<']("" + "<title>" + (node.$doctitle($hash2(["sanitize", "use_fallback"], {"sanitize": true, "use_fallback": true}))) + "</title>");
        if ($truthy($$($nesting, 'DEFAULT_STYLESHEET_KEYS')['$include?'](node.$attr("stylesheet")))) {
          
          if ($truthy((webfonts = node.$attr("webfonts")))) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (asset_uri_scheme) + "//fonts.googleapis.com/css?family=" + ((function() {if ($truthy(webfonts['$empty?']())) {
              return "Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"
            } else {
              return webfonts
            }; return nil; })()) + "\"" + (slash) + ">")};
          if ($truthy(linkcss)) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path($$($nesting, 'DEFAULT_STYLESHEET_NAME'), node.$attr("stylesdir", ""), false)) + "\"" + (slash) + ">")
          } else {
            result['$<<'](self.stylesheets.$embed_primary_stylesheet())
          };
        } else if ($truthy(node['$attr?']("stylesheet"))) {
          if ($truthy(linkcss)) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(node.$attr("stylesheet"), node.$attr("stylesdir", ""))) + "\"" + (slash) + ">")
          } else {
            result['$<<']("" + "<style>\n" + (node.$read_asset(node.$normalize_system_path(node.$attr("stylesheet"), node.$attr("stylesdir", "")), $hash2(["warn_on_failure", "label"], {"warn_on_failure": true, "label": "stylesheet"}))) + "\n" + "</style>")
          }};
        if ($truthy(node['$attr?']("icons", "font"))) {
          if ($truthy(node['$attr?']("iconfont-remote"))) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$attr("iconfont-cdn", "" + (cdn_base) + "/font-awesome/" + ($$($nesting, 'FONT_AWESOME_VERSION')) + "/css/font-awesome.min.css")) + "\"" + (slash) + ">")
          } else {
            
            iconfont_stylesheet = "" + (node.$attr("iconfont-name", "font-awesome")) + ".css";
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(iconfont_stylesheet, node.$attr("stylesdir", ""), false)) + "\"" + (slash) + ">");
          }};
        $case = (highlighter = node.$attr("source-highlighter"));
        if ("coderay"['$===']($case)) {if (node.$attr("coderay-css", "class")['$==']("class")) {
          if ($truthy(linkcss)) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(self.stylesheets.$coderay_stylesheet_name(), node.$attr("stylesdir", ""), false)) + "\"" + (slash) + ">")
          } else {
            result['$<<'](self.stylesheets.$embed_coderay_stylesheet())
          }}}
        else if ("pygments"['$===']($case)) {if (node.$attr("pygments-css", "class")['$==']("class")) {
          
          pygments_style = node.$attr("pygments-style");
          if ($truthy(linkcss)) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(self.stylesheets.$pygments_stylesheet_name(pygments_style), node.$attr("stylesdir", ""), false)) + "\"" + (slash) + ">")
          } else {
            result['$<<'](self.stylesheets.$embed_pygments_stylesheet(pygments_style))
          };}};
        if ($truthy((docinfo_content = node.$docinfo())['$empty?']())) {
        } else {
          result['$<<'](docinfo_content)
        };
        result['$<<']("</head>");
        body_attrs = (function() {if ($truthy(node.$id())) {
          return ["" + "id=\"" + (node.$id()) + "\""]
        } else {
          return []
        }; return nil; })();
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (sectioned = node['$sections?']())) ? node['$attr?']("toc-class") : $c)) ? node['$attr?']("toc") : $b)) ? node['$attr?']("toc-placement", "auto") : $a))) {
          classes = [node.$doctype(), node.$attr("toc-class"), "" + "toc-" + (node.$attr("toc-position", "header"))]
        } else {
          classes = [node.$doctype()]
        };
        if ($truthy(node['$attr?']("docrole"))) {
          classes['$<<'](node.$attr("docrole"))};
        body_attrs['$<<']("" + "class=\"" + (classes.$join(" ")) + "\"");
        if ($truthy(node['$attr?']("max-width"))) {
          body_attrs['$<<']("" + "style=\"max-width: " + (node.$attr("max-width")) + ";\"")};
        result['$<<']("" + "<body " + (body_attrs.$join(" ")) + ">");
        if ($truthy(node.$noheader())) {
        } else {
          
          result['$<<']("<div id=\"header\">");
          if (node.$doctype()['$==']("manpage")) {
            
            result['$<<']("" + "<h1>" + (node.$doctitle()) + " Manual Page</h1>");
            if ($truthy(($truthy($a = ($truthy($b = sectioned) ? node['$attr?']("toc") : $b)) ? node['$attr?']("toc-placement", "auto") : $a))) {
              result['$<<']("" + "<div id=\"toc\" class=\"" + (node.$attr("toc-class", "toc")) + "\">\n" + "<div id=\"toctitle\">" + (node.$attr("toc-title")) + "</div>\n" + (self.$outline(node)) + "\n" + "</div>")};
            if ($truthy(node['$attr?']("manpurpose"))) {
              result['$<<'](self.$generate_manname_section(node))};
          } else {
            
            if ($truthy(node['$has_header?']())) {
              
              if ($truthy(node.$notitle())) {
              } else {
                result['$<<']("" + "<h1>" + (node.$header().$title()) + "</h1>")
              };
              details = [];
              idx = 1;
              $send(node.$authors(), 'each', [], (TMP_3 = function(author){var self = TMP_3.$$s || this;

              
                
                if (author == null) {
                  author = nil;
                };
                details['$<<']("" + "<span id=\"author" + ((function() {if ($truthy($rb_gt(idx, 1))) {
                  return idx
                } else {
                  return ""
                }; return nil; })()) + "\" class=\"author\">" + (author.$name()) + "</span>" + (br));
                if ($truthy(author.$email())) {
                  details['$<<']("" + "<span id=\"email" + ((function() {if ($truthy($rb_gt(idx, 1))) {
                    return idx
                  } else {
                    return ""
                  }; return nil; })()) + "\" class=\"email\">" + (node.$sub_macros(author.$email())) + "</span>" + (br))};
                return (idx = $rb_plus(idx, 1));}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
              if ($truthy(node['$attr?']("revnumber"))) {
                details['$<<']("" + "<span id=\"revnumber\">" + (($truthy($a = node.$attr("version-label")) ? $a : "").$downcase()) + " " + (node.$attr("revnumber")) + ((function() {if ($truthy(node['$attr?']("revdate"))) {
                  return ","
                } else {
                  return ""
                }; return nil; })()) + "</span>")};
              if ($truthy(node['$attr?']("revdate"))) {
                details['$<<']("" + "<span id=\"revdate\">" + (node.$attr("revdate")) + "</span>")};
              if ($truthy(node['$attr?']("revremark"))) {
                details['$<<']("" + (br) + "<span id=\"revremark\">" + (node.$attr("revremark")) + "</span>")};
              if ($truthy(details['$empty?']())) {
              } else {
                
                result['$<<']("<div class=\"details\">");
                result.$concat(details);
                result['$<<']("</div>");
              };};
            if ($truthy(($truthy($a = ($truthy($b = sectioned) ? node['$attr?']("toc") : $b)) ? node['$attr?']("toc-placement", "auto") : $a))) {
              result['$<<']("" + "<div id=\"toc\" class=\"" + (node.$attr("toc-class", "toc")) + "\">\n" + "<div id=\"toctitle\">" + (node.$attr("toc-title")) + "</div>\n" + (self.$outline(node)) + "\n" + "</div>")};
          };
          result['$<<']("</div>");
        };
        result['$<<']("" + "<div id=\"content\">\n" + (node.$content()) + "\n" + "</div>");
        if ($truthy(($truthy($a = node['$footnotes?']()) ? node['$attr?']("nofootnotes")['$!']() : $a))) {
          
          result['$<<']("" + "<div id=\"footnotes\">\n" + "<hr" + (slash) + ">");
          $send(node.$footnotes(), 'each', [], (TMP_4 = function(footnote){var self = TMP_4.$$s || this;

          
            
            if (footnote == null) {
              footnote = nil;
            };
            return result['$<<']("" + "<div class=\"footnote\" id=\"_footnotedef_" + (footnote.$index()) + "\">\n" + "<a href=\"#_footnoteref_" + (footnote.$index()) + "\">" + (footnote.$index()) + "</a>. " + (footnote.$text()) + "\n" + "</div>");}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
          result['$<<']("</div>");};
        if ($truthy(node.$nofooter())) {
        } else {
          
          result['$<<']("<div id=\"footer\">");
          result['$<<']("<div id=\"footer-text\">");
          if ($truthy(node['$attr?']("revnumber"))) {
            result['$<<']("" + (node.$attr("version-label")) + " " + (node.$attr("revnumber")) + (br))};
          if ($truthy(($truthy($a = node['$attr?']("last-update-label")) ? node['$attr?']("reproducible")['$!']() : $a))) {
            result['$<<']("" + (node.$attr("last-update-label")) + " " + (node.$attr("docdatetime")))};
          result['$<<']("</div>");
          result['$<<']("</div>");
        };
        if ($truthy((docinfo_content = node.$docinfo("footer"))['$empty?']())) {
        } else {
          result['$<<'](docinfo_content)
        };
        $case = highlighter;
        if ("highlightjs"['$===']($case) || "highlight.js"['$===']($case)) {
        highlightjs_path = node.$attr("highlightjsdir", "" + (cdn_base) + "/highlight.js/9.13.1");
        result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (highlightjs_path) + "/styles/" + (node.$attr("highlightjs-theme", "github")) + ".min.css\"" + (slash) + ">");
        result['$<<']("" + "<script src=\"" + (highlightjs_path) + "/highlight.min.js\"></script>\n" + "<script>hljs.initHighlighting()</script>");}
        else if ("prettify"['$===']($case)) {
        prettify_path = node.$attr("prettifydir", "" + (cdn_base) + "/prettify/r298");
        result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (prettify_path) + "/" + (node.$attr("prettify-theme", "prettify")) + ".min.css\"" + (slash) + ">");
        result['$<<']("" + "<script src=\"" + (prettify_path) + "/prettify.min.js\"></script>\n" + "<script>prettyPrint()</script>");};
        if ($truthy(node['$attr?']("stem"))) {
          
          eqnums_val = node.$attr("eqnums", "none");
          if ($truthy(eqnums_val['$empty?']())) {
            eqnums_val = "AMS"};
          eqnums_opt = "" + " equationNumbers: { autoNumber: \"" + (eqnums_val) + "\" } ";
          result['$<<']("" + "<script type=\"text/x-mathjax-config\">\n" + "MathJax.Hub.Config({\n" + "  messageStyle: \"none\",\n" + "  tex2jax: {\n" + "    inlineMath: [" + ($$($nesting, 'INLINE_MATH_DELIMITERS')['$[]']("latexmath").$inspect()) + "],\n" + "    displayMath: [" + ($$($nesting, 'BLOCK_MATH_DELIMITERS')['$[]']("latexmath").$inspect()) + "],\n" + "    ignoreClass: \"nostem|nolatexmath\"\n" + "  },\n" + "  asciimath2jax: {\n" + "    delimiters: [" + ($$($nesting, 'BLOCK_MATH_DELIMITERS')['$[]']("asciimath").$inspect()) + "],\n" + "    ignoreClass: \"nostem|noasciimath\"\n" + "  },\n" + "  TeX: {" + (eqnums_opt) + "}\n" + "});\n" + "</script>\n" + "<script src=\"" + (cdn_base) + "/mathjax/" + ($$($nesting, 'MATHJAX_VERSION')) + "/MathJax.js?config=TeX-MML-AM_HTMLorMML\"></script>");};
        result['$<<']("</body>");
        result['$<<']("</html>");
        return result.$join($$($nesting, 'LF'));
      }, TMP_Html5Converter_document_2.$$arity = 1);
      
      Opal.def(self, '$embedded', TMP_Html5Converter_embedded_5 = function $$embedded(node) {
        var $a, $b, $c, TMP_6, self = this, result = nil, id_attr = nil, toc_p = nil;

        
        result = [];
        if (node.$doctype()['$==']("manpage")) {
          
          if ($truthy(node.$notitle())) {
          } else {
            
            id_attr = (function() {if ($truthy(node.$id())) {
              return "" + " id=\"" + (node.$id()) + "\""
            } else {
              return ""
            }; return nil; })();
            result['$<<']("" + "<h1" + (id_attr) + ">" + (node.$doctitle()) + " Manual Page</h1>");
          };
          if ($truthy(node['$attr?']("manpurpose"))) {
            result['$<<'](self.$generate_manname_section(node))};
        } else if ($truthy(($truthy($a = node['$has_header?']()) ? node.$notitle()['$!']() : $a))) {
          
          id_attr = (function() {if ($truthy(node.$id())) {
            return "" + " id=\"" + (node.$id()) + "\""
          } else {
            return ""
          }; return nil; })();
          result['$<<']("" + "<h1" + (id_attr) + ">" + (node.$header().$title()) + "</h1>");};
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = node['$sections?']()) ? node['$attr?']("toc") : $c)) ? (toc_p = node.$attr("toc-placement"))['$!=']("macro") : $b)) ? toc_p['$!=']("preamble") : $a))) {
          result['$<<']("" + "<div id=\"toc\" class=\"toc\">\n" + "<div id=\"toctitle\">" + (node.$attr("toc-title")) + "</div>\n" + (self.$outline(node)) + "\n" + "</div>")};
        result['$<<'](node.$content());
        if ($truthy(($truthy($a = node['$footnotes?']()) ? node['$attr?']("nofootnotes")['$!']() : $a))) {
          
          result['$<<']("" + "<div id=\"footnotes\">\n" + "<hr" + (self.void_element_slash) + ">");
          $send(node.$footnotes(), 'each', [], (TMP_6 = function(footnote){var self = TMP_6.$$s || this;

          
            
            if (footnote == null) {
              footnote = nil;
            };
            return result['$<<']("" + "<div class=\"footnote\" id=\"_footnotedef_" + (footnote.$index()) + "\">\n" + "<a href=\"#_footnoteref_" + (footnote.$index()) + "\">" + (footnote.$index()) + "</a>. " + (footnote.$text()) + "\n" + "</div>");}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
          result['$<<']("</div>");};
        return result.$join($$($nesting, 'LF'));
      }, TMP_Html5Converter_embedded_5.$$arity = 1);
      
      Opal.def(self, '$outline', TMP_Html5Converter_outline_7 = function $$outline(node, opts) {
        var $a, $b, TMP_8, self = this, sectnumlevels = nil, toclevels = nil, sections = nil, result = nil;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        if ($truthy(node['$sections?']())) {
        } else {
          return nil
        };
        sectnumlevels = ($truthy($a = opts['$[]']("sectnumlevels")) ? $a : ($truthy($b = node.$document().$attributes()['$[]']("sectnumlevels")) ? $b : 3).$to_i());
        toclevels = ($truthy($a = opts['$[]']("toclevels")) ? $a : ($truthy($b = node.$document().$attributes()['$[]']("toclevels")) ? $b : 2).$to_i());
        sections = node.$sections();
        result = ["" + "<ul class=\"sectlevel" + (sections['$[]'](0).$level()) + "\">"];
        $send(sections, 'each', [], (TMP_8 = function(section){var self = TMP_8.$$s || this, $c, slevel = nil, stitle = nil, signifier = nil, child_toc_level = nil;

        
          
          if (section == null) {
            section = nil;
          };
          slevel = section.$level();
          if ($truthy(section.$caption())) {
            stitle = section.$captioned_title()
          } else if ($truthy(($truthy($c = section.$numbered()) ? $rb_le(slevel, sectnumlevels) : $c))) {
            if ($truthy(($truthy($c = $rb_lt(slevel, 2)) ? node.$document().$doctype()['$==']("book") : $c))) {
              if (section.$sectname()['$==']("chapter")) {
                stitle = "" + ((function() {if ($truthy((signifier = node.$document().$attributes()['$[]']("chapter-signifier")))) {
                  return "" + (signifier) + " "
                } else {
                  return ""
                }; return nil; })()) + (section.$sectnum()) + " " + (section.$title())
              } else if (section.$sectname()['$==']("part")) {
                stitle = "" + ((function() {if ($truthy((signifier = node.$document().$attributes()['$[]']("part-signifier")))) {
                  return "" + (signifier) + " "
                } else {
                  return ""
                }; return nil; })()) + (section.$sectnum(nil, ":")) + " " + (section.$title())
              } else {
                stitle = "" + (section.$sectnum()) + " " + (section.$title())
              }
            } else {
              stitle = "" + (section.$sectnum()) + " " + (section.$title())
            }
          } else {
            stitle = section.$title()
          };
          if ($truthy(stitle['$include?']("<a"))) {
            stitle = stitle.$gsub($$($nesting, 'DropAnchorRx'), "")};
          if ($truthy(($truthy($c = $rb_lt(slevel, toclevels)) ? (child_toc_level = self.$outline(section, $hash2(["toclevels", "sectnumlevels"], {"toclevels": toclevels, "sectnumlevels": sectnumlevels}))) : $c))) {
            
            result['$<<']("" + "<li><a href=\"#" + (section.$id()) + "\">" + (stitle) + "</a>");
            result['$<<'](child_toc_level);
            return result['$<<']("</li>");
          } else {
            return result['$<<']("" + "<li><a href=\"#" + (section.$id()) + "\">" + (stitle) + "</a></li>")
          };}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
        result['$<<']("</ul>");
        return result.$join($$($nesting, 'LF'));
      }, TMP_Html5Converter_outline_7.$$arity = -2);
      
      Opal.def(self, '$section', TMP_Html5Converter_section_9 = function $$section(node) {
        var $a, $b, self = this, doc_attrs = nil, level = nil, title = nil, signifier = nil, id_attr = nil, id = nil, role = nil;

        
        doc_attrs = node.$document().$attributes();
        level = node.$level();
        if ($truthy(node.$caption())) {
          title = node.$captioned_title()
        } else if ($truthy(($truthy($a = node.$numbered()) ? $rb_le(level, ($truthy($b = doc_attrs['$[]']("sectnumlevels")) ? $b : 3).$to_i()) : $a))) {
          if ($truthy(($truthy($a = $rb_lt(level, 2)) ? node.$document().$doctype()['$==']("book") : $a))) {
            if (node.$sectname()['$==']("chapter")) {
              title = "" + ((function() {if ($truthy((signifier = doc_attrs['$[]']("chapter-signifier")))) {
                return "" + (signifier) + " "
              } else {
                return ""
              }; return nil; })()) + (node.$sectnum()) + " " + (node.$title())
            } else if (node.$sectname()['$==']("part")) {
              title = "" + ((function() {if ($truthy((signifier = doc_attrs['$[]']("part-signifier")))) {
                return "" + (signifier) + " "
              } else {
                return ""
              }; return nil; })()) + (node.$sectnum(nil, ":")) + " " + (node.$title())
            } else {
              title = "" + (node.$sectnum()) + " " + (node.$title())
            }
          } else {
            title = "" + (node.$sectnum()) + " " + (node.$title())
          }
        } else {
          title = node.$title()
        };
        if ($truthy(node.$id())) {
          
          id_attr = "" + " id=\"" + ((id = node.$id())) + "\"";
          if ($truthy(doc_attrs['$[]']("sectlinks"))) {
            title = "" + "<a class=\"link\" href=\"#" + (id) + "\">" + (title) + "</a>"};
          if ($truthy(doc_attrs['$[]']("sectanchors"))) {
            if (doc_attrs['$[]']("sectanchors")['$==']("after")) {
              title = "" + (title) + "<a class=\"anchor\" href=\"#" + (id) + "\"></a>"
            } else {
              title = "" + "<a class=\"anchor\" href=\"#" + (id) + "\"></a>" + (title)
            }};
        } else {
          id_attr = ""
        };
        if (level['$=='](0)) {
          return "" + "<h1" + (id_attr) + " class=\"sect0" + ((function() {if ($truthy((role = node.$role()))) {
            return "" + " " + (role)
          } else {
            return ""
          }; return nil; })()) + "\">" + (title) + "</h1>\n" + (node.$content())
        } else {
          return "" + "<div class=\"sect" + (level) + ((function() {if ($truthy((role = node.$role()))) {
            return "" + " " + (role)
          } else {
            return ""
          }; return nil; })()) + "\">\n" + "<h" + ($rb_plus(level, 1)) + (id_attr) + ">" + (title) + "</h" + ($rb_plus(level, 1)) + ">\n" + ((function() {if (level['$=='](1)) {
            return "" + "<div class=\"sectionbody\">\n" + (node.$content()) + "\n" + "</div>"
          } else {
            return node.$content()
          }; return nil; })()) + "\n" + "</div>"
        };
      }, TMP_Html5Converter_section_9.$$arity = 1);
      
      Opal.def(self, '$admonition', TMP_Html5Converter_admonition_10 = function $$admonition(node) {
        var $a, self = this, id_attr = nil, name = nil, title_element = nil, label = nil, role = nil;

        
        id_attr = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        name = node.$attr("name");
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
        } else {
          return ""
        }; return nil; })();
        if ($truthy(node.$document()['$attr?']("icons"))) {
          if ($truthy(($truthy($a = node.$document()['$attr?']("icons", "font")) ? node['$attr?']("icon")['$!']() : $a))) {
            label = "" + "<i class=\"fa icon-" + (name) + "\" title=\"" + (node.$attr("textlabel")) + "\"></i>"
          } else {
            label = "" + "<img src=\"" + (node.$icon_uri(name)) + "\" alt=\"" + (node.$attr("textlabel")) + "\"" + (self.void_element_slash) + ">"
          }
        } else {
          label = "" + "<div class=\"title\">" + (node.$attr("textlabel")) + "</div>"
        };
        return "" + "<div" + (id_attr) + " class=\"admonitionblock " + (name) + ((function() {if ($truthy((role = node.$role()))) {
          return "" + " " + (role)
        } else {
          return ""
        }; return nil; })()) + "\">\n" + "<table>\n" + "<tr>\n" + "<td class=\"icon\">\n" + (label) + "\n" + "</td>\n" + "<td class=\"content\">\n" + (title_element) + (node.$content()) + "\n" + "</td>\n" + "</tr>\n" + "</table>\n" + "</div>";
      }, TMP_Html5Converter_admonition_10.$$arity = 1);
      
      Opal.def(self, '$audio', TMP_Html5Converter_audio_11 = function $$audio(node) {
        var $a, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, start_t = nil, end_t = nil, time_anchor = nil;

        
        xml = self.xml_mode;
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        classes = ["audioblock", node.$role()].$compact();
        class_attribute = "" + " class=\"" + (classes.$join(" ")) + "\"";
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
        } else {
          return ""
        }; return nil; })();
        start_t = node.$attr("start", nil, false);
        end_t = node.$attr("end", nil, false);
        time_anchor = (function() {if ($truthy(($truthy($a = start_t) ? $a : end_t))) {
          return "" + "#t=" + (($truthy($a = start_t) ? $a : "")) + ((function() {if ($truthy(end_t)) {
            return "" + "," + (end_t)
          } else {
            return ""
          }; return nil; })())
        } else {
          return ""
        }; return nil; })();
        return "" + "<div" + (id_attribute) + (class_attribute) + ">\n" + (title_element) + "<div class=\"content\">\n" + "<audio src=\"" + (node.$media_uri(node.$attr("target"))) + (time_anchor) + "\"" + ((function() {if ($truthy(node['$option?']("autoplay"))) {
          
          return self.$append_boolean_attribute("autoplay", xml);
        } else {
          return ""
        }; return nil; })()) + ((function() {if ($truthy(node['$option?']("nocontrols"))) {
          return ""
        } else {
          
          return self.$append_boolean_attribute("controls", xml);
        }; return nil; })()) + ((function() {if ($truthy(node['$option?']("loop"))) {
          
          return self.$append_boolean_attribute("loop", xml);
        } else {
          return ""
        }; return nil; })()) + ">\n" + "Your browser does not support the audio tag.\n" + "</audio>\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_audio_11.$$arity = 1);
      
      Opal.def(self, '$colist', TMP_Html5Converter_colist_12 = function $$colist(node) {
        var $a, TMP_13, TMP_14, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, font_icons = nil, num = nil;

        
        result = [];
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        classes = ["colist", node.$style(), node.$role()].$compact();
        class_attribute = "" + " class=\"" + (classes.$join(" ")) + "\"";
        result['$<<']("" + "<div" + (id_attribute) + (class_attribute) + ">");
        if ($truthy(node['$title?']())) {
          result['$<<']("" + "<div class=\"title\">" + (node.$title()) + "</div>")};
        if ($truthy(node.$document()['$attr?']("icons"))) {
          
          result['$<<']("<table>");
          $a = [node.$document()['$attr?']("icons", "font"), 0], (font_icons = $a[0]), (num = $a[1]), $a;
          $send(node.$items(), 'each', [], (TMP_13 = function(item){var self = TMP_13.$$s || this, num_label = nil;
            if (self.void_element_slash == null) self.void_element_slash = nil;

          
            
            if (item == null) {
              item = nil;
            };
            num = $rb_plus(num, 1);
            if ($truthy(font_icons)) {
              num_label = "" + "<i class=\"conum\" data-value=\"" + (num) + "\"></i><b>" + (num) + "</b>"
            } else {
              num_label = "" + "<img src=\"" + (node.$icon_uri("" + "callouts/" + (num))) + "\" alt=\"" + (num) + "\"" + (self.void_element_slash) + ">"
            };
            return result['$<<']("" + "<tr>\n" + "<td>" + (num_label) + "</td>\n" + "<td>" + (item.$text()) + ((function() {if ($truthy(item['$blocks?']())) {
              return $rb_plus($$($nesting, 'LF'), item.$content())
            } else {
              return ""
            }; return nil; })()) + "</td>\n" + "</tr>");}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13));
          result['$<<']("</table>");
        } else {
          
          result['$<<']("<ol>");
          $send(node.$items(), 'each', [], (TMP_14 = function(item){var self = TMP_14.$$s || this;

          
            
            if (item == null) {
              item = nil;
            };
            return result['$<<']("" + "<li>\n" + "<p>" + (item.$text()) + "</p>" + ((function() {if ($truthy(item['$blocks?']())) {
              return $rb_plus($$($nesting, 'LF'), item.$content())
            } else {
              return ""
            }; return nil; })()) + "\n" + "</li>");}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
          result['$<<']("</ol>");
        };
        result['$<<']("</div>");
        return result.$join($$($nesting, 'LF'));
      }, TMP_Html5Converter_colist_12.$$arity = 1);
      
      Opal.def(self, '$dlist', TMP_Html5Converter_dlist_15 = function $$dlist(node) {
        var TMP_16, $a, TMP_18, TMP_20, self = this, result = nil, id_attribute = nil, classes = nil, $case = nil, class_attribute = nil, slash = nil, col_style_attribute = nil, dt_style_attribute = nil;

        
        result = [];
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        classes = (function() {$case = node.$style();
        if ("qanda"['$===']($case)) {return ["qlist", "qanda", node.$role()]}
        else if ("horizontal"['$===']($case)) {return ["hdlist", node.$role()]}
        else {return ["dlist", node.$style(), node.$role()]}})().$compact();
        class_attribute = "" + " class=\"" + (classes.$join(" ")) + "\"";
        result['$<<']("" + "<div" + (id_attribute) + (class_attribute) + ">");
        if ($truthy(node['$title?']())) {
          result['$<<']("" + "<div class=\"title\">" + (node.$title()) + "</div>")};
        $case = node.$style();
        if ("qanda"['$===']($case)) {
        result['$<<']("<ol>");
        $send(node.$items(), 'each', [], (TMP_16 = function(terms, dd){var self = TMP_16.$$s || this, TMP_17;

        
          
          if (terms == null) {
            terms = nil;
          };
          
          if (dd == null) {
            dd = nil;
          };
          result['$<<']("<li>");
          $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_17 = function(dt){var self = TMP_17.$$s || this;

          
            
            if (dt == null) {
              dt = nil;
            };
            return result['$<<']("" + "<p><em>" + (dt.$text()) + "</em></p>");}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
          if ($truthy(dd)) {
            
            if ($truthy(dd['$text?']())) {
              result['$<<']("" + "<p>" + (dd.$text()) + "</p>")};
            if ($truthy(dd['$blocks?']())) {
              result['$<<'](dd.$content())};};
          return result['$<<']("</li>");}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16));
        result['$<<']("</ol>");}
        else if ("horizontal"['$===']($case)) {
        slash = self.void_element_slash;
        result['$<<']("<table>");
        if ($truthy(($truthy($a = node['$attr?']("labelwidth")) ? $a : node['$attr?']("itemwidth")))) {
          
          result['$<<']("<colgroup>");
          col_style_attribute = (function() {if ($truthy(node['$attr?']("labelwidth"))) {
            return "" + " style=\"width: " + (node.$attr("labelwidth").$chomp("%")) + "%;\""
          } else {
            return ""
          }; return nil; })();
          result['$<<']("" + "<col" + (col_style_attribute) + (slash) + ">");
          col_style_attribute = (function() {if ($truthy(node['$attr?']("itemwidth"))) {
            return "" + " style=\"width: " + (node.$attr("itemwidth").$chomp("%")) + "%;\""
          } else {
            return ""
          }; return nil; })();
          result['$<<']("" + "<col" + (col_style_attribute) + (slash) + ">");
          result['$<<']("</colgroup>");};
        $send(node.$items(), 'each', [], (TMP_18 = function(terms, dd){var self = TMP_18.$$s || this, TMP_19, terms_array = nil, last_term = nil;

        
          
          if (terms == null) {
            terms = nil;
          };
          
          if (dd == null) {
            dd = nil;
          };
          result['$<<']("<tr>");
          result['$<<']("" + "<td class=\"hdlist1" + ((function() {if ($truthy(node['$option?']("strong"))) {
            return " strong"
          } else {
            return ""
          }; return nil; })()) + "\">");
          terms_array = [].concat(Opal.to_a(terms));
          last_term = terms_array['$[]'](-1);
          $send(terms_array, 'each', [], (TMP_19 = function(dt){var self = TMP_19.$$s || this;

          
            
            if (dt == null) {
              dt = nil;
            };
            result['$<<'](dt.$text());
            if ($truthy(dt['$!='](last_term))) {
              return result['$<<']("" + "<br" + (slash) + ">")
            } else {
              return nil
            };}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
          result['$<<']("</td>");
          result['$<<']("<td class=\"hdlist2\">");
          if ($truthy(dd)) {
            
            if ($truthy(dd['$text?']())) {
              result['$<<']("" + "<p>" + (dd.$text()) + "</p>")};
            if ($truthy(dd['$blocks?']())) {
              result['$<<'](dd.$content())};};
          result['$<<']("</td>");
          return result['$<<']("</tr>");}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18));
        result['$<<']("</table>");}
        else {
        result['$<<']("<dl>");
        dt_style_attribute = (function() {if ($truthy(node.$style())) {
          return ""
        } else {
          return " class=\"hdlist1\""
        }; return nil; })();
        $send(node.$items(), 'each', [], (TMP_20 = function(terms, dd){var self = TMP_20.$$s || this, TMP_21;

        
          
          if (terms == null) {
            terms = nil;
          };
          
          if (dd == null) {
            dd = nil;
          };
          $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_21 = function(dt){var self = TMP_21.$$s || this;

          
            
            if (dt == null) {
              dt = nil;
            };
            return result['$<<']("" + "<dt" + (dt_style_attribute) + ">" + (dt.$text()) + "</dt>");}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21));
          if ($truthy(dd)) {
            
            result['$<<']("<dd>");
            if ($truthy(dd['$text?']())) {
              result['$<<']("" + "<p>" + (dd.$text()) + "</p>")};
            if ($truthy(dd['$blocks?']())) {
              result['$<<'](dd.$content())};
            return result['$<<']("</dd>");
          } else {
            return nil
          };}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20));
        result['$<<']("</dl>");};
        result['$<<']("</div>");
        return result.$join($$($nesting, 'LF'));
      }, TMP_Html5Converter_dlist_15.$$arity = 1);
      
      Opal.def(self, '$example', TMP_Html5Converter_example_22 = function $$example(node) {
        var self = this, id_attribute = nil, title_element = nil, role = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$captioned_title()) + "</div>\n"
        } else {
          return ""
        }; return nil; })();
        return "" + "<div" + (id_attribute) + " class=\"exampleblock" + ((function() {if ($truthy((role = node.$role()))) {
          return "" + " " + (role)
        } else {
          return ""
        }; return nil; })()) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (node.$content()) + "\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_example_22.$$arity = 1);
      
      Opal.def(self, '$floating_title', TMP_Html5Converter_floating_title_23 = function $$floating_title(node) {
        var self = this, tag_name = nil, id_attribute = nil, classes = nil;

        
        tag_name = "" + "h" + ($rb_plus(node.$level(), 1));
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        classes = [node.$style(), node.$role()].$compact();
        return "" + "<" + (tag_name) + (id_attribute) + " class=\"" + (classes.$join(" ")) + "\">" + (node.$title()) + "</" + (tag_name) + ">";
      }, TMP_Html5Converter_floating_title_23.$$arity = 1);
      
      Opal.def(self, '$image', TMP_Html5Converter_image_24 = function $$image(node) {
        var $a, $b, $c, self = this, target = nil, width_attr = nil, height_attr = nil, svg = nil, obj = nil, img = nil, fallback = nil, id_attr = nil, classes = nil, class_attr = nil, title_el = nil;

        
        target = node.$attr("target");
        width_attr = (function() {if ($truthy(node['$attr?']("width"))) {
          return "" + " width=\"" + (node.$attr("width")) + "\""
        } else {
          return ""
        }; return nil; })();
        height_attr = (function() {if ($truthy(node['$attr?']("height"))) {
          return "" + " height=\"" + (node.$attr("height")) + "\""
        } else {
          return ""
        }; return nil; })();
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = node['$attr?']("format", "svg", false)) ? $c : target['$include?'](".svg"))) ? $rb_lt(node.$document().$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')) : $b)) ? ($truthy($b = (svg = node['$option?']("inline"))) ? $b : (obj = node['$option?']("interactive"))) : $a))) {
          if ($truthy(svg)) {
            img = ($truthy($a = self.$read_svg_contents(node, target)) ? $a : "" + "<span class=\"alt\">" + (node.$alt()) + "</span>")
          } else if ($truthy(obj)) {
            
            fallback = (function() {if ($truthy(node['$attr?']("fallback"))) {
              return "" + "<img src=\"" + (node.$image_uri(node.$attr("fallback"))) + "\" alt=\"" + (self.$encode_quotes(node.$alt())) + "\"" + (width_attr) + (height_attr) + (self.void_element_slash) + ">"
            } else {
              return "" + "<span class=\"alt\">" + (node.$alt()) + "</span>"
            }; return nil; })();
            img = "" + "<object type=\"image/svg+xml\" data=\"" + (node.$image_uri(target)) + "\"" + (width_attr) + (height_attr) + ">" + (fallback) + "</object>";}};
        img = ($truthy($a = img) ? $a : "" + "<img src=\"" + (node.$image_uri(target)) + "\" alt=\"" + (self.$encode_quotes(node.$alt())) + "\"" + (width_attr) + (height_attr) + (self.void_element_slash) + ">");
        if ($truthy(node['$attr?']("link", nil, false))) {
          img = "" + "<a class=\"image\" href=\"" + (node.$attr("link")) + "\"" + (self.$append_link_constraint_attrs(node).$join()) + ">" + (img) + "</a>"};
        id_attr = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        classes = ["imageblock"];
        if ($truthy(node['$attr?']("float"))) {
          classes['$<<'](node.$attr("float"))};
        if ($truthy(node['$attr?']("align"))) {
          classes['$<<']("" + "text-" + (node.$attr("align")))};
        if ($truthy(node.$role())) {
          classes['$<<'](node.$role())};
        class_attr = "" + " class=\"" + (classes.$join(" ")) + "\"";
        title_el = (function() {if ($truthy(node['$title?']())) {
          return "" + "\n<div class=\"title\">" + (node.$captioned_title()) + "</div>"
        } else {
          return ""
        }; return nil; })();
        return "" + "<div" + (id_attr) + (class_attr) + ">\n" + "<div class=\"content\">\n" + (img) + "\n" + "</div>" + (title_el) + "\n" + "</div>";
      }, TMP_Html5Converter_image_24.$$arity = 1);
      
      Opal.def(self, '$listing', TMP_Html5Converter_listing_25 = function $$listing(node) {
        var $a, self = this, nowrap = nil, language = nil, code_attrs = nil, $case = nil, pre_class = nil, pre_start = nil, pre_end = nil, id_attribute = nil, title_element = nil, role = nil;

        
        nowrap = ($truthy($a = node.$document()['$attr?']("prewrap")['$!']()) ? $a : node['$option?']("nowrap"));
        if (node.$style()['$==']("source")) {
          
          if ($truthy((language = node.$attr("language", nil, false)))) {
            code_attrs = "" + " data-lang=\"" + (language) + "\""
          } else {
            code_attrs = ""
          };
          $case = node.$document().$attr("source-highlighter");
          if ("coderay"['$===']($case)) {pre_class = "" + " class=\"CodeRay highlight" + ((function() {if ($truthy(nowrap)) {
            return " nowrap"
          } else {
            return ""
          }; return nil; })()) + "\""}
          else if ("pygments"['$===']($case)) {if ($truthy(node.$document()['$attr?']("pygments-css", "inline"))) {
            
            if ($truthy((($a = self['pygments_bg'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            } else {
              self.pygments_bg = self.stylesheets.$pygments_background(node.$document().$attr("pygments-style"))
            };
            pre_class = "" + " class=\"pygments highlight" + ((function() {if ($truthy(nowrap)) {
              return " nowrap"
            } else {
              return ""
            }; return nil; })()) + "\" style=\"background: " + (self.pygments_bg) + "\"";
          } else {
            pre_class = "" + " class=\"pygments highlight" + ((function() {if ($truthy(nowrap)) {
              return " nowrap"
            } else {
              return ""
            }; return nil; })()) + "\""
          }}
          else if ("highlightjs"['$===']($case) || "highlight.js"['$===']($case)) {
          pre_class = "" + " class=\"highlightjs highlight" + ((function() {if ($truthy(nowrap)) {
            return " nowrap"
          } else {
            return ""
          }; return nil; })()) + "\"";
          if ($truthy(language)) {
            code_attrs = "" + " class=\"language-" + (language) + " hljs\"" + (code_attrs)};}
          else if ("prettify"['$===']($case)) {
          pre_class = "" + " class=\"prettyprint highlight" + ((function() {if ($truthy(nowrap)) {
            return " nowrap"
          } else {
            return ""
          }; return nil; })()) + ((function() {if ($truthy(node['$attr?']("linenums", nil, false))) {
            return " linenums"
          } else {
            return ""
          }; return nil; })()) + "\"";
          if ($truthy(language)) {
            code_attrs = "" + " class=\"language-" + (language) + "\"" + (code_attrs)};}
          else if ("html-pipeline"['$===']($case)) {
          pre_class = (function() {if ($truthy(language)) {
            return "" + " lang=\"" + (language) + "\""
          } else {
            return ""
          }; return nil; })();
          code_attrs = "";}
          else {
          pre_class = "" + " class=\"highlight" + ((function() {if ($truthy(nowrap)) {
            return " nowrap"
          } else {
            return ""
          }; return nil; })()) + "\"";
          if ($truthy(language)) {
            code_attrs = "" + " class=\"language-" + (language) + "\"" + (code_attrs)};};
          pre_start = "" + "<pre" + (pre_class) + "><code" + (code_attrs) + ">";
          pre_end = "</code></pre>";
        } else {
          
          pre_start = "" + "<pre" + ((function() {if ($truthy(nowrap)) {
            return " class=\"nowrap\""
          } else {
            return ""
          }; return nil; })()) + ">";
          pre_end = "</pre>";
        };
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$captioned_title()) + "</div>\n"
        } else {
          return ""
        }; return nil; })();
        return "" + "<div" + (id_attribute) + " class=\"listingblock" + ((function() {if ($truthy((role = node.$role()))) {
          return "" + " " + (role)
        } else {
          return ""
        }; return nil; })()) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (pre_start) + (node.$content()) + (pre_end) + "\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_listing_25.$$arity = 1);
      
      Opal.def(self, '$literal', TMP_Html5Converter_literal_26 = function $$literal(node) {
        var $a, self = this, id_attribute = nil, title_element = nil, nowrap = nil, role = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
        } else {
          return ""
        }; return nil; })();
        nowrap = ($truthy($a = node.$document()['$attr?']("prewrap")['$!']()) ? $a : node['$option?']("nowrap"));
        return "" + "<div" + (id_attribute) + " class=\"literalblock" + ((function() {if ($truthy((role = node.$role()))) {
          return "" + " " + (role)
        } else {
          return ""
        }; return nil; })()) + "\">\n" + (title_element) + "<div class=\"content\">\n" + "<pre" + ((function() {if ($truthy(nowrap)) {
          return " class=\"nowrap\""
        } else {
          return ""
        }; return nil; })()) + ">" + (node.$content()) + "</pre>\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_literal_26.$$arity = 1);
      
      Opal.def(self, '$stem', TMP_Html5Converter_stem_27 = function $$stem(node) {
        var $a, $b, TMP_28, self = this, id_attribute = nil, title_element = nil, style = nil, open = nil, close = nil, equation = nil, br = nil, role = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
        } else {
          return ""
        }; return nil; })();
        $b = $$($nesting, 'BLOCK_MATH_DELIMITERS')['$[]']((style = node.$style().$to_sym())), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
        equation = node.$content();
        if ($truthy((($a = style['$==']("asciimath")) ? equation['$include?']($$($nesting, 'LF')) : style['$==']("asciimath")))) {
          
          br = "" + "<br" + (self.void_element_slash) + ">" + ($$($nesting, 'LF'));
          equation = $send(equation, 'gsub', [$$($nesting, 'StemBreakRx')], (TMP_28 = function(){var self = TMP_28.$$s || this, $c;

          return "" + (close) + ($rb_times(br, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$count($$($nesting, 'LF')))) + (open)}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28));};
        if ($truthy(($truthy($a = equation['$start_with?'](open)) ? equation['$end_with?'](close) : $a))) {
        } else {
          equation = "" + (open) + (equation) + (close)
        };
        return "" + "<div" + (id_attribute) + " class=\"stemblock" + ((function() {if ($truthy((role = node.$role()))) {
          return "" + " " + (role)
        } else {
          return ""
        }; return nil; })()) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (equation) + "\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_stem_27.$$arity = 1);
      
      Opal.def(self, '$olist', TMP_Html5Converter_olist_29 = function $$olist(node) {
        var TMP_30, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, type_attribute = nil, keyword = nil, start_attribute = nil, reversed_attribute = nil;

        
        result = [];
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        classes = ["olist", node.$style(), node.$role()].$compact();
        class_attribute = "" + " class=\"" + (classes.$join(" ")) + "\"";
        result['$<<']("" + "<div" + (id_attribute) + (class_attribute) + ">");
        if ($truthy(node['$title?']())) {
          result['$<<']("" + "<div class=\"title\">" + (node.$title()) + "</div>")};
        type_attribute = (function() {if ($truthy((keyword = node.$list_marker_keyword()))) {
          return "" + " type=\"" + (keyword) + "\""
        } else {
          return ""
        }; return nil; })();
        start_attribute = (function() {if ($truthy(node['$attr?']("start"))) {
          return "" + " start=\"" + (node.$attr("start")) + "\""
        } else {
          return ""
        }; return nil; })();
        reversed_attribute = (function() {if ($truthy(node['$option?']("reversed"))) {
          
          return self.$append_boolean_attribute("reversed", self.xml_mode);
        } else {
          return ""
        }; return nil; })();
        result['$<<']("" + "<ol class=\"" + (node.$style()) + "\"" + (type_attribute) + (start_attribute) + (reversed_attribute) + ">");
        $send(node.$items(), 'each', [], (TMP_30 = function(item){var self = TMP_30.$$s || this;

        
          
          if (item == null) {
            item = nil;
          };
          result['$<<']("<li>");
          result['$<<']("" + "<p>" + (item.$text()) + "</p>");
          if ($truthy(item['$blocks?']())) {
            result['$<<'](item.$content())};
          return result['$<<']("</li>");}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30));
        result['$<<']("</ol>");
        result['$<<']("</div>");
        return result.$join($$($nesting, 'LF'));
      }, TMP_Html5Converter_olist_29.$$arity = 1);
      
      Opal.def(self, '$open', TMP_Html5Converter_open_31 = function $$open(node) {
        var $a, $b, $c, self = this, style = nil, id_attr = nil, title_el = nil, role = nil;

        if ((style = node.$style())['$==']("abstract")) {
          if ($truthy((($a = node.$parent()['$=='](node.$document())) ? node.$document().$doctype()['$==']("book") : node.$parent()['$=='](node.$document())))) {
            
            self.$logger().$warn("abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
            return "";
          } else {
            
            id_attr = (function() {if ($truthy(node.$id())) {
              return "" + " id=\"" + (node.$id()) + "\""
            } else {
              return ""
            }; return nil; })();
            title_el = (function() {if ($truthy(node['$title?']())) {
              return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
            } else {
              return ""
            }; return nil; })();
            return "" + "<div" + (id_attr) + " class=\"quoteblock abstract" + ((function() {if ($truthy((role = node.$role()))) {
              return "" + " " + (role)
            } else {
              return ""
            }; return nil; })()) + "\">\n" + (title_el) + "<blockquote>\n" + (node.$content()) + "\n" + "</blockquote>\n" + "</div>";
          }
        } else if ($truthy((($a = style['$==']("partintro")) ? ($truthy($b = ($truthy($c = $rb_gt(node.$level(), 0)) ? $c : node.$parent().$context()['$!=']("section"))) ? $b : node.$document().$doctype()['$!=']("book")) : style['$==']("partintro")))) {
          
          self.$logger().$error("partintro block can only be used when doctype is book and must be a child of a book part. Excluding block content.");
          return "";
        } else {
          
          id_attr = (function() {if ($truthy(node.$id())) {
            return "" + " id=\"" + (node.$id()) + "\""
          } else {
            return ""
          }; return nil; })();
          title_el = (function() {if ($truthy(node['$title?']())) {
            return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
          } else {
            return ""
          }; return nil; })();
          return "" + "<div" + (id_attr) + " class=\"openblock" + ((function() {if ($truthy(($truthy($a = style) ? style['$!=']("open") : $a))) {
            return "" + " " + (style)
          } else {
            return ""
          }; return nil; })()) + ((function() {if ($truthy((role = node.$role()))) {
            return "" + " " + (role)
          } else {
            return ""
          }; return nil; })()) + "\">\n" + (title_el) + "<div class=\"content\">\n" + (node.$content()) + "\n" + "</div>\n" + "</div>";
        }
      }, TMP_Html5Converter_open_31.$$arity = 1);
      
      Opal.def(self, '$page_break', TMP_Html5Converter_page_break_32 = function $$page_break(node) {
        var self = this;

        return "<div style=\"page-break-after: always;\"></div>"
      }, TMP_Html5Converter_page_break_32.$$arity = 1);
      
      Opal.def(self, '$paragraph', TMP_Html5Converter_paragraph_33 = function $$paragraph(node) {
        var self = this, class_attribute = nil, attributes = nil;

        
        class_attribute = (function() {if ($truthy(node.$role())) {
          return "" + "class=\"paragraph " + (node.$role()) + "\""
        } else {
          return "class=\"paragraph\""
        }; return nil; })();
        attributes = (function() {if ($truthy(node.$id())) {
          return "" + "id=\"" + (node.$id()) + "\" " + (class_attribute)
        } else {
          return class_attribute
        }; return nil; })();
        if ($truthy(node['$title?']())) {
          return "" + "<div " + (attributes) + ">\n" + "<div class=\"title\">" + (node.$title()) + "</div>\n" + "<p>" + (node.$content()) + "</p>\n" + "</div>"
        } else {
          return "" + "<div " + (attributes) + ">\n" + "<p>" + (node.$content()) + "</p>\n" + "</div>"
        };
      }, TMP_Html5Converter_paragraph_33.$$arity = 1);
      
      Opal.def(self, '$preamble', TMP_Html5Converter_preamble_34 = function $$preamble(node) {
        var $a, $b, self = this, doc = nil, toc = nil;

        
        if ($truthy(($truthy($a = ($truthy($b = (doc = node.$document())['$attr?']("toc-placement", "preamble")) ? doc['$sections?']() : $b)) ? doc['$attr?']("toc") : $a))) {
          toc = "" + "\n" + "<div id=\"toc\" class=\"" + (doc.$attr("toc-class", "toc")) + "\">\n" + "<div id=\"toctitle\">" + (doc.$attr("toc-title")) + "</div>\n" + (self.$outline(doc)) + "\n" + "</div>"
        } else {
          toc = ""
        };
        return "" + "<div id=\"preamble\">\n" + "<div class=\"sectionbody\">\n" + (node.$content()) + "\n" + "</div>" + (toc) + "\n" + "</div>";
      }, TMP_Html5Converter_preamble_34.$$arity = 1);
      
      Opal.def(self, '$quote', TMP_Html5Converter_quote_35 = function $$quote(node) {
        var $a, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        classes = ["quoteblock", node.$role()].$compact();
        class_attribute = "" + " class=\"" + (classes.$join(" ")) + "\"";
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "\n<div class=\"title\">" + (node.$title()) + "</div>"
        } else {
          return ""
        }; return nil; })();
        attribution = (function() {if ($truthy(node['$attr?']("attribution"))) {
          
          return node.$attr("attribution");
        } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ($truthy(node['$attr?']("citetitle"))) {
          
          return node.$attr("citetitle");
        } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {
          
          cite_element = (function() {if ($truthy(citetitle)) {
            return "" + "<cite>" + (citetitle) + "</cite>"
          } else {
            return ""
          }; return nil; })();
          attribution_text = (function() {if ($truthy(attribution)) {
            return "" + "&#8212; " + (attribution) + ((function() {if ($truthy(citetitle)) {
              return "" + "<br" + (self.void_element_slash) + ">\n"
            } else {
              return ""
            }; return nil; })())
          } else {
            return ""
          }; return nil; })();
          attribution_element = "" + "\n<div class=\"attribution\">\n" + (attribution_text) + (cite_element) + "\n</div>";
        } else {
          attribution_element = ""
        };
        return "" + "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n" + "<blockquote>\n" + (node.$content()) + "\n" + "</blockquote>" + (attribution_element) + "\n" + "</div>";
      }, TMP_Html5Converter_quote_35.$$arity = 1);
      
      Opal.def(self, '$thematic_break', TMP_Html5Converter_thematic_break_36 = function $$thematic_break(node) {
        var self = this;

        return "" + "<hr" + (self.void_element_slash) + ">"
      }, TMP_Html5Converter_thematic_break_36.$$arity = 1);
      
      Opal.def(self, '$sidebar', TMP_Html5Converter_sidebar_37 = function $$sidebar(node) {
        var self = this, id_attribute = nil, title_element = nil, role = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
        } else {
          return ""
        }; return nil; })();
        return "" + "<div" + (id_attribute) + " class=\"sidebarblock" + ((function() {if ($truthy((role = node.$role()))) {
          return "" + " " + (role)
        } else {
          return ""
        }; return nil; })()) + "\">\n" + "<div class=\"content\">\n" + (title_element) + (node.$content()) + "\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_sidebar_37.$$arity = 1);
      
      Opal.def(self, '$table', TMP_Html5Converter_table_38 = function $$table(node) {
        var $a, TMP_39, TMP_40, self = this, result = nil, id_attribute = nil, classes = nil, stripes = nil, styles = nil, autowidth = nil, tablewidth = nil, role = nil, class_attribute = nil, style_attribute = nil, slash = nil;

        
        result = [];
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        classes = ["tableblock", "" + "frame-" + (node.$attr("frame", "all")), "" + "grid-" + (node.$attr("grid", "all"))];
        if ($truthy((stripes = node.$attr("stripes")))) {
          classes['$<<']("" + "stripes-" + (stripes))};
        styles = [];
        if ($truthy(($truthy($a = (autowidth = node.$attributes()['$[]']("autowidth-option"))) ? node['$attr?']("width", nil, false)['$!']() : $a))) {
          classes['$<<']("fit-content")
        } else if ((tablewidth = node.$attr("tablepcwidth"))['$=='](100)) {
          classes['$<<']("stretch")
        } else {
          styles['$<<']("" + "width: " + (tablewidth) + "%;")
        };
        if ($truthy(node['$attr?']("float"))) {
          classes['$<<'](node.$attr("float"))};
        if ($truthy((role = node.$role()))) {
          classes['$<<'](role)};
        class_attribute = "" + " class=\"" + (classes.$join(" ")) + "\"";
        style_attribute = (function() {if ($truthy(styles['$empty?']())) {
          return ""
        } else {
          return "" + " style=\"" + (styles.$join(" ")) + "\""
        }; return nil; })();
        result['$<<']("" + "<table" + (id_attribute) + (class_attribute) + (style_attribute) + ">");
        if ($truthy(node['$title?']())) {
          result['$<<']("" + "<caption class=\"title\">" + (node.$captioned_title()) + "</caption>")};
        if ($truthy($rb_gt(node.$attr("rowcount"), 0))) {
          
          slash = self.void_element_slash;
          result['$<<']("<colgroup>");
          if ($truthy(autowidth)) {
            result = $rb_plus(result, $$($nesting, 'Array').$new(node.$columns().$size(), "" + "<col" + (slash) + ">"))
          } else {
            $send(node.$columns(), 'each', [], (TMP_39 = function(col){var self = TMP_39.$$s || this;

            
              
              if (col == null) {
                col = nil;
              };
              return result['$<<']((function() {if ($truthy(col.$attributes()['$[]']("autowidth-option"))) {
                return "" + "<col" + (slash) + ">"
              } else {
                return "" + "<col style=\"width: " + (col.$attr("colpcwidth")) + "%;\"" + (slash) + ">"
              }; return nil; })());}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39))
          };
          result['$<<']("</colgroup>");
          $send(node.$rows().$by_section(), 'each', [], (TMP_40 = function(tsec, rows){var self = TMP_40.$$s || this, TMP_41;

          
            
            if (tsec == null) {
              tsec = nil;
            };
            
            if (rows == null) {
              rows = nil;
            };
            if ($truthy(rows['$empty?']())) {
              return nil;};
            result['$<<']("" + "<t" + (tsec) + ">");
            $send(rows, 'each', [], (TMP_41 = function(row){var self = TMP_41.$$s || this, TMP_42;

            
              
              if (row == null) {
                row = nil;
              };
              result['$<<']("<tr>");
              $send(row, 'each', [], (TMP_42 = function(cell){var self = TMP_42.$$s || this, $b, cell_content = nil, $case = nil, cell_tag_name = nil, cell_class_attribute = nil, cell_colspan_attribute = nil, cell_rowspan_attribute = nil, cell_style_attribute = nil;

              
                
                if (cell == null) {
                  cell = nil;
                };
                if (tsec['$==']("head")) {
                  cell_content = cell.$text()
                } else {
                  $case = cell.$style();
                  if ("asciidoc"['$===']($case)) {cell_content = "" + "<div class=\"content\">" + (cell.$content()) + "</div>"}
                  else if ("verse"['$===']($case)) {cell_content = "" + "<div class=\"verse\">" + (cell.$text()) + "</div>"}
                  else if ("literal"['$===']($case)) {cell_content = "" + "<div class=\"literal\"><pre>" + (cell.$text()) + "</pre></div>"}
                  else {cell_content = (function() {if ($truthy((cell_content = cell.$content())['$empty?']())) {
                    return ""
                  } else {
                    return "" + "<p class=\"tableblock\">" + (cell_content.$join("" + "</p>\n" + "<p class=\"tableblock\">")) + "</p>"
                  }; return nil; })()}
                };
                cell_tag_name = (function() {if ($truthy(($truthy($b = tsec['$==']("head")) ? $b : cell.$style()['$==']("header")))) {
                  return "th"
                } else {
                  return "td"
                }; return nil; })();
                cell_class_attribute = "" + " class=\"tableblock halign-" + (cell.$attr("halign")) + " valign-" + (cell.$attr("valign")) + "\"";
                cell_colspan_attribute = (function() {if ($truthy(cell.$colspan())) {
                  return "" + " colspan=\"" + (cell.$colspan()) + "\""
                } else {
                  return ""
                }; return nil; })();
                cell_rowspan_attribute = (function() {if ($truthy(cell.$rowspan())) {
                  return "" + " rowspan=\"" + (cell.$rowspan()) + "\""
                } else {
                  return ""
                }; return nil; })();
                cell_style_attribute = (function() {if ($truthy(node.$document()['$attr?']("cellbgcolor"))) {
                  return "" + " style=\"background-color: " + (node.$document().$attr("cellbgcolor")) + ";\""
                } else {
                  return ""
                }; return nil; })();
                return result['$<<']("" + "<" + (cell_tag_name) + (cell_class_attribute) + (cell_colspan_attribute) + (cell_rowspan_attribute) + (cell_style_attribute) + ">" + (cell_content) + "</" + (cell_tag_name) + ">");}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42));
              return result['$<<']("</tr>");}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41));
            return result['$<<']("" + "</t" + (tsec) + ">");}, TMP_40.$$s = self, TMP_40.$$arity = 2, TMP_40));};
        result['$<<']("</table>");
        return result.$join($$($nesting, 'LF'));
      }, TMP_Html5Converter_table_38.$$arity = 1);
      
      Opal.def(self, '$toc', TMP_Html5Converter_toc_43 = function $$toc(node) {
        var $a, $b, self = this, doc = nil, id_attr = nil, title_id_attr = nil, title = nil, levels = nil, role = nil;

        
        if ($truthy(($truthy($a = ($truthy($b = (doc = node.$document())['$attr?']("toc-placement", "macro")) ? doc['$sections?']() : $b)) ? doc['$attr?']("toc") : $a))) {
        } else {
          return "<!-- toc disabled -->"
        };
        if ($truthy(node.$id())) {
          
          id_attr = "" + " id=\"" + (node.$id()) + "\"";
          title_id_attr = "" + " id=\"" + (node.$id()) + "title\"";
        } else {
          
          id_attr = " id=\"toc\"";
          title_id_attr = " id=\"toctitle\"";
        };
        title = (function() {if ($truthy(node['$title?']())) {
          return node.$title()
        } else {
          
          return doc.$attr("toc-title");
        }; return nil; })();
        levels = (function() {if ($truthy(node['$attr?']("levels"))) {
          return node.$attr("levels").$to_i()
        } else {
          return nil
        }; return nil; })();
        role = (function() {if ($truthy(node['$role?']())) {
          return node.$role()
        } else {
          
          return doc.$attr("toc-class", "toc");
        }; return nil; })();
        return "" + "<div" + (id_attr) + " class=\"" + (role) + "\">\n" + "<div" + (title_id_attr) + " class=\"title\">" + (title) + "</div>\n" + (self.$outline(doc, $hash2(["toclevels"], {"toclevels": levels}))) + "\n" + "</div>";
      }, TMP_Html5Converter_toc_43.$$arity = 1);
      
      Opal.def(self, '$ulist', TMP_Html5Converter_ulist_44 = function $$ulist(node) {
        var TMP_45, self = this, result = nil, id_attribute = nil, div_classes = nil, marker_checked = nil, marker_unchecked = nil, checklist = nil, ul_class_attribute = nil;

        
        result = [];
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        div_classes = ["ulist", node.$style(), node.$role()].$compact();
        marker_checked = (marker_unchecked = "");
        if ($truthy((checklist = node['$option?']("checklist")))) {
          
          div_classes.$unshift(div_classes.$shift(), "checklist");
          ul_class_attribute = " class=\"checklist\"";
          if ($truthy(node['$option?']("interactive"))) {
            if ($truthy(self.xml_mode)) {
              
              marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked=\"checked\"/> ";
              marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\"/> ";
            } else {
              
              marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked> ";
              marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\"> ";
            }
          } else if ($truthy(node.$document()['$attr?']("icons", "font"))) {
            
            marker_checked = "<i class=\"fa fa-check-square-o\"></i> ";
            marker_unchecked = "<i class=\"fa fa-square-o\"></i> ";
          } else {
            
            marker_checked = "&#10003; ";
            marker_unchecked = "&#10063; ";
          };
        } else {
          ul_class_attribute = (function() {if ($truthy(node.$style())) {
            return "" + " class=\"" + (node.$style()) + "\""
          } else {
            return ""
          }; return nil; })()
        };
        result['$<<']("" + "<div" + (id_attribute) + " class=\"" + (div_classes.$join(" ")) + "\">");
        if ($truthy(node['$title?']())) {
          result['$<<']("" + "<div class=\"title\">" + (node.$title()) + "</div>")};
        result['$<<']("" + "<ul" + (ul_class_attribute) + ">");
        $send(node.$items(), 'each', [], (TMP_45 = function(item){var self = TMP_45.$$s || this, $a;

        
          
          if (item == null) {
            item = nil;
          };
          result['$<<']("<li>");
          if ($truthy(($truthy($a = checklist) ? item['$attr?']("checkbox") : $a))) {
            result['$<<']("" + "<p>" + ((function() {if ($truthy(item['$attr?']("checked"))) {
              return marker_checked
            } else {
              return marker_unchecked
            }; return nil; })()) + (item.$text()) + "</p>")
          } else {
            result['$<<']("" + "<p>" + (item.$text()) + "</p>")
          };
          if ($truthy(item['$blocks?']())) {
            result['$<<'](item.$content())};
          return result['$<<']("</li>");}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45));
        result['$<<']("</ul>");
        result['$<<']("</div>");
        return result.$join($$($nesting, 'LF'));
      }, TMP_Html5Converter_ulist_44.$$arity = 1);
      
      Opal.def(self, '$verse', TMP_Html5Converter_verse_46 = function $$verse(node) {
        var $a, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        classes = ["verseblock", node.$role()].$compact();
        class_attribute = "" + " class=\"" + (classes.$join(" ")) + "\"";
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "\n<div class=\"title\">" + (node.$title()) + "</div>"
        } else {
          return ""
        }; return nil; })();
        attribution = (function() {if ($truthy(node['$attr?']("attribution"))) {
          
          return node.$attr("attribution");
        } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ($truthy(node['$attr?']("citetitle"))) {
          
          return node.$attr("citetitle");
        } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {
          
          cite_element = (function() {if ($truthy(citetitle)) {
            return "" + "<cite>" + (citetitle) + "</cite>"
          } else {
            return ""
          }; return nil; })();
          attribution_text = (function() {if ($truthy(attribution)) {
            return "" + "&#8212; " + (attribution) + ((function() {if ($truthy(citetitle)) {
              return "" + "<br" + (self.void_element_slash) + ">\n"
            } else {
              return ""
            }; return nil; })())
          } else {
            return ""
          }; return nil; })();
          attribution_element = "" + "\n<div class=\"attribution\">\n" + (attribution_text) + (cite_element) + "\n</div>";
        } else {
          attribution_element = ""
        };
        return "" + "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n" + "<pre class=\"content\">" + (node.$content()) + "</pre>" + (attribution_element) + "\n" + "</div>";
      }, TMP_Html5Converter_verse_46.$$arity = 1);
      
      Opal.def(self, '$video', TMP_Html5Converter_video_47 = function $$video(node) {
        var $a, $b, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, width_attribute = nil, height_attribute = nil, $case = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, autoplay_param = nil, loop_param = nil, rel_param_val = nil, start_param = nil, end_param = nil, has_loop_param = nil, controls_param = nil, fs_param = nil, fs_attribute = nil, modest_param = nil, theme_param = nil, hl_param = nil, target = nil, list = nil, list_param = nil, playlist = nil, poster_attribute = nil, val = nil, preload_attribute = nil, start_t = nil, end_t = nil, time_anchor = nil;

        
        xml = self.xml_mode;
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
        } else {
          return ""
        }; return nil; })();
        classes = ["videoblock"];
        if ($truthy(node['$attr?']("float"))) {
          classes['$<<'](node.$attr("float"))};
        if ($truthy(node['$attr?']("align"))) {
          classes['$<<']("" + "text-" + (node.$attr("align")))};
        if ($truthy(node.$role())) {
          classes['$<<'](node.$role())};
        class_attribute = "" + " class=\"" + (classes.$join(" ")) + "\"";
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "\n<div class=\"title\">" + (node.$title()) + "</div>"
        } else {
          return ""
        }; return nil; })();
        width_attribute = (function() {if ($truthy(node['$attr?']("width"))) {
          return "" + " width=\"" + (node.$attr("width")) + "\""
        } else {
          return ""
        }; return nil; })();
        height_attribute = (function() {if ($truthy(node['$attr?']("height"))) {
          return "" + " height=\"" + (node.$attr("height")) + "\""
        } else {
          return ""
        }; return nil; })();
        return (function() {$case = node.$attr("poster");
        if ("vimeo"['$===']($case)) {
        if ($truthy((asset_uri_scheme = node.$document().$attr("asset-uri-scheme", "https"))['$empty?']())) {
        } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        start_anchor = (function() {if ($truthy(node['$attr?']("start", nil, false))) {
          return "" + "#at=" + (node.$attr("start"))
        } else {
          return ""
        }; return nil; })();
        delimiter = "?";
        if ($truthy(node['$option?']("autoplay"))) {
          
          autoplay_param = "" + (delimiter) + "autoplay=1";
          delimiter = "&amp;";
        } else {
          autoplay_param = ""
        };
        loop_param = (function() {if ($truthy(node['$option?']("loop"))) {
          return "" + (delimiter) + "loop=1"
        } else {
          return ""
        }; return nil; })();
        return "" + "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n" + "<div class=\"content\">\n" + "<iframe" + (width_attribute) + (height_attribute) + " src=\"" + (asset_uri_scheme) + "//player.vimeo.com/video/" + (node.$attr("target")) + (start_anchor) + (autoplay_param) + (loop_param) + "\" frameborder=\"0\"" + ((function() {if ($truthy(node['$option?']("nofullscreen"))) {
          return ""
        } else {
          
          return self.$append_boolean_attribute("allowfullscreen", xml);
        }; return nil; })()) + "></iframe>\n" + "</div>\n" + "</div>";}
        else if ("youtube"['$===']($case)) {
        if ($truthy((asset_uri_scheme = node.$document().$attr("asset-uri-scheme", "https"))['$empty?']())) {
        } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        rel_param_val = (function() {if ($truthy(node['$option?']("related"))) {
          return 1
        } else {
          return 0
        }; return nil; })();
        start_param = (function() {if ($truthy(node['$attr?']("start", nil, false))) {
          return "" + "&amp;start=" + (node.$attr("start"))
        } else {
          return ""
        }; return nil; })();
        end_param = (function() {if ($truthy(node['$attr?']("end", nil, false))) {
          return "" + "&amp;end=" + (node.$attr("end"))
        } else {
          return ""
        }; return nil; })();
        autoplay_param = (function() {if ($truthy(node['$option?']("autoplay"))) {
          return "&amp;autoplay=1"
        } else {
          return ""
        }; return nil; })();
        loop_param = (function() {if ($truthy((has_loop_param = node['$option?']("loop")))) {
          return "&amp;loop=1"
        } else {
          return ""
        }; return nil; })();
        controls_param = (function() {if ($truthy(node['$option?']("nocontrols"))) {
          return "&amp;controls=0"
        } else {
          return ""
        }; return nil; })();
        if ($truthy(node['$option?']("nofullscreen"))) {
          
          fs_param = "&amp;fs=0";
          fs_attribute = "";
        } else {
          
          fs_param = "";
          fs_attribute = self.$append_boolean_attribute("allowfullscreen", xml);
        };
        modest_param = (function() {if ($truthy(node['$option?']("modest"))) {
          return "&amp;modestbranding=1"
        } else {
          return ""
        }; return nil; })();
        theme_param = (function() {if ($truthy(node['$attr?']("theme", nil, false))) {
          return "" + "&amp;theme=" + (node.$attr("theme"))
        } else {
          return ""
        }; return nil; })();
        hl_param = (function() {if ($truthy(node['$attr?']("lang"))) {
          return "" + "&amp;hl=" + (node.$attr("lang"))
        } else {
          return ""
        }; return nil; })();
        $b = node.$attr("target").$split("/", 2), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (list = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy((list = ($truthy($a = list) ? $a : node.$attr("list", nil, false))))) {
          list_param = "" + "&amp;list=" + (list)
        } else {
          
          $b = target.$split(",", 2), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (playlist = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy((playlist = ($truthy($a = playlist) ? $a : node.$attr("playlist", nil, false))))) {
            list_param = "" + "&amp;playlist=" + (playlist)
          } else {
            list_param = (function() {if ($truthy(has_loop_param)) {
              return "" + "&amp;playlist=" + (target)
            } else {
              return ""
            }; return nil; })()
          };
        };
        return "" + "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n" + "<div class=\"content\">\n" + "<iframe" + (width_attribute) + (height_attribute) + " src=\"" + (asset_uri_scheme) + "//www.youtube.com/embed/" + (target) + "?rel=" + (rel_param_val) + (start_param) + (end_param) + (autoplay_param) + (loop_param) + (controls_param) + (list_param) + (fs_param) + (modest_param) + (theme_param) + (hl_param) + "\" frameborder=\"0\"" + (fs_attribute) + "></iframe>\n" + "</div>\n" + "</div>";}
        else {
        poster_attribute = (function() {if ($truthy((val = node.$attr("poster", nil, false))['$nil_or_empty?']())) {
          return ""
        } else {
          return "" + " poster=\"" + (node.$media_uri(val)) + "\""
        }; return nil; })();
        preload_attribute = (function() {if ($truthy((val = node.$attr("preload", nil, false))['$nil_or_empty?']())) {
          return ""
        } else {
          return "" + " preload=\"" + (val) + "\""
        }; return nil; })();
        start_t = node.$attr("start", nil, false);
        end_t = node.$attr("end", nil, false);
        time_anchor = (function() {if ($truthy(($truthy($a = start_t) ? $a : end_t))) {
          return "" + "#t=" + (($truthy($a = start_t) ? $a : "")) + ((function() {if ($truthy(end_t)) {
            return "" + "," + (end_t)
          } else {
            return ""
          }; return nil; })())
        } else {
          return ""
        }; return nil; })();
        return "" + "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n" + "<div class=\"content\">\n" + "<video src=\"" + (node.$media_uri(node.$attr("target"))) + (time_anchor) + "\"" + (width_attribute) + (height_attribute) + (poster_attribute) + ((function() {if ($truthy(node['$option?']("autoplay"))) {
          
          return self.$append_boolean_attribute("autoplay", xml);
        } else {
          return ""
        }; return nil; })()) + ((function() {if ($truthy(node['$option?']("nocontrols"))) {
          return ""
        } else {
          
          return self.$append_boolean_attribute("controls", xml);
        }; return nil; })()) + ((function() {if ($truthy(node['$option?']("loop"))) {
          
          return self.$append_boolean_attribute("loop", xml);
        } else {
          return ""
        }; return nil; })()) + (preload_attribute) + ">\n" + "Your browser does not support the video tag.\n" + "</video>\n" + "</div>\n" + "</div>";}})();
      }, TMP_Html5Converter_video_47.$$arity = 1);
      
      Opal.def(self, '$inline_anchor', TMP_Html5Converter_inline_anchor_48 = function $$inline_anchor(node) {
        var $a, self = this, $case = nil, path = nil, attrs = nil, text = nil, refid = nil, ref = nil;

        return (function() {$case = node.$type();
        if ("xref"['$===']($case)) {
        if ($truthy((path = node.$attributes()['$[]']("path")))) {
          
          attrs = self.$append_link_constraint_attrs(node, (function() {if ($truthy(node.$role())) {
            return ["" + " class=\"" + (node.$role()) + "\""]
          } else {
            return []
          }; return nil; })()).$join();
          text = ($truthy($a = node.$text()) ? $a : path);
        } else {
          
          attrs = (function() {if ($truthy(node.$role())) {
            return "" + " class=\"" + (node.$role()) + "\""
          } else {
            return ""
          }; return nil; })();
          if ($truthy((text = node.$text()))) {
          } else {
            
            refid = node.$attributes()['$[]']("refid");
            if ($truthy($$($nesting, 'AbstractNode')['$===']((ref = (self.refs = ($truthy($a = self.refs) ? $a : node.$document().$catalog()['$[]']("refs")))['$[]'](refid))))) {
              text = ($truthy($a = ref.$xreftext(node.$attr("xrefstyle"))) ? $a : "" + "[" + (refid) + "]")
            } else {
              text = "" + "[" + (refid) + "]"
            };
          };
        };
        return "" + "<a href=\"" + (node.$target()) + "\"" + (attrs) + ">" + (text) + "</a>";}
        else if ("ref"['$===']($case)) {return "" + "<a id=\"" + (node.$id()) + "\"></a>"}
        else if ("link"['$===']($case)) {
        attrs = (function() {if ($truthy(node.$id())) {
          return ["" + " id=\"" + (node.$id()) + "\""]
        } else {
          return []
        }; return nil; })();
        if ($truthy(node.$role())) {
          attrs['$<<']("" + " class=\"" + (node.$role()) + "\"")};
        if ($truthy(node['$attr?']("title", nil, false))) {
          attrs['$<<']("" + " title=\"" + (node.$attr("title")) + "\"")};
        return "" + "<a href=\"" + (node.$target()) + "\"" + (self.$append_link_constraint_attrs(node, attrs).$join()) + ">" + (node.$text()) + "</a>";}
        else if ("bibref"['$===']($case)) {return "" + "<a id=\"" + (node.$id()) + "\"></a>" + (node.$text())}
        else {
        self.$logger().$warn("" + "unknown anchor type: " + (node.$type().$inspect()));
        return nil;}})()
      }, TMP_Html5Converter_inline_anchor_48.$$arity = 1);
      
      Opal.def(self, '$inline_break', TMP_Html5Converter_inline_break_49 = function $$inline_break(node) {
        var self = this;

        return "" + (node.$text()) + "<br" + (self.void_element_slash) + ">"
      }, TMP_Html5Converter_inline_break_49.$$arity = 1);
      
      Opal.def(self, '$inline_button', TMP_Html5Converter_inline_button_50 = function $$inline_button(node) {
        var self = this;

        return "" + "<b class=\"button\">" + (node.$text()) + "</b>"
      }, TMP_Html5Converter_inline_button_50.$$arity = 1);
      
      Opal.def(self, '$inline_callout', TMP_Html5Converter_inline_callout_51 = function $$inline_callout(node) {
        var self = this, src = nil;

        if ($truthy(node.$document()['$attr?']("icons", "font"))) {
          return "" + "<i class=\"conum\" data-value=\"" + (node.$text()) + "\"></i><b>(" + (node.$text()) + ")</b>"
        } else if ($truthy(node.$document()['$attr?']("icons"))) {
          
          src = node.$icon_uri("" + "callouts/" + (node.$text()));
          return "" + "<img src=\"" + (src) + "\" alt=\"" + (node.$text()) + "\"" + (self.void_element_slash) + ">";
        } else {
          return "" + (node.$attributes()['$[]']("guard")) + "<b class=\"conum\">(" + (node.$text()) + ")</b>"
        }
      }, TMP_Html5Converter_inline_callout_51.$$arity = 1);
      
      Opal.def(self, '$inline_footnote', TMP_Html5Converter_inline_footnote_52 = function $$inline_footnote(node) {
        var self = this, index = nil, id_attr = nil;

        if ($truthy((index = node.$attr("index", nil, false)))) {
          if (node.$type()['$==']("xref")) {
            return "" + "<sup class=\"footnoteref\">[<a class=\"footnote\" href=\"#_footnotedef_" + (index) + "\" title=\"View footnote.\">" + (index) + "</a>]</sup>"
          } else {
            
            id_attr = (function() {if ($truthy(node.$id())) {
              return "" + " id=\"_footnote_" + (node.$id()) + "\""
            } else {
              return ""
            }; return nil; })();
            return "" + "<sup class=\"footnote\"" + (id_attr) + ">[<a id=\"_footnoteref_" + (index) + "\" class=\"footnote\" href=\"#_footnotedef_" + (index) + "\" title=\"View footnote.\">" + (index) + "</a>]</sup>";
          }
        } else if (node.$type()['$==']("xref")) {
          return "" + "<sup class=\"footnoteref red\" title=\"Unresolved footnote reference.\">[" + (node.$text()) + "]</sup>"
        } else {
          return nil
        }
      }, TMP_Html5Converter_inline_footnote_52.$$arity = 1);
      
      Opal.def(self, '$inline_image', TMP_Html5Converter_inline_image_53 = function $$inline_image(node) {
        var $a, TMP_54, TMP_55, $b, $c, $d, self = this, type = nil, class_attr_val = nil, title_attr = nil, img = nil, target = nil, attrs = nil, svg = nil, obj = nil, fallback = nil, role = nil;

        
        if ($truthy((($a = (type = node.$type())['$==']("icon")) ? node.$document()['$attr?']("icons", "font") : (type = node.$type())['$==']("icon")))) {
          
          class_attr_val = "" + "fa fa-" + (node.$target());
          $send($hash2(["size", "rotate", "flip"], {"size": "fa-", "rotate": "fa-rotate-", "flip": "fa-flip-"}), 'each', [], (TMP_54 = function(key, prefix){var self = TMP_54.$$s || this;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (prefix == null) {
              prefix = nil;
            };
            if ($truthy(node['$attr?'](key))) {
              return (class_attr_val = "" + (class_attr_val) + " " + (prefix) + (node.$attr(key)))
            } else {
              return nil
            };}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54));
          title_attr = (function() {if ($truthy(node['$attr?']("title"))) {
            return "" + " title=\"" + (node.$attr("title")) + "\""
          } else {
            return ""
          }; return nil; })();
          img = "" + "<i class=\"" + (class_attr_val) + "\"" + (title_attr) + "></i>";
        } else if ($truthy((($a = type['$==']("icon")) ? node.$document()['$attr?']("icons")['$!']() : type['$==']("icon")))) {
          img = "" + "[" + (node.$alt()) + "]"
        } else {
          
          target = node.$target();
          attrs = $send(["width", "height", "title"], 'map', [], (TMP_55 = function(name){var self = TMP_55.$$s || this;

          
            
            if (name == null) {
              name = nil;
            };
            if ($truthy(node['$attr?'](name))) {
              return "" + " " + (name) + "=\"" + (node.$attr(name)) + "\""
            } else {
              return ""
            };}, TMP_55.$$s = self, TMP_55.$$arity = 1, TMP_55)).$join();
          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = type['$!=']("icon")) ? ($truthy($d = node['$attr?']("format", "svg", false)) ? $d : target['$include?'](".svg")) : $c)) ? $rb_lt(node.$document().$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')) : $b)) ? ($truthy($b = (svg = node['$option?']("inline"))) ? $b : (obj = node['$option?']("interactive"))) : $a))) {
            if ($truthy(svg)) {
              img = ($truthy($a = self.$read_svg_contents(node, target)) ? $a : "" + "<span class=\"alt\">" + (node.$alt()) + "</span>")
            } else if ($truthy(obj)) {
              
              fallback = (function() {if ($truthy(node['$attr?']("fallback"))) {
                return "" + "<img src=\"" + (node.$image_uri(node.$attr("fallback"))) + "\" alt=\"" + (self.$encode_quotes(node.$alt())) + "\"" + (attrs) + (self.void_element_slash) + ">"
              } else {
                return "" + "<span class=\"alt\">" + (node.$alt()) + "</span>"
              }; return nil; })();
              img = "" + "<object type=\"image/svg+xml\" data=\"" + (node.$image_uri(target)) + "\"" + (attrs) + ">" + (fallback) + "</object>";}};
          img = ($truthy($a = img) ? $a : "" + "<img src=\"" + ((function() {if (type['$==']("icon")) {
            
            return node.$icon_uri(target);
          } else {
            
            return node.$image_uri(target);
          }; return nil; })()) + "\" alt=\"" + (self.$encode_quotes(node.$alt())) + "\"" + (attrs) + (self.void_element_slash) + ">");
        };
        if ($truthy(node['$attr?']("link", nil, false))) {
          img = "" + "<a class=\"image\" href=\"" + (node.$attr("link")) + "\"" + (self.$append_link_constraint_attrs(node).$join()) + ">" + (img) + "</a>"};
        if ($truthy((role = node.$role()))) {
          if ($truthy(node['$attr?']("float"))) {
            class_attr_val = "" + (type) + " " + (node.$attr("float")) + " " + (role)
          } else {
            class_attr_val = "" + (type) + " " + (role)
          }
        } else if ($truthy(node['$attr?']("float"))) {
          class_attr_val = "" + (type) + " " + (node.$attr("float"))
        } else {
          class_attr_val = type
        };
        return "" + "<span class=\"" + (class_attr_val) + "\">" + (img) + "</span>";
      }, TMP_Html5Converter_inline_image_53.$$arity = 1);
      
      Opal.def(self, '$inline_indexterm', TMP_Html5Converter_inline_indexterm_56 = function $$inline_indexterm(node) {
        var self = this;

        if (node.$type()['$==']("visible")) {
          return node.$text()
        } else {
          return ""
        }
      }, TMP_Html5Converter_inline_indexterm_56.$$arity = 1);
      
      Opal.def(self, '$inline_kbd', TMP_Html5Converter_inline_kbd_57 = function $$inline_kbd(node) {
        var self = this, keys = nil;

        if ((keys = node.$attr("keys")).$size()['$=='](1)) {
          return "" + "<kbd>" + (keys['$[]'](0)) + "</kbd>"
        } else {
          return "" + "<span class=\"keyseq\"><kbd>" + (keys.$join("</kbd>+<kbd>")) + "</kbd></span>"
        }
      }, TMP_Html5Converter_inline_kbd_57.$$arity = 1);
      
      Opal.def(self, '$inline_menu', TMP_Html5Converter_inline_menu_58 = function $$inline_menu(node) {
        var self = this, caret = nil, submenu_joiner = nil, menu = nil, submenus = nil, menuitem = nil;

        
        caret = (function() {if ($truthy(node.$document()['$attr?']("icons", "font"))) {
          return "&#160;<i class=\"fa fa-angle-right caret\"></i> "
        } else {
          return "&#160;<b class=\"caret\">&#8250;</b> "
        }; return nil; })();
        submenu_joiner = "" + "</b>" + (caret) + "<b class=\"submenu\">";
        menu = node.$attr("menu");
        if ($truthy((submenus = node.$attr("submenus"))['$empty?']())) {
          if ($truthy((menuitem = node.$attr("menuitem", nil, false)))) {
            return "" + "<span class=\"menuseq\"><b class=\"menu\">" + (menu) + "</b>" + (caret) + "<b class=\"menuitem\">" + (menuitem) + "</b></span>"
          } else {
            return "" + "<b class=\"menuref\">" + (menu) + "</b>"
          }
        } else {
          return "" + "<span class=\"menuseq\"><b class=\"menu\">" + (menu) + "</b>" + (caret) + "<b class=\"submenu\">" + (submenus.$join(submenu_joiner)) + "</b>" + (caret) + "<b class=\"menuitem\">" + (node.$attr("menuitem")) + "</b></span>"
        };
      }, TMP_Html5Converter_inline_menu_58.$$arity = 1);
      
      Opal.def(self, '$inline_quoted', TMP_Html5Converter_inline_quoted_59 = function $$inline_quoted(node) {
        var $a, $b, self = this, open = nil, close = nil, is_tag = nil, class_attr = nil, id_attr = nil;

        
        $b = $$($nesting, 'QUOTE_TAGS')['$[]'](node.$type()), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), (is_tag = ($a[2] == null ? nil : $a[2])), $b;
        if ($truthy(node.$role())) {
          class_attr = "" + " class=\"" + (node.$role()) + "\""};
        if ($truthy(node.$id())) {
          id_attr = "" + " id=\"" + (node.$id()) + "\""};
        if ($truthy(($truthy($a = class_attr) ? $a : id_attr))) {
          if ($truthy(is_tag)) {
            return "" + (open.$chop()) + (($truthy($a = id_attr) ? $a : "")) + (($truthy($a = class_attr) ? $a : "")) + ">" + (node.$text()) + (close)
          } else {
            return "" + "<span" + (($truthy($a = id_attr) ? $a : "")) + (($truthy($a = class_attr) ? $a : "")) + ">" + (open) + (node.$text()) + (close) + "</span>"
          }
        } else {
          return "" + (open) + (node.$text()) + (close)
        };
      }, TMP_Html5Converter_inline_quoted_59.$$arity = 1);
      
      Opal.def(self, '$append_boolean_attribute', TMP_Html5Converter_append_boolean_attribute_60 = function $$append_boolean_attribute(name, xml) {
        var self = this;

        if ($truthy(xml)) {
          return "" + " " + (name) + "=\"" + (name) + "\""
        } else {
          return "" + " " + (name)
        }
      }, TMP_Html5Converter_append_boolean_attribute_60.$$arity = 2);
      
      Opal.def(self, '$encode_quotes', TMP_Html5Converter_encode_quotes_61 = function $$encode_quotes(val) {
        var self = this;

        if ($truthy(val['$include?']("\""))) {
          
          return val.$gsub("\"", "&quot;");
        } else {
          return val
        }
      }, TMP_Html5Converter_encode_quotes_61.$$arity = 1);
      
      Opal.def(self, '$generate_manname_section', TMP_Html5Converter_generate_manname_section_62 = function $$generate_manname_section(node) {
        var $a, self = this, manname_title = nil, next_section = nil, next_section_title = nil, manname_id_attr = nil, manname_id = nil;

        
        manname_title = node.$attr("manname-title", "Name");
        if ($truthy(($truthy($a = (next_section = node.$sections()['$[]'](0))) ? (next_section_title = next_section.$title())['$=='](next_section_title.$upcase()) : $a))) {
          manname_title = manname_title.$upcase()};
        manname_id_attr = (function() {if ($truthy((manname_id = node.$attr("manname-id")))) {
          return "" + " id=\"" + (manname_id) + "\""
        } else {
          return ""
        }; return nil; })();
        return "" + "<h2" + (manname_id_attr) + ">" + (manname_title) + "</h2>\n" + "<div class=\"sectionbody\">\n" + "<p>" + (node.$attr("manname")) + " - " + (node.$attr("manpurpose")) + "</p>\n" + "</div>";
      }, TMP_Html5Converter_generate_manname_section_62.$$arity = 1);
      
      Opal.def(self, '$append_link_constraint_attrs', TMP_Html5Converter_append_link_constraint_attrs_63 = function $$append_link_constraint_attrs(node, attrs) {
        var $a, self = this, rel = nil, window = nil;

        
        
        if (attrs == null) {
          attrs = [];
        };
        if ($truthy(node['$option?']("nofollow"))) {
          rel = "nofollow"};
        if ($truthy((window = node.$attributes()['$[]']("window")))) {
          
          attrs['$<<']("" + " target=\"" + (window) + "\"");
          if ($truthy(($truthy($a = window['$==']("_blank")) ? $a : node['$option?']("noopener")))) {
            attrs['$<<']((function() {if ($truthy(rel)) {
              return "" + " rel=\"" + (rel) + " noopener\""
            } else {
              return " rel=\"noopener\""
            }; return nil; })())};
        } else if ($truthy(rel)) {
          attrs['$<<']("" + " rel=\"" + (rel) + "\"")};
        return attrs;
      }, TMP_Html5Converter_append_link_constraint_attrs_63.$$arity = -2);
      return (Opal.def(self, '$read_svg_contents', TMP_Html5Converter_read_svg_contents_64 = function $$read_svg_contents(node, target) {
        var TMP_65, self = this, svg = nil, old_start_tag = nil, new_start_tag = nil;

        
        if ($truthy((svg = node.$read_contents(target, $hash2(["start", "normalize", "label"], {"start": node.$document().$attr("imagesdir"), "normalize": true, "label": "SVG"}))))) {
          
          if ($truthy(svg['$start_with?']("<svg"))) {
          } else {
            svg = svg.$sub($$($nesting, 'SvgPreambleRx'), "")
          };
          old_start_tag = (new_start_tag = nil);
          $send(["width", "height"], 'each', [], (TMP_65 = function(dim){var self = TMP_65.$$s || this;

          
            
            if (dim == null) {
              dim = nil;
            };
            if ($truthy(node['$attr?'](dim))) {
              
              if ($truthy(new_start_tag)) {
              } else {
                new_start_tag = (old_start_tag = svg.$match($$($nesting, 'SvgStartTagRx'))['$[]'](0)).$gsub($$($nesting, 'DimensionAttributeRx'), "")
              };
              return (new_start_tag = "" + (new_start_tag.$chop()) + " " + (dim) + "=\"" + (node.$attr(dim)) + "px\">");
            } else {
              return nil
            };}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65));
          if ($truthy(new_start_tag)) {
            svg = "" + (new_start_tag) + (svg['$[]'](Opal.Range.$new(old_start_tag.$length(), -1, false)))};};
        return svg;
      }, TMP_Html5Converter_read_svg_contents_64.$$arity = 2), nil) && 'read_svg_contents';
    })($$($nesting, 'Converter'), $$$($$($nesting, 'Converter'), 'BuiltIn'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/extensions"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$to_s', '$[]=', '$config', '$-', '$nil_or_empty?', '$name', '$grep', '$constants', '$include', '$const_get', '$extend', '$attr_reader', '$merge', '$class', '$update', '$raise', '$document', '$==', '$doctype', '$[]', '$+', '$level', '$delete', '$>', '$casecmp', '$new', '$title=', '$sectname=', '$special=', '$fetch', '$numbered=', '$!', '$key?', '$attr?', '$special', '$numbered', '$generate_id', '$title', '$id=', '$update_attributes', '$tr', '$basename', '$create_block', '$assign_caption', '$===', '$next_block', '$dup', '$<<', '$has_more_lines?', '$each', '$define_method', '$unshift', '$shift', '$send', '$empty?', '$size', '$call', '$option', '$flatten', '$respond_to?', '$include?', '$split', '$to_i', '$compact', '$inspect', '$attr_accessor', '$to_set', '$match?', '$resolve_regexp', '$method', '$register', '$values', '$groups', '$arity', '$instance_exec', '$to_proc', '$activate', '$add_document_processor', '$any?', '$select', '$add_syntax_processor', '$to_sym', '$instance_variable_get', '$kind', '$private', '$join', '$map', '$capitalize', '$instance_variable_set', '$resolve_args', '$freeze', '$process_block_given?', '$source_location', '$resolve_class', '$<', '$update_config', '$push', '$as_symbol', '$name=', '$pop', '$-@', '$next_auto_id', '$generate_name', '$class_for_name', '$reduce', '$const_defined?']);
  
  if ($truthy((($a = $$($nesting, 'Asciidoctor', 'skip_raise')) ? 'constant' : nil))) {
  } else {
    self.$require("asciidoctor".$to_s())
  };
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      function $Extensions() {};
      var self = $Extensions = $module($base, 'Extensions', $Extensions);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        function $Processor(){};
        var self = $Processor = $klass($base, $super, 'Processor', $Processor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Processor_initialize_4, TMP_Processor_update_config_5, TMP_Processor_process_6, TMP_Processor_create_section_7, TMP_Processor_create_block_8, TMP_Processor_create_list_9, TMP_Processor_create_list_item_10, TMP_Processor_create_image_block_11, TMP_Processor_create_inline_12, TMP_Processor_parse_content_13, TMP_Processor_14;

        def.config = nil;
        
        (function(self, $parent_nesting) {
          var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_config_1, TMP_option_2, TMP_use_dsl_3;

          
          
          Opal.def(self, '$config', TMP_config_1 = function $$config() {
            var $a, self = this;
            if (self.config == null) self.config = nil;

            return (self.config = ($truthy($a = self.config) ? $a : $hash2([], {})))
          }, TMP_config_1.$$arity = 0);
          
          Opal.def(self, '$option', TMP_option_2 = function $$option(key, default_value) {
            var self = this, $writer = nil;

            
            $writer = [key, default_value];
            $send(self.$config(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, TMP_option_2.$$arity = 2);
          
          Opal.def(self, '$use_dsl', TMP_use_dsl_3 = function $$use_dsl() {
            var self = this;

            if ($truthy(self.$name()['$nil_or_empty?']())) {
              if ($truthy((Opal.Module.$$nesting = $nesting, self.$constants()).$grep("DSL"))) {
                return self.$include(self.$const_get("DSL"))
              } else {
                return nil
              }
            } else if ($truthy((Opal.Module.$$nesting = $nesting, self.$constants()).$grep("DSL"))) {
              return self.$extend(self.$const_get("DSL"))
            } else {
              return nil
            }
          }, TMP_use_dsl_3.$$arity = 0);
          Opal.alias(self, "extend_dsl", "use_dsl");
          return Opal.alias(self, "include_dsl", "use_dsl");
        })(Opal.get_singleton_class(self), $nesting);
        self.$attr_reader("config");
        
        Opal.def(self, '$initialize', TMP_Processor_initialize_4 = function $$initialize(config) {
          var self = this;

          
          
          if (config == null) {
            config = $hash2([], {});
          };
          return (self.config = self.$class().$config().$merge(config));
        }, TMP_Processor_initialize_4.$$arity = -1);
        
        Opal.def(self, '$update_config', TMP_Processor_update_config_5 = function $$update_config(config) {
          var self = this;

          return self.config.$update(config)
        }, TMP_Processor_update_config_5.$$arity = 1);
        
        Opal.def(self, '$process', TMP_Processor_process_6 = function $$process($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return self.$raise($$$('::', 'NotImplementedError'), "" + "Asciidoctor::Extensions::Processor subclass must implement #" + ("process") + " method");
        }, TMP_Processor_process_6.$$arity = -1);
        
        Opal.def(self, '$create_section', TMP_Processor_create_section_7 = function $$create_section(parent, title, attrs, opts) {
          var $a, self = this, doc = nil, book = nil, doctype = nil, level = nil, style = nil, sectname = nil, special = nil, sect = nil, $writer = nil, id = nil;

          
          
          if (opts == null) {
            opts = $hash2([], {});
          };
          doc = parent.$document();
          book = (doctype = doc.$doctype())['$==']("book");
          level = ($truthy($a = opts['$[]']("level")) ? $a : $rb_plus(parent.$level(), 1));
          if ($truthy((style = attrs.$delete("style")))) {
            if ($truthy(($truthy($a = book) ? style['$==']("abstract") : $a))) {
              $a = ["chapter", 1], (sectname = $a[0]), (level = $a[1]), $a
            } else {
              
              $a = [style, true], (sectname = $a[0]), (special = $a[1]), $a;
              if (level['$=='](0)) {
                level = 1};
            }
          } else if ($truthy(book)) {
            sectname = (function() {if (level['$=='](0)) {
              return "part"
            } else {
              
              if ($truthy($rb_gt(level, 1))) {
                return "section"
              } else {
                return "chapter"
              };
            }; return nil; })()
          } else if ($truthy((($a = doctype['$==']("manpage")) ? title.$casecmp("synopsis")['$=='](0) : doctype['$==']("manpage")))) {
            $a = ["synopsis", true], (sectname = $a[0]), (special = $a[1]), $a
          } else {
            sectname = "section"
          };
          sect = $$($nesting, 'Section').$new(parent, level);
          $a = [title, sectname], sect['$title=']($a[0]), sect['$sectname=']($a[1]), $a;
          if ($truthy(special)) {
            
            
            $writer = [true];
            $send(sect, 'special=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(opts.$fetch("numbered", style['$==']("appendix")))) {
              
              $writer = [true];
              $send(sect, 'numbered=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            } else if ($truthy(($truthy($a = opts['$key?']("numbered")['$!']()) ? doc['$attr?']("sectnums", "all") : $a))) {
              
              $writer = [(function() {if ($truthy(($truthy($a = book) ? level['$=='](1) : $a))) {
                return "chapter"
              } else {
                return true
              }; return nil; })()];
              $send(sect, 'numbered=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
          } else if ($truthy($rb_gt(level, 0))) {
            if ($truthy(opts.$fetch("numbered", doc['$attr?']("sectnums")))) {
              
              $writer = [(function() {if ($truthy(sect.$special())) {
                return ($truthy($a = parent.$numbered()) ? true : $a)
              } else {
                return true
              }; return nil; })()];
              $send(sect, 'numbered=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];}
          } else if ($truthy(opts.$fetch("numbered", ($truthy($a = book) ? doc['$attr?']("partnums") : $a)))) {
            
            $writer = [true];
            $send(sect, 'numbered=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ((id = attrs.$delete("id"))['$=='](false)) {
          } else {
            
            $writer = [(($writer = ["id", ($truthy($a = id) ? $a : (function() {if ($truthy(doc['$attr?']("sectids"))) {
              
              return $$($nesting, 'Section').$generate_id(sect.$title(), doc);
            } else {
              return nil
            }; return nil; })())]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
            $send(sect, 'id=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          sect.$update_attributes(attrs);
          return sect;
        }, TMP_Processor_create_section_7.$$arity = -4);
        
        Opal.def(self, '$create_block', TMP_Processor_create_block_8 = function $$create_block(parent, context, source, attrs, opts) {
          var self = this;

          
          
          if (opts == null) {
            opts = $hash2([], {});
          };
          return $$($nesting, 'Block').$new(parent, context, $hash2(["source", "attributes"], {"source": source, "attributes": attrs}).$merge(opts));
        }, TMP_Processor_create_block_8.$$arity = -5);
        
        Opal.def(self, '$create_list', TMP_Processor_create_list_9 = function $$create_list(parent, context, attrs) {
          var self = this, list = nil;

          
          
          if (attrs == null) {
            attrs = nil;
          };
          list = $$($nesting, 'List').$new(parent, context);
          if ($truthy(attrs)) {
            list.$update_attributes(attrs)};
          return list;
        }, TMP_Processor_create_list_9.$$arity = -3);
        
        Opal.def(self, '$create_list_item', TMP_Processor_create_list_item_10 = function $$create_list_item(parent, text) {
          var self = this;

          
          
          if (text == null) {
            text = nil;
          };
          return $$($nesting, 'ListItem').$new(parent, text);
        }, TMP_Processor_create_list_item_10.$$arity = -2);
        
        Opal.def(self, '$create_image_block', TMP_Processor_create_image_block_11 = function $$create_image_block(parent, attrs, opts) {
          var $a, self = this, target = nil, $writer = nil, title = nil, block = nil;

          
          
          if (opts == null) {
            opts = $hash2([], {});
          };
          if ($truthy((target = attrs['$[]']("target")))) {
          } else {
            self.$raise($$$('::', 'ArgumentError'), "Unable to create an image block, target attribute is required")
          };
          ($truthy($a = attrs['$[]']("alt")) ? $a : (($writer = ["alt", (($writer = ["default-alt", $$($nesting, 'Helpers').$basename(target, true).$tr("_-", " ")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          title = (function() {if ($truthy(attrs['$key?']("title"))) {
            
            return attrs.$delete("title");
          } else {
            return nil
          }; return nil; })();
          block = self.$create_block(parent, "image", nil, attrs, opts);
          if ($truthy(title)) {
            
            
            $writer = [title];
            $send(block, 'title=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            block.$assign_caption(attrs.$delete("caption"), ($truthy($a = opts['$[]']("caption_context")) ? $a : "figure"));};
          return block;
        }, TMP_Processor_create_image_block_11.$$arity = -3);
        
        Opal.def(self, '$create_inline', TMP_Processor_create_inline_12 = function $$create_inline(parent, context, text, opts) {
          var self = this;

          
          
          if (opts == null) {
            opts = $hash2([], {});
          };
          return $$($nesting, 'Inline').$new(parent, context, text, opts);
        }, TMP_Processor_create_inline_12.$$arity = -4);
        
        Opal.def(self, '$parse_content', TMP_Processor_parse_content_13 = function $$parse_content(parent, content, attributes) {
          var $a, $b, $c, self = this, reader = nil, block = nil;

          
          
          if (attributes == null) {
            attributes = nil;
          };
          reader = (function() {if ($truthy($$($nesting, 'Reader')['$==='](content))) {
            return content
          } else {
            
            return $$($nesting, 'Reader').$new(content);
          }; return nil; })();
          while ($truthy(($truthy($b = ($truthy($c = (block = $$($nesting, 'Parser').$next_block(reader, parent, (function() {if ($truthy(attributes)) {
            return attributes.$dup()
          } else {
            return $hash2([], {})
          }; return nil; })()))) ? parent['$<<'](block) : $c)) ? $b : reader['$has_more_lines?']()))) {
            
          };
          return parent;
        }, TMP_Processor_parse_content_13.$$arity = -3);
        return $send([["create_paragraph", "create_block", "paragraph"], ["create_open_block", "create_block", "open"], ["create_example_block", "create_block", "example"], ["create_pass_block", "create_block", "pass"], ["create_listing_block", "create_block", "listing"], ["create_literal_block", "create_block", "literal"], ["create_anchor", "create_inline", "anchor"]], 'each', [], (TMP_Processor_14 = function(method_name, delegate_method_name, context){var self = TMP_Processor_14.$$s || this, TMP_15;

        
          
          if (method_name == null) {
            method_name = nil;
          };
          
          if (delegate_method_name == null) {
            delegate_method_name = nil;
          };
          
          if (context == null) {
            context = nil;
          };
          return $send(self, 'define_method', [method_name], (TMP_15 = function($a){var self = TMP_15.$$s || this, $post_args, args;

          
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            args.$unshift(args.$shift(), context);
            return $send(self, 'send', [delegate_method_name].concat(Opal.to_a(args)));}, TMP_15.$$s = self, TMP_15.$$arity = -1, TMP_15));}, TMP_Processor_14.$$s = self, TMP_Processor_14.$$arity = 3, TMP_Processor_14));
      })($nesting[0], null, $nesting);
      (function($base, $parent_nesting) {
        function $ProcessorDsl() {};
        var self = $ProcessorDsl = $module($base, 'ProcessorDsl', $ProcessorDsl);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_ProcessorDsl_option_16, TMP_ProcessorDsl_process_17, TMP_ProcessorDsl_process_block_given$q_18;

        
        
        Opal.def(self, '$option', TMP_ProcessorDsl_option_16 = function $$option(key, value) {
          var self = this, $writer = nil;

          
          $writer = [key, value];
          $send(self.$config(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_ProcessorDsl_option_16.$$arity = 2);
        
        Opal.def(self, '$process', TMP_ProcessorDsl_process_17 = function $$process($a) {
          var $iter = TMP_ProcessorDsl_process_17.$$p, block = $iter || nil, $post_args, args, $b, self = this;
          if (self.process_block == null) self.process_block = nil;

          if ($iter) TMP_ProcessorDsl_process_17.$$p = null;
          
          
          if ($iter) TMP_ProcessorDsl_process_17.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ((block !== nil)) {
            
            if ($truthy(args['$empty?']())) {
            } else {
              self.$raise($$$('::', 'ArgumentError'), "" + "wrong number of arguments (given " + (args.$size()) + ", expected 0)")
            };
            return (self.process_block = block);
          } else if ($truthy((($b = self['process_block'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
            return $send(self.process_block, 'call', Opal.to_a(args))
          } else {
            return self.$raise($$$('::', 'NotImplementedError'))
          };
        }, TMP_ProcessorDsl_process_17.$$arity = -1);
        
        Opal.def(self, '$process_block_given?', TMP_ProcessorDsl_process_block_given$q_18 = function() {
          var $a, self = this;

          return (($a = self['process_block'], $a != null && $a !== nil) ? 'instance-variable' : nil)
        }, TMP_ProcessorDsl_process_block_given$q_18.$$arity = 0);
      })($nesting[0], $nesting);
      (function($base, $parent_nesting) {
        function $DocumentProcessorDsl() {};
        var self = $DocumentProcessorDsl = $module($base, 'DocumentProcessorDsl', $DocumentProcessorDsl);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_DocumentProcessorDsl_prefer_19;

        
        self.$include($$($nesting, 'ProcessorDsl'));
        
        Opal.def(self, '$prefer', TMP_DocumentProcessorDsl_prefer_19 = function $$prefer() {
          var self = this;

          return self.$option("position", ">>")
        }, TMP_DocumentProcessorDsl_prefer_19.$$arity = 0);
      })($nesting[0], $nesting);
      (function($base, $parent_nesting) {
        function $SyntaxProcessorDsl() {};
        var self = $SyntaxProcessorDsl = $module($base, 'SyntaxProcessorDsl', $SyntaxProcessorDsl);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_SyntaxProcessorDsl_named_20, TMP_SyntaxProcessorDsl_content_model_21, TMP_SyntaxProcessorDsl_positional_attrs_22, TMP_SyntaxProcessorDsl_default_attrs_23, TMP_SyntaxProcessorDsl_resolves_attributes_24;

        
        self.$include($$($nesting, 'ProcessorDsl'));
        
        Opal.def(self, '$named', TMP_SyntaxProcessorDsl_named_20 = function $$named(value) {
          var self = this;

          if ($truthy($$($nesting, 'Processor')['$==='](self))) {
            return (self.name = value)
          } else {
            return self.$option("name", value)
          }
        }, TMP_SyntaxProcessorDsl_named_20.$$arity = 1);
        Opal.alias(self, "match_name", "named");
        
        Opal.def(self, '$content_model', TMP_SyntaxProcessorDsl_content_model_21 = function $$content_model(value) {
          var self = this;

          return self.$option("content_model", value)
        }, TMP_SyntaxProcessorDsl_content_model_21.$$arity = 1);
        Opal.alias(self, "parse_content_as", "content_model");
        Opal.alias(self, "parses_content_as", "content_model");
        
        Opal.def(self, '$positional_attrs', TMP_SyntaxProcessorDsl_positional_attrs_22 = function $$positional_attrs($a) {
          var $post_args, value, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          return self.$option("pos_attrs", value.$flatten());
        }, TMP_SyntaxProcessorDsl_positional_attrs_22.$$arity = -1);
        Opal.alias(self, "name_attributes", "positional_attrs");
        Opal.alias(self, "name_positional_attributes", "positional_attrs");
        
        Opal.def(self, '$default_attrs', TMP_SyntaxProcessorDsl_default_attrs_23 = function $$default_attrs(value) {
          var self = this;

          return self.$option("default_attrs", value)
        }, TMP_SyntaxProcessorDsl_default_attrs_23.$$arity = 1);
        
        Opal.def(self, '$resolves_attributes', TMP_SyntaxProcessorDsl_resolves_attributes_24 = function $$resolves_attributes($a) {
          var $post_args, args, $b, TMP_25, TMP_26, self = this, $case = nil, names = nil, defaults = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ($truthy($rb_gt(args.$size(), 1))) {
          } else if ($truthy((args = args.$fetch(0, true))['$respond_to?']("to_sym"))) {
            args = [args]};
          return (function() {$case = args;
          if (true['$===']($case)) {
          self.$option("pos_attrs", []);
          return self.$option("default_attrs", $hash2([], {}));}
          else if ($$$('::', 'Array')['$===']($case)) {
          $b = [[], $hash2([], {})], (names = $b[0]), (defaults = $b[1]), $b;
          $send(args, 'each', [], (TMP_25 = function(arg){var self = TMP_25.$$s || this, $c, $d, name = nil, value = nil, idx = nil, $writer = nil;

          
            
            if (arg == null) {
              arg = nil;
            };
            if ($truthy((arg = arg.$to_s())['$include?']("="))) {
              
              $d = arg.$split("=", 2), $c = Opal.to_ary($d), (name = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;
              if ($truthy(name['$include?'](":"))) {
                
                $d = name.$split(":", 2), $c = Opal.to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (name = ($c[1] == null ? nil : $c[1])), $d;
                idx = (function() {if (idx['$==']("@")) {
                  return names.$size()
                } else {
                  return idx.$to_i()
                }; return nil; })();
                
                $writer = [idx, name];
                $send(names, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;};
              
              $writer = [name, value];
              $send(defaults, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            } else if ($truthy(arg['$include?'](":"))) {
              
              $d = arg.$split(":", 2), $c = Opal.to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (name = ($c[1] == null ? nil : $c[1])), $d;
              idx = (function() {if (idx['$==']("@")) {
                return names.$size()
              } else {
                return idx.$to_i()
              }; return nil; })();
              
              $writer = [idx, name];
              $send(names, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            } else {
              return names['$<<'](arg)
            };}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25));
          self.$option("pos_attrs", names.$compact());
          return self.$option("default_attrs", defaults);}
          else if ($$$('::', 'Hash')['$===']($case)) {
          $b = [[], $hash2([], {})], (names = $b[0]), (defaults = $b[1]), $b;
          $send(args, 'each', [], (TMP_26 = function(key, val){var self = TMP_26.$$s || this, $c, $d, name = nil, idx = nil, $writer = nil;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (val == null) {
              val = nil;
            };
            if ($truthy((name = key.$to_s())['$include?'](":"))) {
              
              $d = name.$split(":", 2), $c = Opal.to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (name = ($c[1] == null ? nil : $c[1])), $d;
              idx = (function() {if (idx['$==']("@")) {
                return names.$size()
              } else {
                return idx.$to_i()
              }; return nil; })();
              
              $writer = [idx, name];
              $send(names, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            if ($truthy(val)) {
              
              $writer = [name, val];
              $send(defaults, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            } else {
              return nil
            };}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26));
          self.$option("pos_attrs", names.$compact());
          return self.$option("default_attrs", defaults);}
          else {return self.$raise($$$('::', 'ArgumentError'), "" + "unsupported attributes specification for macro: " + (args.$inspect()))}})();
        }, TMP_SyntaxProcessorDsl_resolves_attributes_24.$$arity = -1);
        Opal.alias(self, "resolve_attributes", "resolves_attributes");
      })($nesting[0], $nesting);
      (function($base, $super, $parent_nesting) {
        function $Preprocessor(){};
        var self = $Preprocessor = $klass($base, $super, 'Preprocessor', $Preprocessor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Preprocessor_process_27;

        return (Opal.def(self, '$process', TMP_Preprocessor_process_27 = function $$process(document, reader) {
          var self = this;

          return self.$raise($$$('::', 'NotImplementedError'), "" + "Asciidoctor::Extensions::Preprocessor subclass must implement #" + ("process") + " method")
        }, TMP_Preprocessor_process_27.$$arity = 2), nil) && 'process'
      })($nesting[0], $$($nesting, 'Processor'), $nesting);
      Opal.const_set($$($nesting, 'Preprocessor'), 'DSL', $$($nesting, 'DocumentProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $TreeProcessor(){};
        var self = $TreeProcessor = $klass($base, $super, 'TreeProcessor', $TreeProcessor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_TreeProcessor_process_28;

        return (Opal.def(self, '$process', TMP_TreeProcessor_process_28 = function $$process(document) {
          var self = this;

          return self.$raise($$$('::', 'NotImplementedError'), "" + "Asciidoctor::Extensions::TreeProcessor subclass must implement #" + ("process") + " method")
        }, TMP_TreeProcessor_process_28.$$arity = 1), nil) && 'process'
      })($nesting[0], $$($nesting, 'Processor'), $nesting);
      Opal.const_set($$($nesting, 'TreeProcessor'), 'DSL', $$($nesting, 'DocumentProcessorDsl'));
      Opal.const_set($nesting[0], 'Treeprocessor', $$($nesting, 'TreeProcessor'));
      (function($base, $super, $parent_nesting) {
        function $Postprocessor(){};
        var self = $Postprocessor = $klass($base, $super, 'Postprocessor', $Postprocessor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Postprocessor_process_29;

        return (Opal.def(self, '$process', TMP_Postprocessor_process_29 = function $$process(document, output) {
          var self = this;

          return self.$raise($$$('::', 'NotImplementedError'), "" + "Asciidoctor::Extensions::Postprocessor subclass must implement #" + ("process") + " method")
        }, TMP_Postprocessor_process_29.$$arity = 2), nil) && 'process'
      })($nesting[0], $$($nesting, 'Processor'), $nesting);
      Opal.const_set($$($nesting, 'Postprocessor'), 'DSL', $$($nesting, 'DocumentProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $IncludeProcessor(){};
        var self = $IncludeProcessor = $klass($base, $super, 'IncludeProcessor', $IncludeProcessor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_IncludeProcessor_process_30, TMP_IncludeProcessor_handles$q_31;

        
        
        Opal.def(self, '$process', TMP_IncludeProcessor_process_30 = function $$process(document, reader, target, attributes) {
          var self = this;

          return self.$raise($$$('::', 'NotImplementedError'), "" + "Asciidoctor::Extensions::IncludeProcessor subclass must implement #" + ("process") + " method")
        }, TMP_IncludeProcessor_process_30.$$arity = 4);
        return (Opal.def(self, '$handles?', TMP_IncludeProcessor_handles$q_31 = function(target) {
          var self = this;

          return true
        }, TMP_IncludeProcessor_handles$q_31.$$arity = 1), nil) && 'handles?';
      })($nesting[0], $$($nesting, 'Processor'), $nesting);
      (function($base, $parent_nesting) {
        function $IncludeProcessorDsl() {};
        var self = $IncludeProcessorDsl = $module($base, 'IncludeProcessorDsl', $IncludeProcessorDsl);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_IncludeProcessorDsl_handles$q_32;

        
        self.$include($$($nesting, 'DocumentProcessorDsl'));
        
        Opal.def(self, '$handles?', TMP_IncludeProcessorDsl_handles$q_32 = function($a) {
          var $iter = TMP_IncludeProcessorDsl_handles$q_32.$$p, block = $iter || nil, $post_args, args, $b, self = this;
          if (self.handles_block == null) self.handles_block = nil;

          if ($iter) TMP_IncludeProcessorDsl_handles$q_32.$$p = null;
          
          
          if ($iter) TMP_IncludeProcessorDsl_handles$q_32.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ((block !== nil)) {
            
            if ($truthy(args['$empty?']())) {
            } else {
              self.$raise($$$('::', 'ArgumentError'), "" + "wrong number of arguments (given " + (args.$size()) + ", expected 0)")
            };
            return (self.handles_block = block);
          } else if ($truthy((($b = self['handles_block'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
            return self.handles_block.$call(args['$[]'](0))
          } else {
            return true
          };
        }, TMP_IncludeProcessorDsl_handles$q_32.$$arity = -1);
      })($nesting[0], $nesting);
      Opal.const_set($$($nesting, 'IncludeProcessor'), 'DSL', $$($nesting, 'IncludeProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $DocinfoProcessor(){};
        var self = $DocinfoProcessor = $klass($base, $super, 'DocinfoProcessor', $DocinfoProcessor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_DocinfoProcessor_initialize_33, TMP_DocinfoProcessor_process_34;

        def.config = nil;
        
        self.$attr_accessor("location");
        
        Opal.def(self, '$initialize', TMP_DocinfoProcessor_initialize_33 = function $$initialize(config) {
          var $a, $iter = TMP_DocinfoProcessor_initialize_33.$$p, $yield = $iter || nil, self = this, $writer = nil;

          if ($iter) TMP_DocinfoProcessor_initialize_33.$$p = null;
          
          
          if (config == null) {
            config = $hash2([], {});
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_DocinfoProcessor_initialize_33, false), [config], null);
          return ($truthy($a = self.config['$[]']("location")) ? $a : (($writer = ["location", "head"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        }, TMP_DocinfoProcessor_initialize_33.$$arity = -1);
        return (Opal.def(self, '$process', TMP_DocinfoProcessor_process_34 = function $$process(document) {
          var self = this;

          return self.$raise($$$('::', 'NotImplementedError'), "" + "Asciidoctor::Extensions::DocinfoProcessor subclass must implement #" + ("process") + " method")
        }, TMP_DocinfoProcessor_process_34.$$arity = 1), nil) && 'process';
      })($nesting[0], $$($nesting, 'Processor'), $nesting);
      (function($base, $parent_nesting) {
        function $DocinfoProcessorDsl() {};
        var self = $DocinfoProcessorDsl = $module($base, 'DocinfoProcessorDsl', $DocinfoProcessorDsl);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_DocinfoProcessorDsl_at_location_35;

        
        self.$include($$($nesting, 'DocumentProcessorDsl'));
        
        Opal.def(self, '$at_location', TMP_DocinfoProcessorDsl_at_location_35 = function $$at_location(value) {
          var self = this;

          return self.$option("location", value)
        }, TMP_DocinfoProcessorDsl_at_location_35.$$arity = 1);
      })($nesting[0], $nesting);
      Opal.const_set($$($nesting, 'DocinfoProcessor'), 'DSL', $$($nesting, 'DocinfoProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $BlockProcessor(){};
        var self = $BlockProcessor = $klass($base, $super, 'BlockProcessor', $BlockProcessor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_BlockProcessor_initialize_36, TMP_BlockProcessor_process_37;

        def.config = nil;
        
        self.$attr_accessor("name");
        
        Opal.def(self, '$initialize', TMP_BlockProcessor_initialize_36 = function $$initialize(name, config) {
          var $a, $iter = TMP_BlockProcessor_initialize_36.$$p, $yield = $iter || nil, self = this, $case = nil, $writer = nil;

          if ($iter) TMP_BlockProcessor_initialize_36.$$p = null;
          
          
          if (name == null) {
            name = nil;
          };
          
          if (config == null) {
            config = $hash2([], {});
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_BlockProcessor_initialize_36, false), [config], null);
          self.name = ($truthy($a = name) ? $a : self.config['$[]']("name"));
          $case = self.config['$[]']("contexts");
          if ($$$('::', 'NilClass')['$===']($case)) {($truthy($a = self.config['$[]']("contexts")) ? $a : (($writer = ["contexts", ["open", "paragraph"].$to_set()]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))}
          else if ($$$('::', 'Symbol')['$===']($case)) {
          $writer = ["contexts", [self.config['$[]']("contexts")].$to_set()];
          $send(self.config, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else {
          $writer = ["contexts", self.config['$[]']("contexts").$to_set()];
          $send(self.config, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
          return ($truthy($a = self.config['$[]']("content_model")) ? $a : (($writer = ["content_model", "compound"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        }, TMP_BlockProcessor_initialize_36.$$arity = -1);
        return (Opal.def(self, '$process', TMP_BlockProcessor_process_37 = function $$process(parent, reader, attributes) {
          var self = this;

          return self.$raise($$$('::', 'NotImplementedError'), "" + "Asciidoctor::Extensions::BlockProcessor subclass must implement #" + ("process") + " method")
        }, TMP_BlockProcessor_process_37.$$arity = 3), nil) && 'process';
      })($nesting[0], $$($nesting, 'Processor'), $nesting);
      (function($base, $parent_nesting) {
        function $BlockProcessorDsl() {};
        var self = $BlockProcessorDsl = $module($base, 'BlockProcessorDsl', $BlockProcessorDsl);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_BlockProcessorDsl_contexts_38;

        
        self.$include($$($nesting, 'SyntaxProcessorDsl'));
        
        Opal.def(self, '$contexts', TMP_BlockProcessorDsl_contexts_38 = function $$contexts($a) {
          var $post_args, value, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          return self.$option("contexts", value.$flatten().$to_set());
        }, TMP_BlockProcessorDsl_contexts_38.$$arity = -1);
        Opal.alias(self, "on_contexts", "contexts");
        Opal.alias(self, "on_context", "contexts");
        Opal.alias(self, "bound_to", "contexts");
      })($nesting[0], $nesting);
      Opal.const_set($$($nesting, 'BlockProcessor'), 'DSL', $$($nesting, 'BlockProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $MacroProcessor(){};
        var self = $MacroProcessor = $klass($base, $super, 'MacroProcessor', $MacroProcessor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_MacroProcessor_initialize_39, TMP_MacroProcessor_process_40;

        def.config = nil;
        
        self.$attr_accessor("name");
        
        Opal.def(self, '$initialize', TMP_MacroProcessor_initialize_39 = function $$initialize(name, config) {
          var $a, $iter = TMP_MacroProcessor_initialize_39.$$p, $yield = $iter || nil, self = this, $writer = nil;

          if ($iter) TMP_MacroProcessor_initialize_39.$$p = null;
          
          
          if (name == null) {
            name = nil;
          };
          
          if (config == null) {
            config = $hash2([], {});
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_MacroProcessor_initialize_39, false), [config], null);
          self.name = ($truthy($a = name) ? $a : self.config['$[]']("name"));
          return ($truthy($a = self.config['$[]']("content_model")) ? $a : (($writer = ["content_model", "attributes"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        }, TMP_MacroProcessor_initialize_39.$$arity = -1);
        return (Opal.def(self, '$process', TMP_MacroProcessor_process_40 = function $$process(parent, target, attributes) {
          var self = this;

          return self.$raise($$$('::', 'NotImplementedError'), "" + "Asciidoctor::Extensions::MacroProcessor subclass must implement #" + ("process") + " method")
        }, TMP_MacroProcessor_process_40.$$arity = 3), nil) && 'process';
      })($nesting[0], $$($nesting, 'Processor'), $nesting);
      (function($base, $parent_nesting) {
        function $MacroProcessorDsl() {};
        var self = $MacroProcessorDsl = $module($base, 'MacroProcessorDsl', $MacroProcessorDsl);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_MacroProcessorDsl_resolves_attributes_41;

        
        self.$include($$($nesting, 'SyntaxProcessorDsl'));
        
        Opal.def(self, '$resolves_attributes', TMP_MacroProcessorDsl_resolves_attributes_41 = function $$resolves_attributes($a) {
          var $post_args, args, $b, $iter = TMP_MacroProcessorDsl_resolves_attributes_41.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) TMP_MacroProcessorDsl_resolves_attributes_41.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ($truthy((($b = args.$size()['$=='](1)) ? args['$[]'](0)['$!']() : args.$size()['$=='](1)))) {
            
            self.$option("content_model", "text");
            return nil;};
          $send(self, Opal.find_super_dispatcher(self, 'resolves_attributes', TMP_MacroProcessorDsl_resolves_attributes_41, false), $zuper, $iter);
          return self.$option("content_model", "attributes");
        }, TMP_MacroProcessorDsl_resolves_attributes_41.$$arity = -1);
        Opal.alias(self, "resolve_attributes", "resolves_attributes");
      })($nesting[0], $nesting);
      (function($base, $super, $parent_nesting) {
        function $BlockMacroProcessor(){};
        var self = $BlockMacroProcessor = $klass($base, $super, 'BlockMacroProcessor', $BlockMacroProcessor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_BlockMacroProcessor_name_42;

        def.name = nil;
        return (Opal.def(self, '$name', TMP_BlockMacroProcessor_name_42 = function $$name() {
          var self = this;

          
          if ($truthy($$($nesting, 'MacroNameRx')['$match?'](self.name.$to_s()))) {
          } else {
            self.$raise($$$('::', 'ArgumentError'), "" + "invalid name for block macro: " + (self.name))
          };
          return self.name;
        }, TMP_BlockMacroProcessor_name_42.$$arity = 0), nil) && 'name'
      })($nesting[0], $$($nesting, 'MacroProcessor'), $nesting);
      Opal.const_set($$($nesting, 'BlockMacroProcessor'), 'DSL', $$($nesting, 'MacroProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $InlineMacroProcessor(){};
        var self = $InlineMacroProcessor = $klass($base, $super, 'InlineMacroProcessor', $InlineMacroProcessor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_InlineMacroProcessor_regexp_43, TMP_InlineMacroProcessor_resolve_regexp_44;

        def.config = def.name = nil;
        
        (Opal.class_variable_set($InlineMacroProcessor, '@@rx_cache', $hash2([], {})));
        
        Opal.def(self, '$regexp', TMP_InlineMacroProcessor_regexp_43 = function $$regexp() {
          var $a, self = this, $writer = nil;

          return ($truthy($a = self.config['$[]']("regexp")) ? $a : (($writer = ["regexp", self.$resolve_regexp(self.name.$to_s(), self.config['$[]']("format"))]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, TMP_InlineMacroProcessor_regexp_43.$$arity = 0);
        return (Opal.def(self, '$resolve_regexp', TMP_InlineMacroProcessor_resolve_regexp_44 = function $$resolve_regexp(name, format) {
          var $a, $b, self = this, $writer = nil;

          
          if ($truthy($$($nesting, 'MacroNameRx')['$match?'](name))) {
          } else {
            self.$raise($$$('::', 'ArgumentError'), "" + "invalid name for inline macro: " + (name))
          };
          return ($truthy($a = (($b = $InlineMacroProcessor.$$cvars['@@rx_cache']) == null ? nil : $b)['$[]']([name, format])) ? $a : (($writer = [[name, format], new RegExp("" + "\\\\?" + (name) + ":" + ((function() {if (format['$==']("short")) {
            return "(){0}"
          } else {
            return "(\\S+?)"
          }; return nil; })()) + "\\[(|.*?[^\\\\])\\]")]), $send((($b = $InlineMacroProcessor.$$cvars['@@rx_cache']) == null ? nil : $b), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        }, TMP_InlineMacroProcessor_resolve_regexp_44.$$arity = 2), nil) && 'resolve_regexp';
      })($nesting[0], $$($nesting, 'MacroProcessor'), $nesting);
      (function($base, $parent_nesting) {
        function $InlineMacroProcessorDsl() {};
        var self = $InlineMacroProcessorDsl = $module($base, 'InlineMacroProcessorDsl', $InlineMacroProcessorDsl);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_InlineMacroProcessorDsl_with_format_45, TMP_InlineMacroProcessorDsl_matches_46;

        
        self.$include($$($nesting, 'MacroProcessorDsl'));
        
        Opal.def(self, '$with_format', TMP_InlineMacroProcessorDsl_with_format_45 = function $$with_format(value) {
          var self = this;

          return self.$option("format", value)
        }, TMP_InlineMacroProcessorDsl_with_format_45.$$arity = 1);
        Opal.alias(self, "using_format", "with_format");
        
        Opal.def(self, '$matches', TMP_InlineMacroProcessorDsl_matches_46 = function $$matches(value) {
          var self = this;

          return self.$option("regexp", value)
        }, TMP_InlineMacroProcessorDsl_matches_46.$$arity = 1);
        Opal.alias(self, "match", "matches");
        Opal.alias(self, "matching", "matches");
      })($nesting[0], $nesting);
      Opal.const_set($$($nesting, 'InlineMacroProcessor'), 'DSL', $$($nesting, 'InlineMacroProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $Extension(){};
        var self = $Extension = $klass($base, $super, 'Extension', $Extension);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Extension_initialize_47;

        
        self.$attr_reader("kind");
        self.$attr_reader("config");
        self.$attr_reader("instance");
        return (Opal.def(self, '$initialize', TMP_Extension_initialize_47 = function $$initialize(kind, instance, config) {
          var self = this;

          
          self.kind = kind;
          self.instance = instance;
          return (self.config = config);
        }, TMP_Extension_initialize_47.$$arity = 3), nil) && 'initialize';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        function $ProcessorExtension(){};
        var self = $ProcessorExtension = $klass($base, $super, 'ProcessorExtension', $ProcessorExtension);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_ProcessorExtension_initialize_48;

        
        self.$attr_reader("process_method");
        return (Opal.def(self, '$initialize', TMP_ProcessorExtension_initialize_48 = function $$initialize(kind, instance, process_method) {
          var $a, $iter = TMP_ProcessorExtension_initialize_48.$$p, $yield = $iter || nil, self = this;

          if ($iter) TMP_ProcessorExtension_initialize_48.$$p = null;
          
          
          if (process_method == null) {
            process_method = nil;
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ProcessorExtension_initialize_48, false), [kind, instance, instance.$config()], null);
          return (self.process_method = ($truthy($a = process_method) ? $a : instance.$method("process")));
        }, TMP_ProcessorExtension_initialize_48.$$arity = -3), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'Extension'), $nesting);
      (function($base, $super, $parent_nesting) {
        function $Group(){};
        var self = $Group = $klass($base, $super, 'Group', $Group);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Group_activate_50;

        
        (function(self, $parent_nesting) {
          var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_register_49;

          return (Opal.def(self, '$register', TMP_register_49 = function $$register(name) {
            var self = this;

            
            
            if (name == null) {
              name = nil;
            };
            return $$($nesting, 'Extensions').$register(name, self);
          }, TMP_register_49.$$arity = -1), nil) && 'register'
        })(Opal.get_singleton_class(self), $nesting);
        return (Opal.def(self, '$activate', TMP_Group_activate_50 = function $$activate(registry) {
          var self = this;

          return self.$raise($$$('::', 'NotImplementedError'))
        }, TMP_Group_activate_50.$$arity = 1), nil) && 'activate';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        function $Registry(){};
        var self = $Registry = $klass($base, $super, 'Registry', $Registry);

        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Registry_initialize_51, TMP_Registry_activate_52, TMP_Registry_preprocessor_54, TMP_Registry_preprocessors$q_55, TMP_Registry_preprocessors_56, TMP_Registry_tree_processor_57, TMP_Registry_tree_processors$q_58, TMP_Registry_tree_processors_59, TMP_Registry_postprocessor_60, TMP_Registry_postprocessors$q_61, TMP_Registry_postprocessors_62, TMP_Registry_include_processor_63, TMP_Registry_include_processors$q_64, TMP_Registry_include_processors_65, TMP_Registry_docinfo_processor_66, TMP_Registry_docinfo_processors$q_67, TMP_Registry_docinfo_processors_69, TMP_Registry_block_71, TMP_Registry_blocks$q_72, TMP_Registry_registered_for_block$q_73, TMP_Registry_find_block_extension_74, TMP_Registry_block_macro_75, TMP_Registry_block_macros$q_76, TMP_Registry_registered_for_block_macro$q_77, TMP_Registry_find_block_macro_extension_78, TMP_Registry_inline_macro_79, TMP_Registry_inline_macros$q_80, TMP_Registry_registered_for_inline_macro$q_81, TMP_Registry_find_inline_macro_extension_82, TMP_Registry_inline_macros_83, TMP_Registry_prefer_84, TMP_Registry_add_document_processor_85, TMP_Registry_add_syntax_processor_87, TMP_Registry_resolve_args_89, TMP_Registry_as_symbol_90;

        def.groups = def.preprocessor_extensions = def.tree_processor_extensions = def.postprocessor_extensions = def.include_processor_extensions = def.docinfo_processor_extensions = def.block_extensions = def.block_macro_extensions = def.inline_macro_extensions = nil;
        
        self.$attr_reader("document");
        self.$attr_reader("groups");
        
        Opal.def(self, '$initialize', TMP_Registry_initialize_51 = function $$initialize(groups) {
          var self = this;

          
          
          if (groups == null) {
            groups = $hash2([], {});
          };
          self.groups = groups;
          self.preprocessor_extensions = (self.tree_processor_extensions = (self.postprocessor_extensions = (self.include_processor_extensions = (self.docinfo_processor_extensions = (self.block_extensions = (self.block_macro_extensions = (self.inline_macro_extensions = nil)))))));
          return (self.document = nil);
        }, TMP_Registry_initialize_51.$$arity = -1);
        
        Opal.def(self, '$activate', TMP_Registry_activate_52 = function $$activate(document) {
          var TMP_53, self = this, ext_groups = nil;

          
          self.document = document;
          if ($truthy((ext_groups = $rb_plus($$($nesting, 'Extensions').$groups().$values(), self.groups.$values()))['$empty?']())) {
          } else {
            $send(ext_groups, 'each', [], (TMP_53 = function(group){var self = TMP_53.$$s || this, $case = nil;

            
              
              if (group == null) {
                group = nil;
              };
              return (function() {$case = group;
              if ($$$('::', 'Proc')['$===']($case)) {return (function() {$case = group.$arity();
              if ((0)['$===']($case) || (-1)['$===']($case)) {return $send(self, 'instance_exec', [], group.$to_proc())}
              else if ((1)['$===']($case)) {return group.$call(self)}
              else { return nil }})()}
              else if ($$$('::', 'Class')['$===']($case)) {return group.$new().$activate(self)}
              else {return group.$activate(self)}})();}, TMP_53.$$s = self, TMP_53.$$arity = 1, TMP_53))
          };
          return self;
        }, TMP_Registry_activate_52.$$arity = 1);
        
        Opal.def(self, '$preprocessor', TMP_Registry_preprocessor_54 = function $$preprocessor($a) {
          var $iter = TMP_Registry_preprocessor_54.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) TMP_Registry_preprocessor_54.$$p = null;
          
          
          if ($iter) TMP_Registry_preprocessor_54.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'add_document_processor', ["preprocessor", args], block.$to_proc());
        }, TMP_Registry_preprocessor_54.$$arity = -1);
        
        Opal.def(self, '$preprocessors?', TMP_Registry_preprocessors$q_55 = function() {
          var self = this;

          return self.preprocessor_extensions['$!']()['$!']()
        }, TMP_Registry_preprocessors$q_55.$$arity = 0);
        
        Opal.def(self, '$preprocessors', TMP_Registry_preprocessors_56 = function $$preprocessors() {
          var self = this;

          return self.preprocessor_extensions
        }, TMP_Registry_preprocessors_56.$$arity = 0);
        
        Opal.def(self, '$tree_processor', TMP_Registry_tree_processor_57 = function $$tree_processor($a) {
          var $iter = TMP_Registry_tree_processor_57.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) TMP_Registry_tree_processor_57.$$p = null;
          
          
          if ($iter) TMP_Registry_tree_processor_57.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'add_document_processor', ["tree_processor", args], block.$to_proc());
        }, TMP_Registry_tree_processor_57.$$arity = -1);
        
        Opal.def(self, '$tree_processors?', TMP_Registry_tree_processors$q_58 = function() {
          var self = this;

          return self.tree_processor_extensions['$!']()['$!']()
        }, TMP_Registry_tree_processors$q_58.$$arity = 0);
        
        Opal.def(self, '$tree_processors', TMP_Registry_tree_processors_59 = function $$tree_processors() {
          var self = this;

          return self.tree_processor_extensions
        }, TMP_Registry_tree_processors_59.$$arity = 0);
        Opal.alias(self, "treeprocessor", "tree_processor");
        Opal.alias(self, "treeprocessors?", "tree_processors?");
        Opal.alias(self, "treeprocessors", "tree_processors");
        
        Opal.def(self, '$postprocessor', TMP_Registry_postprocessor_60 = function $$postprocessor($a) {
          var $iter = TMP_Registry_postprocessor_60.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) TMP_Registry_postprocessor_60.$$p = null;
          
          
          if ($iter) TMP_Registry_postprocessor_60.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'add_document_processor', ["postprocessor", args], block.$to_proc());
        }, TMP_Registry_postprocessor_60.$$arity = -1);
        
        Opal.def(self, '$postprocessors?', TMP_Registry_postprocessors$q_61 = function() {
          var self = this;

          return self.postprocessor_extensions['$!']()['$!']()
        }, TMP_Registry_postprocessors$q_61.$$arity = 0);
        
        Opal.def(self, '$postprocessors', TMP_Registry_postprocessors_62 = function $$postprocessors() {
          var self = this;

          return self.postprocessor_extensions
        }, TMP_Registry_postprocessors_62.$$arity = 0);
        
        Opal.def(self, '$include_processor', TMP_Registry_include_processor_63 = function $$include_processor($a) {
          var $iter = TMP_Registry_include_processor_63.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) TMP_Registry_include_processor_63.$$p = null;
          
          
          if ($iter) TMP_Registry_include_processor_63.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'add_document_processor', ["include_processor", args], block.$to_proc());
        }, TMP_Registry_include_processor_63.$$arity = -1);
        
        Opal.def(self, '$include_processors?', TMP_Registry_include_processors$q_64 = function() {
          var self = this;

          return self.include_processor_extensions['$!']()['$!']()
        }, TMP_Registry_include_processors$q_64.$$arity = 0);
        
        Opal.def(self, '$include_processors', TMP_Registry_include_processors_65 = function $$include_processors() {
          var self = this;

          return self.include_processor_extensions
        }, TMP_Registry_include_processors_65.$$arity = 0);
        
        Opal.def(self, '$docinfo_processor', TMP_Registry_docinfo_processor_66 = function $$docinfo_processor($a) {
          var $iter = TMP_Registry_docinfo_processor_66.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) TMP_Registry_docinfo_processor_66.$$p = null;
          
          
          if ($iter) TMP_Registry_docinfo_processor_66.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'add_document_processor', ["docinfo_processor", args], block.$to_proc());
        }, TMP_Registry_docinfo_processor_66.$$arity = -1);
        
        Opal.def(self, '$docinfo_processors?', TMP_Registry_docinfo_processors$q_67 = function(location) {
          var TMP_68, self = this;

          
          
          if (location == null) {
            location = nil;
          };
          if ($truthy(self.docinfo_processor_extensions)) {
            if ($truthy(location)) {
              return $send(self.docinfo_processor_extensions, 'any?', [], (TMP_68 = function(ext){var self = TMP_68.$$s || this;

              
                
                if (ext == null) {
                  ext = nil;
                };
                return ext.$config()['$[]']("location")['$=='](location);}, TMP_68.$$s = self, TMP_68.$$arity = 1, TMP_68))
            } else {
              return true
            }
          } else {
            return false
          };
        }, TMP_Registry_docinfo_processors$q_67.$$arity = -1);
        
        Opal.def(self, '$docinfo_processors', TMP_Registry_docinfo_processors_69 = function $$docinfo_processors(location) {
          var TMP_70, self = this;

          
          
          if (location == null) {
            location = nil;
          };
          if ($truthy(self.docinfo_processor_extensions)) {
            if ($truthy(location)) {
              return $send(self.docinfo_processor_extensions, 'select', [], (TMP_70 = function(ext){var self = TMP_70.$$s || this;

              
                
                if (ext == null) {
                  ext = nil;
                };
                return ext.$config()['$[]']("location")['$=='](location);}, TMP_70.$$s = self, TMP_70.$$arity = 1, TMP_70))
            } else {
              return self.docinfo_processor_extensions
            }
          } else {
            return nil
          };
        }, TMP_Registry_docinfo_processors_69.$$arity = -1);
        
        Opal.def(self, '$block', TMP_Registry_block_71 = function $$block($a) {
          var $iter = TMP_Registry_block_71.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) TMP_Registry_block_71.$$p = null;
          
          
          if ($iter) TMP_Registry_block_71.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'add_syntax_processor', ["block", args], block.$to_proc());
        }, TMP_Registry_block_71.$$arity = -1);
        
        Opal.def(self, '$blocks?', TMP_Registry_blocks$q_72 = function() {
          var self = this;

          return self.block_extensions['$!']()['$!']()
        }, TMP_Registry_blocks$q_72.$$arity = 0);
        
        Opal.def(self, '$registered_for_block?', TMP_Registry_registered_for_block$q_73 = function(name, context) {
          var self = this, ext = nil;

          if ($truthy((ext = self.block_extensions['$[]'](name.$to_sym())))) {
            if ($truthy(ext.$config()['$[]']("contexts")['$include?'](context))) {
              return ext
            } else {
              return false
            }
          } else {
            return false
          }
        }, TMP_Registry_registered_for_block$q_73.$$arity = 2);
        
        Opal.def(self, '$find_block_extension', TMP_Registry_find_block_extension_74 = function $$find_block_extension(name) {
          var self = this;

          return self.block_extensions['$[]'](name.$to_sym())
        }, TMP_Registry_find_block_extension_74.$$arity = 1);
        
        Opal.def(self, '$block_macro', TMP_Registry_block_macro_75 = function $$block_macro($a) {
          var $iter = TMP_Registry_block_macro_75.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) TMP_Registry_block_macro_75.$$p = null;
          
          
          if ($iter) TMP_Registry_block_macro_75.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'add_syntax_processor', ["block_macro", args], block.$to_proc());
        }, TMP_Registry_block_macro_75.$$arity = -1);
        
        Opal.def(self, '$block_macros?', TMP_Registry_block_macros$q_76 = function() {
          var self = this;

          return self.block_macro_extensions['$!']()['$!']()
        }, TMP_Registry_block_macros$q_76.$$arity = 0);
        
        Opal.def(self, '$registered_for_block_macro?', TMP_Registry_registered_for_block_macro$q_77 = function(name) {
          var self = this, ext = nil;

          if ($truthy((ext = self.block_macro_extensions['$[]'](name.$to_sym())))) {
            return ext
          } else {
            return false
          }
        }, TMP_Registry_registered_for_block_macro$q_77.$$arity = 1);
        
        Opal.def(self, '$find_block_macro_extension', TMP_Registry_find_block_macro_extension_78 = function $$find_block_macro_extension(name) {
          var self = this;

          return self.block_macro_extensions['$[]'](name.$to_sym())
        }, TMP_Registry_find_block_macro_extension_78.$$arity = 1);
        
        Opal.def(self, '$inline_macro', TMP_Registry_inline_macro_79 = function $$inline_macro($a) {
          var $iter = TMP_Registry_inline_macro_79.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) TMP_Registry_inline_macro_79.$$p = null;
          
          
          if ($iter) TMP_Registry_inline_macro_79.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'add_syntax_processor', ["inline_macro", args], block.$to_proc());
        }, TMP_Registry_inline_macro_79.$$arity = -1);
        
        Opal.def(self, '$inline_macros?', TMP_Registry_inline_macros$q_80 = function() {
          var self = this;

          return self.inline_macro_extensions['$!']()['$!']()
        }, TMP_Registry_inline_macros$q_80.$$arity = 0);
        
        Opal.def(self, '$registered_for_inline_macro?', TMP_Registry_registered_for_inline_macro$q_81 = function(name) {
          var self = this, ext = nil;

          if ($truthy((ext = self.inline_macro_extensions['$[]'](name.$to_sym())))) {
            return ext
          } else {
            return false
          }
        }, TMP_Registry_registered_for_inline_macro$q_81.$$arity = 1);
        
        Opal.def(self, '$find_inline_macro_extension', TMP_Registry_find_inline_macro_extension_82 = function $$find_inline_macro_extension(name) {
          var self = this;

          return self.inline_macro_extensions['$[]'](name.$to_sym())
        }, TMP_Registry_find_inline_macro_extension_82.$$arity = 1);
        
        Opal.def(self, '$inline_macros', TMP_Registry_inline_macros_83 = function $$inline_macros() {
          var self = this;

          return self.inline_macro_extensions.$values()
        }, TMP_Registry_inline_macros_83.$$arity = 0);
        
        Opal.def(self, '$prefer', TMP_Registry_prefer_84 = function $$prefer($a) {
          var $iter = TMP_Registry_prefer_84.$$p, block = $iter || nil, $post_args, args, self = this, extension = nil, arg0 = nil, extensions_store = nil;

          if ($iter) TMP_Registry_prefer_84.$$p = null;
          
          
          if ($iter) TMP_Registry_prefer_84.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          extension = (function() {if ($truthy($$($nesting, 'ProcessorExtension')['$===']((arg0 = args.$shift())))) {
            return arg0
          } else {
            
            return $send(self, 'send', [arg0].concat(Opal.to_a(args)), block.$to_proc());
          }; return nil; })();
          extensions_store = self.$instance_variable_get(((("" + "@") + (extension.$kind())) + "_extensions").$to_sym());
          extensions_store.$unshift(extensions_store.$delete(extension));
          return extension;
        }, TMP_Registry_prefer_84.$$arity = -1);
        self.$private();
        
        Opal.def(self, '$add_document_processor', TMP_Registry_add_document_processor_85 = function $$add_document_processor(kind, args) {
          var $iter = TMP_Registry_add_document_processor_85.$$p, block = $iter || nil, TMP_86, $a, $b, $c, self = this, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, extension = nil, config = nil, processor = nil, processor_class = nil, processor_instance = nil;

          if ($iter) TMP_Registry_add_document_processor_85.$$p = null;
          
          
          if ($iter) TMP_Registry_add_document_processor_85.$$p = null;;
          kind_name = kind.$to_s().$tr("_", " ");
          kind_class_symbol = $send(kind_name.$split(), 'map', [], (TMP_86 = function(it){var self = TMP_86.$$s || this;

          
            
            if (it == null) {
              it = nil;
            };
            return it.$capitalize();}, TMP_86.$$s = self, TMP_86.$$arity = 1, TMP_86)).$join().$to_sym();
          kind_class = $$($nesting, 'Extensions').$const_get(kind_class_symbol);
          kind_java_class = (function() {if ($truthy((($a = $$$('::', 'AsciidoctorJ', 'skip_raise')) ? 'constant' : nil))) {
            
            return $$$($$$('::', 'AsciidoctorJ'), 'Extensions').$const_get(kind_class_symbol);
          } else {
            return nil
          }; return nil; })();
          kind_store = ($truthy($b = self.$instance_variable_get(((("" + "@") + (kind)) + "_extensions").$to_sym())) ? $b : self.$instance_variable_set(((("" + "@") + (kind)) + "_extensions").$to_sym(), []));
          extension = (function() {if ((block !== nil)) {
            
            config = self.$resolve_args(args, 1);
            processor = kind_class.$new(config);
            if ($truthy(kind_class.$constants().$grep("DSL"))) {
              processor.$extend(kind_class.$const_get("DSL"))};
            $send(processor, 'instance_exec', [], block.$to_proc());
            processor.$freeze();
            if ($truthy(processor['$process_block_given?']())) {
            } else {
              self.$raise($$$('::', 'ArgumentError'), "" + "No block specified to process " + (kind_name) + " extension at " + (block.$source_location()))
            };
            return $$($nesting, 'ProcessorExtension').$new(kind, processor);
          } else {
            
            $c = self.$resolve_args(args, 2), $b = Opal.to_ary($c), (processor = ($b[0] == null ? nil : $b[0])), (config = ($b[1] == null ? nil : $b[1])), $c;
            if ($truthy((processor_class = $$($nesting, 'Extensions').$resolve_class(processor)))) {
              
              if ($truthy(($truthy($b = $rb_lt(processor_class, kind_class)) ? $b : ($truthy($c = kind_java_class) ? $rb_lt(processor_class, kind_java_class) : $c)))) {
              } else {
                self.$raise($$$('::', 'ArgumentError'), "" + "Invalid type for " + (kind_name) + " extension: " + (processor))
              };
              processor_instance = processor_class.$new(config);
              processor_instance.$freeze();
              return $$($nesting, 'ProcessorExtension').$new(kind, processor_instance);
            } else if ($truthy(($truthy($b = kind_class['$==='](processor)) ? $b : ($truthy($c = kind_java_class) ? kind_java_class['$==='](processor) : $c)))) {
              
              processor.$update_config(config);
              processor.$freeze();
              return $$($nesting, 'ProcessorExtension').$new(kind, processor);
            } else {
              return self.$raise($$$('::', 'ArgumentError'), "" + "Invalid arguments specified for registering " + (kind_name) + " extension: " + (args))
            };
          }; return nil; })();
          if (extension.$config()['$[]']("position")['$=='](">>")) {
            
            kind_store.$unshift(extension);
          } else {
            
            kind_store['$<<'](extension);
          };
          return extension;
        }, TMP_Registry_add_document_processor_85.$$arity = 2);
        
        Opal.def(self, '$add_syntax_processor', TMP_Registry_add_syntax_processor_87 = function $$add_syntax_processor(kind, args) {
          var $iter = TMP_Registry_add_syntax_processor_87.$$p, block = $iter || nil, TMP_88, $a, $b, $c, self = this, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, name = nil, config = nil, processor = nil, $writer = nil, processor_class = nil, processor_instance = nil;

          if ($iter) TMP_Registry_add_syntax_processor_87.$$p = null;
          
          
          if ($iter) TMP_Registry_add_syntax_processor_87.$$p = null;;
          kind_name = kind.$to_s().$tr("_", " ");
          kind_class_symbol = $send(kind_name.$split(), 'map', [], (TMP_88 = function(it){var self = TMP_88.$$s || this;

          
            
            if (it == null) {
              it = nil;
            };
            return it.$capitalize();}, TMP_88.$$s = self, TMP_88.$$arity = 1, TMP_88)).$push("Processor").$join().$to_sym();
          kind_class = $$($nesting, 'Extensions').$const_get(kind_class_symbol);
          kind_java_class = (function() {if ($truthy((($a = $$$('::', 'AsciidoctorJ', 'skip_raise')) ? 'constant' : nil))) {
            
            return $$$($$$('::', 'AsciidoctorJ'), 'Extensions').$const_get(kind_class_symbol);
          } else {
            return nil
          }; return nil; })();
          kind_store = ($truthy($b = self.$instance_variable_get(((("" + "@") + (kind)) + "_extensions").$to_sym())) ? $b : self.$instance_variable_set(((("" + "@") + (kind)) + "_extensions").$to_sym(), $hash2([], {})));
          if ((block !== nil)) {
            
            $c = self.$resolve_args(args, 2), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (config = ($b[1] == null ? nil : $b[1])), $c;
            processor = kind_class.$new(self.$as_symbol(name), config);
            if ($truthy(kind_class.$constants().$grep("DSL"))) {
              processor.$extend(kind_class.$const_get("DSL"))};
            if (block.$arity()['$=='](1)) {
              Opal.yield1(block, processor)
            } else {
              $send(processor, 'instance_exec', [], block.$to_proc())
            };
            if ($truthy((name = self.$as_symbol(processor.$name())))) {
            } else {
              self.$raise($$$('::', 'ArgumentError'), "" + "No name specified for " + (kind_name) + " extension at " + (block.$source_location()))
            };
            if ($truthy(processor['$process_block_given?']())) {
            } else {
              self.$raise($$$('::', 'NoMethodError'), "" + "No block specified to process " + (kind_name) + " extension at " + (block.$source_location()))
            };
            processor.$freeze();
            
            $writer = [name, $$($nesting, 'ProcessorExtension').$new(kind, processor)];
            $send(kind_store, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          } else {
            
            $c = self.$resolve_args(args, 3), $b = Opal.to_ary($c), (processor = ($b[0] == null ? nil : $b[0])), (name = ($b[1] == null ? nil : $b[1])), (config = ($b[2] == null ? nil : $b[2])), $c;
            if ($truthy((processor_class = $$($nesting, 'Extensions').$resolve_class(processor)))) {
              
              if ($truthy(($truthy($b = $rb_lt(processor_class, kind_class)) ? $b : ($truthy($c = kind_java_class) ? $rb_lt(processor_class, kind_java_class) : $c)))) {
              } else {
                self.$raise($$$('::', 'ArgumentError'), "" + "Class specified for " + (kind_name) + " extension does not inherit from " + (kind_class) + ": " + (processor))
              };
              processor_instance = processor_class.$new(self.$as_symbol(name), config);
              if ($truthy((name = self.$as_symbol(processor_instance.$name())))) {
              } else {
                self.$raise($$$('::', 'ArgumentError'), "" + "No name specified for " + (kind_name) + " extension: " + (processor))
              };
              processor_instance.$freeze();
              
              $writer = [name, $$($nesting, 'ProcessorExtension').$new(kind, processor_instance)];
              $send(kind_store, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            } else if ($truthy(($truthy($b = kind_class['$==='](processor)) ? $b : ($truthy($c = kind_java_class) ? kind_java_class['$==='](processor) : $c)))) {
              
              processor.$update_config(config);
              if ($truthy((name = (function() {if ($truthy(name)) {
                
                
                $writer = [self.$as_symbol(name)];
                $send(processor, 'name=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else {
                
                return self.$as_symbol(processor.$name());
              }; return nil; })()))) {
              } else {
                self.$raise($$$('::', 'ArgumentError'), "" + "No name specified for " + (kind_name) + " extension: " + (processor))
              };
              processor.$freeze();
              
              $writer = [name, $$($nesting, 'ProcessorExtension').$new(kind, processor)];
              $send(kind_store, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            } else {
              return self.$raise($$$('::', 'ArgumentError'), "" + "Invalid arguments specified for registering " + (kind_name) + " extension: " + (args))
            };
          };
        }, TMP_Registry_add_syntax_processor_87.$$arity = 2);
        
        Opal.def(self, '$resolve_args', TMP_Registry_resolve_args_89 = function $$resolve_args(args, expect) {
          var self = this, opts = nil, missing = nil;

          
          opts = (function() {if ($truthy($$$('::', 'Hash')['$==='](args['$[]'](-1)))) {
            return args.$pop()
          } else {
            return $hash2([], {})
          }; return nil; })();
          if (expect['$=='](1)) {
            return opts};
          if ($truthy($rb_gt((missing = $rb_minus($rb_minus(expect, 1), args.$size())), 0))) {
            args = $rb_plus(args, $$$('::', 'Array').$new(missing))
          } else if ($truthy($rb_lt(missing, 0))) {
            args.$pop(missing['$-@']())};
          args['$<<'](opts);
          return args;
        }, TMP_Registry_resolve_args_89.$$arity = 2);
        return (Opal.def(self, '$as_symbol', TMP_Registry_as_symbol_90 = function $$as_symbol(name) {
          var self = this;

          if ($truthy(name)) {
            return name.$to_sym()
          } else {
            return nil
          }
        }, TMP_Registry_as_symbol_90.$$arity = 1), nil) && 'as_symbol';
      })($nesting[0], null, $nesting);
      (function(self, $parent_nesting) {
        var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_generate_name_91, TMP_next_auto_id_92, TMP_groups_93, TMP_create_94, TMP_register_95, TMP_unregister_all_96, TMP_unregister_97, TMP_resolve_class_99, TMP_class_for_name_100, TMP_class_for_name_101, TMP_class_for_name_103;

        
        
        Opal.def(self, '$generate_name', TMP_generate_name_91 = function $$generate_name() {
          var self = this;

          return "" + "extgrp" + (self.$next_auto_id())
        }, TMP_generate_name_91.$$arity = 0);
        
        Opal.def(self, '$next_auto_id', TMP_next_auto_id_92 = function $$next_auto_id() {
          var $a, self = this;
          if (self.auto_id == null) self.auto_id = nil;

          
          self.auto_id = ($truthy($a = self.auto_id) ? $a : -1);
          return (self.auto_id = $rb_plus(self.auto_id, 1));
        }, TMP_next_auto_id_92.$$arity = 0);
        
        Opal.def(self, '$groups', TMP_groups_93 = function $$groups() {
          var $a, self = this;
          if (self.groups == null) self.groups = nil;

          return (self.groups = ($truthy($a = self.groups) ? $a : $hash2([], {})))
        }, TMP_groups_93.$$arity = 0);
        
        Opal.def(self, '$create', TMP_create_94 = function $$create(name) {
          var $iter = TMP_create_94.$$p, block = $iter || nil, $a, self = this;

          if ($iter) TMP_create_94.$$p = null;
          
          
          if ($iter) TMP_create_94.$$p = null;;
          
          if (name == null) {
            name = nil;
          };
          if ((block !== nil)) {
            return $$($nesting, 'Registry').$new($hash(($truthy($a = name) ? $a : self.$generate_name()), block))
          } else {
            return $$($nesting, 'Registry').$new()
          };
        }, TMP_create_94.$$arity = -1);
        Opal.alias(self, "build_registry", "create");
        
        Opal.def(self, '$register', TMP_register_95 = function $$register($a) {
          var $iter = TMP_register_95.$$p, block = $iter || nil, $post_args, args, $b, self = this, argc = nil, resolved_group = nil, group = nil, name = nil, $writer = nil;

          if ($iter) TMP_register_95.$$p = null;
          
          
          if ($iter) TMP_register_95.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          argc = args.$size();
          if ((block !== nil)) {
            resolved_group = block
          } else if ($truthy((group = args.$pop()))) {
            resolved_group = ($truthy($b = self.$resolve_class(group)) ? $b : group)
          } else {
            self.$raise($$$('::', 'ArgumentError'), "Extension group to register not specified")
          };
          name = ($truthy($b = args.$pop()) ? $b : self.$generate_name());
          if ($truthy(args['$empty?']())) {
          } else {
            self.$raise($$$('::', 'ArgumentError'), "" + "Wrong number of arguments (" + (argc) + " for 1..2)")
          };
          
          $writer = [name.$to_sym(), resolved_group];
          $send(self.$groups(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, TMP_register_95.$$arity = -1);
        
        Opal.def(self, '$unregister_all', TMP_unregister_all_96 = function $$unregister_all() {
          var self = this;

          
          self.groups = $hash2([], {});
          return nil;
        }, TMP_unregister_all_96.$$arity = 0);
        
        Opal.def(self, '$unregister', TMP_unregister_97 = function $$unregister($a) {
          var $post_args, names, TMP_98, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          names = $post_args;;
          $send(names, 'each', [], (TMP_98 = function(group){var self = TMP_98.$$s || this;
            if (self.groups == null) self.groups = nil;

          
            
            if (group == null) {
              group = nil;
            };
            return self.groups.$delete(group.$to_sym());}, TMP_98.$$s = self, TMP_98.$$arity = 1, TMP_98));
          return nil;
        }, TMP_unregister_97.$$arity = -1);
        
        Opal.def(self, '$resolve_class', TMP_resolve_class_99 = function $$resolve_class(object) {
          var self = this, $case = nil;

          return (function() {$case = object;
          if ($$$('::', 'Class')['$===']($case)) {return object}
          else if ($$$('::', 'String')['$===']($case)) {return self.$class_for_name(object)}
          else { return nil }})()
        }, TMP_resolve_class_99.$$arity = 1);
        if ($truthy($$$('::', 'RUBY_MIN_VERSION_2'))) {
          return (Opal.def(self, '$class_for_name', TMP_class_for_name_100 = function $$class_for_name(qualified_name) {
            var self = this, resolved = nil;

            try {
              
              resolved = $$$('::', 'Object').$const_get(qualified_name, false);
              if ($truthy($$$('::', 'Class')['$==='](resolved))) {
              } else {
                self.$raise()
              };
              return resolved;
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  return self.$raise($$$('::', 'NameError'), "" + "Could not resolve class for name: " + (qualified_name))
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_class_for_name_100.$$arity = 1), nil) && 'class_for_name'
        } else if ($truthy($$$('::', 'RUBY_MIN_VERSION_1_9'))) {
          return (Opal.def(self, '$class_for_name', TMP_class_for_name_101 = function $$class_for_name(qualified_name) {
            var TMP_102, self = this, resolved = nil;

            try {
              
              resolved = $send(qualified_name.$split("::"), 'reduce', [$$$('::', 'Object')], (TMP_102 = function(current, name){var self = TMP_102.$$s || this;

              
                
                if (current == null) {
                  current = nil;
                };
                
                if (name == null) {
                  name = nil;
                };
                if ($truthy(name['$empty?']())) {
                  return current
                } else {
                  
                  return current.$const_get(name, false);
                };}, TMP_102.$$s = self, TMP_102.$$arity = 2, TMP_102));
              if ($truthy($$$('::', 'Class')['$==='](resolved))) {
              } else {
                self.$raise()
              };
              return resolved;
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  return self.$raise($$$('::', 'NameError'), "" + "Could not resolve class for name: " + (qualified_name))
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_class_for_name_101.$$arity = 1), nil) && 'class_for_name'
        } else {
          return (Opal.def(self, '$class_for_name', TMP_class_for_name_103 = function $$class_for_name(qualified_name) {
            var TMP_104, self = this, resolved = nil;

            try {
              
              resolved = $send(qualified_name.$split("::"), 'reduce', [$$$('::', 'Object')], (TMP_104 = function(current, name){var self = TMP_104.$$s || this;

              
                
                if (current == null) {
                  current = nil;
                };
                
                if (name == null) {
                  name = nil;
                };
                if ($truthy(name['$empty?']())) {
                  return current
                } else {
                  
                  if ($truthy(current['$const_defined?'](name))) {
                    
                    return current.$const_get(name);
                  } else {
                    return self.$raise()
                  };
                };}, TMP_104.$$s = self, TMP_104.$$arity = 2, TMP_104));
              if ($truthy($$$('::', 'Class')['$==='](resolved))) {
              } else {
                self.$raise()
              };
              return resolved;
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  return self.$raise($$$('::', 'NameError'), "" + "Could not resolve class for name: " + (qualified_name))
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_class_for_name_103.$$arity = 1), nil) && 'class_for_name'
        };
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/opal_ext/browser/reader"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$posixify', '$new', '$base_dir', '$start_with?', '$uriish?', '$descends_from?', '$key?', '$attributes', '$replace_next_line', '$absolute_path?', '$==', '$empty?', '$!', '$slice', '$length']);
  return (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $PreprocessorReader(){};
      var self = $PreprocessorReader = $klass($base, $super, 'PreprocessorReader', $PreprocessorReader);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_PreprocessorReader_resolve_include_path_1;

      def.path_resolver = def.document = def.include_stack = def.dir = nil;
      return (Opal.def(self, '$resolve_include_path', TMP_PreprocessorReader_resolve_include_path_1 = function $$resolve_include_path(target, attrlist, attributes) {
        var $a, self = this, p_target = nil, target_type = nil, base_dir = nil, inc_path = nil, relpath = nil, ctx_dir = nil, top_level = nil, offset = nil;

        
        p_target = (self.path_resolver = ($truthy($a = self.path_resolver) ? $a : $$($nesting, 'PathResolver').$new("\\"))).$posixify(target);
        $a = ["file", self.document.$base_dir()], (target_type = $a[0]), (base_dir = $a[1]), $a;
        if ($truthy(p_target['$start_with?']("file://"))) {
          inc_path = (relpath = p_target)
        } else if ($truthy($$($nesting, 'Helpers')['$uriish?'](p_target))) {
          
          if ($truthy(($truthy($a = self.path_resolver['$descends_from?'](p_target, base_dir)) ? $a : self.document.$attributes()['$key?']("allow-uri-read")))) {
          } else {
            return self.$replace_next_line("" + "link:" + (target) + "[" + (attrlist) + "]")
          };
          inc_path = (relpath = p_target);
        } else if ($truthy(self.path_resolver['$absolute_path?'](p_target))) {
          inc_path = (relpath = "" + "file://" + ((function() {if ($truthy(p_target['$start_with?']("/"))) {
            return ""
          } else {
            return "/"
          }; return nil; })()) + (p_target))
        } else if ((ctx_dir = (function() {if ($truthy((top_level = self.include_stack['$empty?']()))) {
          return base_dir
        } else {
          return self.dir
        }; return nil; })())['$=='](".")) {
          inc_path = (relpath = p_target)
        } else if ($truthy(($truthy($a = ctx_dir['$start_with?']("file://")) ? $a : $$($nesting, 'Helpers')['$uriish?'](ctx_dir)['$!']()))) {
          
          inc_path = "" + (ctx_dir) + "/" + (p_target);
          if ($truthy(top_level)) {
            relpath = p_target
          } else if ($truthy(($truthy($a = base_dir['$=='](".")) ? $a : (offset = self.path_resolver['$descends_from?'](inc_path, base_dir))['$!']()))) {
            relpath = inc_path
          } else {
            relpath = inc_path.$slice(offset, inc_path.$length())
          };
        } else if ($truthy(top_level)) {
          inc_path = "" + (ctx_dir) + "/" + ((relpath = p_target))
        } else if ($truthy(($truthy($a = (offset = self.path_resolver['$descends_from?'](ctx_dir, base_dir))) ? $a : self.document.$attributes()['$key?']("allow-uri-read")))) {
          
          inc_path = "" + (ctx_dir) + "/" + (p_target);
          relpath = (function() {if ($truthy(offset)) {
            
            return inc_path.$slice(offset, inc_path.$length());
          } else {
            return p_target
          }; return nil; })();
        } else {
          return self.$replace_next_line("" + "link:" + (target) + "[" + (attrlist) + "]")
        };
        return [inc_path, "file", relpath];
      }, TMP_PreprocessorReader_resolve_include_path_1.$$arity = 3), nil) && 'resolve_include_path'
    })($nesting[0], $$($nesting, 'Reader'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["asciidoctor/js/postscript"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$==']);
  
  self.$require("asciidoctor/converter/composite");
  self.$require("asciidoctor/converter/html5");
  self.$require("asciidoctor/extensions");
  if ($$($nesting, 'JAVASCRIPT_IO_MODULE')['$==']("xmlhttprequest")) {
    return self.$require("asciidoctor/js/opal_ext/browser/reader")
  } else {
    return nil
  };
};

/* Generated by Opal 0.11.99.dev */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $gvars = Opal.gvars, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;
  if ($gvars[":"] == null) $gvars[":"] = nil;

  Opal.add_stubs(['$==', '$>=', '$require', '$unshift', '$dirname', '$each', '$constants', '$const_get', '$downcase', '$to_s', '$[]=', '$-', '$upcase', '$[]', '$values', '$new', '$attr_reader', '$instance_variable_set', '$send', '$<<', '$define', '$expand_path', '$join', '$home', '$pwd', '$!', '$!=', '$default_external', '$to_set', '$map', '$keys', '$slice', '$merge', '$default=', '$to_a', '$escape', '$drop', '$insert', '$dup', '$start', '$logger', '$logger=', '$===', '$split', '$gsub', '$respond_to?', '$raise', '$ancestors', '$class', '$path', '$utc', '$at', '$Integer', '$mtime', '$readlines', '$basename', '$extname', '$index', '$strftime', '$year', '$utc_offset', '$rewind', '$lines', '$each_line', '$record', '$parse', '$exception', '$message', '$set_backtrace', '$backtrace', '$stack_trace', '$stack_trace=', '$open', '$load', '$delete', '$key?', '$attributes', '$outfilesuffix', '$safe', '$normalize_system_path', '$mkdir_p', '$directory?', '$convert', '$write', '$<', '$attr?', '$attr', '$uriish?', '$include?', '$write_primary_stylesheet', '$instance', '$empty?', '$read_asset', '$file?', '$write_coderay_stylesheet', '$write_pygments_stylesheet']);
  
  if ($truthy((($a = $$($nesting, 'RUBY_ENGINE', 'skip_raise')) ? 'constant' : nil))) {
  } else {
    Opal.const_set($nesting[0], 'RUBY_ENGINE', "unknown")
  };
  Opal.const_set($nesting[0], 'RUBY_ENGINE_OPAL', $$($nesting, 'RUBY_ENGINE')['$==']("opal"));
  Opal.const_set($nesting[0], 'RUBY_ENGINE_JRUBY', $$($nesting, 'RUBY_ENGINE')['$==']("jruby"));
  Opal.const_set($nesting[0], 'RUBY_MIN_VERSION_1_9', $rb_ge($$($nesting, 'RUBY_VERSION'), "1.9"));
  Opal.const_set($nesting[0], 'RUBY_MIN_VERSION_2', $rb_ge($$($nesting, 'RUBY_VERSION'), "2"));
  self.$require("set");
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    self.$require("asciidoctor/js")
  } else {
    nil
  };
  $gvars[":"].$unshift($$($nesting, 'File').$dirname("asciidoctor.rb"));
  self.$require("asciidoctor/logging");
  (function($base, $parent_nesting) {
    function $Asciidoctor() {};
    var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), $a, TMP_Asciidoctor_6, TMP_Asciidoctor_7, TMP_Asciidoctor_8, $writer = nil, quote_subs = nil, compat_quote_subs = nil;

    
    Opal.const_set($nesting[0], 'RUBY_ENGINE', $$$('::', 'RUBY_ENGINE'));
    (function($base, $parent_nesting) {
      function $SafeMode() {};
      var self = $SafeMode = $module($base, 'SafeMode', $SafeMode);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_SafeMode_1, TMP_SafeMode_value_for_name_2, TMP_SafeMode_name_for_value_3, TMP_SafeMode_names_4, rec = nil;

      
      Opal.const_set($nesting[0], 'UNSAFE', 0);
      Opal.const_set($nesting[0], 'SAFE', 1);
      Opal.const_set($nesting[0], 'SERVER', 10);
      Opal.const_set($nesting[0], 'SECURE', 20);
      rec = $hash2([], {});
      $send((Opal.Module.$$nesting = $nesting, self.$constants()), 'each', [], (TMP_SafeMode_1 = function(sym){var self = TMP_SafeMode_1.$$s || this, $writer = nil;

      
        
        if (sym == null) {
          sym = nil;
        };
        $writer = [self.$const_get(sym), sym.$to_s().$downcase()];
        $send(rec, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_SafeMode_1.$$s = self, TMP_SafeMode_1.$$arity = 1, TMP_SafeMode_1));
      self.names_by_value = rec;
      Opal.defs(self, '$value_for_name', TMP_SafeMode_value_for_name_2 = function $$value_for_name(name) {
        var self = this;

        return self.$const_get(name.$upcase())
      }, TMP_SafeMode_value_for_name_2.$$arity = 1);
      Opal.defs(self, '$name_for_value', TMP_SafeMode_name_for_value_3 = function $$name_for_value(value) {
        var self = this;
        if (self.names_by_value == null) self.names_by_value = nil;

        return self.names_by_value['$[]'](value)
      }, TMP_SafeMode_name_for_value_3.$$arity = 1);
      Opal.defs(self, '$names', TMP_SafeMode_names_4 = function $$names() {
        var self = this;
        if (self.names_by_value == null) self.names_by_value = nil;

        return self.names_by_value.$values()
      }, TMP_SafeMode_names_4.$$arity = 0);
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      function $Compliance() {};
      var self = $Compliance = $module($base, 'Compliance', $Compliance);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Compliance_define_5;

      
      self.keys = $$$('::', 'Set').$new();
      (function(self, $parent_nesting) {
        var def = self.prototype, $nesting = [self].concat($parent_nesting);

        return self.$attr_reader("keys")
      })(Opal.get_singleton_class(self), $nesting);
      Opal.defs(self, '$define', TMP_Compliance_define_5 = function $$define(key, value) {
        var self = this;
        if (self.keys == null) self.keys = nil;

        
        self.$instance_variable_set("" + "@" + (key), value);
        (function(self, $parent_nesting) {
          var def = self.prototype, $nesting = [self].concat($parent_nesting);

          return self
        })(Opal.get_singleton_class(self), $nesting).$send("attr_accessor", key);
        self.keys['$<<'](key);
        return nil;
      }, TMP_Compliance_define_5.$$arity = 2);
      self.$define("block_terminates_paragraph", true);
      self.$define("strict_verbatim_paragraphs", true);
      self.$define("underline_style_section_titles", true);
      self.$define("unwrap_standalone_preamble", true);
      self.$define("attribute_missing", "skip");
      self.$define("attribute_undefined", "drop-line");
      self.$define("shorthand_property_syntax", true);
      self.$define("natural_xrefs", true);
      self.$define("unique_id_start_index", 2);
      self.$define("markdown_syntax", true);
    })($nesting[0], $nesting);
    Opal.const_set($nesting[0], 'ROOT_PATH', $$$('::', 'File').$dirname($$$('::', 'File').$dirname($$$('::', 'File').$expand_path("asciidoctor.rb"))));
    Opal.const_set($nesting[0], 'DATA_PATH', $$$('::', 'File').$join($$($nesting, 'ROOT_PATH'), "data"));
    
    try {
      Opal.const_set($nesting[0], 'USER_HOME', $$$('::', 'Dir').$home())
    } catch ($err) {
      if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
        try {
          Opal.const_set($nesting[0], 'USER_HOME', ($truthy($a = $$$('::', 'ENV')['$[]']("HOME")) ? $a : $$$('::', 'Dir').$pwd()))
        } finally { Opal.pop_exception() }
      } else { throw $err; }
    };;
    Opal.const_set($nesting[0], 'COERCE_ENCODING', ($truthy($a = $$$('::', 'RUBY_ENGINE_OPAL')['$!']()) ? $$$('::', 'RUBY_MIN_VERSION_1_9') : $a));
    Opal.const_set($nesting[0], 'FORCE_ENCODING', ($truthy($a = $$($nesting, 'COERCE_ENCODING')) ? $$$('::', 'Encoding').$default_external()['$!=']($$$($$$('::', 'Encoding'), 'UTF_8')) : $a));
    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_8', [239, 187, 191]);
    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_16LE', [255, 254]);
    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_16BE', [254, 255]);
    Opal.const_set($nesting[0], 'FORCE_UNICODE_LINE_LENGTH', $$$('::', 'RUBY_MIN_VERSION_1_9')['$!']());
    Opal.const_set($nesting[0], 'LF', Opal.const_set($nesting[0], 'EOL', "\n"));
    Opal.const_set($nesting[0], 'NULL', "\u0000");
    Opal.const_set($nesting[0], 'TAB', "\t");
    Opal.const_set($nesting[0], 'MAX_INT', 9007199254740991);
    Opal.const_set($nesting[0], 'DEFAULT_DOCTYPE', "article");
    Opal.const_set($nesting[0], 'DEFAULT_BACKEND', "html5");
    Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_KEYS', ["", "DEFAULT"].$to_set());
    Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_NAME', "asciidoctor.css");
    Opal.const_set($nesting[0], 'BACKEND_ALIASES', $hash2(["html", "docbook"], {"html": "html5", "docbook": "docbook5"}));
    Opal.const_set($nesting[0], 'DEFAULT_PAGE_WIDTHS', $hash2(["docbook"], {"docbook": 425}));
    Opal.const_set($nesting[0], 'DEFAULT_EXTENSIONS', $hash2(["html", "docbook", "pdf", "epub", "manpage", "asciidoc"], {"html": ".html", "docbook": ".xml", "pdf": ".pdf", "epub": ".epub", "manpage": ".man", "asciidoc": ".adoc"}));
    Opal.const_set($nesting[0], 'ASCIIDOC_EXTENSIONS', $hash2([".adoc", ".asciidoc", ".asc", ".ad", ".txt"], {".adoc": true, ".asciidoc": true, ".asc": true, ".ad": true, ".txt": true}));
    Opal.const_set($nesting[0], 'SETEXT_SECTION_LEVELS', $hash2(["=", "-", "~", "^", "+"], {"=": 0, "-": 1, "~": 2, "^": 3, "+": 4}));
    Opal.const_set($nesting[0], 'ADMONITION_STYLES', ["NOTE", "TIP", "IMPORTANT", "WARNING", "CAUTION"].$to_set());
    Opal.const_set($nesting[0], 'ADMONITION_STYLE_HEADS', ["N", "T", "I", "W", "C"].$to_set());
    Opal.const_set($nesting[0], 'PARAGRAPH_STYLES', ["comment", "example", "literal", "listing", "normal", "open", "pass", "quote", "sidebar", "source", "verse", "abstract", "partintro"].$to_set());
    Opal.const_set($nesting[0], 'VERBATIM_STYLES', ["literal", "listing", "source", "verse"].$to_set());
    Opal.const_set($nesting[0], 'DELIMITED_BLOCKS', $hash2(["--", "----", "....", "====", "****", "____", "\"\"", "++++", "|===", ",===", ":===", "!===", "////", "```"], {"--": ["open", ["comment", "example", "literal", "listing", "pass", "quote", "sidebar", "source", "verse", "admonition", "abstract", "partintro"].$to_set()], "----": ["listing", ["literal", "source"].$to_set()], "....": ["literal", ["listing", "source"].$to_set()], "====": ["example", ["admonition"].$to_set()], "****": ["sidebar", $$$('::', 'Set').$new()], "____": ["quote", ["verse"].$to_set()], "\"\"": ["quote", ["verse"].$to_set()], "++++": ["pass", ["stem", "latexmath", "asciimath"].$to_set()], "|===": ["table", $$$('::', 'Set').$new()], ",===": ["table", $$$('::', 'Set').$new()], ":===": ["table", $$$('::', 'Set').$new()], "!===": ["table", $$$('::', 'Set').$new()], "////": ["comment", $$$('::', 'Set').$new()], "```": ["fenced_code", $$$('::', 'Set').$new()]}));
    Opal.const_set($nesting[0], 'DELIMITED_BLOCK_HEADS', $send($$($nesting, 'DELIMITED_BLOCKS').$keys(), 'map', [], (TMP_Asciidoctor_6 = function(key){var self = TMP_Asciidoctor_6.$$s || this;

    
      
      if (key == null) {
        key = nil;
      };
      return key.$slice(0, 2);}, TMP_Asciidoctor_6.$$s = self, TMP_Asciidoctor_6.$$arity = 1, TMP_Asciidoctor_6)).$to_set());
    Opal.const_set($nesting[0], 'LAYOUT_BREAK_CHARS', $hash2(["'", "<"], {"'": "thematic_break", "<": "page_break"}));
    Opal.const_set($nesting[0], 'MARKDOWN_THEMATIC_BREAK_CHARS', $hash2(["-", "*", "_"], {"-": "thematic_break", "*": "thematic_break", "_": "thematic_break"}));
    Opal.const_set($nesting[0], 'HYBRID_LAYOUT_BREAK_CHARS', $$($nesting, 'LAYOUT_BREAK_CHARS').$merge($$($nesting, 'MARKDOWN_THEMATIC_BREAK_CHARS')));
    Opal.const_set($nesting[0], 'NESTABLE_LIST_CONTEXTS', ["ulist", "olist", "dlist"]);
    Opal.const_set($nesting[0], 'ORDERED_LIST_STYLES', ["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"]);
    Opal.const_set($nesting[0], 'ORDERED_LIST_KEYWORDS', $hash2(["loweralpha", "lowerroman", "upperalpha", "upperroman"], {"loweralpha": "a", "lowerroman": "i", "upperalpha": "A", "upperroman": "I"}));
    Opal.const_set($nesting[0], 'ATTR_REF_HEAD', "{");
    Opal.const_set($nesting[0], 'LIST_CONTINUATION', "+");
    Opal.const_set($nesting[0], 'HARD_LINE_BREAK', " +");
    Opal.const_set($nesting[0], 'LINE_CONTINUATION', " \\");
    Opal.const_set($nesting[0], 'LINE_CONTINUATION_LEGACY', " +");
    Opal.const_set($nesting[0], 'MATHJAX_VERSION', "2.7.4");
    Opal.const_set($nesting[0], 'BLOCK_MATH_DELIMITERS', $hash2(["asciimath", "latexmath"], {"asciimath": ["\\$", "\\$"], "latexmath": ["\\[", "\\]"]}));
    Opal.const_set($nesting[0], 'INLINE_MATH_DELIMITERS', $hash2(["asciimath", "latexmath"], {"asciimath": ["\\$", "\\$"], "latexmath": ["\\(", "\\)"]}));
    
    $writer = ["asciimath"];
    $send(Opal.const_set($nesting[0], 'STEM_TYPE_ALIASES', $hash2(["latexmath", "latex", "tex"], {"latexmath": "latexmath", "latex": "latexmath", "tex": "latexmath"})), 'default=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.const_set($nesting[0], 'FONT_AWESOME_VERSION', "4.7.0");
    Opal.const_set($nesting[0], 'FLEXIBLE_ATTRIBUTES', ["sectnums"]);
    if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      if ($truthy((($a = $$($nesting, 'CC_ANY', 'skip_raise')) ? 'constant' : nil))) {
      } else {
        Opal.const_set($nesting[0], 'CC_ANY', "[^\\n]")
      }
    } else {
      nil
    };
    Opal.const_set($nesting[0], 'AuthorInfoLineRx', new RegExp("" + "^(" + ($$($nesting, 'CG_WORD')) + "[" + ($$($nesting, 'CC_WORD')) + "\\-'.]*)(?: +(" + ($$($nesting, 'CG_WORD')) + "[" + ($$($nesting, 'CC_WORD')) + "\\-'.]*))?(?: +(" + ($$($nesting, 'CG_WORD')) + "[" + ($$($nesting, 'CC_WORD')) + "\\-'.]*))?(?: +<([^>]+)>)?$"));
    Opal.const_set($nesting[0], 'RevisionInfoLineRx', new RegExp("" + "^(?:[^\\d{]*(" + ($$($nesting, 'CC_ANY')) + "*?),)? *(?!:)(" + ($$($nesting, 'CC_ANY')) + "*?)(?: *(?!^),?: *(" + ($$($nesting, 'CC_ANY')) + "*))?$"));
    Opal.const_set($nesting[0], 'ManpageTitleVolnumRx', new RegExp("" + "^(" + ($$($nesting, 'CC_ANY')) + "+?) *\\( *(" + ($$($nesting, 'CC_ANY')) + "+?) *\\)$"));
    Opal.const_set($nesting[0], 'ManpageNamePurposeRx', new RegExp("" + "^(" + ($$($nesting, 'CC_ANY')) + "+?) +- +(" + ($$($nesting, 'CC_ANY')) + "+)$"));
    Opal.const_set($nesting[0], 'ConditionalDirectiveRx', new RegExp("" + "^(\\\\)?(ifdef|ifndef|ifeval|endif)::(\\S*?(?:([,+])\\S*?)?)\\[(" + ($$($nesting, 'CC_ANY')) + "+)?\\]$"));
    Opal.const_set($nesting[0], 'EvalExpressionRx', new RegExp("" + "^(" + ($$($nesting, 'CC_ANY')) + "+?) *([=!><]=|[><]) *(" + ($$($nesting, 'CC_ANY')) + "+)$"));
    Opal.const_set($nesting[0], 'IncludeDirectiveRx', new RegExp("" + "^(\\\\)?include::([^\\[][^\\[]*)\\[(" + ($$($nesting, 'CC_ANY')) + "+)?\\]$"));
    Opal.const_set($nesting[0], 'TagDirectiveRx', /\b(?:tag|(e)nd)::(\S+?)\[\](?=$|[ \r])/m);
    Opal.const_set($nesting[0], 'AttributeEntryRx', new RegExp("" + "^:(!?" + ($$($nesting, 'CG_WORD')) + "[^:]*):(?:[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "*))?$"));
    Opal.const_set($nesting[0], 'InvalidAttributeNameCharsRx', new RegExp("" + "[^-" + ($$($nesting, 'CC_WORD')) + "]"));
    if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      Opal.const_set($nesting[0], 'AttributeEntryPassMacroRx', /^pass:([a-z]+(?:,[a-z]+)*)?\[([\S\s]*)\]$/)
    } else {
      nil
    };
    Opal.const_set($nesting[0], 'AttributeReferenceRx', new RegExp("" + "(\\\\)?\\{(" + ($$($nesting, 'CG_WORD')) + "[-" + ($$($nesting, 'CC_WORD')) + "]*|(set|counter2?):" + ($$($nesting, 'CC_ANY')) + "+?)(\\\\)?\\}"));
    Opal.const_set($nesting[0], 'BlockAnchorRx', new RegExp("" + "^\\[\\[(?:|([" + ($$($nesting, 'CC_ALPHA')) + "_:][" + ($$($nesting, 'CC_WORD')) + ":.-]*)(?:, *(" + ($$($nesting, 'CC_ANY')) + "+))?)\\]\\]$"));
    Opal.const_set($nesting[0], 'BlockAttributeListRx', new RegExp("" + "^\\[(|[" + ($$($nesting, 'CC_WORD')) + ".#%{,\"']" + ($$($nesting, 'CC_ANY')) + "*)\\]$"));
    Opal.const_set($nesting[0], 'BlockAttributeLineRx', new RegExp("" + "^\\[(?:|[" + ($$($nesting, 'CC_WORD')) + ".#%{,\"']" + ($$($nesting, 'CC_ANY')) + "*|\\[(?:|[" + ($$($nesting, 'CC_ALPHA')) + "_:][" + ($$($nesting, 'CC_WORD')) + ":.-]*(?:, *" + ($$($nesting, 'CC_ANY')) + "+)?)\\])\\]$"));
    Opal.const_set($nesting[0], 'BlockTitleRx', new RegExp("" + "^\\.(\\.?[^ \\t.]" + ($$($nesting, 'CC_ANY')) + "*)$"));
    Opal.const_set($nesting[0], 'AdmonitionParagraphRx', new RegExp("" + "^(" + ($$($nesting, 'ADMONITION_STYLES').$to_a().$join("|")) + "):[ \\t]+"));
    Opal.const_set($nesting[0], 'LiteralParagraphRx', new RegExp("" + "^([ \\t]+" + ($$($nesting, 'CC_ANY')) + "*)$"));
    Opal.const_set($nesting[0], 'AtxSectionTitleRx', new RegExp("" + "^(=={0,5})[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "+?)(?:[ \\t]+\\1)?$"));
    Opal.const_set($nesting[0], 'ExtAtxSectionTitleRx', new RegExp("" + "^(=={0,5}|#\\\#{0,5})[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "+?)(?:[ \\t]+\\1)?$"));
    Opal.const_set($nesting[0], 'SetextSectionTitleRx', new RegExp("" + "^((?!\\.)" + ($$($nesting, 'CC_ANY')) + "*?" + ($$($nesting, 'CG_WORD')) + ($$($nesting, 'CC_ANY')) + "*)$"));
    Opal.const_set($nesting[0], 'InlineSectionAnchorRx', new RegExp("" + " (\\\\)?\\[\\[([" + ($$($nesting, 'CC_ALPHA')) + "_:][" + ($$($nesting, 'CC_WORD')) + ":.-]*)(?:, *(" + ($$($nesting, 'CC_ANY')) + "+))?\\]\\]$"));
    Opal.const_set($nesting[0], 'InvalidSectionIdCharsRx', new RegExp("" + "<[^>]+>|&(?:[a-z][a-z]+\\d{0,2}|#\\d\\d\\d{0,4}|#x[\\da-f][\\da-f][\\da-f]{0,3});|[^ " + ($$($nesting, 'CC_WORD')) + "\\-.]+?"));
    Opal.const_set($nesting[0], 'AnyListRx', new RegExp("" + "^(?:[ \\t]*(?:-|\\*\\**|\\.\\.*|\\u2022|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))[ \\t]|(?!//[^/])" + ($$($nesting, 'CC_ANY')) + "*?(?::::{0,2}|;;)(?:$|[ \\t])|<?\\d+>[ \\t])"));
    Opal.const_set($nesting[0], 'UnorderedListRx', new RegExp("" + "^[ \\t]*(-|\\*\\**|\\u2022)[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "*)$"));
    Opal.const_set($nesting[0], 'OrderedListRx', new RegExp("" + "^[ \\t]*(\\.\\.*|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "*)$"));
    Opal.const_set($nesting[0], 'OrderedListMarkerRxMap', $hash2(["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"], {"arabic": /\d+\./, "loweralpha": /[a-z]\./, "lowerroman": /[ivx]+\)/, "upperalpha": /[A-Z]\./, "upperroman": /[IVX]+\)/}));
    Opal.const_set($nesting[0], 'DescriptionListRx', new RegExp("" + "^(?!//[^/])[ \\t]*(" + ($$($nesting, 'CC_ANY')) + "*?)(:::{0,2}|;;)(?:$|[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "*)$)"));
    Opal.const_set($nesting[0], 'DescriptionListSiblingRx', $hash2(["::", ":::", "::::", ";;"], {"::": new RegExp("" + "^(?!//[^/])[ \\t]*(" + ($$($nesting, 'CC_ANY')) + "*[^:]|)(::)(?:$|[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "*)$)"), ":::": new RegExp("" + "^(?!//[^/])[ \\t]*(" + ($$($nesting, 'CC_ANY')) + "*[^:]|)(:::)(?:$|[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "*)$)"), "::::": new RegExp("" + "^(?!//[^/])[ \\t]*(" + ($$($nesting, 'CC_ANY')) + "*[^:]|)(::::)(?:$|[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "*)$)"), ";;": new RegExp("" + "^(?!//[^/])[ \\t]*(" + ($$($nesting, 'CC_ANY')) + "*?)(;;)(?:$|[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "*)$)")}));
    Opal.const_set($nesting[0], 'CalloutListRx', new RegExp("" + "^<(\\d+|\\.)>[ \\t]+(" + ($$($nesting, 'CC_ANY')) + "*)$"));
    Opal.const_set($nesting[0], 'CalloutExtractRx', /((?:\/\/|#|--|;;) ?)?(\\)?<!?(|--)(\d+|\.)\3>(?=(?: ?\\?<!?\3(?:\d+|\.)\3>)*$)/);
    Opal.const_set($nesting[0], 'CalloutExtractRxt', "(\\\\)?<()(\\d+|\\.)>(?=(?: ?\\\\?<(?:\\d+|\\.)>)*$)");
    Opal.const_set($nesting[0], 'CalloutExtractRxMap', $send($$$('::', 'Hash'), 'new', [], (TMP_Asciidoctor_7 = function(h, k){var self = TMP_Asciidoctor_7.$$s || this;

    
      
      if (h == null) {
        h = nil;
      };
      
      if (k == null) {
        k = nil;
      };
      $writer = [k, new RegExp("" + "(" + ($$$('::', 'Regexp').$escape(k)) + " ?)?" + ($$($nesting, 'CalloutExtractRxt')))];
      $send(h, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];}, TMP_Asciidoctor_7.$$s = self, TMP_Asciidoctor_7.$$arity = 2, TMP_Asciidoctor_7)));
    Opal.const_set($nesting[0], 'CalloutScanRx', new RegExp("" + "\\\\?<!?(|--)(\\d+|\\.)\\1>(?=(?: ?\\\\?<!?\\1(?:\\d+|\\.)\\1>)*" + ($$($nesting, 'CC_EOL')) + ")"));
    Opal.const_set($nesting[0], 'CalloutSourceRx', new RegExp("" + "((?://|#|--|;;) ?)?(\\\\)?&lt;!?(|--)(\\d+|\\.)\\3&gt;(?=(?: ?\\\\?&lt;!?\\3(?:\\d+|\\.)\\3&gt;)*" + ($$($nesting, 'CC_EOL')) + ")"));
    Opal.const_set($nesting[0], 'CalloutSourceRxt', "" + "(\\\\)?&lt;()(\\d+|\\.)&gt;(?=(?: ?\\\\?&lt;(?:\\d+|\\.)&gt;)*" + ($$($nesting, 'CC_EOL')) + ")");
    Opal.const_set($nesting[0], 'CalloutSourceRxMap', $send($$$('::', 'Hash'), 'new', [], (TMP_Asciidoctor_8 = function(h, k){var self = TMP_Asciidoctor_8.$$s || this;

    
      
      if (h == null) {
        h = nil;
      };
      
      if (k == null) {
        k = nil;
      };
      $writer = [k, new RegExp("" + "(" + ($$$('::', 'Regexp').$escape(k)) + " ?)?" + ($$($nesting, 'CalloutSourceRxt')))];
      $send(h, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];}, TMP_Asciidoctor_8.$$s = self, TMP_Asciidoctor_8.$$arity = 2, TMP_Asciidoctor_8)));
    Opal.const_set($nesting[0], 'ListRxMap', $hash2(["ulist", "olist", "dlist", "colist"], {"ulist": $$($nesting, 'UnorderedListRx'), "olist": $$($nesting, 'OrderedListRx'), "dlist": $$($nesting, 'DescriptionListRx'), "colist": $$($nesting, 'CalloutListRx')}));
    Opal.const_set($nesting[0], 'ColumnSpecRx', /^(?:(\d+)\*)?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?(\d+%?|~)?([a-z])?$/);
    Opal.const_set($nesting[0], 'CellSpecStartRx', /^[ \t]*(?:(\d+(?:\.\d*)?|(?:\d*\.)?\d+)([*+]))?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?([a-z])?$/);
    Opal.const_set($nesting[0], 'CellSpecEndRx', /[ \t]+(?:(\d+(?:\.\d*)?|(?:\d*\.)?\d+)([*+]))?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?([a-z])?$/);
    Opal.const_set($nesting[0], 'CustomBlockMacroRx', new RegExp("" + "^(" + ($$($nesting, 'CG_WORD')) + "[-" + ($$($nesting, 'CC_WORD')) + "]*)::(|\\S|\\S" + ($$($nesting, 'CC_ANY')) + "*?\\S)\\[(" + ($$($nesting, 'CC_ANY')) + "+)?\\]$"));
    Opal.const_set($nesting[0], 'BlockMediaMacroRx', new RegExp("" + "^(image|video|audio)::(\\S|\\S" + ($$($nesting, 'CC_ANY')) + "*?\\S)\\[(" + ($$($nesting, 'CC_ANY')) + "+)?\\]$"));
    Opal.const_set($nesting[0], 'BlockTocMacroRx', new RegExp("" + "^toc::\\[(" + ($$($nesting, 'CC_ANY')) + "+)?\\]$"));
    Opal.const_set($nesting[0], 'InlineAnchorRx', new RegExp("" + "(\\\\)?(?:\\[\\[([" + ($$($nesting, 'CC_ALPHA')) + "_:][" + ($$($nesting, 'CC_WORD')) + ":.-]*)(?:, *(" + ($$($nesting, 'CC_ANY')) + "+?))?\\]\\]|anchor:([" + ($$($nesting, 'CC_ALPHA')) + "_:][" + ($$($nesting, 'CC_WORD')) + ":.-]*)\\[(?:\\]|(" + ($$($nesting, 'CC_ANY')) + "*?[^\\\\])\\]))"));
    Opal.const_set($nesting[0], 'InlineAnchorScanRx', new RegExp("" + "(?:^|[^\\\\\\[])\\[\\[([" + ($$($nesting, 'CC_ALPHA')) + "_:][" + ($$($nesting, 'CC_WORD')) + ":.-]*)(?:, *(" + ($$($nesting, 'CC_ANY')) + "+?))?\\]\\]|(?:^|[^\\\\])anchor:([" + ($$($nesting, 'CC_ALPHA')) + "_:][" + ($$($nesting, 'CC_WORD')) + ":.-]*)\\[(?:\\]|(" + ($$($nesting, 'CC_ANY')) + "*?[^\\\\])\\])"));
    Opal.const_set($nesting[0], 'LeadingInlineAnchorRx', new RegExp("" + "^\\[\\[([" + ($$($nesting, 'CC_ALPHA')) + "_:][" + ($$($nesting, 'CC_WORD')) + ":.-]*)(?:, *(" + ($$($nesting, 'CC_ANY')) + "+?))?\\]\\]"));
    Opal.const_set($nesting[0], 'InlineBiblioAnchorRx', new RegExp("" + "^\\[\\[\\[([" + ($$($nesting, 'CC_ALPHA')) + "_:][" + ($$($nesting, 'CC_WORD')) + ":.-]*)(?:, *(" + ($$($nesting, 'CC_ANY')) + "+?))?\\]\\]\\]"));
    Opal.const_set($nesting[0], 'InlineEmailRx', new RegExp("" + "([\\\\>:/])?" + ($$($nesting, 'CG_WORD')) + "[" + ($$($nesting, 'CC_WORD')) + ".%+-]*@" + ($$($nesting, 'CG_ALNUM')) + "[" + ($$($nesting, 'CC_ALNUM')) + ".-]*\\." + ($$($nesting, 'CG_ALPHA')) + "{2,4}\\b"));
    Opal.const_set($nesting[0], 'InlineFootnoteMacroRx', new RegExp("" + "\\\\?footnote(?:(ref):|:([\\w-]+)?)\\[(?:|(" + ($$($nesting, 'CC_ALL')) + "*?[^\\\\]))\\]", 'm'));
    Opal.const_set($nesting[0], 'InlineImageMacroRx', new RegExp("" + "\\\\?i(?:mage|con):([^:\\s\\[](?:[^\\n\\[]*[^\\s\\[])?)\\[(|" + ($$($nesting, 'CC_ALL')) + "*?[^\\\\])\\]", 'm'));
    Opal.const_set($nesting[0], 'InlineIndextermMacroRx', new RegExp("" + "\\\\?(?:(indexterm2?):\\[(" + ($$($nesting, 'CC_ALL')) + "*?[^\\\\])\\]|\\(\\((" + ($$($nesting, 'CC_ALL')) + "+?)\\)\\)(?!\\)))", 'm'));
    Opal.const_set($nesting[0], 'InlineKbdBtnMacroRx', new RegExp("" + "(\\\\)?(kbd|btn):\\[(" + ($$($nesting, 'CC_ALL')) + "*?[^\\\\])\\]", 'm'));
    Opal.const_set($nesting[0], 'InlineLinkRx', new RegExp("" + "(^|link:|" + ($$($nesting, 'CG_BLANK')) + "|&lt;|[>\\(\\)\\[\\];])(\\\\?(?:https?|file|ftp|irc)://[^\\s\\[\\]<]*[^\\s.,\\[\\]<])(?:\\[(|" + ($$($nesting, 'CC_ALL')) + "*?[^\\\\])\\])?", 'm'));
    Opal.const_set($nesting[0], 'InlineLinkMacroRx', new RegExp("" + "\\\\?(?:link|(mailto)):(|[^:\\s\\[][^\\s\\[]*)\\[(|" + ($$($nesting, 'CC_ALL')) + "*?[^\\\\])\\]", 'm'));
    Opal.const_set($nesting[0], 'MacroNameRx', new RegExp("" + "^" + ($$($nesting, 'CG_WORD')) + "[-" + ($$($nesting, 'CC_WORD')) + "]*$"));
    Opal.const_set($nesting[0], 'InlineStemMacroRx', new RegExp("" + "\\\\?(stem|(?:latex|ascii)math):([a-z]+(?:,[a-z]+)*)?\\[(" + ($$($nesting, 'CC_ALL')) + "*?[^\\\\])\\]", 'm'));
    Opal.const_set($nesting[0], 'InlineMenuMacroRx', new RegExp("" + "\\\\?menu:(" + ($$($nesting, 'CG_WORD')) + "|[" + ($$($nesting, 'CC_WORD')) + "&][^\\n\\[]*[^\\s\\[])\\[ *(" + ($$($nesting, 'CC_ALL')) + "*?[^\\\\])?\\]", 'm'));
    Opal.const_set($nesting[0], 'InlineMenuRx', new RegExp("" + "\\\\?\"([" + ($$($nesting, 'CC_WORD')) + "&][^\"]*?[ \\n]+&gt;[ \\n]+[^\"]*)\""));
    Opal.const_set($nesting[0], 'InlinePassRx', $hash(false, ["+", "`", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + ";:])(?:\\[([^\\]]+)\\])?(\\\\?(\\+|`)(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)\\4)(?!" + ($$($nesting, 'CG_WORD')) + ")", 'm')], true, ["`", nil, new RegExp("" + "(^|[^`" + ($$($nesting, 'CC_WORD')) + "])(?:\\[([^\\]]+)\\])?(\\\\?(`)([^`\\s]|[^`\\s]" + ($$($nesting, 'CC_ALL')) + "*?\\S)\\4)(?![`" + ($$($nesting, 'CC_WORD')) + "])", 'm')]));
    Opal.const_set($nesting[0], 'SinglePlusInlinePassRx', new RegExp("" + "^(\\\\)?\\+(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)\\+$", 'm'));
    Opal.const_set($nesting[0], 'InlinePassMacroRx', new RegExp("" + "(?:(?:(\\\\?)\\[([^\\]]+)\\])?(\\\\{0,2})(\\+\\+\\+?|\\$\\$)(" + ($$($nesting, 'CC_ALL')) + "*?)\\4|(\\\\?)pass:([a-z]+(?:,[a-z]+)*)?\\[(|" + ($$($nesting, 'CC_ALL')) + "*?[^\\\\])\\])", 'm'));
    Opal.const_set($nesting[0], 'InlineXrefMacroRx', new RegExp("" + "\\\\?(?:&lt;&lt;([" + ($$($nesting, 'CC_WORD')) + "#/.:{]" + ($$($nesting, 'CC_ALL')) + "*?)&gt;&gt;|xref:([" + ($$($nesting, 'CC_WORD')) + "#/.:{]" + ($$($nesting, 'CC_ALL')) + "*?)\\[(?:\\]|(" + ($$($nesting, 'CC_ALL')) + "*?[^\\\\])\\]))", 'm'));
    if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      Opal.const_set($nesting[0], 'HardLineBreakRx', new RegExp("" + "^(" + ($$($nesting, 'CC_ANY')) + "*) \\+$", 'm'))
    } else {
      nil
    };
    Opal.const_set($nesting[0], 'MarkdownThematicBreakRx', /^ {0,3}([-*_])( *)\1\2\1$/);
    Opal.const_set($nesting[0], 'ExtLayoutBreakRx', /^(?:'{3,}|<{3,}|([-*_])( *)\1\2\1)$/);
    Opal.const_set($nesting[0], 'BlankLineRx', /\n{2,}/);
    Opal.const_set($nesting[0], 'EscapedSpaceRx', /\\([ \t\n])/);
    Opal.const_set($nesting[0], 'ReplaceableTextRx', /[&']|--|\.\.\.|\([CRT]M?\)/);
    Opal.const_set($nesting[0], 'SpaceDelimiterRx', /([^\\])[ \t\n]+/);
    Opal.const_set($nesting[0], 'SubModifierSniffRx', /[+-]/);
    Opal.const_set($nesting[0], 'TrailingDigitsRx', /\d+$/);
    if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    } else {
      nil
    };
    Opal.const_set($nesting[0], 'UriSniffRx', new RegExp("" + "^" + ($$($nesting, 'CG_ALPHA')) + "[" + ($$($nesting, 'CC_ALNUM')) + ".+-]+:/{0,2}"));
    Opal.const_set($nesting[0], 'UriTerminatorRx', /[);:]$/);
    Opal.const_set($nesting[0], 'XmlSanitizeRx', /<[^>]+>/);
    Opal.const_set($nesting[0], 'INTRINSIC_ATTRIBUTES', $hash2(["startsb", "endsb", "vbar", "caret", "asterisk", "tilde", "plus", "backslash", "backtick", "blank", "empty", "sp", "two-colons", "two-semicolons", "nbsp", "deg", "zwsp", "quot", "apos", "lsquo", "rsquo", "ldquo", "rdquo", "wj", "brvbar", "pp", "cpp", "amp", "lt", "gt"], {"startsb": "[", "endsb": "]", "vbar": "|", "caret": "^", "asterisk": "*", "tilde": "~", "plus": "&#43;", "backslash": "\\", "backtick": "`", "blank": "", "empty": "", "sp": " ", "two-colons": "::", "two-semicolons": ";;", "nbsp": "&#160;", "deg": "&#176;", "zwsp": "&#8203;", "quot": "&#34;", "apos": "&#39;", "lsquo": "&#8216;", "rsquo": "&#8217;", "ldquo": "&#8220;", "rdquo": "&#8221;", "wj": "&#8288;", "brvbar": "&#166;", "pp": "&#43;&#43;", "cpp": "C&#43;&#43;", "amp": "&", "lt": "<", "gt": ">"}));
    quote_subs = [["strong", "unconstrained", new RegExp("" + "\\\\?(?:\\[([^\\]]+)\\])?\\*\\*(" + ($$($nesting, 'CC_ALL')) + "+?)\\*\\*", 'm')], ["strong", "constrained", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+)\\])?\\*(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)\\*(?!" + ($$($nesting, 'CG_WORD')) + ")", 'm')], ["double", "constrained", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+)\\])?\"`(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)`\"(?!" + ($$($nesting, 'CG_WORD')) + ")", 'm')], ["single", "constrained", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + ";:`}])(?:\\[([^\\]]+)\\])?'`(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)`'(?!" + ($$($nesting, 'CG_WORD')) + ")", 'm')], ["monospaced", "unconstrained", new RegExp("" + "\\\\?(?:\\[([^\\]]+)\\])?``(" + ($$($nesting, 'CC_ALL')) + "+?)``", 'm')], ["monospaced", "constrained", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + ";:\"'`}])(?:\\[([^\\]]+)\\])?`(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)`(?![" + ($$($nesting, 'CC_WORD')) + "\"'`])", 'm')], ["emphasis", "unconstrained", new RegExp("" + "\\\\?(?:\\[([^\\]]+)\\])?__(" + ($$($nesting, 'CC_ALL')) + "+?)__", 'm')], ["emphasis", "constrained", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+)\\])?_(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)_(?!" + ($$($nesting, 'CG_WORD')) + ")", 'm')], ["mark", "unconstrained", new RegExp("" + "\\\\?(?:\\[([^\\]]+)\\])?##(" + ($$($nesting, 'CC_ALL')) + "+?)##", 'm')], ["mark", "constrained", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + "&;:}])(?:\\[([^\\]]+)\\])?#(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)#(?!" + ($$($nesting, 'CG_WORD')) + ")", 'm')], ["superscript", "unconstrained", /\\?(?:\[([^\]]+)\])?\^(\S+?)\^/], ["subscript", "unconstrained", /\\?(?:\[([^\]]+)\])?~(\S+?)~/]];
    compat_quote_subs = quote_subs.$drop(0);
    
    $writer = [2, ["double", "constrained", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+)\\])?``(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)''(?!" + ($$($nesting, 'CG_WORD')) + ")", 'm')]];
    $send(compat_quote_subs, '[]=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    
    $writer = [3, ["single", "constrained", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+)\\])?`(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)'(?!" + ($$($nesting, 'CG_WORD')) + ")", 'm')]];
    $send(compat_quote_subs, '[]=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    
    $writer = [4, ["monospaced", "unconstrained", new RegExp("" + "\\\\?(?:\\[([^\\]]+)\\])?\\+\\+(" + ($$($nesting, 'CC_ALL')) + "+?)\\+\\+", 'm')]];
    $send(compat_quote_subs, '[]=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    
    $writer = [5, ["monospaced", "constrained", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+)\\])?\\+(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)\\+(?!" + ($$($nesting, 'CG_WORD')) + ")", 'm')]];
    $send(compat_quote_subs, '[]=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    compat_quote_subs.$insert(3, ["emphasis", "constrained", new RegExp("" + "(^|[^" + ($$($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+)\\])?'(\\S|\\S" + ($$($nesting, 'CC_ALL')) + "*?\\S)'(?!" + ($$($nesting, 'CG_WORD')) + ")", 'm')]);
    Opal.const_set($nesting[0], 'QUOTE_SUBS', $hash(false, quote_subs, true, compat_quote_subs));
    quote_subs = nil;
    compat_quote_subs = nil;
    Opal.const_set($nesting[0], 'REPLACEMENTS', [[/\\?\(C\)/, "&#169;", "none"], [/\\?\(R\)/, "&#174;", "none"], [/\\?\(TM\)/, "&#8482;", "none"], [/(^|\n| |\\)--( |\n|$)/, "&#8201;&#8212;&#8201;", "none"], [new RegExp("" + "(" + ($$($nesting, 'CG_WORD')) + ")\\\\?--(?=" + ($$($nesting, 'CG_WORD')) + ")"), "&#8212;&#8203;", "leading"], [/\\?\.\.\./, "&#8230;&#8203;", "leading"], [/\\?`'/, "&#8217;", "none"], [new RegExp("" + "(" + ($$($nesting, 'CG_ALNUM')) + ")\\\\?'(?=" + ($$($nesting, 'CG_ALPHA')) + ")"), "&#8217;", "leading"], [/\\?-&gt;/, "&#8594;", "none"], [/\\?=&gt;/, "&#8658;", "none"], [/\\?&lt;-/, "&#8592;", "none"], [/\\?&lt;=/, "&#8656;", "none"], [/\\?(&)amp;((?:[a-zA-Z][a-zA-Z]+\d{0,2}|#\d\d\d{0,4}|#x[\da-fA-F][\da-fA-F][\da-fA-F]{0,3});)/, "", "bounding"]]);
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_load_9, TMP_load_file_13, TMP_convert_15, TMP_convert_file_16;

      
      
      Opal.def(self, '$load', TMP_load_9 = function $$load(input, options) {
        var $a, $b, TMP_10, TMP_11, TMP_12, self = this, timings = nil, logger = nil, $writer = nil, attrs = nil, attrs_arr = nil, lines = nil, input_path = nil, input_mtime = nil, docdate = nil, doctime = nil, doc = nil, ex = nil, context = nil, wrapped_ex = nil;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        try {
          
          options = options.$dup();
          if ($truthy((timings = options['$[]']("timings")))) {
            timings.$start("read")};
          if ($truthy(($truthy($a = (logger = options['$[]']("logger"))) ? logger['$!=']($$($nesting, 'LoggerManager').$logger()) : $a))) {
            
            $writer = [logger];
            $send($$($nesting, 'LoggerManager'), 'logger=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy((attrs = options['$[]']("attributes"))['$!']())) {
            attrs = $hash2([], {})
          } else if ($truthy(($truthy($a = $$$('::', 'Hash')['$==='](attrs)) ? $a : ($truthy($b = $$$('::', 'RUBY_ENGINE_JRUBY')) ? $$$($$$($$$('::', 'Java'), 'JavaUtil'), 'Map')['$==='](attrs) : $b)))) {
            attrs = attrs.$dup()
          } else if ($truthy($$$('::', 'Array')['$==='](attrs))) {
            
            $a = [$hash2([], {}), attrs], (attrs = $a[0]), (attrs_arr = $a[1]), $a;
            $send(attrs_arr, 'each', [], (TMP_10 = function(entry){var self = TMP_10.$$s || this, $c, $d, k = nil, v = nil;

            
              
              if (entry == null) {
                entry = nil;
              };
              $d = entry.$split("=", 2), $c = Opal.to_ary($d), (k = ($c[0] == null ? nil : $c[0])), (v = ($c[1] == null ? nil : $c[1])), $d;
              
              $writer = [k, ($truthy($c = v) ? $c : "")];
              $send(attrs, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
          } else if ($truthy($$$('::', 'String')['$==='](attrs))) {
            
            $a = [$hash2([], {}), attrs.$gsub($$($nesting, 'SpaceDelimiterRx'), "" + "\\1" + ($$($nesting, 'NULL'))).$gsub($$($nesting, 'EscapedSpaceRx'), "\\1").$split($$($nesting, 'NULL'))], (attrs = $a[0]), (attrs_arr = $a[1]), $a;
            $send(attrs_arr, 'each', [], (TMP_11 = function(entry){var self = TMP_11.$$s || this, $c, $d, k = nil, v = nil;

            
              
              if (entry == null) {
                entry = nil;
              };
              $d = entry.$split("=", 2), $c = Opal.to_ary($d), (k = ($c[0] == null ? nil : $c[0])), (v = ($c[1] == null ? nil : $c[1])), $d;
              
              $writer = [k, ($truthy($c = v) ? $c : "")];
              $send(attrs, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
          } else if ($truthy(($truthy($a = attrs['$respond_to?']("keys")) ? attrs['$respond_to?']("[]") : $a))) {
            attrs = $$$('::', 'Hash')['$[]']($send(attrs.$keys(), 'map', [], (TMP_12 = function(k){var self = TMP_12.$$s || this;

            
              
              if (k == null) {
                k = nil;
              };
              return [k, attrs['$[]'](k)];}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12)))
          } else {
            self.$raise($$$('::', 'ArgumentError'), "" + "illegal type for attributes option: " + (attrs.$class().$ancestors().$join(" < ")))
          };
          lines = nil;
          if ($truthy($$$('::', 'File')['$==='](input))) {
            
            input_path = $$$('::', 'File').$expand_path(input.$path());
            input_mtime = (function() {if ($truthy($$$('::', 'ENV')['$[]']("SOURCE_DATE_EPOCH"))) {
              return $$$('::', 'Time').$at(self.$Integer($$$('::', 'ENV')['$[]']("SOURCE_DATE_EPOCH"))).$utc()
            } else {
              return input.$mtime()
            }; return nil; })();
            lines = input.$readlines();
            
            $writer = ["docfile", input_path];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["docdir", $$$('::', 'File').$dirname(input_path)];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["docname", $$($nesting, 'Helpers').$basename(input_path, (($writer = ["docfilesuffix", $$$('::', 'File').$extname(input_path)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy((docdate = attrs['$[]']("docdate")))) {
              ($truthy($a = attrs['$[]']("docyear")) ? $a : (($writer = ["docyear", (function() {if (docdate.$index("-")['$=='](4)) {
                
                return docdate.$slice(0, 4);
              } else {
                return nil
              }; return nil; })()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
            } else {
              
              docdate = (($writer = ["docdate", input_mtime.$strftime("%F")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              ($truthy($a = attrs['$[]']("docyear")) ? $a : (($writer = ["docyear", input_mtime.$year().$to_s()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            };
            doctime = ($truthy($a = attrs['$[]']("doctime")) ? $a : (($writer = ["doctime", input_mtime.$strftime("" + "%T " + ((function() {if (input_mtime.$utc_offset()['$=='](0)) {
              return "UTC"
            } else {
              return "%z"
            }; return nil; })()))]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            
            $writer = ["docdatetime", "" + (docdate) + " " + (doctime)];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          } else if ($truthy(input['$respond_to?']("readlines"))) {
            
            
            try {
              input.$rewind()
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  nil
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;
            lines = input.$readlines();
          } else if ($truthy($$$('::', 'String')['$==='](input))) {
            lines = (function() {if ($truthy($$$('::', 'RUBY_MIN_VERSION_2'))) {
              return input.$lines()
            } else {
              return input.$each_line().$to_a()
            }; return nil; })()
          } else if ($truthy($$$('::', 'Array')['$==='](input))) {
            lines = input.$drop(0)
          } else {
            self.$raise($$$('::', 'ArgumentError'), "" + "unsupported input type: " + (input.$class()))
          };
          if ($truthy(timings)) {
            
            timings.$record("read");
            timings.$start("parse");};
          
          $writer = ["attributes", attrs];
          $send(options, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          doc = (function() {if (options['$[]']("parse")['$=='](false)) {
            
            return $$($nesting, 'Document').$new(lines, options);
          } else {
            return $$($nesting, 'Document').$new(lines, options).$parse()
          }; return nil; })();
          if ($truthy(timings)) {
            timings.$record("parse")};
          return doc;
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {ex = $err;
            try {
              
              
              try {
                
                context = "" + "asciidoctor: FAILED: " + (($truthy($a = attrs['$[]']("docfile")) ? $a : "<stdin>")) + ": Failed to load AsciiDoc document";
                if ($truthy(ex['$respond_to?']("exception"))) {
                  
                  wrapped_ex = ex.$exception("" + (context) + " - " + (ex.$message()));
                  wrapped_ex.$set_backtrace(ex.$backtrace());
                } else {
                  
                  wrapped_ex = ex.$class().$new(context, ex);
                  
                  $writer = [ex.$stack_trace()];
                  $send(wrapped_ex, 'stack_trace=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                };
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    wrapped_ex = ex
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };;
              return self.$raise(wrapped_ex);
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_load_9.$$arity = -2);
      
      Opal.def(self, '$load_file', TMP_load_file_13 = function $$load_file(filename, options) {
        var TMP_14, self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        return $send($$$('::', 'File'), 'open', [filename, "rb"], (TMP_14 = function(file){var self = TMP_14.$$s || this;

        
          
          if (file == null) {
            file = nil;
          };
          return self.$load(file, options);}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
      }, TMP_load_file_13.$$arity = -2);
      
      Opal.def(self, '$convert', TMP_convert_15 = function $$convert(input, options) {
        var $a, $b, $c, $d, $e, self = this, to_file = nil, to_dir = nil, mkdirs = nil, $case = nil, write_to_same_dir = nil, stream_output = nil, write_to_target = nil, $writer = nil, input_path = nil, outdir = nil, doc = nil, outfile = nil, working_dir = nil, jail = nil, opts = nil, output = nil, stylesdir = nil, copy_asciidoctor_stylesheet = nil, copy_user_stylesheet = nil, stylesheet = nil, copy_coderay_stylesheet = nil, copy_pygments_stylesheet = nil, stylesoutdir = nil, stylesheet_src = nil, stylesheet_dest = nil, stylesheet_data = nil;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        options = options.$dup();
        options.$delete("parse");
        to_file = options.$delete("to_file");
        to_dir = options.$delete("to_dir");
        mkdirs = ($truthy($a = options.$delete("mkdirs")) ? $a : false);
        $case = to_file;
        if (true['$===']($case) || nil['$===']($case)) {
        write_to_same_dir = ($truthy($a = to_dir['$!']()) ? $$$('::', 'File')['$==='](input) : $a);
        stream_output = false;
        write_to_target = to_dir;
        to_file = nil;}
        else if (false['$===']($case)) {
        write_to_same_dir = false;
        stream_output = false;
        write_to_target = false;
        to_file = nil;}
        else if ("/dev/null"['$===']($case)) {return self.$load(input, options)}
        else {
        write_to_same_dir = false;
        write_to_target = (function() {if ($truthy((stream_output = to_file['$respond_to?']("write")))) {
          return false
        } else {
          
          
          $writer = ["to_file", to_file];
          $send(options, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }; return nil; })();};
        if ($truthy(options['$key?']("header_footer"))) {
        } else if ($truthy(($truthy($a = write_to_same_dir) ? $a : write_to_target))) {
          
          $writer = ["header_footer", true];
          $send(options, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(write_to_same_dir)) {
          
          input_path = $$$('::', 'File').$expand_path(input.$path());
          
          $writer = ["to_dir", (outdir = $$$('::', 'File').$dirname(input_path))];
          $send(options, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        } else if ($truthy(write_to_target)) {
          if ($truthy(to_dir)) {
            if ($truthy(to_file)) {
              
              $writer = ["to_dir", $$$('::', 'File').$dirname($$$('::', 'File').$expand_path($$$('::', 'File').$join(to_dir, to_file)))];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            } else {
              
              $writer = ["to_dir", $$$('::', 'File').$expand_path(to_dir)];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            }
          } else if ($truthy(to_file)) {
            
            $writer = ["to_dir", $$$('::', 'File').$dirname($$$('::', 'File').$expand_path(to_file))];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];}};
        doc = self.$load(input, options);
        if ($truthy(write_to_same_dir)) {
          
          outfile = $$$('::', 'File').$join(outdir, "" + (doc.$attributes()['$[]']("docname")) + (doc.$outfilesuffix()));
          if (outfile['$=='](input_path)) {
            self.$raise($$$('::', 'IOError'), "" + "input file and output file cannot be the same: " + (outfile))};
        } else if ($truthy(write_to_target)) {
          
          working_dir = (function() {if ($truthy(options['$key?']("base_dir"))) {
            
            return $$$('::', 'File').$expand_path(options['$[]']("base_dir"));
          } else {
            return $$$('::', 'Dir').$pwd()
          }; return nil; })();
          jail = (function() {if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {
            return working_dir
          } else {
            return nil
          }; return nil; })();
          if ($truthy(to_dir)) {
            
            outdir = doc.$normalize_system_path(to_dir, working_dir, jail, $hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
            if ($truthy(to_file)) {
              
              outfile = doc.$normalize_system_path(to_file, outdir, nil, $hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
              outdir = $$$('::', 'File').$dirname(outfile);
            } else {
              outfile = $$$('::', 'File').$join(outdir, "" + (doc.$attributes()['$[]']("docname")) + (doc.$outfilesuffix()))
            };
          } else if ($truthy(to_file)) {
            
            outfile = doc.$normalize_system_path(to_file, working_dir, jail, $hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
            outdir = $$$('::', 'File').$dirname(outfile);};
          if ($truthy(($truthy($a = $$$('::', 'File')['$==='](input)) ? outfile['$==']($$$('::', 'File').$expand_path(input.$path())) : $a))) {
            self.$raise($$$('::', 'IOError'), "" + "input file and output file cannot be the same: " + (outfile))};
          if ($truthy(mkdirs)) {
            $$($nesting, 'Helpers').$mkdir_p(outdir)
          } else if ($truthy($$$('::', 'File')['$directory?'](outdir))) {
          } else {
            self.$raise($$$('::', 'IOError'), "" + "target directory does not exist: " + (to_dir) + " (hint: set mkdirs option)")
          };
        } else {
          
          outfile = to_file;
          outdir = nil;
        };
        opts = (function() {if ($truthy(($truthy($a = outfile) ? stream_output['$!']() : $a))) {
          return $hash2(["outfile", "outdir"], {"outfile": outfile, "outdir": outdir})
        } else {
          return $hash2([], {})
        }; return nil; })();
        output = doc.$convert(opts);
        if ($truthy(outfile)) {
          
          doc.$write(output, outfile);
          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = ($truthy($e = stream_output['$!']()) ? $rb_lt(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')) : $e)) ? doc['$attr?']("linkcss") : $d)) ? doc['$attr?']("copycss") : $c)) ? doc['$attr?']("basebackend-html") : $b)) ? ($truthy($b = (stylesdir = doc.$attr("stylesdir"))) ? $$($nesting, 'Helpers')['$uriish?'](stylesdir) : $b)['$!']() : $a))) {
            
            copy_asciidoctor_stylesheet = false;
            copy_user_stylesheet = false;
            if ($truthy((stylesheet = doc.$attr("stylesheet")))) {
              if ($truthy($$($nesting, 'DEFAULT_STYLESHEET_KEYS')['$include?'](stylesheet))) {
                copy_asciidoctor_stylesheet = true
              } else if ($truthy($$($nesting, 'Helpers')['$uriish?'](stylesheet)['$!']())) {
                copy_user_stylesheet = true}};
            copy_coderay_stylesheet = ($truthy($a = doc['$attr?']("source-highlighter", "coderay")) ? doc.$attr("coderay-css", "class")['$==']("class") : $a);
            copy_pygments_stylesheet = ($truthy($a = doc['$attr?']("source-highlighter", "pygments")) ? doc.$attr("pygments-css", "class")['$==']("class") : $a);
            if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = copy_asciidoctor_stylesheet) ? $c : copy_user_stylesheet)) ? $b : copy_coderay_stylesheet)) ? $a : copy_pygments_stylesheet))) {
              
              stylesoutdir = doc.$normalize_system_path(stylesdir, outdir, (function() {if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {
                return outdir
              } else {
                return nil
              }; return nil; })());
              if ($truthy(mkdirs)) {
                $$($nesting, 'Helpers').$mkdir_p(stylesoutdir)
              } else if ($truthy($$$('::', 'File')['$directory?'](stylesoutdir))) {
              } else {
                self.$raise($$$('::', 'IOError'), "" + "target stylesheet directory does not exist: " + (stylesoutdir) + " (hint: set mkdirs option)")
              };
              if ($truthy(copy_asciidoctor_stylesheet)) {
                $$($nesting, 'Stylesheets').$instance().$write_primary_stylesheet(stylesoutdir)
              } else if ($truthy(copy_user_stylesheet)) {
                
                if ($truthy((stylesheet_src = doc.$attr("copycss"))['$empty?']())) {
                  stylesheet_src = doc.$normalize_system_path(stylesheet)
                } else {
                  stylesheet_src = doc.$normalize_system_path(stylesheet_src)
                };
                stylesheet_dest = doc.$normalize_system_path(stylesheet, stylesoutdir, (function() {if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {
                  return outdir
                } else {
                  return nil
                }; return nil; })());
                if ($truthy(($truthy($a = stylesheet_src['$!='](stylesheet_dest)) ? (stylesheet_data = doc.$read_asset(stylesheet_src, $hash2(["warn_on_failure", "label"], {"warn_on_failure": $$$('::', 'File')['$file?'](stylesheet_dest)['$!'](), "label": "stylesheet"}))) : $a))) {
                  $$$('::', 'IO').$write(stylesheet_dest, stylesheet_data)};};
              if ($truthy(copy_coderay_stylesheet)) {
                $$($nesting, 'Stylesheets').$instance().$write_coderay_stylesheet(stylesoutdir)
              } else if ($truthy(copy_pygments_stylesheet)) {
                $$($nesting, 'Stylesheets').$instance().$write_pygments_stylesheet(stylesoutdir, doc.$attr("pygments-style"))};};};
          return doc;
        } else {
          return output
        };
      }, TMP_convert_15.$$arity = -2);
      Opal.alias(self, "render", "convert");
      
      Opal.def(self, '$convert_file', TMP_convert_file_16 = function $$convert_file(filename, options) {
        var TMP_17, self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        return $send($$$('::', 'File'), 'open', [filename, "rb"], (TMP_17 = function(file){var self = TMP_17.$$s || this;

        
          
          if (file == null) {
            file = nil;
          };
          return self.$convert(file, options);}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
      }, TMP_convert_file_16.$$arity = -2);
      Opal.alias(self, "render_file", "convert_file");
      if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
        return nil
      } else {
        return nil
      };
    })(Opal.get_singleton_class(self), $nesting);
    if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      
      self.$require("asciidoctor/timings");
      self.$require("asciidoctor/version");
    } else {
      nil
    };
  })($nesting[0], $nesting);
  self.$require("asciidoctor/core_ext");
  self.$require("asciidoctor/helpers");
  self.$require("asciidoctor/substitutors");
  self.$require("asciidoctor/abstract_node");
  self.$require("asciidoctor/abstract_block");
  self.$require("asciidoctor/attribute_list");
  self.$require("asciidoctor/block");
  self.$require("asciidoctor/callouts");
  self.$require("asciidoctor/converter");
  self.$require("asciidoctor/document");
  self.$require("asciidoctor/inline");
  self.$require("asciidoctor/list");
  self.$require("asciidoctor/parser");
  self.$require("asciidoctor/path_resolver");
  self.$require("asciidoctor/reader");
  self.$require("asciidoctor/section");
  self.$require("asciidoctor/stylesheets");
  self.$require("asciidoctor/table");
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    return self.$require("asciidoctor/js/postscript")
  } else {
    return nil
  };
})(Opal);


/**
 * Convert a JSON to an (Opal) Hash.
 * @private
 */
var toHash = function (object) {
  return object && !('$$smap' in object) ? Opal.hash(object) : object;
};

/**
 * Convert an (Opal) Hash to JSON.
 * @private
 */
var fromHash = function (hash) {
  var object = {};
  var data = hash.$$smap;
  for (var key in data) {
    object[key] = data[key];
  }
  return object;
};

/**
 * @private
 */
var prepareOptions = function (options) {
  if (options = toHash(options)) {
    var attrs = options['$[]']('attributes');
    if (attrs && typeof attrs === 'object' && attrs.constructor.name === 'Object') {
      options = options.$dup();
      options['$[]=']('attributes', toHash(attrs));
    }
  }
  return options;
};

function initializeClass (superClass, className, functions, defaultFunctions, argProxyFunctions) {
  var scope = Opal.klass(Opal.Object, superClass, className, function () {});
  var postConstructFunction;
  var initializeFunction;
  var defaultFunctionsOverridden = {};
  for (var functionName in functions) {
    if (functions.hasOwnProperty(functionName)) {
      (function (functionName) {
        var userFunction = functions[functionName];
        if (functionName === 'postConstruct') {
          postConstructFunction = userFunction;
        } else if (functionName === 'initialize') {
          initializeFunction = userFunction;
        } else {
          if (defaultFunctions && defaultFunctions.hasOwnProperty(functionName)) {
            defaultFunctionsOverridden[functionName] = true;
          }
          Opal.def(scope, '$' + functionName, function () {
            var args;
            if (argProxyFunctions && argProxyFunctions.hasOwnProperty(functionName)) {
              args = argProxyFunctions[functionName](arguments);
            } else {
              args = arguments;
            }
            return userFunction.apply(this, args);
          });
        }
      }(functionName));
    }
  }
  var initialize;
  if (typeof initializeFunction === 'function') {
    initialize = function () {
      initializeFunction.apply(this, arguments);
      if (typeof postConstructFunction === 'function') {
        postConstructFunction.bind(this)();
      }
    };
  } else {
    initialize = function () {
      Opal.send(this, Opal.find_super_dispatcher(this, 'initialize', initialize));
      if (typeof postConstructFunction === 'function') {
        postConstructFunction.bind(this)();
      }
    };
  }
  Opal.def(scope, '$initialize', initialize);
  Opal.def(scope, 'super', function (func) {
    if (typeof func === 'function') {
      Opal.send(this, Opal.find_super_dispatcher(this, func.name, func));
    } else {
      // Bind the initialize function to super();
      var argumentsList = Array.from(arguments);
      for (var i = 0; i < argumentsList.length; i++) {
        // convert all (Opal) Hash arguments to JSON.
        if (typeof argumentsList[i] === 'object') {
          argumentsList[i] = toHash(argumentsList[i]);
        }
      }
      Opal.send(this, Opal.find_super_dispatcher(this, 'initialize', initialize), argumentsList);
    }
  });
  if (defaultFunctions) {
    for (var defaultFunctionName in defaultFunctions) {
      if (defaultFunctions.hasOwnProperty(defaultFunctionName) && !defaultFunctionsOverridden.hasOwnProperty(defaultFunctionName)) {
        (function (defaultFunctionName) {
          var defaultFunction = defaultFunctions[defaultFunctionName];
          Opal.def(scope, '$' + defaultFunctionName, function () {
            return defaultFunction.apply(this, arguments);
          });
        }(defaultFunctionName));
      }
    }
  }
  return scope;
}

// Asciidoctor API

/**
 * @namespace
 * @description
 * Methods for parsing AsciiDoc input files and converting documents.
 *
 * AsciiDoc documents comprise a header followed by zero or more sections.
 * Sections are composed of blocks of content. For example:
 * <pre>
 *   = Doc Title
 *
 *   == Section 1
 *
 *   This is a paragraph block in the first section.
 *
 *   == Section 2
 *
 *   This section has a paragraph block and an olist block.
 *
 *   . Item 1
 *   . Item 2
 * </pre>
 *
 * @example
 * asciidoctor.convertFile('sample.adoc');
 */
var Asciidoctor = Opal.Asciidoctor['$$class'];

/**
 * Get Asciidoctor core version number.
 *
 * @memberof Asciidoctor
 * @returns {string} - returns the version number of Asciidoctor core.
 */
Asciidoctor.prototype.getCoreVersion = function () {
  return this.$$const.VERSION;
};

/**
 * Get Asciidoctor.js runtime environment informations.
 *
 * @memberof Asciidoctor
 * @returns {Object} - returns the runtime environement including the ioModule, the platform, the engine and the framework.
 */
Asciidoctor.prototype.getRuntime = function () {
  return {
    ioModule: Opal.const_get_qualified('::', 'JAVASCRIPT_IO_MODULE'),
    platform: Opal.const_get_qualified('::', 'JAVASCRIPT_PLATFORM'),
    engine: Opal.const_get_qualified('::', 'JAVASCRIPT_ENGINE'),
    framework: Opal.const_get_qualified('::', 'JAVASCRIPT_FRAMEWORK')
  };
};

/**
 * Parse the AsciiDoc source input into an {@link Document} and convert it to the specified backend format.
 *
 * Accepts input as a Buffer or String.
 *
 * @param {string|Buffer} input - AsciiDoc input as String or Buffer
 * @param {Object} options - a JSON of options to control processing (default: {})
 * @returns {string|Document} - returns the {@link Document} object if the converted String is written to a file,
 * otherwise the converted String
 * @memberof Asciidoctor
 * @example
 * var input = '= Hello, AsciiDoc!\n' +
 *   'Guillaume Grossetie <ggrossetie@example.com>\n\n' +
 *   'An introduction to http://asciidoc.org[AsciiDoc].\n\n' +
 *   '== First Section\n\n' +
 *   '* item 1\n' +
 *   '* item 2\n';
 *
 * var html = asciidoctor.convert(input);
 */
Asciidoctor.prototype.convert = function (input, options) {
  if (typeof input === 'object' && input.constructor.name === 'Buffer') {
    input = input.toString('utf8');
  }
  var result = this.$convert(input, prepareOptions(options));
  return result === Opal.nil ? '' : result;
};

/**
 * Parse the AsciiDoc source input into an {@link Document} and convert it to the specified backend format.
 *
 * @param {string} filename - source filename
 * @param {Object} options - a JSON of options to control processing (default: {})
 * @returns {string|Document} - returns the {@link Document} object if the converted String is written to a file,
 * otherwise the converted String
 * @memberof Asciidoctor
 * @example
 * var html = asciidoctor.convertFile('./document.adoc');
 */
Asciidoctor.prototype.convertFile = function (filename, options) {
  return this.$convert_file(filename, prepareOptions(options));
};

/**
 * Parse the AsciiDoc source input into an {@link Document}
 *
 * Accepts input as a Buffer or String.
 *
 * @param {string|Buffer} input - AsciiDoc input as String or Buffer
 * @param {Object} options - a JSON of options to control processing (default: {})
 * @returns {Document} - returns the {@link Document} object
 * @memberof Asciidoctor
 */
Asciidoctor.prototype.load = function (input, options) {
  if (typeof input === 'object' && input.constructor.name === 'Buffer') {
    input = input.toString('utf8');
  }
  return this.$load(input, prepareOptions(options));
};

/**
 * Parse the contents of the AsciiDoc source file into an {@link Document}
 *
 * @param {string} filename - source filename
 * @param {Object} options - a JSON of options to control processing (default: {})
 * @returns {Document} - returns the {@link Document} object
 * @memberof Asciidoctor
 */
Asciidoctor.prototype.loadFile = function (filename, options) {
  return this.$load_file(filename, prepareOptions(options));
};

// AbstractBlock API

/**
 * @namespace
 * @extends AbstractNode
 */
var AbstractBlock = Opal.Asciidoctor.AbstractBlock;

/**
 * Append a block to this block's list of child blocks.
 *
 * @memberof AbstractBlock
 * @returns {AbstractBlock} - the parent block to which this block was appended.
 *
 */
AbstractBlock.prototype.append = function (block) {
  this.$append(block);
  return this;
};

/*
 * Apply the named inline substitutions to the specified text.
 *
 * If no substitutions are specified, the following substitutions are
 * applied:
 *
 * <code>specialcharacters</code>, <code>quotes</code>, <code>attributes</code>, <code>replacements</code>, <code>macros</code>, and <code>post_replacements</code>
 * @param {string} text - The text to substitute.
 * @param {Array} subs - A list named substitutions to apply to the text.
 * @memberof AbstractBlock
 * @returns {string} - returns the substituted text.
 */
AbstractBlock.prototype.applySubstitutions = function (text, subs) {
  return this.$apply_subs(text, subs);
};

/**
 * Get the String title of this Block with title substitions applied
 *
 * The following substitutions are applied to block and section titles:
 *
 * <code>specialcharacters</code>, <code>quotes</code>, <code>replacements</code>, <code>macros</code>, <code>attributes</code> and <code>post_replacements</code>
 *
 * @memberof AbstractBlock
 * @returns {string} - returns the converted String title for this Block, or undefined if the title is not set.
 * @example
 * block.title // "Foo 3^ # {two-colons} Bar(1)"
 * block.getTitle(); // "Foo 3^ # :: Bar(1)"
 */
AbstractBlock.prototype.getTitle = function () {
  var title = this.$title();
  return title === Opal.nil ? undefined : title;
};

/**
 * Convenience method that returns the interpreted title of the Block
 * with the caption prepended.
 * Concatenates the value of this Block's caption instance variable and the
 * return value of this Block's title method. No space is added between the
 * two values. If the Block does not have a caption, the interpreted title is
 * returned.
 *
 * @memberof AbstractBlock
 * @returns {string} - the converted String title prefixed with the caption, or just the
 * converted String title if no caption is set
 */
AbstractBlock.prototype.getCaptionedTitle = function () {
  return this.$captioned_title();
};

/**
 * Get the style (block type qualifier) for this block.
 * @memberof AbstractBlock
 * @returns {string} - returns the style for this block
 */
AbstractBlock.prototype.getStyle = function () {
  return this.style;
};

/**
 * Get the caption for this block.
 * @memberof AbstractBlock
 * @returns {string} - returns the caption for this block
 */
AbstractBlock.prototype.getCaption = function () {
  return this.$caption();
};

/**
 * Set the caption for this block.
 * @param {string} caption - Caption
 * @memberof AbstractBlock
 */
AbstractBlock.prototype.setCaption = function (caption) {
  this.caption = caption;
};

/**
 * Get the level of this section or the section level in which this block resides.
 * @memberof AbstractBlock
 * @returns {number} - returns the level of this section
 */
AbstractBlock.prototype.getLevel = function () {
  return this.level;
};

/**
 * Get the substitution keywords to be applied to the contents of this block.
 *
 * @memberof AbstractBlock
 * @returns {Array} - the list of {string} substitution keywords associated with this block.
 */
AbstractBlock.prototype.getSubstitutions = function () {
  return this.subs;
};

/**
 * Check whether a given substitution keyword is present in the substitutions for this block.
 *
 * @memberof AbstractBlock
 * @returns {boolean} - whether the substitution is present on this block.
 */
AbstractBlock.prototype.hasSubstitution = function (substitution) {
  return this['$sub?'](substitution);
};

/**
 * Remove the specified substitution keyword from the list of substitutions for this block.
 *
 * @memberof AbstractBlock
 * @returns undefined
 */
AbstractBlock.prototype.removeSubstitution = function (substitution) {
  this.$remove_sub(substitution);
};

/**
 * Checks if the {@link AbstractBlock} contains any child blocks.
 * @memberof AbstractBlock
 * @returns {boolean} - whether the {@link AbstractBlock} has child blocks.
 */
AbstractBlock.prototype.hasBlocks = function () {
  return this.blocks.length > 0;
};

/**
 * Get the list of {@link AbstractBlock} sub-blocks for this block.
 * @memberof AbstractBlock
 * @returns {Array} - returns a list of {@link AbstractBlock} sub-blocks
 */
AbstractBlock.prototype.getBlocks = function () {
  return this.blocks;
};

/**
 * Get the converted result of the child blocks by converting the children appropriate to content model that this block supports.
 * @memberof AbstractBlock
 * @returns {string} - returns the converted result of the child blocks
 */
AbstractBlock.prototype.getContent = function () {
  return this.$content();
};

/**
 * Get the converted content for this block.
 * If the block has child blocks, the content method should cause them to be converted
 * and returned as content that can be included in the parent block's template.
 * @memberof AbstractBlock
 * @returns {string} - returns the converted String content for this block
 */
AbstractBlock.prototype.convert = function () {
  return this.$convert();
};

/**
 * Query for all descendant block-level nodes in the document tree
 * that match the specified selector (context, style, id, and/or role).
 * If a function block is given, it's used as an additional filter.
 * If no selector or function block is supplied, all block-level nodes in the tree are returned.
 * @param {Object} [selector]
 * @param {function} [block]
 * @example
 * doc.findBy({'context': 'section'});
 * // => { level: 0, title: "Hello, AsciiDoc!", blocks: 0 }
 * // => { level: 1, title: "First Section", blocks: 1 }
 *
 * doc.findBy({'context': 'section'}, function (section) { return section.getLevel() === 1; });
 * // => { level: 1, title: "First Section", blocks: 1 }
 *
 * doc.findBy({'context': 'listing', 'style': 'source'});
 * // => { context: :listing, content_model: :verbatim, style: "source", lines: 1 }
 *
 * @memberof AbstractBlock
 * @returns {Array} - returns a list of block-level nodes that match the filter or an empty list if no matches are found
 */
AbstractBlock.prototype.findBy = function (selector, block) {
  if (typeof block === 'undefined' && typeof selector === 'function') {
    return Opal.send(this, 'find_by', null, selector);
  }
  else if (typeof block === 'function') {
    return Opal.send(this, 'find_by', [toHash(selector)], block);
  }
  else {
    return this.$find_by(toHash(selector));
  }
};

/**
 * Get the source line number where this block started.
 * @memberof AbstractBlock
 * @returns {number} - returns the source line number where this block started
 */
AbstractBlock.prototype.getLineNumber = function () {
  var lineno = this.$lineno();
  return lineno === Opal.nil ? undefined : lineno;
};

/**
 * Check whether this block has any child Section objects.
 * Only applies to Document and Section instances.
 * @memberof AbstractBlock
 * @returns {boolean} - true if this block has child Section objects, otherwise false
 */
AbstractBlock.prototype.hasSections = function () {
  return this['$sections?']();
};

/**
 * Get the Array of child Section objects.
 * Only applies to Document and Section instances.
 * @memberof AbstractBlock
 * @returns {Array} - returns an {Array} of {@link Section} objects
 */
AbstractBlock.prototype.getSections = function () {
  return this.$sections();
};

/**
 * Get the numeral of this block (if section, relative to parent, otherwise absolute).
 * Only assigned to section if automatic section numbering is enabled.
 * Only assigned to formal block (block with title) if corresponding caption attribute is present.
 * If the section is an appendix, the numeral is a letter (starting with A).
 * @memberof AbstractBlock
 * @returns {string} - returns the numeral
 */
AbstractBlock.prototype.getNumeral = function () {
  // number was renamed to numeral
  // https://github.com/asciidoctor/asciidoctor/commit/33ac4821e0375bcd5aa189c394ad7630717bcd55
  return this.$number();
};

/**
 * Set the numeral of this block.
 * @memberof AbstractBlock
 */
AbstractBlock.prototype.setNumeral = function (value) {
  // number was renamed to numeral
  // https://github.com/asciidoctor/asciidoctor/commit/33ac4821e0375bcd5aa189c394ad7630717bcd55
  return this['$number='](value);
};

/**
 * A convenience method that checks whether the title of this block is defined.
 *
 * @returns a {boolean} indicating whether this block has a title.
 * @memberof AbstractBlock
 */
AbstractBlock.prototype.hasTitle = function () {
  return this['$title?']();
};

// Section API

/**
 * @namespace
 * @extends AbstractBlock
 */
var Section = Opal.Asciidoctor.Section;

/**
 * Get the 0-based index order of this section within the parent block.
 * @memberof Section
 * @returns {number}
 */
Section.prototype.getIndex = function () {
  return this.index;
};

/**
 * Set the 0-based index order of this section within the parent block.
 * @memberof Section
 */
Section.prototype.setIndex = function (value) {
  this.index = value;
};

/**
 * Get the section name of this section.
 * @memberof Section
 * @returns {string}
 */
Section.prototype.getSectionName = function () {
  return this.sectname;
};

/**
 * Set the section name of this section.
 * @memberof Section
 */
Section.prototype.setSectionName = function (value) {
  this.sectname = value;
};

/**
 * Get the flag to indicate whether this is a special section or a child of one.
 * @memberof Section
 * @returns {boolean}
 */
Section.prototype.isSpecial = function () {
  return this.special;
};

/**
 * Set the flag to indicate whether this is a special section or a child of one.
 * @memberof Section
 */
Section.prototype.setSpecial = function (value) {
  this.special = value;
};

/**
 * Get the state of the numbered attribute at this section (need to preserve for creating TOC).
 * @memberof Section
 * @returns {boolean}
 */
Section.prototype.isNumbered = function () {
  return this.numbered;
};

/**
 * Get the caption for this section (only relevant for appendices).
 * @memberof Section
 * @returns {string}
 */
Section.prototype.getCaption = function () {
  var value = this.caption;
  return value === Opal.nil ? undefined : value;
};

/**
 * Get the name of the Section (title)
 * @memberof Section
 * @returns {string}
 * @see {@link AbstractBlock#getTitle}
 */
Section.prototype.getName = function () {
  return this.getTitle();
};

/**
 * @namespace
 */
var Block = Opal.Asciidoctor.Block;

/**
 * Get the source of this block.
 * @memberof Block
 * @returns {string} - returns the String source of this block.
 */
Block.prototype.getSource = function () {
  return this.$source();
};

/**
 * Get the source lines of this block.
 * @memberof Block
 * @returns {Array} - returns the String {Array} of source lines for this block.
 */
Block.prototype.getSourceLines = function () {
  return this.lines;
};

// AbstractNode API

/**
 * @namespace
 */
var AbstractNode = Opal.Asciidoctor.AbstractNode;

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getNodeName = function () {
  return this.node_name;
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getAttributes = function () {
  return fromHash(this.attributes);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getAttribute = function (name, defaultValue, inherit) {
  var value = this.$attr(name, defaultValue, inherit);
  return value === Opal.nil ? undefined : value;
};

/**
 * Check whether the specified attribute is present on this node.
 *
 * @memberof AbstractNode
 * @returns {boolean} - true if the attribute is present, otherwise false
 */
AbstractNode.prototype.hasAttribute = function (name) {
  return name in this.attributes.$$smap;
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.isAttribute = function (name, expectedValue, inherit) {
  var result = this['$attr?'](name, expectedValue, inherit);
  return result === Opal.nil ? false : result;
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.setAttribute = function (name, value, overwrite) {
  if (typeof overwrite === 'undefined') overwrite = true;
  return this.$set_attr(name, value, overwrite);
};

/**
 * Remove the attribute from the current node.
 * @param {string} name - The String attribute name to remove
 * @returns {string} - returns the previous {String} value, or undefined if the attribute was not present.
 * @memberof AbstractNode
 */
AbstractNode.prototype.removeAttribute = function (name) {
  var value = this.$remove_attr(name);
  return value === Opal.nil ? undefined : value;
};

/**
 * Get the {@link Document} to which this node belongs.
 *
 * @memberof AbstractNode
 * @returns {Document} - returns the {@link Document} object to which this node belongs.
 */
AbstractNode.prototype.getDocument = function () {
  return this.document;
};

/**
 * Get the {@link AbstractNode} to which this node is attached.
 *
 * @memberof AbstractNode
 * @returns {AbstractNode} - returns the {@link AbstractNode} object to which this node is attached,
 * or undefined if this node has no parent.
 */
AbstractNode.prototype.getParent = function () {
  var parent = this.parent;
  return parent === Opal.nil ? undefined : parent;
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.isInline = function () {
  return this['$inline?']();
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.isBlock = function () {
  return this['$block?']();
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.isRole = function (expected) {
  return this['$role?'](expected);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getRole = function () {
  return this.$role();
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.hasRole = function (name) {
  return this['$has_role?'](name);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getRoles = function () {
  return this.$roles();
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.addRole = function (name) {
  return this.$add_role(name);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.removeRole = function (name) {
  return this.$remove_role(name);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.isReftext = function () {
  return this['$reftext?']();
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getReftext = function () {
  return this.$reftext();
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getContext = function () {
  var context = this.context;
  // Automatically convert Opal pseudo-symbol to String
  return typeof context === 'string' ? context : context.toString();
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getId = function () {
  var id = this.id;
  return id === Opal.nil ? undefined : id;
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.isOption = function (name) {
  return this['$option?'](name);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.setOption = function (name) {
  return this.$set_option(name);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getIconUri = function (name) {
  return this.$icon_uri(name);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getMediaUri = function (target, assetDirKey) {
  return this.$media_uri(target, assetDirKey);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getImageUri = function (targetImage, assetDirKey) {
  return this.$image_uri(targetImage, assetDirKey);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.getConverter = function () {
  return this.$converter();
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.readContents = function (target, options) {
  return this.$read_contents(target, toHash(options));
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.readAsset = function (path, options) {
  return this.$read_asset(path, toHash(options));
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.normalizeWebPath = function (target, start, preserveTargetUri) {
  return this.$normalize_web_path(target, start, preserveTargetUri);
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.normalizeSystemPath = function (target, start, jail, options) {
  return this.$normalize_system_path(target, start, jail, toHash(options));
};

/**
 * @memberof AbstractNode
 */
AbstractNode.prototype.normalizeAssetPath = function (assetRef, assetName, autoCorrect) {
  return this.$normalize_asset_path(assetRef, assetName, autoCorrect);
};

// Document API

/**
 * The {@link Document} class represents a parsed AsciiDoc document.
 *
 * Document is the root node of a parsed AsciiDoc document.<br/>
 * It provides an abstract syntax tree (AST) that represents the structure of the AsciiDoc document
 * from which the Document object was parsed.
 *
 * Although the constructor can be used to create an empty document object,
 * more commonly, you'll load the document object from AsciiDoc source
 * using the primary API methods on {@link Asciidoctor}.
 * When using one of these APIs, you almost always want to set the safe mode to 'safe' (or 'unsafe')
 * to enable all of Asciidoctor's features.
 *
 * <pre>
 *   var doc = Asciidoctor.load('= Hello, AsciiDoc!', {'safe': 'safe'});
 *   // => Asciidoctor::Document { doctype: "article", doctitle: "Hello, Asciidoc!", blocks: 0 }
 * </pre>
 *
 * Instances of this class can be used to extract information from the document or alter its structure.
 * As such, the Document object is most often used in extensions and by integrations.
 *
 * The most basic usage of the Document object is to retrieve the document's title.
 *
 * <pre>
 *  var source = '= Document Title';
 *  var doc = asciidoctor.load(source, {'safe': 'safe'});
 *  console.log(doc.getTitle()); // 'Document Title'
 * </pre>
 *
 * You can also use the Document object to access document attributes defined in the header, such as the author and doctype.
 * @namespace
 * @extends AbstractBlock
 */

var Document = Opal.Asciidoctor.Document;

/**
 * Returns a JSON {Object} of ids captured by the processor.
 *
 * @returns {Object} - returns a JSON {Object} of ids in the document.
 * @memberof Document
 */
Document.prototype.getIds = function () {
  return fromHash(this.catalog.$$smap.ids);
};

/**
 * Returns a JSON {Object} of references captured by the processor.
 *
 * @returns {Object} - returns a JSON {Object} of {AbstractNode} in the document.
 * @memberof Document
 */
Document.prototype.getRefs = function () {
  return fromHash(this.catalog.$$smap.refs);
};

/**
 * Returns an {Array} of Document/ImageReference} captured by the processor.
 *
 * @returns {Array} - returns an {Array} of {Document/ImageReference} in the document.
 * Will return an empty array if the option "catalog_assets: true" was not defined on the processor.
 * @memberof Document
 */
Document.prototype.getImages = function () {
  return this.catalog.$$smap.images;
};

/**
 * Returns an {Array} of index terms captured by the processor.
 *
 * @returns {Array} - returns an {Array} of index terms in the document.
 * Will return an empty array if the function was called before the document was converted.
 * @memberof Document
 */
Document.prototype.getIndexTerms = function () {
  return this.catalog.$$smap.indexterms;
};

/**
 * Returns an {Array} of links captured by the processor.
 *
 * @returns {Array} - returns an {Array} of links in the document.
 * Will return an empty array if:
 * - the function was called before the document was converted
 * - the option "catalog_assets: true" was not defined on the processor
 * @memberof Document
 */
Document.prototype.getLinks = function () {
  return this.catalog.$$smap.links;
};

/**
 * @returns {boolean} - returns true if the document has footnotes otherwise false
 * @memberof Document
 */
Document.prototype.hasFootnotes = function () {
  return this['$footnotes?']();
};

/**
 * Returns an {Array} of {Document/Footnote} captured by the processor.
 *
 * @returns {Array} - returns an {Array} of {Document/Footnote} in the document.
 * Will return an empty array if the function was called before the document was converted.
 * @memberof Document
 */
Document.prototype.getFootnotes = function () {
  return this.$footnotes();
};

/**
 * @returns {string} - returns the level-0 section
 * @memberof Document
 */
Document.prototype.getHeader = function () {
  return this.header;
};

/**
 * @memberof Document
 */
Document.prototype.setAttribute = function (name, value) {
  return this.$set_attribute(name, value);
};

/**

 * @memberof Document
 */
Document.prototype.removeAttribute = function (name) {
  this.attributes.$delete(name);
  this.attribute_overrides.$delete(name);
};

/**
 * @memberof Document
 */
Document.prototype.convert = function (options) {
  var result = this.$convert(toHash(options));
  return result === Opal.nil ? '' : result;
};

/**
 * @memberof Document
 */
Document.prototype.write = function (output, target) {
  return this.$write(output, target);
};

/**
 * @returns {string} - returns the full name of the author as a String
 * @memberof Document
 */
Document.prototype.getAuthor = function () {
  return this.$author();
};

/**
 * @memberof Document
 */
Document.prototype.getSource = function () {
  return this.$source();
};

/**
 * @memberof Document
 */
Document.prototype.getSourceLines = function () {
  return this.$source_lines();
};

/**
 * @memberof Document
 */
Document.prototype.isNested = function () {
  return this['$nested?']();
};

/**
 * @memberof Document
 */
Document.prototype.isEmbedded = function () {
  return this['$embedded?']();
};

/**
 * @memberof Document
 */
Document.prototype.hasExtensions = function () {
  return this['$extensions?']();
};

/**
 * @memberof Document
 */
Document.prototype.getDoctype = function () {
  return this.doctype;
};

/**
 * @memberof Document
 */
Document.prototype.getBackend = function () {
  return this.backend;
};

/**
 * @memberof Document
 */
Document.prototype.isBasebackend = function (base) {
  return this['$basebackend?'](base);
};

/**
 * Get the title explicitly defined in the document attributes.
 * @returns {string}
 * @see {@link AbstractNode#getAttributes}
 * @memberof Document
 */
Document.prototype.getTitle = function () {
  var title = this.$title();
  return title === Opal.nil ? undefined : title;
};

/**
 * @memberof Document
 */
Document.prototype.setTitle = function (title) {
  return this['$title='](title);
};

/**
 * @memberof Document
 * @returns {Document/Title} - returns a {@link Document/Title}
 */
Document.prototype.getDocumentTitle = function (options) {
  var doctitle = this.$doctitle(toHash(options));
  return doctitle === Opal.nil ? undefined : doctitle;
};

/**
 * @memberof Document
 * @see {@link Document#getDocumentTitle}
 */
Document.prototype.getDoctitle = Document.prototype.getDocumentTitle;

/**
 * Get the document catalog Hash.
 * @memberof Document
 */
Document.prototype.getCatalog = function () {
  return fromHash(this.catalog);
};

/**
 * @memberof Document
 */
Document.prototype.getReferences = Document.prototype.getCatalog;

/**
 * Get the document revision date from document header (document attribute <code>revdate</code>).
 * @memberof Document
 */
Document.prototype.getRevisionDate = function () {
  return this.getAttribute('revdate');
};

/**
 * @memberof Document
 * @see Document#getRevisionDate
 */
Document.prototype.getRevdate = function () {
  return this.getRevisionDate();
};

/**
 * Get the document revision number from document header (document attribute <code>revnumber</code>).
 * @memberof Document
 */
Document.prototype.getRevisionNumber = function () {
  return this.getAttribute('revnumber');
};

/**
 * Get the document revision remark from document header (document attribute <code>revremark</code>).
 * @memberof Document
 */
Document.prototype.getRevisionRemark = function () {
  return this.getAttribute('revremark');
};


/**
 *  Assign a value to the specified attribute in the document header.
 *
 *  The assignment will be visible when the header attributes are restored,
 *  typically between processor phases (e.g., between parse and convert).
 *
 * @param {string} name - The {string} attribute name to assign
 * @param {Object} value - The {Object} value to assign to the attribute (default: '')
 * @param {boolean} overwrite - A {boolean} indicating whether to assign the attribute
 * if already present in the attributes Hash (default: true)
 *
 * @memberof Document
 * @returns {boolean} - returns true if the assignment was performed otherwise false
 */
Document.prototype.setHeaderAttribute = function (name, value, overwrite) {
  if (typeof overwrite === 'undefined') overwrite = true;
  if (typeof value === 'undefined') value = '';
  return this.$set_header_attribute(name, value, overwrite);
};

/**
 * Convenience method to retrieve the authors of this document as an {Array} of {Document/Author} objects.
 *
 * This method is backed by the author-related attributes on the document.
 *
 * @memberof Document
 * @returns {Array} - returns an {Array} of {Document/Author} objects.
 */
Document.prototype.getAuthors = function () {
  return this.$authors();
};

// Document.Footnote API

/**
 * @namespace
 * @module Document/Footnote
 */
var Footnote = Document.Footnote;

/**
 * @memberof Document/Footnote
 * @returns {number} - returns the footnote's index
 */
Footnote.prototype.getIndex = function () {
  var index = this.$$data.index;
  return index === Opal.nil ? undefined : index;
};

/**
 * @memberof Document/Footnote
 * @returns {string} - returns the footnote's id
 */
Footnote.prototype.getId = function () {
  var id = this.$$data.id;
  return id === Opal.nil ? undefined : id;
};

/**
 * @memberof Document/Footnote
 * @returns {string} - returns the footnote's text
 */
Footnote.prototype.getText = function () {
  var text = this.$$data.text;
  return text === Opal.nil ? undefined : text;
};

// Document.ImageReference API

/**
 * @namespace
 * @module Document/ImageReference
 */
var ImageReference = Document.ImageReference;

/**
 * @memberof Document/ImageReference
 * @returns {string} - returns the image's target
 */
ImageReference.prototype.getTarget = function () {
  return this.$$data.target;
};

/**
 * @memberof Document/ImageReference
 * @returns {string} - returns the image's directory (imagesdir attribute)
 */
ImageReference.prototype.getImagesDirectory = function () {
  var value = this.$$data.imagesdir;
  return value === Opal.nil ? undefined : value;
};

// Document.Author API

/**
 * @namespace
 * @module Document/Author
 */
var Author = Document.Author;

/**
 * @memberof Document/Author
 * @returns {string} - returns the author's full name
 */
Author.prototype.getName = function () {
  var name = this.$$data.name;
  return name === Opal.nil ? undefined : name;
};

/**
 * @memberof Document/Author
 * @returns {string} - returns the author's first name
 */
Author.prototype.getFirstName = function () {
  var firstName = this.$$data.firstname;
  return firstName === Opal.nil ? undefined : firstName;
};

/**
 * @memberof Document/Author
 * @returns {string} - returns the author's middle name (or undefined if the author has no middle name)
 */
Author.prototype.getMiddleName = function () {
  var middleName = this.$$data.middlename;
  return middleName === Opal.nil ? undefined : middleName;
};

/**
 * @memberof Document/Author
 * @returns {string} - returns the author's last name
 */
Author.prototype.getLastName = function () {
  var lastName = this.$$data.lastname;
  return lastName === Opal.nil ? undefined : lastName;
};

/**
 * @memberof Document/Author
 * @returns {string} - returns the author's initials (by default based on the author's name)
 */
Author.prototype.getInitials = function () {
  var initials = this.$$data.initials;
  return initials === Opal.nil ? undefined : initials;
};

/**
 * @memberof Document/Author
 * @returns {string} - returns the author's email
 */
Author.prototype.getEmail = function () {
  var email = this.$$data.email;
  return email === Opal.nil ? undefined : email;
};

// private constructor
Document.RevisionInfo = function (date, number, remark) {
  this.date = date;
  this.number = number;
  this.remark = remark;
};

/**
 * @class
 * @namespace
 * @module Document/RevisionInfo
 */
var RevisionInfo = Document.RevisionInfo;

/**
 * Get the document revision date from document header (document attribute <code>revdate</code>).
 * @memberof Document/RevisionInfo
 */
RevisionInfo.prototype.getDate = function () {
  return this.date;
};

/**
 * Get the document revision number from document header (document attribute <code>revnumber</code>).
 * @memberof Document/RevisionInfo
 */
RevisionInfo.prototype.getNumber = function () {
  return this.number;
};

/**
 * Get the document revision remark from document header (document attribute <code>revremark</code>).
 * A short summary of changes in this document revision.
 * @memberof Document/RevisionInfo
 */
RevisionInfo.prototype.getRemark = function () {
  return this.remark;
};

/**
 * @memberof Document/RevisionInfo
 * @returns {boolean} - returns true if the revision info is empty (ie. not defined), otherwise false
 */
RevisionInfo.prototype.isEmpty = function () {
  return this.date === undefined && this.number === undefined && this.remark === undefined;
};

/**
 * @memberof Document
 * @returns {Document/RevisionInfo} - returns a {@link Document/RevisionInfo}
 */
Document.prototype.getRevisionInfo = function () {
  return new Document.RevisionInfo(this.getRevisionDate(), this.getRevisionNumber(), this.getRevisionRemark());
};

/**
 * @memberof Document
 * @returns {boolean} - returns true if the document contains revision info, otherwise false
 */
Document.prototype.hasRevisionInfo = function () {
  var revisionInfo = this.getRevisionInfo();
  return !revisionInfo.isEmpty();
};

/**
 * @memberof Document
 */
Document.prototype.getNotitle = function () {
  return this.$notitle();
};

/**
 * @memberof Document
 */
Document.prototype.getNoheader = function () {
  return this.$noheader();
};

/**
 * @memberof Document
 */
Document.prototype.getNofooter = function () {
  return this.$nofooter();
};

/**
 * @memberof Document
 */
Document.prototype.hasHeader = function () {
  return this['$header?']();
};

/**
 * @memberof Document
 */
Document.prototype.deleteAttribute = function (name) {
  return this.$delete_attribute(name);
};

/**
 * @memberof Document
 */
Document.prototype.isAttributeLocked = function (name) {
  return this['$attribute_locked?'](name);
};

/**
 * @memberof Document
 */
Document.prototype.parse = function (data) {
  return this.$parse(data);
};

/**
 * @memberof Document
 */
Document.prototype.getDocinfo = function (docinfoLocation, suffix) {
  return this.$docinfo(docinfoLocation, suffix);
};

/**
 * @memberof Document
 */
Document.prototype.hasDocinfoProcessors = function (docinfoLocation) {
  return this['$docinfo_processors?'](docinfoLocation);
};

/**
 * @memberof Document
 */
Document.prototype.counterIncrement = function (counterName, block) {
  return this.$counter_increment(counterName, block);
};

/**
 * @memberof Document
 */
Document.prototype.counter = function (name, seed) {
  return this.$counter(name, seed);
};

/**
 * @memberof Document
 */
Document.prototype.getSafe = function () {
  return this.safe;
};

/**
 * @memberof Document
 */
Document.prototype.getCompatMode = function () {
  return this.compat_mode;
};

/**
 * @memberof Document
 */
Document.prototype.getSourcemap = function () {
  return this.sourcemap;
};

/**
 * @memberof Document
 */
Document.prototype.getCounters = function () {
  return fromHash(this.counters);
};

/**
 * @memberof Document
 */
Document.prototype.getCallouts = function () {
  return this.$callouts();
};

/**
 * @memberof Document
 */
Document.prototype.getBaseDir = function () {
  return this.base_dir;
};

/**
 * @memberof Document
 */
Document.prototype.getOptions = function () {
  return fromHash(this.options);
};

/**
 * @memberof Document
 */
Document.prototype.getOutfilesuffix = function () {
  return this.outfilesuffix;
};

/**
 * @memberof Document
 */
Document.prototype.getParentDocument = function () {
  return this.parent_document;
};

/**
 * @memberof Document
 */
Document.prototype.getReader = function () {
  return this.reader;
};

/**
 * @memberof Document
 */
Document.prototype.getConverter = function () {
  return this.converter;
};

/**
 * @memberof Document
 */
Document.prototype.getExtensions = function () {
  return this.extensions;
};

// Document.Title API

/**
 * @namespace
 * @module Document/Title
 */
var Title = Document.Title;

/**
 * @memberof Document/Title
 */
Title.prototype.getMain = function () {
  return this.main;
};

/**
 * @memberof Document/Title
 */
Title.prototype.getCombined = function () {
  return this.combined;
};

/**
 * @memberof Document/Title
 */
Title.prototype.getSubtitle = function () {
  var subtitle = this.subtitle;
  return subtitle === Opal.nil ? undefined : subtitle;
};

/**
 * @memberof Document/Title
 */
Title.prototype.isSanitized = function () {
  var sanitized = this['$sanitized?']();
  return sanitized === Opal.nil ? false : sanitized;
};

/**
 * @memberof Document/Title
 */
Title.prototype.hasSubtitle = function () {
  return this['$subtitle?']();
};

// Inline API

/**
 * @namespace
 * @extends AbstractNode
 */
var Inline = Opal.Asciidoctor.Inline;

/**
 * Create a new Inline element.
 *
 * @memberof Inline
 * @returns {Inline} - returns a new Inline element
 */
Opal.Asciidoctor.Inline['$$class'].prototype.create = function (parent, context, text, opts) {
  return this.$new(parent, context, text, toHash(opts));
};

/**
 * Get the converted content for this inline node.
 *
 * @memberof Inline
 * @returns {string} - returns the converted String content for this inline node
 */
Inline.prototype.convert = function () {
  return this.$convert();
};

/**
 * Get the converted String text of this Inline node, if applicable.
 *
 * @memberof Inline
 * @returns {string} - returns the converted String text for this Inline node, or undefined if not applicable for this node.
 */
Inline.prototype.getText = function () {
  var text = this.$text();
  return text === Opal.nil ? undefined : text;
};

/**
 * Get the String sub-type (aka qualifier) of this Inline node.
 *
 * This value is used to distinguish different variations of the same node
 * category, such as different types of anchors.
 *
 * @memberof Inline
 * @returns {string} - returns the string sub-type of this Inline node.
 */
Inline.prototype.getType = function () {
  return this.$type();
};

/**
 * Get the primary String target of this Inline node.
 *
 * @memberof Inline
 * @returns {string} - returns the string target of this Inline node.
 */
Inline.prototype.getTarget = function () {
  var target = this.$target();
  return target === Opal.nil ? undefined : target;
};

// List API

/** @namespace */
var List = Opal.Asciidoctor.List;

/**
 * Get the Array of {@link ListItem} nodes for this {@link List}.
 *
 * @memberof List
 * @returns {Array} - returns an Array of {@link ListItem} nodes.
 */
List.prototype.getItems = function () {
  return this.blocks;
};

// ListItem API

/** @namespace */
var ListItem = Opal.Asciidoctor.ListItem;

/**
 * Get the converted String text of this ListItem node.
 *
 * @memberof ListItem
 * @returns {string} - returns the converted String text for this ListItem node.
 */
ListItem.prototype.getText = function () {
  return this.$text();
};

/**
 * Set the String source text of this ListItem node.
 *
 * @memberof ListItem
 */
ListItem.prototype.setText = function (text) {
  return this.text = text;
};

// Reader API

/** @namespace */
var Reader = Opal.Asciidoctor.Reader;

/**
 * @memberof Reader
 */
Reader.prototype.pushInclude = function (data, file, path, lineno, attributes) {
  return this.$push_include(data, file, path, lineno, toHash(attributes));
};

/**
 * Get the current location of the reader's cursor, which encapsulates the
 * file, dir, path, and lineno of the file being read.
 *
 * @memberof Reader
 */
Reader.prototype.getCursor = function () {
  return this.$cursor();
};

/**
 * Get a copy of the remaining {Array} of String lines managed by this Reader.
 *
 * @memberof Reader
 * @returns {Array} - returns A copy of the String {Array} of lines remaining in this Reader.
 */
Reader.prototype.getLines = function () {
  return this.$lines();
};

/**
 * Get the remaining lines managed by this Reader as a String.
 *
 * @memberof Reader
 * @returns {string} - returns The remaining lines managed by this Reader as a String (joined by linefeed characters).
 */
Reader.prototype.getString = function () {
  return this.$string();
};

// Cursor API

/** @namespace */
var Cursor = Opal.Asciidoctor.Reader.Cursor;

/**
 * Get the file associated to the cursor.
 * @memberof Cursor
 */
Cursor.prototype.getFile = function () {
  var file = this.file;
  return file === Opal.nil ? undefined : file;
};

/**
 * Get the directory associated to the cursor.
 * @memberof Cursor
 * @returns {string} - returns the directory associated to the cursor
 */
Cursor.prototype.getDirectory = function () {
  var dir = this.dir;
  return dir === Opal.nil ? undefined : dir;
};

/**
 * Get the path associated to the cursor.
 * @memberof Cursor
 * @returns {string} - returns the path associated to the cursor (or '<stdin>')
 */
Cursor.prototype.getPath = function () {
  var path = this.path;
  return path === Opal.nil ? undefined : path;
};

/**
 * Get the line number of the cursor.
 * @memberof Cursor
 * @returns {number} - returns the line number of the cursor
 */
Cursor.prototype.getLineNumber = function () {
  return this.lineno;
};

// Logger API (available in Asciidoctor 1.5.7+)

function initializeLoggerFormatterClass (className, functions) {
  var superclass = Opal.const_get_qualified(Opal.Logger, 'Formatter');
  return initializeClass(superclass, className, functions, {}, {
    'call': function (args) {
      for (var i = 0; i < args.length; i++) {
        // convert all (Opal) Hash arguments to JSON.
        if (typeof args[i] === 'object' && '$$smap' in args[i]) {
          args[i] = fromHash(args[i]);
        }
      }
      return args;
    }
  });
}

function initializeLoggerClass (className, functions) {
  var superClass = Opal.const_get_qualified(Opal.Asciidoctor, 'Logger');
  return initializeClass(superClass, className, functions, {}, {
    'add': function (args) {
      if (args.length >= 2 && typeof args[2] === 'object' && '$$smap' in args[2]) {
        var message = args[2];
        var messageObject = fromHash(message);
        messageObject.getText = function () {
          return this['text'];
        };
        messageObject.getSourceLocation = function () {
          return this['source_location'];
        };
        messageObject['$inspect'] = function () {
          var sourceLocation = this.getSourceLocation();
          if (sourceLocation) {
            return sourceLocation.getPath() + ': line ' + sourceLocation.getLineNumber() + ': ' + this.getText();
          } else {
            return this.getText();
          }
        };
        args[2] = messageObject;
      }
      return args;
    }
  });
}

/**
 * @namespace
 */
var LoggerManager = Opal.const_get_qualified(Opal.Asciidoctor, 'LoggerManager', true);

// Alias
Opal.Asciidoctor.LoggerManager = LoggerManager;

if (LoggerManager) {
  LoggerManager.getLogger = function () {
    return this.$logger();
  };

  LoggerManager.setLogger = function (logger) {
    this.logger = logger;
  };

  LoggerManager.newLogger = function (name, functions) {
    return initializeLoggerClass(name, functions).$new();
  };

  LoggerManager.newFormatter = function (name, functions) {
    return initializeLoggerFormatterClass(name, functions).$new();
  };
}

/**
 * @namespace
 */
var LoggerSeverity = Opal.const_get_qualified(Opal.Logger, 'Severity', true);

// Alias
Opal.Asciidoctor.LoggerSeverity = LoggerSeverity;

if (LoggerSeverity) {
  LoggerSeverity.get = function (severity) {
    return LoggerSeverity.$constants()[severity];
  };
}

/**
 * @namespace
 */
var LoggerFormatter = Opal.const_get_qualified(Opal.Logger, 'Formatter', true);


// Alias
Opal.Asciidoctor.LoggerFormatter = LoggerFormatter;

if (LoggerFormatter) {
  LoggerFormatter.prototype.call = function (severity, time, programName, message) {
    return this.$call(LoggerSeverity.get(severity), time, programName, message);
  };
}

/**
 * @namespace
 */
var MemoryLogger = Opal.const_get_qualified(Opal.Asciidoctor, 'MemoryLogger', true);

// Alias
Opal.Asciidoctor.MemoryLogger = MemoryLogger;

if (MemoryLogger) {
  MemoryLogger.prototype.getMessages = function () {
    var messages = this.messages;
    var result = [];
    for (var i = 0; i < messages.length; i++) {
      var message = messages[i];
      var messageObject = fromHash(message);
      if (typeof messageObject.message === 'string') {
        messageObject.getText = function () {
          return this.message;
        };
      } else {
        // also convert the message attribute
        messageObject.message = fromHash(messageObject.message);
        messageObject.getText = function () {
          return this.message['text'];
        };
      }
      messageObject.getSeverity = function () {
        return this.severity.toString();
      };
      messageObject.getSourceLocation = function () {
        return this.message['source_location'];
      };
      result.push(messageObject);
    }
    return result;
  };
}

/**
 * @namespace
 */
var Logger = Opal.const_get_qualified(Opal.Asciidoctor, 'Logger', true);

// Alias
Opal.Asciidoctor.Logger = Logger;

if (Logger) {
  Logger.prototype.getMaxSeverity = function () {
    return this.max_severity;
  };
  Logger.prototype.getFormatter = function () {
    return this.formatter;
  };
  Logger.prototype.setFormatter = function (formatter) {
    return this.formatter = formatter;
  };
  Logger.prototype.getLevel = function () {
    return this.level;
  };
  Logger.prototype.setLevel = function (level) {
    return this.level = level;
  };
  Logger.prototype.getProgramName = function () {
    return this.progname;
  };
  Logger.prototype.setProgramName = function (programName) {
    return this.progname = programName;
  };
}

/**
 * @namespace
 */
var NullLogger = Opal.const_get_qualified(Opal.Asciidoctor, 'NullLogger', true);

// Alias
Opal.Asciidoctor.NullLogger = NullLogger;


if (NullLogger) {
  NullLogger.prototype.getMaxSeverity = function () {
    return this.max_severity;
  };
}


// Alias
Opal.Asciidoctor.StopIteration = Opal.StopIteration;

// Extensions API

/**
 * @private
 */
var toBlock = function (block) {
  // arity is a mandatory field
  block.$$arity = block.length;
  return block;
};

var registerExtension = function (registry, type, processor, name) {
  if (typeof processor === 'object' || processor.$$is_class) {
    // processor is an instance or a class
    return registry['$' + type](processor, name);
  } else {
    // processor is a function/lambda
    return Opal.send(registry, type, name && [name], toBlock(processor));
  }
};

/**
 * @namespace
 * @description
 * Extensions provide a way to participate in the parsing and converting
 * phases of the AsciiDoc processor or extend the AsciiDoc syntax.
 *
 * The various extensions participate in AsciiDoc processing as follows:
 *
 * 1. After the source lines are normalized, {{@link Extensions/Preprocessor}}s modify or replace
 *    the source lines before parsing begins. {{@link Extensions/IncludeProcessor}}s are used to
 *    process include directives for targets which they claim to handle.
 * 2. The Parser parses the block-level content into an abstract syntax tree.
 *    Custom blocks and block macros are processed by associated {{@link Extensions/BlockProcessor}}s
 *    and {{@link Extensions/BlockMacroProcessor}}s, respectively.
 * 3. {{@link Extensions/TreeProcessor}}s are run on the abstract syntax tree.
 * 4. Conversion of the document begins, at which point inline markup is processed
 *    and converted. Custom inline macros are processed by associated {InlineMacroProcessor}s.
 * 5. {{@link Extensions/Postprocessor}}s modify or replace the converted document.
 * 6. The output is written to the output stream.
 *
 * Extensions may be registered globally using the {Extensions.register} method
 * or added to a custom {Registry} instance and passed as an option to a single
 * Asciidoctor processor.
 *
 * @example
 * Opal.Asciidoctor.Extensions.register(function () {
 *   this.block(function () {
 *     var self = this;
 *     self.named('shout');
 *     self.onContext('paragraph');
 *     self.process(function (parent, reader) {
 *       var lines = reader.getLines().map(function (l) { return l.toUpperCase(); });
 *       return self.createBlock(parent, 'paragraph', lines);
 *     });
 *   });
 * });
 */
var Extensions = Opal.const_get_qualified(Opal.Asciidoctor, 'Extensions');

// Alias
Opal.Asciidoctor.Extensions = Extensions;

/**
 * Create a new {@link Extensions/Registry}.
 * @param {string} name
 * @param {function} block
 * @memberof Extensions
 * @returns {Extensions/Registry} - returns a {@link Extensions/Registry}
 */
Extensions.create = function (name, block) {
  if (typeof name === 'function' && typeof block === 'undefined') {
    return Opal.send(this, 'build_registry', null, toBlock(name));
  } else if (typeof block === 'function') {
    return Opal.send(this, 'build_registry', [name], toBlock(block));
  } else {
    return this.$build_registry();
  }
};

/**
 * @memberof Extensions
 */
Extensions.register = function (name, block) {
  if (typeof name === 'function' && typeof block === 'undefined') {
    return Opal.send(this, 'register', null, toBlock(name));
  } else {
    return Opal.send(this, 'register', [name], toBlock(block));
  }
};

/**
 * Get statically-registerd extension groups.
 * @memberof Extensions
 */
Extensions.getGroups = function () {
  return fromHash(this.$groups());
};

/**
 * Unregister all statically-registered extension groups.
 * @memberof Extensions
 */
Extensions.unregisterAll = function () {
  this.$unregister_all();
};

/**
 * Unregister the specified statically-registered extension groups.
 *
 * NOTE Opal cannot delete an entry from a Hash that is indexed by symbol, so
 * we have to resort to using low-level operations in this method.
 *
 * @memberof Extensions
 */
Extensions.unregister = function () {
  var names = Array.prototype.concat.apply([], arguments);
  var groups = this.$groups();
  var groupNameIdx = {};
  for (var i = 0, groupSymbolNames = groups.$$keys; i < groupSymbolNames.length; i++) {
    var groupSymbolName = groupSymbolNames[i];
    groupNameIdx[groupSymbolName.toString()] = groupSymbolName;
  }
  for (var j = 0; j < names.length; j++) {
    var groupStringName = names[j];
    if (groupStringName in groupNameIdx) Opal.hash_delete(groups, groupNameIdx[groupStringName]);
  }
};

/**
 * @namespace
 * @module Extensions/Registry
 */
var Registry = Extensions.Registry;

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.getGroups = Extensions.getGroups;

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.unregisterAll = function () {
  this.groups = Opal.hash();
};

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.unregister = Extensions.unregister;

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.prefer = function (name, processor) {
  if (arguments.length === 1) {
    processor = name;
    name = null;
  }
  if (typeof processor === 'object' || processor.$$is_class) {
    // processor is an instance or a class
    return this['$prefer'](name, processor);
  } else {
    // processor is a function/lambda
    return Opal.send(this, 'prefer', name && [name], toBlock(processor));
  }
};

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.block = function (name, processor) {
  if (arguments.length === 1) {
    processor = name;
    name = null;
  }
  return registerExtension(this, 'block', processor, name);
};

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.inlineMacro = function (name, processor) {
  if (arguments.length === 1) {
    processor = name;
    name = null;
  }
  return registerExtension(this, 'inline_macro', processor, name);
};

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.includeProcessor = function (name, processor) {
  if (arguments.length === 1) {
    processor = name;
    name = null;
  }
  return registerExtension(this, 'include_processor', processor, name);
};

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.blockMacro = function (name, processor) {
  if (arguments.length === 1) {
    processor = name;
    name = null;
  }
  return registerExtension(this, 'block_macro', processor, name);
};

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.treeProcessor = function (name, processor) {
  if (arguments.length === 1) {
    processor = name;
    name = null;
  }
  return registerExtension(this, 'tree_processor', processor, name);
};

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.postprocessor = function (name, processor) {
  if (arguments.length === 1) {
    processor = name;
    name = null;
  }
  return registerExtension(this, 'postprocessor', processor, name);
};

/**
 * @memberof Extensions/Registry
 */
Registry.prototype.preprocessor = function (name, processor) {
  if (arguments.length === 1) {
    processor = name;
    name = null;
  }
  return registerExtension(this, 'preprocessor', processor, name);
};

/**
 * @memberof Extensions/Registry
 */

Registry.prototype.docinfoProcessor = function (name, processor) {
  if (arguments.length === 1) {
    processor = name;
    name = null;
  }
  return registerExtension(this, 'docinfo_processor', processor, name);
};

/**
 * @namespace
 * @module Extensions/Processor
 */
var Processor = Extensions.Processor;

/**
 * The extension will be added to the beginning of the list for that extension type. (default is append).
 * @memberof Extensions/Processor
 * @deprecated Please use the <code>prefer</pre> function on the {@link Extensions/Registry},
 * the {@link Extensions/IncludeProcessor},
 * the {@link Extensions/TreeProcessor},
 * the {@link Extensions/Postprocessor},
 * the {@link Extensions/Preprocessor}
 * or the {@link Extensions/DocinfoProcessor}
 */
Processor.prototype.prepend = function () {
  this.$option('position', '>>');
};

/**
 * @memberof Extensions/Processor
 */
Processor.prototype.process = function (block) {
  var handler = {
    apply: function (target, thisArg, argumentsList) {
      for (var i = 0; i < argumentsList.length; i++) {
        // convert all (Opal) Hash arguments to JSON.
        if (typeof argumentsList[i] === 'object' && '$$smap' in argumentsList[i]) {
          argumentsList[i] = fromHash(argumentsList[i]);
        }
      }
      return target.apply(thisArg, argumentsList);
    }
  };
  var blockProxy = new Proxy(block, handler);
  return Opal.send(this, 'process', null, toBlock(blockProxy));
};

/**
 * @memberof Extensions/Processor
 */
Processor.prototype.named = function (name) {
  return this.$named(name);
};

/**
 * @memberof Extensions/Processor
 */
Processor.prototype.createBlock = function (parent, context, source, attrs, opts) {
  return this.$create_block(parent, context, source, toHash(attrs), toHash(opts));
};

/**
 * Creates a list block node and links it to the specified parent.
 *
 * @param parent - The parent Block (Block, Section, or Document) of this new list block.
 * @param {string} context - The list context (e.g., ulist, olist, colist, dlist)
 * @param {Object} attrs - An object of attributes to set on this list block
 *
 * @memberof Extensions/Processor
 */
Processor.prototype.createList = function (parent, context, attrs) {
  return this.$create_list(parent, context, toHash(attrs));
};

/**
 * Creates a list item node and links it to the specified parent.
 *
 * @param parent - The parent List of this new list item block.
 * @param {string} text - The text of the list item.
 *
 * @memberof Extensions/Processor
 */
Processor.prototype.createListItem = function (parent, text) {
  return this.$create_list_item(parent, text);
};

/**
 * @memberof Extensions/Processor
 */
Processor.prototype.createImageBlock = function (parent, attrs, opts) {
  return this.$create_image_block(parent, toHash(attrs), toHash(opts));
};

/**
 * @memberof Extensions/Processor
 */
Processor.prototype.createInline = function (parent, context, text, opts) {
  if (opts && opts.attributes) {
    opts.attributes = toHash(opts.attributes);
  }
  return this.$create_inline(parent, context, text, toHash(opts));
};

/**
 * @memberof Extensions/Processor
 */
Processor.prototype.parseContent = function (parent, content, attrs) {
  return this.$parse_content(parent, content, attrs);
};

/**
 * @memberof Extensions/Processor
 */
Processor.prototype.positionalAttributes = function (value) {
  return this.$positional_attrs(value);
};

/**
 * @memberof Extensions/Processor
 */
Processor.prototype.resolvesAttributes = function (args) {
  return this.$resolves_attributes(args);
};

/**
 * @namespace
 * @module Extensions/BlockProcessor
 */
var BlockProcessor = Extensions.BlockProcessor;

/**
 * @memberof Extensions/BlockProcessor
 */
BlockProcessor.prototype.onContext = function (context) {
  return this.$on_context(context);
};

/**
 * @memberof Extensions/BlockProcessor
 */
BlockProcessor.prototype.onContexts = function () {
  return this.$on_contexts(Array.prototype.slice.call(arguments));
};

/**
 * @memberof Extensions/BlockProcessor
 */
BlockProcessor.prototype.getName = function () {
  var name = this.name;
  return name === Opal.nil ? undefined : name;
};

/**
 * @namespace
 * @module Extensions/BlockMacroProcessor
 */
var BlockMacroProcessor = Extensions.BlockMacroProcessor;

/**
 * @memberof Extensions/BlockMacroProcessor
 */
BlockMacroProcessor.prototype.getName = function () {
  var name = this.name;
  return name === Opal.nil ? undefined : name;
};

/**
 * @namespace
 * @module Extensions/InlineMacroProcessor
 */
var InlineMacroProcessor = Extensions.InlineMacroProcessor;

/**
 * @memberof Extensions/InlineMacroProcessor
 */
InlineMacroProcessor.prototype.getName = function () {
  var name = this.name;
  return name === Opal.nil ? undefined : name;
};

/**
 * @namespace
 * @module Extensions/IncludeProcessor
 */
var IncludeProcessor = Extensions.IncludeProcessor;

/**
 * @memberof Extensions/IncludeProcessor
 */
IncludeProcessor.prototype.handles = function (block) {
  return Opal.send(this, 'handles?', null, toBlock(block));
};

/**
 * @memberof Extensions/IncludeProcessor
 */
IncludeProcessor.prototype.prefer = function () {
  this.$prefer();
};

/**
 * @namespace
 * @module Extensions/TreeProcessor
 */
// eslint-disable-next-line no-unused-vars
var TreeProcessor = Extensions.TreeProcessor;

/**
 * @memberof Extensions/TreeProcessor
 */
TreeProcessor.prototype.prefer = function () {
  this.$prefer();
};

/**
 * @namespace
 * @module Extensions/Postprocessor
 */
// eslint-disable-next-line no-unused-vars
var Postprocessor = Extensions.Postprocessor;

/**
 * @memberof Extensions/Postprocessor
 */
Postprocessor.prototype.prefer = function () {
  this.$prefer();
};

/**
 * @namespace
 * @module Extensions/Preprocessor
 */
// eslint-disable-next-line no-unused-vars
var Preprocessor = Extensions.Preprocessor;

/**
 * @memberof Extensions/Preprocessor
 */
Preprocessor.prototype.prefer = function () {
  this.$prefer();
};

/**
 * @namespace
 * @module Extensions/DocinfoProcessor
 */
var DocinfoProcessor = Extensions.DocinfoProcessor;

/**
 * @memberof Extensions/DocinfoProcessor
 */
DocinfoProcessor.prototype.prefer = function () {
  this.$prefer();
};

/**
 * @memberof Extensions/DocinfoProcessor
 */
DocinfoProcessor.prototype.atLocation = function (value) {
  this.$at_location(value);
};

function initializeProcessorClass (superclassName, className, functions) {
  var superClass = Opal.const_get_qualified(Extensions, superclassName);
  return initializeClass(superClass, className, functions, {
    'handles?': function () {
      return true;
    }
  });
}

// Postprocessor

/**
 * Create a postprocessor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.createPostprocessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return initializeProcessorClass('Postprocessor', name, functions);
};

/**
 * Create and instantiate a postprocessor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.newPostprocessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return this.createPostprocessor(name, functions).$new();
};

// Preprocessor

/**
 * Create a preprocessor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.createPreprocessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return initializeProcessorClass('Preprocessor', name, functions);
};

/**
 * Create and instantiate a preprocessor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.newPreprocessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return this.createPreprocessor(name, functions).$new();
};

// Tree Processor

/**
 * Create a tree processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.createTreeProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return initializeProcessorClass('TreeProcessor', name, functions);
};

/**
 * Create and instantiate a tree processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.newTreeProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return this.createTreeProcessor(name, functions).$new();
};

// Include Processor

/**
 * Create an include processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.createIncludeProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return initializeProcessorClass('IncludeProcessor', name, functions);
};

/**
 * Create and instantiate an include processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.newIncludeProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return this.createIncludeProcessor(name, functions).$new();
};

// Docinfo Processor

/**
 * Create a Docinfo processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.createDocinfoProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return initializeProcessorClass('DocinfoProcessor', name, functions);
};

/**
 * Create and instantiate a Docinfo processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.newDocinfoProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return this.createDocinfoProcessor(name, functions).$new();
};

// Block Processor

/**
 * Create a block processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.createBlockProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return initializeProcessorClass('BlockProcessor', name, functions);
};

/**
 * Create and instantiate a block processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.newBlockProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return this.createBlockProcessor(name, functions).$new();
};

// Inline Macro Processor

/**
 * Create an inline macro processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.createInlineMacroProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return initializeProcessorClass('InlineMacroProcessor', name, functions);
};

/**
 * Create and instantiate an inline macro processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.newInlineMacroProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return this.createInlineMacroProcessor(name, functions).$new();
};

// Block Macro Processor

/**
 * Create a block macro processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.createBlockMacroProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return initializeProcessorClass('BlockMacroProcessor', name, functions);
};

/**
 * Create and instantiate a block macro processor
 * @description this API is experimental and subject to change
 * @memberof Extensions
 */
Extensions.newBlockMacroProcessor = function (name, functions) {
  if (arguments.length === 1) {
    functions = name;
    name = null;
  }
  return this.createBlockMacroProcessor(name, functions).$new();
};

// Converter API

/**
 * @namespace
 * @module Converter
 */
var Converter = Opal.const_get_qualified(Opal.Asciidoctor, 'Converter');

// Alias
Opal.Asciidoctor.Converter = Converter;

/**
 * Convert the specified node.
 *
 * @param {AbstractNode} node - the AbstractNode to convert
 * @param {string} transform - an optional String transform that hints at
 * which transformation should be applied to this node.
 * @param {Object} opts - a JSON of options that provide additional hints about
 * how to convert the node (default: {})
 * @returns the {Object} result of the conversion, typically a {string}.
 * @memberof Converter
 */
Converter.prototype.convert = function (node, transform, opts) {
  return this.$convert(node, transform, toHash(opts));
};

// The built-in converter doesn't include Converter, so we have to force it
Converter.BuiltIn.prototype.convert = Converter.prototype.convert;

// Converter Factory API

/**
 * @namespace
 * @module Converter/Factory
 */
var ConverterFactory = Opal.Asciidoctor.Converter.Factory;

// Alias
Opal.Asciidoctor.ConverterFactory = ConverterFactory;

/**
 * Register a custom converter in the global converter factory to handle conversion to the specified backends.
 * If the backend value is an asterisk, the converter is used to handle any backend that does not have an explicit converter.
 *
 * @param converter - The Converter instance to register
 * @param backends {Array} - A {string} {Array} of backend names that this converter should be registered to handle (optional, default: ['*'])
 * @return {*} - Returns nothing
 * @memberof Converter/Factory
 */
ConverterFactory.register = function (converter, backends) {
  if (typeof converter === 'object' && typeof converter.$convert === 'undefined' && typeof converter.convert === 'function') {
    Opal.def(converter, '$convert', converter.convert);
  }
  return this.$register(converter, backends);
};

/**
 * Retrieves the singleton instance of the converter factory.
 *
 * @param {boolean} initialize - instantiate the singleton if it has not yet
 * been instantiated. If this value is false and the singleton has not yet been
 * instantiated, this method returns a fresh instance.
 * @returns {Converter/Factory} an instance of the converter factory.
 * @memberof Converter/Factory
 */
ConverterFactory.getDefault = function (initialize) {
  return this.$default(initialize);
};

/**
 * Create an instance of the converter bound to the specified backend.
 *
 * @param {string} backend - look for a converter bound to this keyword.
 * @param {Object} opts - a JSON of options to pass to the converter (default: {})
 * @returns {Converter} - a converter instance for converting nodes in an Asciidoctor AST.
 * @memberof Converter/Factory
 */
ConverterFactory.prototype.create = function (backend, opts) {
  return this.$create(backend, toHash(opts));
};

// Built-in converter

/**
 * @namespace
 * @module Converter/Html5Converter
 */
var Html5Converter = Opal.Asciidoctor.Converter.Html5Converter;

// Alias
Opal.Asciidoctor.Html5Converter = Html5Converter;


Html5Converter.prototype.convert = function (node, transform, opts) {
  return this.$convert(node, transform, opts);
};


var ASCIIDOCTOR_JS_VERSION = '1.5.9';

  /**
   * Get Asciidoctor.js version number.
   *
   * @memberof Asciidoctor
   * @returns {string} - returns the version number of Asciidoctor.js.
   */
  Asciidoctor.prototype.getVersion = function () {
    return ASCIIDOCTOR_JS_VERSION;
  };
  return Opal.Asciidoctor;
}));

}).call(this,require("path").join(__dirname,"node_modules","asciidoctor.js","dist","node"))
},{"opal-runtime":83,"path":undefined}],4:[function(require,module,exports){
'use strict';
module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}

},{}],5:[function(require,module,exports){
module.exports=[
	"3dm",
	"3ds",
	"3g2",
	"3gp",
	"7z",
	"a",
	"aac",
	"adp",
	"ai",
	"aif",
	"aiff",
	"alz",
	"ape",
	"apk",
	"ar",
	"arj",
	"asf",
	"au",
	"avi",
	"bak",
	"baml",
	"bh",
	"bin",
	"bk",
	"bmp",
	"btif",
	"bz2",
	"bzip2",
	"cab",
	"caf",
	"cgm",
	"class",
	"cmx",
	"cpio",
	"cr2",
	"cur",
	"dat",
	"dcm",
	"deb",
	"dex",
	"djvu",
	"dll",
	"dmg",
	"dng",
	"doc",
	"docm",
	"docx",
	"dot",
	"dotm",
	"dra",
	"DS_Store",
	"dsk",
	"dts",
	"dtshd",
	"dvb",
	"dwg",
	"dxf",
	"ecelp4800",
	"ecelp7470",
	"ecelp9600",
	"egg",
	"eol",
	"eot",
	"epub",
	"exe",
	"f4v",
	"fbs",
	"fh",
	"fla",
	"flac",
	"fli",
	"flv",
	"fpx",
	"fst",
	"fvt",
	"g3",
	"gh",
	"gif",
	"graffle",
	"gz",
	"gzip",
	"h261",
	"h263",
	"h264",
	"icns",
	"ico",
	"ief",
	"img",
	"ipa",
	"iso",
	"jar",
	"jpeg",
	"jpg",
	"jpgv",
	"jpm",
	"jxr",
	"key",
	"ktx",
	"lha",
	"lib",
	"lvp",
	"lz",
	"lzh",
	"lzma",
	"lzo",
	"m3u",
	"m4a",
	"m4v",
	"mar",
	"mdi",
	"mht",
	"mid",
	"midi",
	"mj2",
	"mka",
	"mkv",
	"mmr",
	"mng",
	"mobi",
	"mov",
	"movie",
	"mp3",
	"mp4",
	"mp4a",
	"mpeg",
	"mpg",
	"mpga",
	"mxu",
	"nef",
	"npx",
	"numbers",
	"nupkg",
	"o",
	"oga",
	"ogg",
	"ogv",
	"otf",
	"pages",
	"pbm",
	"pcx",
	"pdb",
	"pdf",
	"pea",
	"pgm",
	"pic",
	"png",
	"pnm",
	"pot",
	"potm",
	"potx",
	"ppa",
	"ppam",
	"ppm",
	"pps",
	"ppsm",
	"ppsx",
	"ppt",
	"pptm",
	"pptx",
	"psd",
	"pya",
	"pyc",
	"pyo",
	"pyv",
	"qt",
	"rar",
	"ras",
	"raw",
	"resources",
	"rgb",
	"rip",
	"rlc",
	"rmf",
	"rmvb",
	"rtf",
	"rz",
	"s3m",
	"s7z",
	"scpt",
	"sgi",
	"shar",
	"sil",
	"sketch",
	"slk",
	"smv",
	"snk",
	"so",
	"stl",
	"suo",
	"sub",
	"swf",
	"tar",
	"tbz",
	"tbz2",
	"tga",
	"tgz",
	"thmx",
	"tif",
	"tiff",
	"tlz",
	"ttc",
	"ttf",
	"txz",
	"udf",
	"uvh",
	"uvi",
	"uvm",
	"uvp",
	"uvs",
	"uvu",
	"viv",
	"vob",
	"war",
	"wav",
	"wax",
	"wbmp",
	"wdp",
	"weba",
	"webm",
	"webp",
	"whl",
	"wim",
	"wm",
	"wma",
	"wmv",
	"wmx",
	"woff",
	"woff2",
	"wrm",
	"wvx",
	"xbm",
	"xif",
	"xla",
	"xlam",
	"xls",
	"xlsb",
	"xlsm",
	"xlsx",
	"xlt",
	"xltm",
	"xltx",
	"xm",
	"xmind",
	"xpi",
	"xpm",
	"xwd",
	"xz",
	"z",
	"zip",
	"zipx"
]

},{}],6:[function(require,module,exports){
module.exports = require('./binary-extensions.json');

},{"./binary-extensions.json":5}],7:[function(require,module,exports){
"use strict";
module.exports = function(Promise) {
var SomePromiseArray = Promise._SomePromiseArray;
function any(promises) {
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(1);
    ret.setUnwrap();
    ret.init();
    return promise;
}

Promise.any = function (promises) {
    return any(promises);
};

Promise.prototype.any = function () {
    return any(this);
};

};

},{}],8:[function(require,module,exports){
"use strict";
var firstLineError;
try {throw new Error(); } catch (e) {firstLineError = e;}
var schedule = require("./schedule");
var Queue = require("./queue");
var util = require("./util");

function Async() {
    this._customScheduler = false;
    this._isTickUsed = false;
    this._lateQueue = new Queue(16);
    this._normalQueue = new Queue(16);
    this._haveDrainedQueues = false;
    this._trampolineEnabled = true;
    var self = this;
    this.drainQueues = function () {
        self._drainQueues();
    };
    this._schedule = schedule;
}

Async.prototype.setScheduler = function(fn) {
    var prev = this._schedule;
    this._schedule = fn;
    this._customScheduler = true;
    return prev;
};

Async.prototype.hasCustomScheduler = function() {
    return this._customScheduler;
};

Async.prototype.enableTrampoline = function() {
    this._trampolineEnabled = true;
};

Async.prototype.disableTrampolineIfNecessary = function() {
    if (util.hasDevTools) {
        this._trampolineEnabled = false;
    }
};

Async.prototype.haveItemsQueued = function () {
    return this._isTickUsed || this._haveDrainedQueues;
};


Async.prototype.fatalError = function(e, isNode) {
    if (isNode) {
        process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
            "\n");
        process.exit(2);
    } else {
        this.throwLater(e);
    }
};

Async.prototype.throwLater = function(fn, arg) {
    if (arguments.length === 1) {
        arg = fn;
        fn = function () { throw arg; };
    }
    if (typeof setTimeout !== "undefined") {
        setTimeout(function() {
            fn(arg);
        }, 0);
    } else try {
        this._schedule(function() {
            fn(arg);
        });
    } catch (e) {
        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
};

function AsyncInvokeLater(fn, receiver, arg) {
    this._lateQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncInvoke(fn, receiver, arg) {
    this._normalQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncSettlePromises(promise) {
    this._normalQueue._pushOne(promise);
    this._queueTick();
}

if (!util.hasDevTools) {
    Async.prototype.invokeLater = AsyncInvokeLater;
    Async.prototype.invoke = AsyncInvoke;
    Async.prototype.settlePromises = AsyncSettlePromises;
} else {
    Async.prototype.invokeLater = function (fn, receiver, arg) {
        if (this._trampolineEnabled) {
            AsyncInvokeLater.call(this, fn, receiver, arg);
        } else {
            this._schedule(function() {
                setTimeout(function() {
                    fn.call(receiver, arg);
                }, 100);
            });
        }
    };

    Async.prototype.invoke = function (fn, receiver, arg) {
        if (this._trampolineEnabled) {
            AsyncInvoke.call(this, fn, receiver, arg);
        } else {
            this._schedule(function() {
                fn.call(receiver, arg);
            });
        }
    };

    Async.prototype.settlePromises = function(promise) {
        if (this._trampolineEnabled) {
            AsyncSettlePromises.call(this, promise);
        } else {
            this._schedule(function() {
                promise._settlePromises();
            });
        }
    };
}

function _drainQueue(queue) {
    while (queue.length() > 0) {
        _drainQueueStep(queue);
    }
}

function _drainQueueStep(queue) {
    var fn = queue.shift();
    if (typeof fn !== "function") {
        fn._settlePromises();
    } else {
        var receiver = queue.shift();
        var arg = queue.shift();
        fn.call(receiver, arg);
    }
}

Async.prototype._drainQueues = function () {
    _drainQueue(this._normalQueue);
    this._reset();
    this._haveDrainedQueues = true;
    _drainQueue(this._lateQueue);
};

Async.prototype._queueTick = function () {
    if (!this._isTickUsed) {
        this._isTickUsed = true;
        this._schedule(this.drainQueues);
    }
};

Async.prototype._reset = function () {
    this._isTickUsed = false;
};

module.exports = Async;
module.exports.firstLineError = firstLineError;

},{"./queue":32,"./schedule":35,"./util":42}],9:[function(require,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise, debug) {
var calledBind = false;
var rejectThis = function(_, e) {
    this._reject(e);
};

var targetRejected = function(e, context) {
    context.promiseRejectionQueued = true;
    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
};

var bindingResolved = function(thisArg, context) {
    if (((this._bitField & 50397184) === 0)) {
        this._resolveCallback(context.target);
    }
};

var bindingRejected = function(e, context) {
    if (!context.promiseRejectionQueued) this._reject(e);
};

Promise.prototype.bind = function (thisArg) {
    if (!calledBind) {
        calledBind = true;
        Promise.prototype._propagateFrom = debug.propagateFromFunction();
        Promise.prototype._boundValue = debug.boundValueFunction();
    }
    var maybePromise = tryConvertToPromise(thisArg);
    var ret = new Promise(INTERNAL);
    ret._propagateFrom(this, 1);
    var target = this._target();
    ret._setBoundTo(maybePromise);
    if (maybePromise instanceof Promise) {
        var context = {
            promiseRejectionQueued: false,
            promise: ret,
            target: target,
            bindingPromise: maybePromise
        };
        target._then(INTERNAL, targetRejected, undefined, ret, context);
        maybePromise._then(
            bindingResolved, bindingRejected, undefined, ret, context);
        ret._setOnCancel(maybePromise);
    } else {
        ret._resolveCallback(target);
    }
    return ret;
};

Promise.prototype._setBoundTo = function (obj) {
    if (obj !== undefined) {
        this._bitField = this._bitField | 2097152;
        this._boundTo = obj;
    } else {
        this._bitField = this._bitField & (~2097152);
    }
};

Promise.prototype._isBound = function () {
    return (this._bitField & 2097152) === 2097152;
};

Promise.bind = function (thisArg, value) {
    return Promise.resolve(value).bind(thisArg);
};
};

},{}],10:[function(require,module,exports){
"use strict";
var old;
if (typeof Promise !== "undefined") old = Promise;
function noConflict() {
    try { if (Promise === bluebird) Promise = old; }
    catch (e) {}
    return bluebird;
}
var bluebird = require("./promise")();
bluebird.noConflict = noConflict;
module.exports = bluebird;

},{"./promise":28}],11:[function(require,module,exports){
"use strict";
var cr = Object.create;
if (cr) {
    var callerCache = cr(null);
    var getterCache = cr(null);
    callerCache[" size"] = getterCache[" size"] = 0;
}

module.exports = function(Promise) {
var util = require("./util");
var canEvaluate = util.canEvaluate;
var isIdentifier = util.isIdentifier;

var getMethodCaller;
var getGetter;
if (!false) {
var makeMethodCaller = function (methodName) {
    return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
};

var makeGetter = function (propertyName) {
    return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
};

var getCompiled = function(name, compiler, cache) {
    var ret = cache[name];
    if (typeof ret !== "function") {
        if (!isIdentifier(name)) {
            return null;
        }
        ret = compiler(name);
        cache[name] = ret;
        cache[" size"]++;
        if (cache[" size"] > 512) {
            var keys = Object.keys(cache);
            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
            cache[" size"] = keys.length - 256;
        }
    }
    return ret;
};

getMethodCaller = function(name) {
    return getCompiled(name, makeMethodCaller, callerCache);
};

getGetter = function(name) {
    return getCompiled(name, makeGetter, getterCache);
};
}

function ensureMethod(obj, methodName) {
    var fn;
    if (obj != null) fn = obj[methodName];
    if (typeof fn !== "function") {
        var message = "Object " + util.classString(obj) + " has no method '" +
            util.toString(methodName) + "'";
        throw new Promise.TypeError(message);
    }
    return fn;
}

function caller(obj) {
    var methodName = this.pop();
    var fn = ensureMethod(obj, methodName);
    return fn.apply(obj, this);
}
Promise.prototype.call = function (methodName) {
    var $_len = arguments.length;var args = new Array(Math.max($_len - 1, 0)); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];};
    if (!false) {
        if (canEvaluate) {
            var maybeCaller = getMethodCaller(methodName);
            if (maybeCaller !== null) {
                return this._then(
                    maybeCaller, undefined, undefined, args, undefined);
            }
        }
    }
    args.push(methodName);
    return this._then(caller, undefined, undefined, args, undefined);
};

function namedGetter(obj) {
    return obj[this];
}
function indexedGetter(obj) {
    var index = +this;
    if (index < 0) index = Math.max(0, index + obj.length);
    return obj[index];
}
Promise.prototype.get = function (propertyName) {
    var isIndex = (typeof propertyName === "number");
    var getter;
    if (!isIndex) {
        if (canEvaluate) {
            var maybeGetter = getGetter(propertyName);
            getter = maybeGetter !== null ? maybeGetter : namedGetter;
        } else {
            getter = namedGetter;
        }
    } else {
        getter = indexedGetter;
    }
    return this._then(getter, undefined, undefined, propertyName, undefined);
};
};

},{"./util":42}],12:[function(require,module,exports){
"use strict";
module.exports = function(Promise, PromiseArray, apiRejection, debug) {
var util = require("./util");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var async = Promise._async;

Promise.prototype["break"] = Promise.prototype.cancel = function() {
    if (!debug.cancellation()) return this._warn("cancellation is disabled");

    var promise = this;
    var child = promise;
    while (promise._isCancellable()) {
        if (!promise._cancelBy(child)) {
            if (child._isFollowing()) {
                child._followee().cancel();
            } else {
                child._cancelBranched();
            }
            break;
        }

        var parent = promise._cancellationParent;
        if (parent == null || !parent._isCancellable()) {
            if (promise._isFollowing()) {
                promise._followee().cancel();
            } else {
                promise._cancelBranched();
            }
            break;
        } else {
            if (promise._isFollowing()) promise._followee().cancel();
            promise._setWillBeCancelled();
            child = promise;
            promise = parent;
        }
    }
};

Promise.prototype._branchHasCancelled = function() {
    this._branchesRemainingToCancel--;
};

Promise.prototype._enoughBranchesHaveCancelled = function() {
    return this._branchesRemainingToCancel === undefined ||
           this._branchesRemainingToCancel <= 0;
};

Promise.prototype._cancelBy = function(canceller) {
    if (canceller === this) {
        this._branchesRemainingToCancel = 0;
        this._invokeOnCancel();
        return true;
    } else {
        this._branchHasCancelled();
        if (this._enoughBranchesHaveCancelled()) {
            this._invokeOnCancel();
            return true;
        }
    }
    return false;
};

Promise.prototype._cancelBranched = function() {
    if (this._enoughBranchesHaveCancelled()) {
        this._cancel();
    }
};

Promise.prototype._cancel = function() {
    if (!this._isCancellable()) return;
    this._setCancelled();
    async.invoke(this._cancelPromises, this, undefined);
};

Promise.prototype._cancelPromises = function() {
    if (this._length() > 0) this._settlePromises();
};

Promise.prototype._unsetOnCancel = function() {
    this._onCancelField = undefined;
};

Promise.prototype._isCancellable = function() {
    return this.isPending() && !this._isCancelled();
};

Promise.prototype.isCancellable = function() {
    return this.isPending() && !this.isCancelled();
};

Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
    if (util.isArray(onCancelCallback)) {
        for (var i = 0; i < onCancelCallback.length; ++i) {
            this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
        }
    } else if (onCancelCallback !== undefined) {
        if (typeof onCancelCallback === "function") {
            if (!internalOnly) {
                var e = tryCatch(onCancelCallback).call(this._boundValue());
                if (e === errorObj) {
                    this._attachExtraTrace(e.e);
                    async.throwLater(e.e);
                }
            }
        } else {
            onCancelCallback._resultCancelled(this);
        }
    }
};

Promise.prototype._invokeOnCancel = function() {
    var onCancelCallback = this._onCancel();
    this._unsetOnCancel();
    async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
};

Promise.prototype._invokeInternalOnCancel = function() {
    if (this._isCancellable()) {
        this._doInvokeOnCancel(this._onCancel(), true);
        this._unsetOnCancel();
    }
};

Promise.prototype._resultCancelled = function() {
    this.cancel();
};

};

},{"./util":42}],13:[function(require,module,exports){
"use strict";
module.exports = function(NEXT_FILTER) {
var util = require("./util");
var getKeys = require("./es5").keys;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

function catchFilter(instances, cb, promise) {
    return function(e) {
        var boundTo = promise._boundValue();
        predicateLoop: for (var i = 0; i < instances.length; ++i) {
            var item = instances[i];

            if (item === Error ||
                (item != null && item.prototype instanceof Error)) {
                if (e instanceof item) {
                    return tryCatch(cb).call(boundTo, e);
                }
            } else if (typeof item === "function") {
                var matchesPredicate = tryCatch(item).call(boundTo, e);
                if (matchesPredicate === errorObj) {
                    return matchesPredicate;
                } else if (matchesPredicate) {
                    return tryCatch(cb).call(boundTo, e);
                }
            } else if (util.isObject(e)) {
                var keys = getKeys(item);
                for (var j = 0; j < keys.length; ++j) {
                    var key = keys[j];
                    if (item[key] != e[key]) {
                        continue predicateLoop;
                    }
                }
                return tryCatch(cb).call(boundTo, e);
            }
        }
        return NEXT_FILTER;
    };
}

return catchFilter;
};

},{"./es5":19,"./util":42}],14:[function(require,module,exports){
"use strict";
module.exports = function(Promise) {
var longStackTraces = false;
var contextStack = [];

Promise.prototype._promiseCreated = function() {};
Promise.prototype._pushContext = function() {};
Promise.prototype._popContext = function() {return null;};
Promise._peekContext = Promise.prototype._peekContext = function() {};

function Context() {
    this._trace = new Context.CapturedTrace(peekContext());
}
Context.prototype._pushContext = function () {
    if (this._trace !== undefined) {
        this._trace._promiseCreated = null;
        contextStack.push(this._trace);
    }
};

Context.prototype._popContext = function () {
    if (this._trace !== undefined) {
        var trace = contextStack.pop();
        var ret = trace._promiseCreated;
        trace._promiseCreated = null;
        return ret;
    }
    return null;
};

function createContext() {
    if (longStackTraces) return new Context();
}

function peekContext() {
    var lastIndex = contextStack.length - 1;
    if (lastIndex >= 0) {
        return contextStack[lastIndex];
    }
    return undefined;
}
Context.CapturedTrace = null;
Context.create = createContext;
Context.deactivateLongStackTraces = function() {};
Context.activateLongStackTraces = function() {
    var Promise_pushContext = Promise.prototype._pushContext;
    var Promise_popContext = Promise.prototype._popContext;
    var Promise_PeekContext = Promise._peekContext;
    var Promise_peekContext = Promise.prototype._peekContext;
    var Promise_promiseCreated = Promise.prototype._promiseCreated;
    Context.deactivateLongStackTraces = function() {
        Promise.prototype._pushContext = Promise_pushContext;
        Promise.prototype._popContext = Promise_popContext;
        Promise._peekContext = Promise_PeekContext;
        Promise.prototype._peekContext = Promise_peekContext;
        Promise.prototype._promiseCreated = Promise_promiseCreated;
        longStackTraces = false;
    };
    longStackTraces = true;
    Promise.prototype._pushContext = Context.prototype._pushContext;
    Promise.prototype._popContext = Context.prototype._popContext;
    Promise._peekContext = Promise.prototype._peekContext = peekContext;
    Promise.prototype._promiseCreated = function() {
        var ctx = this._peekContext();
        if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
    };
};
return Context;
};

},{}],15:[function(require,module,exports){
"use strict";
module.exports = function(Promise, Context) {
var getDomain = Promise._getDomain;
var async = Promise._async;
var Warning = require("./errors").Warning;
var util = require("./util");
var es5 = require("./es5");
var canAttachTrace = util.canAttachTrace;
var unhandledRejectionHandled;
var possiblyUnhandledRejection;
var bluebirdFramePattern =
    /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
var stackFramePattern = null;
var formatStack = null;
var indentStackFrames = false;
var printWarning;
var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
                        (false ||
                         util.env("BLUEBIRD_DEBUG") ||
                         util.env("NODE_ENV") === "development"));

var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
    (debugging || util.env("BLUEBIRD_WARNINGS")));

var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
    (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));

var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
    (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));

Promise.prototype.suppressUnhandledRejections = function() {
    var target = this._target();
    target._bitField = ((target._bitField & (~1048576)) |
                      524288);
};

Promise.prototype._ensurePossibleRejectionHandled = function () {
    if ((this._bitField & 524288) !== 0) return;
    this._setRejectionIsUnhandled();
    var self = this;
    setTimeout(function() {
        self._notifyUnhandledRejection();
    }, 1);
};

Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
    fireRejectionEvent("rejectionHandled",
                                  unhandledRejectionHandled, undefined, this);
};

Promise.prototype._setReturnedNonUndefined = function() {
    this._bitField = this._bitField | 268435456;
};

Promise.prototype._returnedNonUndefined = function() {
    return (this._bitField & 268435456) !== 0;
};

Promise.prototype._notifyUnhandledRejection = function () {
    if (this._isRejectionUnhandled()) {
        var reason = this._settledValue();
        this._setUnhandledRejectionIsNotified();
        fireRejectionEvent("unhandledRejection",
                                      possiblyUnhandledRejection, reason, this);
    }
};

Promise.prototype._setUnhandledRejectionIsNotified = function () {
    this._bitField = this._bitField | 262144;
};

Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
    this._bitField = this._bitField & (~262144);
};

Promise.prototype._isUnhandledRejectionNotified = function () {
    return (this._bitField & 262144) > 0;
};

Promise.prototype._setRejectionIsUnhandled = function () {
    this._bitField = this._bitField | 1048576;
};

Promise.prototype._unsetRejectionIsUnhandled = function () {
    this._bitField = this._bitField & (~1048576);
    if (this._isUnhandledRejectionNotified()) {
        this._unsetUnhandledRejectionIsNotified();
        this._notifyUnhandledRejectionIsHandled();
    }
};

Promise.prototype._isRejectionUnhandled = function () {
    return (this._bitField & 1048576) > 0;
};

Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) {
    return warn(message, shouldUseOwnTrace, promise || this);
};

Promise.onPossiblyUnhandledRejection = function (fn) {
    var domain = getDomain();
    possiblyUnhandledRejection =
        typeof fn === "function" ? (domain === null ?
                                            fn : util.domainBind(domain, fn))
                                 : undefined;
};

Promise.onUnhandledRejectionHandled = function (fn) {
    var domain = getDomain();
    unhandledRejectionHandled =
        typeof fn === "function" ? (domain === null ?
                                            fn : util.domainBind(domain, fn))
                                 : undefined;
};

var disableLongStackTraces = function() {};
Promise.longStackTraces = function () {
    if (async.haveItemsQueued() && !config.longStackTraces) {
        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    if (!config.longStackTraces && longStackTracesIsSupported()) {
        var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
        var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
        var Promise_dereferenceTrace = Promise.prototype._dereferenceTrace;
        config.longStackTraces = true;
        disableLongStackTraces = function() {
            if (async.haveItemsQueued() && !config.longStackTraces) {
                throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
            }
            Promise.prototype._captureStackTrace = Promise_captureStackTrace;
            Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
            Promise.prototype._dereferenceTrace = Promise_dereferenceTrace;
            Context.deactivateLongStackTraces();
            async.enableTrampoline();
            config.longStackTraces = false;
        };
        Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
        Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
        Promise.prototype._dereferenceTrace = longStackTracesDereferenceTrace;
        Context.activateLongStackTraces();
        async.disableTrampolineIfNecessary();
    }
};

Promise.hasLongStackTraces = function () {
    return config.longStackTraces && longStackTracesIsSupported();
};

var fireDomEvent = (function() {
    try {
        if (typeof CustomEvent === "function") {
            var event = new CustomEvent("CustomEvent");
            util.global.dispatchEvent(event);
            return function(name, event) {
                var eventData = {
                    detail: event,
                    cancelable: true
                };
                es5.defineProperty(
                    eventData, "promise", {value: event.promise});
                es5.defineProperty(eventData, "reason", {value: event.reason});
                var domEvent = new CustomEvent(name.toLowerCase(), eventData);
                return !util.global.dispatchEvent(domEvent);
            };
        } else if (typeof Event === "function") {
            var event = new Event("CustomEvent");
            util.global.dispatchEvent(event);
            return function(name, event) {
                var domEvent = new Event(name.toLowerCase(), {
                    cancelable: true
                });
                domEvent.detail = event;
                es5.defineProperty(domEvent, "promise", {value: event.promise});
                es5.defineProperty(domEvent, "reason", {value: event.reason});
                return !util.global.dispatchEvent(domEvent);
            };
        } else {
            var event = document.createEvent("CustomEvent");
            event.initCustomEvent("testingtheevent", false, true, {});
            util.global.dispatchEvent(event);
            return function(name, event) {
                var domEvent = document.createEvent("CustomEvent");
                domEvent.initCustomEvent(name.toLowerCase(), false, true,
                    event);
                return !util.global.dispatchEvent(domEvent);
            };
        }
    } catch (e) {}
    return function() {
        return false;
    };
})();

var fireGlobalEvent = (function() {
    if (util.isNode) {
        return function() {
            return process.emit.apply(process, arguments);
        };
    } else {
        if (!util.global) {
            return function() {
                return false;
            };
        }
        return function(name) {
            var methodName = "on" + name.toLowerCase();
            var method = util.global[methodName];
            if (!method) return false;
            method.apply(util.global, [].slice.call(arguments, 1));
            return true;
        };
    }
})();

function generatePromiseLifecycleEventObject(name, promise) {
    return {promise: promise};
}

var eventToObjectGenerator = {
    promiseCreated: generatePromiseLifecycleEventObject,
    promiseFulfilled: generatePromiseLifecycleEventObject,
    promiseRejected: generatePromiseLifecycleEventObject,
    promiseResolved: generatePromiseLifecycleEventObject,
    promiseCancelled: generatePromiseLifecycleEventObject,
    promiseChained: function(name, promise, child) {
        return {promise: promise, child: child};
    },
    warning: function(name, warning) {
        return {warning: warning};
    },
    unhandledRejection: function (name, reason, promise) {
        return {reason: reason, promise: promise};
    },
    rejectionHandled: generatePromiseLifecycleEventObject
};

var activeFireEvent = function (name) {
    var globalEventFired = false;
    try {
        globalEventFired = fireGlobalEvent.apply(null, arguments);
    } catch (e) {
        async.throwLater(e);
        globalEventFired = true;
    }

    var domEventFired = false;
    try {
        domEventFired = fireDomEvent(name,
                    eventToObjectGenerator[name].apply(null, arguments));
    } catch (e) {
        async.throwLater(e);
        domEventFired = true;
    }

    return domEventFired || globalEventFired;
};

Promise.config = function(opts) {
    opts = Object(opts);
    if ("longStackTraces" in opts) {
        if (opts.longStackTraces) {
            Promise.longStackTraces();
        } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
            disableLongStackTraces();
        }
    }
    if ("warnings" in opts) {
        var warningsOption = opts.warnings;
        config.warnings = !!warningsOption;
        wForgottenReturn = config.warnings;

        if (util.isObject(warningsOption)) {
            if ("wForgottenReturn" in warningsOption) {
                wForgottenReturn = !!warningsOption.wForgottenReturn;
            }
        }
    }
    if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
        if (async.haveItemsQueued()) {
            throw new Error(
                "cannot enable cancellation after promises are in use");
        }
        Promise.prototype._clearCancellationData =
            cancellationClearCancellationData;
        Promise.prototype._propagateFrom = cancellationPropagateFrom;
        Promise.prototype._onCancel = cancellationOnCancel;
        Promise.prototype._setOnCancel = cancellationSetOnCancel;
        Promise.prototype._attachCancellationCallback =
            cancellationAttachCancellationCallback;
        Promise.prototype._execute = cancellationExecute;
        propagateFromFunction = cancellationPropagateFrom;
        config.cancellation = true;
    }
    if ("monitoring" in opts) {
        if (opts.monitoring && !config.monitoring) {
            config.monitoring = true;
            Promise.prototype._fireEvent = activeFireEvent;
        } else if (!opts.monitoring && config.monitoring) {
            config.monitoring = false;
            Promise.prototype._fireEvent = defaultFireEvent;
        }
    }
    return Promise;
};

function defaultFireEvent() { return false; }

Promise.prototype._fireEvent = defaultFireEvent;
Promise.prototype._execute = function(executor, resolve, reject) {
    try {
        executor(resolve, reject);
    } catch (e) {
        return e;
    }
};
Promise.prototype._onCancel = function () {};
Promise.prototype._setOnCancel = function (handler) { ; };
Promise.prototype._attachCancellationCallback = function(onCancel) {
    ;
};
Promise.prototype._captureStackTrace = function () {};
Promise.prototype._attachExtraTrace = function () {};
Promise.prototype._dereferenceTrace = function () {};
Promise.prototype._clearCancellationData = function() {};
Promise.prototype._propagateFrom = function (parent, flags) {
    ;
    ;
};

function cancellationExecute(executor, resolve, reject) {
    var promise = this;
    try {
        executor(resolve, reject, function(onCancel) {
            if (typeof onCancel !== "function") {
                throw new TypeError("onCancel must be a function, got: " +
                                    util.toString(onCancel));
            }
            promise._attachCancellationCallback(onCancel);
        });
    } catch (e) {
        return e;
    }
}

function cancellationAttachCancellationCallback(onCancel) {
    if (!this._isCancellable()) return this;

    var previousOnCancel = this._onCancel();
    if (previousOnCancel !== undefined) {
        if (util.isArray(previousOnCancel)) {
            previousOnCancel.push(onCancel);
        } else {
            this._setOnCancel([previousOnCancel, onCancel]);
        }
    } else {
        this._setOnCancel(onCancel);
    }
}

function cancellationOnCancel() {
    return this._onCancelField;
}

function cancellationSetOnCancel(onCancel) {
    this._onCancelField = onCancel;
}

function cancellationClearCancellationData() {
    this._cancellationParent = undefined;
    this._onCancelField = undefined;
}

function cancellationPropagateFrom(parent, flags) {
    if ((flags & 1) !== 0) {
        this._cancellationParent = parent;
        var branchesRemainingToCancel = parent._branchesRemainingToCancel;
        if (branchesRemainingToCancel === undefined) {
            branchesRemainingToCancel = 0;
        }
        parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
    }
    if ((flags & 2) !== 0 && parent._isBound()) {
        this._setBoundTo(parent._boundTo);
    }
}

function bindingPropagateFrom(parent, flags) {
    if ((flags & 2) !== 0 && parent._isBound()) {
        this._setBoundTo(parent._boundTo);
    }
}
var propagateFromFunction = bindingPropagateFrom;

function boundValueFunction() {
    var ret = this._boundTo;
    if (ret !== undefined) {
        if (ret instanceof Promise) {
            if (ret.isFulfilled()) {
                return ret.value();
            } else {
                return undefined;
            }
        }
    }
    return ret;
}

function longStackTracesCaptureStackTrace() {
    this._trace = new CapturedTrace(this._peekContext());
}

function longStackTracesAttachExtraTrace(error, ignoreSelf) {
    if (canAttachTrace(error)) {
        var trace = this._trace;
        if (trace !== undefined) {
            if (ignoreSelf) trace = trace._parent;
        }
        if (trace !== undefined) {
            trace.attachExtraTrace(error);
        } else if (!error.__stackCleaned__) {
            var parsed = parseStackAndMessage(error);
            util.notEnumerableProp(error, "stack",
                parsed.message + "\n" + parsed.stack.join("\n"));
            util.notEnumerableProp(error, "__stackCleaned__", true);
        }
    }
}

function longStackTracesDereferenceTrace() {
    this._trace = undefined;
}

function checkForgottenReturns(returnValue, promiseCreated, name, promise,
                               parent) {
    if (returnValue === undefined && promiseCreated !== null &&
        wForgottenReturn) {
        if (parent !== undefined && parent._returnedNonUndefined()) return;
        if ((promise._bitField & 65535) === 0) return;

        if (name) name = name + " ";
        var handlerLine = "";
        var creatorLine = "";
        if (promiseCreated._trace) {
            var traceLines = promiseCreated._trace.stack.split("\n");
            var stack = cleanStack(traceLines);
            for (var i = stack.length - 1; i >= 0; --i) {
                var line = stack[i];
                if (!nodeFramePattern.test(line)) {
                    var lineMatches = line.match(parseLinePattern);
                    if (lineMatches) {
                        handlerLine  = "at " + lineMatches[1] +
                            ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
                    }
                    break;
                }
            }

            if (stack.length > 0) {
                var firstUserLine = stack[0];
                for (var i = 0; i < traceLines.length; ++i) {

                    if (traceLines[i] === firstUserLine) {
                        if (i > 0) {
                            creatorLine = "\n" + traceLines[i - 1];
                        }
                        break;
                    }
                }

            }
        }
        var msg = "a promise was created in a " + name +
            "handler " + handlerLine + "but was not returned from it, " +
            "see http://goo.gl/rRqMUw" +
            creatorLine;
        promise._warn(msg, true, promiseCreated);
    }
}

function deprecated(name, replacement) {
    var message = name +
        " is deprecated and will be removed in a future version.";
    if (replacement) message += " Use " + replacement + " instead.";
    return warn(message);
}

function warn(message, shouldUseOwnTrace, promise) {
    if (!config.warnings) return;
    var warning = new Warning(message);
    var ctx;
    if (shouldUseOwnTrace) {
        promise._attachExtraTrace(warning);
    } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
        ctx.attachExtraTrace(warning);
    } else {
        var parsed = parseStackAndMessage(warning);
        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
    }

    if (!activeFireEvent("warning", warning)) {
        formatAndLogError(warning, "", true);
    }
}

function reconstructStack(message, stacks) {
    for (var i = 0; i < stacks.length - 1; ++i) {
        stacks[i].push("From previous event:");
        stacks[i] = stacks[i].join("\n");
    }
    if (i < stacks.length) {
        stacks[i] = stacks[i].join("\n");
    }
    return message + "\n" + stacks.join("\n");
}

function removeDuplicateOrEmptyJumps(stacks) {
    for (var i = 0; i < stacks.length; ++i) {
        if (stacks[i].length === 0 ||
            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
            stacks.splice(i, 1);
            i--;
        }
    }
}

function removeCommonRoots(stacks) {
    var current = stacks[0];
    for (var i = 1; i < stacks.length; ++i) {
        var prev = stacks[i];
        var currentLastIndex = current.length - 1;
        var currentLastLine = current[currentLastIndex];
        var commonRootMeetPoint = -1;

        for (var j = prev.length - 1; j >= 0; --j) {
            if (prev[j] === currentLastLine) {
                commonRootMeetPoint = j;
                break;
            }
        }

        for (var j = commonRootMeetPoint; j >= 0; --j) {
            var line = prev[j];
            if (current[currentLastIndex] === line) {
                current.pop();
                currentLastIndex--;
            } else {
                break;
            }
        }
        current = prev;
    }
}

function cleanStack(stack) {
    var ret = [];
    for (var i = 0; i < stack.length; ++i) {
        var line = stack[i];
        var isTraceLine = "    (No stack trace)" === line ||
            stackFramePattern.test(line);
        var isInternalFrame = isTraceLine && shouldIgnore(line);
        if (isTraceLine && !isInternalFrame) {
            if (indentStackFrames && line.charAt(0) !== " ") {
                line = "    " + line;
            }
            ret.push(line);
        }
    }
    return ret;
}

function stackFramesAsArray(error) {
    var stack = error.stack.replace(/\s+$/g, "").split("\n");
    for (var i = 0; i < stack.length; ++i) {
        var line = stack[i];
        if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
            break;
        }
    }
    if (i > 0 && error.name != "SyntaxError") {
        stack = stack.slice(i);
    }
    return stack;
}

function parseStackAndMessage(error) {
    var stack = error.stack;
    var message = error.toString();
    stack = typeof stack === "string" && stack.length > 0
                ? stackFramesAsArray(error) : ["    (No stack trace)"];
    return {
        message: message,
        stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
    };
}

function formatAndLogError(error, title, isSoft) {
    if (typeof console !== "undefined") {
        var message;
        if (util.isObject(error)) {
            var stack = error.stack;
            message = title + formatStack(stack, error);
        } else {
            message = title + String(error);
        }
        if (typeof printWarning === "function") {
            printWarning(message, isSoft);
        } else if (typeof console.log === "function" ||
            typeof console.log === "object") {
            console.log(message);
        }
    }
}

function fireRejectionEvent(name, localHandler, reason, promise) {
    var localEventFired = false;
    try {
        if (typeof localHandler === "function") {
            localEventFired = true;
            if (name === "rejectionHandled") {
                localHandler(promise);
            } else {
                localHandler(reason, promise);
            }
        }
    } catch (e) {
        async.throwLater(e);
    }

    if (name === "unhandledRejection") {
        if (!activeFireEvent(name, reason, promise) && !localEventFired) {
            formatAndLogError(reason, "Unhandled rejection ");
        }
    } else {
        activeFireEvent(name, promise);
    }
}

function formatNonError(obj) {
    var str;
    if (typeof obj === "function") {
        str = "[function " +
            (obj.name || "anonymous") +
            "]";
    } else {
        str = obj && typeof obj.toString === "function"
            ? obj.toString() : util.toString(obj);
        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
        if (ruselessToString.test(str)) {
            try {
                var newStr = JSON.stringify(obj);
                str = newStr;
            }
            catch(e) {

            }
        }
        if (str.length === 0) {
            str = "(empty array)";
        }
    }
    return ("(<" + snip(str) + ">, no stack trace)");
}

function snip(str) {
    var maxChars = 41;
    if (str.length < maxChars) {
        return str;
    }
    return str.substr(0, maxChars - 3) + "...";
}

function longStackTracesIsSupported() {
    return typeof captureStackTrace === "function";
}

var shouldIgnore = function() { return false; };
var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
function parseLineInfo(line) {
    var matches = line.match(parseLineInfoRegex);
    if (matches) {
        return {
            fileName: matches[1],
            line: parseInt(matches[2], 10)
        };
    }
}

function setBounds(firstLineError, lastLineError) {
    if (!longStackTracesIsSupported()) return;
    var firstStackLines = firstLineError.stack.split("\n");
    var lastStackLines = lastLineError.stack.split("\n");
    var firstIndex = -1;
    var lastIndex = -1;
    var firstFileName;
    var lastFileName;
    for (var i = 0; i < firstStackLines.length; ++i) {
        var result = parseLineInfo(firstStackLines[i]);
        if (result) {
            firstFileName = result.fileName;
            firstIndex = result.line;
            break;
        }
    }
    for (var i = 0; i < lastStackLines.length; ++i) {
        var result = parseLineInfo(lastStackLines[i]);
        if (result) {
            lastFileName = result.fileName;
            lastIndex = result.line;
            break;
        }
    }
    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
        firstFileName !== lastFileName || firstIndex >= lastIndex) {
        return;
    }

    shouldIgnore = function(line) {
        if (bluebirdFramePattern.test(line)) return true;
        var info = parseLineInfo(line);
        if (info) {
            if (info.fileName === firstFileName &&
                (firstIndex <= info.line && info.line <= lastIndex)) {
                return true;
            }
        }
        return false;
    };
}

function CapturedTrace(parent) {
    this._parent = parent;
    this._promisesCreated = 0;
    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
    captureStackTrace(this, CapturedTrace);
    if (length > 32) this.uncycle();
}
util.inherits(CapturedTrace, Error);
Context.CapturedTrace = CapturedTrace;

CapturedTrace.prototype.uncycle = function() {
    var length = this._length;
    if (length < 2) return;
    var nodes = [];
    var stackToIndex = {};

    for (var i = 0, node = this; node !== undefined; ++i) {
        nodes.push(node);
        node = node._parent;
    }
    length = this._length = i;
    for (var i = length - 1; i >= 0; --i) {
        var stack = nodes[i].stack;
        if (stackToIndex[stack] === undefined) {
            stackToIndex[stack] = i;
        }
    }
    for (var i = 0; i < length; ++i) {
        var currentStack = nodes[i].stack;
        var index = stackToIndex[currentStack];
        if (index !== undefined && index !== i) {
            if (index > 0) {
                nodes[index - 1]._parent = undefined;
                nodes[index - 1]._length = 1;
            }
            nodes[i]._parent = undefined;
            nodes[i]._length = 1;
            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

            if (index < length - 1) {
                cycleEdgeNode._parent = nodes[index + 1];
                cycleEdgeNode._parent.uncycle();
                cycleEdgeNode._length =
                    cycleEdgeNode._parent._length + 1;
            } else {
                cycleEdgeNode._parent = undefined;
                cycleEdgeNode._length = 1;
            }
            var currentChildLength = cycleEdgeNode._length + 1;
            for (var j = i - 2; j >= 0; --j) {
                nodes[j]._length = currentChildLength;
                currentChildLength++;
            }
            return;
        }
    }
};

CapturedTrace.prototype.attachExtraTrace = function(error) {
    if (error.__stackCleaned__) return;
    this.uncycle();
    var parsed = parseStackAndMessage(error);
    var message = parsed.message;
    var stacks = [parsed.stack];

    var trace = this;
    while (trace !== undefined) {
        stacks.push(cleanStack(trace.stack.split("\n")));
        trace = trace._parent;
    }
    removeCommonRoots(stacks);
    removeDuplicateOrEmptyJumps(stacks);
    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
    util.notEnumerableProp(error, "__stackCleaned__", true);
};

var captureStackTrace = (function stackDetection() {
    var v8stackFramePattern = /^\s*at\s*/;
    var v8stackFormatter = function(stack, error) {
        if (typeof stack === "string") return stack;

        if (error.name !== undefined &&
            error.message !== undefined) {
            return error.toString();
        }
        return formatNonError(error);
    };

    if (typeof Error.stackTraceLimit === "number" &&
        typeof Error.captureStackTrace === "function") {
        Error.stackTraceLimit += 6;
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        var captureStackTrace = Error.captureStackTrace;

        shouldIgnore = function(line) {
            return bluebirdFramePattern.test(line);
        };
        return function(receiver, ignoreUntil) {
            Error.stackTraceLimit += 6;
            captureStackTrace(receiver, ignoreUntil);
            Error.stackTraceLimit -= 6;
        };
    }
    var err = new Error();

    if (typeof err.stack === "string" &&
        err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
        stackFramePattern = /@/;
        formatStack = v8stackFormatter;
        indentStackFrames = true;
        return function captureStackTrace(o) {
            o.stack = new Error().stack;
        };
    }

    var hasStackAfterThrow;
    try { throw new Error(); }
    catch(e) {
        hasStackAfterThrow = ("stack" in e);
    }
    if (!("stack" in err) && hasStackAfterThrow &&
        typeof Error.stackTraceLimit === "number") {
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        return function captureStackTrace(o) {
            Error.stackTraceLimit += 6;
            try { throw new Error(); }
            catch(e) { o.stack = e.stack; }
            Error.stackTraceLimit -= 6;
        };
    }

    formatStack = function(stack, error) {
        if (typeof stack === "string") return stack;

        if ((typeof error === "object" ||
            typeof error === "function") &&
            error.name !== undefined &&
            error.message !== undefined) {
            return error.toString();
        }
        return formatNonError(error);
    };

    return null;

})([]);

if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
    printWarning = function (message) {
        console.warn(message);
    };
    if (util.isNode && process.stderr.isTTY) {
        printWarning = function(message, isSoft) {
            var color = isSoft ? "\u001b[33m" : "\u001b[31m";
            console.warn(color + message + "\u001b[0m\n");
        };
    } else if (!util.isNode && typeof (new Error().stack) === "string") {
        printWarning = function(message, isSoft) {
            console.warn("%c" + message,
                        isSoft ? "color: darkorange" : "color: red");
        };
    }
}

var config = {
    warnings: warnings,
    longStackTraces: false,
    cancellation: false,
    monitoring: false
};

if (longStackTraces) Promise.longStackTraces();

return {
    longStackTraces: function() {
        return config.longStackTraces;
    },
    warnings: function() {
        return config.warnings;
    },
    cancellation: function() {
        return config.cancellation;
    },
    monitoring: function() {
        return config.monitoring;
    },
    propagateFromFunction: function() {
        return propagateFromFunction;
    },
    boundValueFunction: function() {
        return boundValueFunction;
    },
    checkForgottenReturns: checkForgottenReturns,
    setBounds: setBounds,
    warn: warn,
    deprecated: deprecated,
    CapturedTrace: CapturedTrace,
    fireDomEvent: fireDomEvent,
    fireGlobalEvent: fireGlobalEvent
};
};

},{"./errors":18,"./es5":19,"./util":42}],16:[function(require,module,exports){
"use strict";
module.exports = function(Promise) {
function returner() {
    return this.value;
}
function thrower() {
    throw this.reason;
}

Promise.prototype["return"] =
Promise.prototype.thenReturn = function (value) {
    if (value instanceof Promise) value.suppressUnhandledRejections();
    return this._then(
        returner, undefined, undefined, {value: value}, undefined);
};

Promise.prototype["throw"] =
Promise.prototype.thenThrow = function (reason) {
    return this._then(
        thrower, undefined, undefined, {reason: reason}, undefined);
};

Promise.prototype.catchThrow = function (reason) {
    if (arguments.length <= 1) {
        return this._then(
            undefined, thrower, undefined, {reason: reason}, undefined);
    } else {
        var _reason = arguments[1];
        var handler = function() {throw _reason;};
        return this.caught(reason, handler);
    }
};

Promise.prototype.catchReturn = function (value) {
    if (arguments.length <= 1) {
        if (value instanceof Promise) value.suppressUnhandledRejections();
        return this._then(
            undefined, returner, undefined, {value: value}, undefined);
    } else {
        var _value = arguments[1];
        if (_value instanceof Promise) _value.suppressUnhandledRejections();
        var handler = function() {return _value;};
        return this.caught(value, handler);
    }
};
};

},{}],17:[function(require,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var PromiseReduce = Promise.reduce;
var PromiseAll = Promise.all;

function promiseAllThis() {
    return PromiseAll(this);
}

function PromiseMapSeries(promises, fn) {
    return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
}

Promise.prototype.each = function (fn) {
    return PromiseReduce(this, fn, INTERNAL, 0)
              ._then(promiseAllThis, undefined, undefined, this, undefined);
};

Promise.prototype.mapSeries = function (fn) {
    return PromiseReduce(this, fn, INTERNAL, INTERNAL);
};

Promise.each = function (promises, fn) {
    return PromiseReduce(promises, fn, INTERNAL, 0)
              ._then(promiseAllThis, undefined, undefined, promises, undefined);
};

Promise.mapSeries = PromiseMapSeries;
};


},{}],18:[function(require,module,exports){
"use strict";
var es5 = require("./es5");
var Objectfreeze = es5.freeze;
var util = require("./util");
var inherits = util.inherits;
var notEnumerableProp = util.notEnumerableProp;

function subError(nameProperty, defaultMessage) {
    function SubError(message) {
        if (!(this instanceof SubError)) return new SubError(message);
        notEnumerableProp(this, "message",
            typeof message === "string" ? message : defaultMessage);
        notEnumerableProp(this, "name", nameProperty);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        } else {
            Error.call(this);
        }
    }
    inherits(SubError, Error);
    return SubError;
}

var _TypeError, _RangeError;
var Warning = subError("Warning", "warning");
var CancellationError = subError("CancellationError", "cancellation error");
var TimeoutError = subError("TimeoutError", "timeout error");
var AggregateError = subError("AggregateError", "aggregate error");
try {
    _TypeError = TypeError;
    _RangeError = RangeError;
} catch(e) {
    _TypeError = subError("TypeError", "type error");
    _RangeError = subError("RangeError", "range error");
}

var methods = ("join pop push shift unshift slice filter forEach some " +
    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

for (var i = 0; i < methods.length; ++i) {
    if (typeof Array.prototype[methods[i]] === "function") {
        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
    }
}

es5.defineProperty(AggregateError.prototype, "length", {
    value: 0,
    configurable: false,
    writable: true,
    enumerable: true
});
AggregateError.prototype["isOperational"] = true;
var level = 0;
AggregateError.prototype.toString = function() {
    var indent = Array(level * 4 + 1).join(" ");
    var ret = "\n" + indent + "AggregateError of:" + "\n";
    level++;
    indent = Array(level * 4 + 1).join(" ");
    for (var i = 0; i < this.length; ++i) {
        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
        var lines = str.split("\n");
        for (var j = 0; j < lines.length; ++j) {
            lines[j] = indent + lines[j];
        }
        str = lines.join("\n");
        ret += str + "\n";
    }
    level--;
    return ret;
};

function OperationalError(message) {
    if (!(this instanceof OperationalError))
        return new OperationalError(message);
    notEnumerableProp(this, "name", "OperationalError");
    notEnumerableProp(this, "message", message);
    this.cause = message;
    this["isOperational"] = true;

    if (message instanceof Error) {
        notEnumerableProp(this, "message", message.message);
        notEnumerableProp(this, "stack", message.stack);
    } else if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
    }

}
inherits(OperationalError, Error);

var errorTypes = Error["__BluebirdErrorTypes__"];
if (!errorTypes) {
    errorTypes = Objectfreeze({
        CancellationError: CancellationError,
        TimeoutError: TimeoutError,
        OperationalError: OperationalError,
        RejectionError: OperationalError,
        AggregateError: AggregateError
    });
    es5.defineProperty(Error, "__BluebirdErrorTypes__", {
        value: errorTypes,
        writable: false,
        enumerable: false,
        configurable: false
    });
}

module.exports = {
    Error: Error,
    TypeError: _TypeError,
    RangeError: _RangeError,
    CancellationError: errorTypes.CancellationError,
    OperationalError: errorTypes.OperationalError,
    TimeoutError: errorTypes.TimeoutError,
    AggregateError: errorTypes.AggregateError,
    Warning: Warning
};

},{"./es5":19,"./util":42}],19:[function(require,module,exports){
var isES5 = (function(){
    "use strict";
    return this === undefined;
})();

if (isES5) {
    module.exports = {
        freeze: Object.freeze,
        defineProperty: Object.defineProperty,
        getDescriptor: Object.getOwnPropertyDescriptor,
        keys: Object.keys,
        names: Object.getOwnPropertyNames,
        getPrototypeOf: Object.getPrototypeOf,
        isArray: Array.isArray,
        isES5: isES5,
        propertyIsWritable: function(obj, prop) {
            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
            return !!(!descriptor || descriptor.writable || descriptor.set);
        }
    };
} else {
    var has = {}.hasOwnProperty;
    var str = {}.toString;
    var proto = {}.constructor.prototype;

    var ObjectKeys = function (o) {
        var ret = [];
        for (var key in o) {
            if (has.call(o, key)) {
                ret.push(key);
            }
        }
        return ret;
    };

    var ObjectGetDescriptor = function(o, key) {
        return {value: o[key]};
    };

    var ObjectDefineProperty = function (o, key, desc) {
        o[key] = desc.value;
        return o;
    };

    var ObjectFreeze = function (obj) {
        return obj;
    };

    var ObjectGetPrototypeOf = function (obj) {
        try {
            return Object(obj).constructor.prototype;
        }
        catch (e) {
            return proto;
        }
    };

    var ArrayIsArray = function (obj) {
        try {
            return str.call(obj) === "[object Array]";
        }
        catch(e) {
            return false;
        }
    };

    module.exports = {
        isArray: ArrayIsArray,
        keys: ObjectKeys,
        names: ObjectKeys,
        defineProperty: ObjectDefineProperty,
        getDescriptor: ObjectGetDescriptor,
        freeze: ObjectFreeze,
        getPrototypeOf: ObjectGetPrototypeOf,
        isES5: isES5,
        propertyIsWritable: function() {
            return true;
        }
    };
}

},{}],20:[function(require,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var PromiseMap = Promise.map;

Promise.prototype.filter = function (fn, options) {
    return PromiseMap(this, fn, options, INTERNAL);
};

Promise.filter = function (promises, fn, options) {
    return PromiseMap(promises, fn, options, INTERNAL);
};
};

},{}],21:[function(require,module,exports){
"use strict";
module.exports = function(Promise, tryConvertToPromise, NEXT_FILTER) {
var util = require("./util");
var CancellationError = Promise.CancellationError;
var errorObj = util.errorObj;
var catchFilter = require("./catch_filter")(NEXT_FILTER);

function PassThroughHandlerContext(promise, type, handler) {
    this.promise = promise;
    this.type = type;
    this.handler = handler;
    this.called = false;
    this.cancelPromise = null;
}

PassThroughHandlerContext.prototype.isFinallyHandler = function() {
    return this.type === 0;
};

function FinallyHandlerCancelReaction(finallyHandler) {
    this.finallyHandler = finallyHandler;
}

FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
    checkCancel(this.finallyHandler);
};

function checkCancel(ctx, reason) {
    if (ctx.cancelPromise != null) {
        if (arguments.length > 1) {
            ctx.cancelPromise._reject(reason);
        } else {
            ctx.cancelPromise._cancel();
        }
        ctx.cancelPromise = null;
        return true;
    }
    return false;
}

function succeed() {
    return finallyHandler.call(this, this.promise._target()._settledValue());
}
function fail(reason) {
    if (checkCancel(this, reason)) return;
    errorObj.e = reason;
    return errorObj;
}
function finallyHandler(reasonOrValue) {
    var promise = this.promise;
    var handler = this.handler;

    if (!this.called) {
        this.called = true;
        var ret = this.isFinallyHandler()
            ? handler.call(promise._boundValue())
            : handler.call(promise._boundValue(), reasonOrValue);
        if (ret === NEXT_FILTER) {
            return ret;
        } else if (ret !== undefined) {
            promise._setReturnedNonUndefined();
            var maybePromise = tryConvertToPromise(ret, promise);
            if (maybePromise instanceof Promise) {
                if (this.cancelPromise != null) {
                    if (maybePromise._isCancelled()) {
                        var reason =
                            new CancellationError("late cancellation observer");
                        promise._attachExtraTrace(reason);
                        errorObj.e = reason;
                        return errorObj;
                    } else if (maybePromise.isPending()) {
                        maybePromise._attachCancellationCallback(
                            new FinallyHandlerCancelReaction(this));
                    }
                }
                return maybePromise._then(
                    succeed, fail, undefined, this, undefined);
            }
        }
    }

    if (promise.isRejected()) {
        checkCancel(this);
        errorObj.e = reasonOrValue;
        return errorObj;
    } else {
        checkCancel(this);
        return reasonOrValue;
    }
}

Promise.prototype._passThrough = function(handler, type, success, fail) {
    if (typeof handler !== "function") return this.then();
    return this._then(success,
                      fail,
                      undefined,
                      new PassThroughHandlerContext(this, type, handler),
                      undefined);
};

Promise.prototype.lastly =
Promise.prototype["finally"] = function (handler) {
    return this._passThrough(handler,
                             0,
                             finallyHandler,
                             finallyHandler);
};


Promise.prototype.tap = function (handler) {
    return this._passThrough(handler, 1, finallyHandler);
};

Promise.prototype.tapCatch = function (handlerOrPredicate) {
    var len = arguments.length;
    if(len === 1) {
        return this._passThrough(handlerOrPredicate,
                                 1,
                                 undefined,
                                 finallyHandler);
    } else {
         var catchInstances = new Array(len - 1),
            j = 0, i;
        for (i = 0; i < len - 1; ++i) {
            var item = arguments[i];
            if (util.isObject(item)) {
                catchInstances[j++] = item;
            } else {
                return Promise.reject(new TypeError(
                    "tapCatch statement predicate: "
                    + "expecting an object but got " + util.classString(item)
                ));
            }
        }
        catchInstances.length = j;
        var handler = arguments[i];
        return this._passThrough(catchFilter(catchInstances, handler, this),
                                 1,
                                 undefined,
                                 finallyHandler);
    }

};

return PassThroughHandlerContext;
};

},{"./catch_filter":13,"./util":42}],22:[function(require,module,exports){
"use strict";
module.exports = function(Promise,
                          apiRejection,
                          INTERNAL,
                          tryConvertToPromise,
                          Proxyable,
                          debug) {
var errors = require("./errors");
var TypeError = errors.TypeError;
var util = require("./util");
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
var yieldHandlers = [];

function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
    for (var i = 0; i < yieldHandlers.length; ++i) {
        traceParent._pushContext();
        var result = tryCatch(yieldHandlers[i])(value);
        traceParent._popContext();
        if (result === errorObj) {
            traceParent._pushContext();
            var ret = Promise.reject(errorObj.e);
            traceParent._popContext();
            return ret;
        }
        var maybePromise = tryConvertToPromise(result, traceParent);
        if (maybePromise instanceof Promise) return maybePromise;
    }
    return null;
}

function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
    if (debug.cancellation()) {
        var internal = new Promise(INTERNAL);
        var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
        this._promise = internal.lastly(function() {
            return _finallyPromise;
        });
        internal._captureStackTrace();
        internal._setOnCancel(this);
    } else {
        var promise = this._promise = new Promise(INTERNAL);
        promise._captureStackTrace();
    }
    this._stack = stack;
    this._generatorFunction = generatorFunction;
    this._receiver = receiver;
    this._generator = undefined;
    this._yieldHandlers = typeof yieldHandler === "function"
        ? [yieldHandler].concat(yieldHandlers)
        : yieldHandlers;
    this._yieldedPromise = null;
    this._cancellationPhase = false;
}
util.inherits(PromiseSpawn, Proxyable);

PromiseSpawn.prototype._isResolved = function() {
    return this._promise === null;
};

PromiseSpawn.prototype._cleanup = function() {
    this._promise = this._generator = null;
    if (debug.cancellation() && this._finallyPromise !== null) {
        this._finallyPromise._fulfill();
        this._finallyPromise = null;
    }
};

PromiseSpawn.prototype._promiseCancelled = function() {
    if (this._isResolved()) return;
    var implementsReturn = typeof this._generator["return"] !== "undefined";

    var result;
    if (!implementsReturn) {
        var reason = new Promise.CancellationError(
            "generator .return() sentinel");
        Promise.coroutine.returnSentinel = reason;
        this._promise._attachExtraTrace(reason);
        this._promise._pushContext();
        result = tryCatch(this._generator["throw"]).call(this._generator,
                                                         reason);
        this._promise._popContext();
    } else {
        this._promise._pushContext();
        result = tryCatch(this._generator["return"]).call(this._generator,
                                                          undefined);
        this._promise._popContext();
    }
    this._cancellationPhase = true;
    this._yieldedPromise = null;
    this._continue(result);
};

PromiseSpawn.prototype._promiseFulfilled = function(value) {
    this._yieldedPromise = null;
    this._promise._pushContext();
    var result = tryCatch(this._generator.next).call(this._generator, value);
    this._promise._popContext();
    this._continue(result);
};

PromiseSpawn.prototype._promiseRejected = function(reason) {
    this._yieldedPromise = null;
    this._promise._attachExtraTrace(reason);
    this._promise._pushContext();
    var result = tryCatch(this._generator["throw"])
        .call(this._generator, reason);
    this._promise._popContext();
    this._continue(result);
};

PromiseSpawn.prototype._resultCancelled = function() {
    if (this._yieldedPromise instanceof Promise) {
        var promise = this._yieldedPromise;
        this._yieldedPromise = null;
        promise.cancel();
    }
};

PromiseSpawn.prototype.promise = function () {
    return this._promise;
};

PromiseSpawn.prototype._run = function () {
    this._generator = this._generatorFunction.call(this._receiver);
    this._receiver =
        this._generatorFunction = undefined;
    this._promiseFulfilled(undefined);
};

PromiseSpawn.prototype._continue = function (result) {
    var promise = this._promise;
    if (result === errorObj) {
        this._cleanup();
        if (this._cancellationPhase) {
            return promise.cancel();
        } else {
            return promise._rejectCallback(result.e, false);
        }
    }

    var value = result.value;
    if (result.done === true) {
        this._cleanup();
        if (this._cancellationPhase) {
            return promise.cancel();
        } else {
            return promise._resolveCallback(value);
        }
    } else {
        var maybePromise = tryConvertToPromise(value, this._promise);
        if (!(maybePromise instanceof Promise)) {
            maybePromise =
                promiseFromYieldHandler(maybePromise,
                                        this._yieldHandlers,
                                        this._promise);
            if (maybePromise === null) {
                this._promiseRejected(
                    new TypeError(
                        "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", String(value)) +
                        "From coroutine:\u000a" +
                        this._stack.split("\n").slice(1, -7).join("\n")
                    )
                );
                return;
            }
        }
        maybePromise = maybePromise._target();
        var bitField = maybePromise._bitField;
        ;
        if (((bitField & 50397184) === 0)) {
            this._yieldedPromise = maybePromise;
            maybePromise._proxy(this, null);
        } else if (((bitField & 33554432) !== 0)) {
            Promise._async.invoke(
                this._promiseFulfilled, this, maybePromise._value()
            );
        } else if (((bitField & 16777216) !== 0)) {
            Promise._async.invoke(
                this._promiseRejected, this, maybePromise._reason()
            );
        } else {
            this._promiseCancelled();
        }
    }
};

Promise.coroutine = function (generatorFunction, options) {
    if (typeof generatorFunction !== "function") {
        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    var yieldHandler = Object(options).yieldHandler;
    var PromiseSpawn$ = PromiseSpawn;
    var stack = new Error().stack;
    return function () {
        var generator = generatorFunction.apply(this, arguments);
        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                      stack);
        var ret = spawn.promise();
        spawn._generator = generator;
        spawn._promiseFulfilled(undefined);
        return ret;
    };
};

Promise.coroutine.addYieldHandler = function(fn) {
    if (typeof fn !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(fn));
    }
    yieldHandlers.push(fn);
};

Promise.spawn = function (generatorFunction) {
    debug.deprecated("Promise.spawn()", "Promise.coroutine()");
    if (typeof generatorFunction !== "function") {
        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    var spawn = new PromiseSpawn(generatorFunction, this);
    var ret = spawn.promise();
    spawn._run(Promise.spawn);
    return ret;
};
};

},{"./errors":18,"./util":42}],23:[function(require,module,exports){
"use strict";
module.exports =
function(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async,
         getDomain) {
var util = require("./util");
var canEvaluate = util.canEvaluate;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var reject;

if (!false) {
if (canEvaluate) {
    var thenCallback = function(i) {
        return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
    };

    var promiseSetter = function(i) {
        return new Function("promise", "holder", "                           \n\
            'use strict';                                                    \n\
            holder.pIndex = promise;                                         \n\
            ".replace(/Index/g, i));
    };

    var generateHolderClass = function(total) {
        var props = new Array(total);
        for (var i = 0; i < props.length; ++i) {
            props[i] = "this.p" + (i+1);
        }
        var assignment = props.join(" = ") + " = null;";
        var cancellationCode= "var promise;\n" + props.map(function(prop) {
            return "                                                         \n\
                promise = " + prop + ";                                      \n\
                if (promise instanceof Promise) {                            \n\
                    promise.cancel();                                        \n\
                }                                                            \n\
            ";
        }).join("\n");
        var passedArguments = props.join(", ");
        var name = "Holder$" + total;


        var code = "return function(tryCatch, errorObj, Promise, async) {    \n\
            'use strict';                                                    \n\
            function [TheName](fn) {                                         \n\
                [TheProperties]                                              \n\
                this.fn = fn;                                                \n\
                this.asyncNeeded = true;                                     \n\
                this.now = 0;                                                \n\
            }                                                                \n\
                                                                             \n\
            [TheName].prototype._callFunction = function(promise) {          \n\
                promise._pushContext();                                      \n\
                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
                promise._popContext();                                       \n\
                if (ret === errorObj) {                                      \n\
                    promise._rejectCallback(ret.e, false);                   \n\
                } else {                                                     \n\
                    promise._resolveCallback(ret);                           \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype.checkFulfillment = function(promise) {       \n\
                var now = ++this.now;                                        \n\
                if (now === [TheTotal]) {                                    \n\
                    if (this.asyncNeeded) {                                  \n\
                        async.invoke(this._callFunction, this, promise);     \n\
                    } else {                                                 \n\
                        this._callFunction(promise);                         \n\
                    }                                                        \n\
                                                                             \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype._resultCancelled = function() {              \n\
                [CancellationCode]                                           \n\
            };                                                               \n\
                                                                             \n\
            return [TheName];                                                \n\
        }(tryCatch, errorObj, Promise, async);                               \n\
        ";

        code = code.replace(/\[TheName\]/g, name)
            .replace(/\[TheTotal\]/g, total)
            .replace(/\[ThePassedArguments\]/g, passedArguments)
            .replace(/\[TheProperties\]/g, assignment)
            .replace(/\[CancellationCode\]/g, cancellationCode);

        return new Function("tryCatch", "errorObj", "Promise", "async", code)
                           (tryCatch, errorObj, Promise, async);
    };

    var holderClasses = [];
    var thenCallbacks = [];
    var promiseSetters = [];

    for (var i = 0; i < 8; ++i) {
        holderClasses.push(generateHolderClass(i + 1));
        thenCallbacks.push(thenCallback(i + 1));
        promiseSetters.push(promiseSetter(i + 1));
    }

    reject = function (reason) {
        this._reject(reason);
    };
}}

Promise.join = function () {
    var last = arguments.length - 1;
    var fn;
    if (last > 0 && typeof arguments[last] === "function") {
        fn = arguments[last];
        if (!false) {
            if (last <= 8 && canEvaluate) {
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                var HolderClass = holderClasses[last - 1];
                var holder = new HolderClass(fn);
                var callbacks = thenCallbacks;

                for (var i = 0; i < last; ++i) {
                    var maybePromise = tryConvertToPromise(arguments[i], ret);
                    if (maybePromise instanceof Promise) {
                        maybePromise = maybePromise._target();
                        var bitField = maybePromise._bitField;
                        ;
                        if (((bitField & 50397184) === 0)) {
                            maybePromise._then(callbacks[i], reject,
                                               undefined, ret, holder);
                            promiseSetters[i](maybePromise, holder);
                            holder.asyncNeeded = false;
                        } else if (((bitField & 33554432) !== 0)) {
                            callbacks[i].call(ret,
                                              maybePromise._value(), holder);
                        } else if (((bitField & 16777216) !== 0)) {
                            ret._reject(maybePromise._reason());
                        } else {
                            ret._cancel();
                        }
                    } else {
                        callbacks[i].call(ret, maybePromise, holder);
                    }
                }

                if (!ret._isFateSealed()) {
                    if (holder.asyncNeeded) {
                        var domain = getDomain();
                        if (domain !== null) {
                            holder.fn = util.domainBind(domain, holder.fn);
                        }
                    }
                    ret._setAsyncGuaranteed();
                    ret._setOnCancel(holder);
                }
                return ret;
            }
        }
    }
    var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];};
    if (fn) args.pop();
    var ret = new PromiseArray(args).promise();
    return fn !== undefined ? ret.spread(fn) : ret;
};

};

},{"./util":42}],24:[function(require,module,exports){
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL,
                          debug) {
var getDomain = Promise._getDomain;
var util = require("./util");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var async = Promise._async;

function MappingPromiseArray(promises, fn, limit, _filter) {
    this.constructor$(promises);
    this._promise._captureStackTrace();
    var domain = getDomain();
    this._callback = domain === null ? fn : util.domainBind(domain, fn);
    this._preservedValues = _filter === INTERNAL
        ? new Array(this.length())
        : null;
    this._limit = limit;
    this._inFlight = 0;
    this._queue = [];
    async.invoke(this._asyncInit, this, undefined);
}
util.inherits(MappingPromiseArray, PromiseArray);

MappingPromiseArray.prototype._asyncInit = function() {
    this._init$(undefined, -2);
};

MappingPromiseArray.prototype._init = function () {};

MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var values = this._values;
    var length = this.length();
    var preservedValues = this._preservedValues;
    var limit = this._limit;

    if (index < 0) {
        index = (index * -1) - 1;
        values[index] = value;
        if (limit >= 1) {
            this._inFlight--;
            this._drainQueue();
            if (this._isResolved()) return true;
        }
    } else {
        if (limit >= 1 && this._inFlight >= limit) {
            values[index] = value;
            this._queue.push(index);
            return false;
        }
        if (preservedValues !== null) preservedValues[index] = value;

        var promise = this._promise;
        var callback = this._callback;
        var receiver = promise._boundValue();
        promise._pushContext();
        var ret = tryCatch(callback).call(receiver, value, index, length);
        var promiseCreated = promise._popContext();
        debug.checkForgottenReturns(
            ret,
            promiseCreated,
            preservedValues !== null ? "Promise.filter" : "Promise.map",
            promise
        );
        if (ret === errorObj) {
            this._reject(ret.e);
            return true;
        }

        var maybePromise = tryConvertToPromise(ret, this._promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            var bitField = maybePromise._bitField;
            ;
            if (((bitField & 50397184) === 0)) {
                if (limit >= 1) this._inFlight++;
                values[index] = maybePromise;
                maybePromise._proxy(this, (index + 1) * -1);
                return false;
            } else if (((bitField & 33554432) !== 0)) {
                ret = maybePromise._value();
            } else if (((bitField & 16777216) !== 0)) {
                this._reject(maybePromise._reason());
                return true;
            } else {
                this._cancel();
                return true;
            }
        }
        values[index] = ret;
    }
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= length) {
        if (preservedValues !== null) {
            this._filter(values, preservedValues);
        } else {
            this._resolve(values);
        }
        return true;
    }
    return false;
};

MappingPromiseArray.prototype._drainQueue = function () {
    var queue = this._queue;
    var limit = this._limit;
    var values = this._values;
    while (queue.length > 0 && this._inFlight < limit) {
        if (this._isResolved()) return;
        var index = queue.pop();
        this._promiseFulfilled(values[index], index);
    }
};

MappingPromiseArray.prototype._filter = function (booleans, values) {
    var len = values.length;
    var ret = new Array(len);
    var j = 0;
    for (var i = 0; i < len; ++i) {
        if (booleans[i]) ret[j++] = values[i];
    }
    ret.length = j;
    this._resolve(ret);
};

MappingPromiseArray.prototype.preservedValues = function () {
    return this._preservedValues;
};

function map(promises, fn, options, _filter) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }

    var limit = 0;
    if (options !== undefined) {
        if (typeof options === "object" && options !== null) {
            if (typeof options.concurrency !== "number") {
                return Promise.reject(
                    new TypeError("'concurrency' must be a number but it is " +
                                    util.classString(options.concurrency)));
            }
            limit = options.concurrency;
        } else {
            return Promise.reject(new TypeError(
                            "options argument must be an object but it is " +
                             util.classString(options)));
        }
    }
    limit = typeof limit === "number" &&
        isFinite(limit) && limit >= 1 ? limit : 0;
    return new MappingPromiseArray(promises, fn, limit, _filter).promise();
}

Promise.prototype.map = function (fn, options) {
    return map(this, fn, options, null);
};

Promise.map = function (promises, fn, options, _filter) {
    return map(promises, fn, options, _filter);
};


};

},{"./util":42}],25:[function(require,module,exports){
"use strict";
module.exports =
function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
var util = require("./util");
var tryCatch = util.tryCatch;

Promise.method = function (fn) {
    if (typeof fn !== "function") {
        throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
    }
    return function () {
        var ret = new Promise(INTERNAL);
        ret._captureStackTrace();
        ret._pushContext();
        var value = tryCatch(fn).apply(this, arguments);
        var promiseCreated = ret._popContext();
        debug.checkForgottenReturns(
            value, promiseCreated, "Promise.method", ret);
        ret._resolveFromSyncValue(value);
        return ret;
    };
};

Promise.attempt = Promise["try"] = function (fn) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._pushContext();
    var value;
    if (arguments.length > 1) {
        debug.deprecated("calling Promise.try with more than 1 argument");
        var arg = arguments[1];
        var ctx = arguments[2];
        value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
                                  : tryCatch(fn).call(ctx, arg);
    } else {
        value = tryCatch(fn)();
    }
    var promiseCreated = ret._popContext();
    debug.checkForgottenReturns(
        value, promiseCreated, "Promise.try", ret);
    ret._resolveFromSyncValue(value);
    return ret;
};

Promise.prototype._resolveFromSyncValue = function (value) {
    if (value === util.errorObj) {
        this._rejectCallback(value.e, false);
    } else {
        this._resolveCallback(value, true);
    }
};
};

},{"./util":42}],26:[function(require,module,exports){
"use strict";
var util = require("./util");
var maybeWrapAsError = util.maybeWrapAsError;
var errors = require("./errors");
var OperationalError = errors.OperationalError;
var es5 = require("./es5");

function isUntypedError(obj) {
    return obj instanceof Error &&
        es5.getPrototypeOf(obj) === Error.prototype;
}

var rErrorKey = /^(?:name|message|stack|cause)$/;
function wrapAsOperationalError(obj) {
    var ret;
    if (isUntypedError(obj)) {
        ret = new OperationalError(obj);
        ret.name = obj.name;
        ret.message = obj.message;
        ret.stack = obj.stack;
        var keys = es5.keys(obj);
        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!rErrorKey.test(key)) {
                ret[key] = obj[key];
            }
        }
        return ret;
    }
    util.markAsOriginatingFromRejection(obj);
    return obj;
}

function nodebackForPromise(promise, multiArgs) {
    return function(err, value) {
        if (promise === null) return;
        if (err) {
            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
            promise._attachExtraTrace(wrapped);
            promise._reject(wrapped);
        } else if (!multiArgs) {
            promise._fulfill(value);
        } else {
            var $_len = arguments.length;var args = new Array(Math.max($_len - 1, 0)); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];};
            promise._fulfill(args);
        }
        promise = null;
    };
}

module.exports = nodebackForPromise;

},{"./errors":18,"./es5":19,"./util":42}],27:[function(require,module,exports){
"use strict";
module.exports = function(Promise) {
var util = require("./util");
var async = Promise._async;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

function spreadAdapter(val, nodeback) {
    var promise = this;
    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
    var ret =
        tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

function successAdapter(val, nodeback) {
    var promise = this;
    var receiver = promise._boundValue();
    var ret = val === undefined
        ? tryCatch(nodeback).call(receiver, null)
        : tryCatch(nodeback).call(receiver, null, val);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}
function errorAdapter(reason, nodeback) {
    var promise = this;
    if (!reason) {
        var newReason = new Error(reason + "");
        newReason.cause = reason;
        reason = newReason;
    }
    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                                                                     options) {
    if (typeof nodeback == "function") {
        var adapter = successAdapter;
        if (options !== undefined && Object(options).spread) {
            adapter = spreadAdapter;
        }
        this._then(
            adapter,
            errorAdapter,
            undefined,
            this,
            nodeback
        );
    }
    return this;
};
};

},{"./util":42}],28:[function(require,module,exports){
"use strict";
module.exports = function() {
var makeSelfResolutionError = function () {
    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
};
var reflectHandler = function() {
    return new Promise.PromiseInspection(this._target());
};
var apiRejection = function(msg) {
    return Promise.reject(new TypeError(msg));
};
function Proxyable() {}
var UNDEFINED_BINDING = {};
var util = require("./util");

var getDomain;
if (util.isNode) {
    getDomain = function() {
        var ret = process.domain;
        if (ret === undefined) ret = null;
        return ret;
    };
} else {
    getDomain = function() {
        return null;
    };
}
util.notEnumerableProp(Promise, "_getDomain", getDomain);

var es5 = require("./es5");
var Async = require("./async");
var async = new Async();
es5.defineProperty(Promise, "_async", {value: async});
var errors = require("./errors");
var TypeError = Promise.TypeError = errors.TypeError;
Promise.RangeError = errors.RangeError;
var CancellationError = Promise.CancellationError = errors.CancellationError;
Promise.TimeoutError = errors.TimeoutError;
Promise.OperationalError = errors.OperationalError;
Promise.RejectionError = errors.OperationalError;
Promise.AggregateError = errors.AggregateError;
var INTERNAL = function(){};
var APPLY = {};
var NEXT_FILTER = {};
var tryConvertToPromise = require("./thenables")(Promise, INTERNAL);
var PromiseArray =
    require("./promise_array")(Promise, INTERNAL,
                               tryConvertToPromise, apiRejection, Proxyable);
var Context = require("./context")(Promise);
 /*jshint unused:false*/
var createContext = Context.create;
var debug = require("./debuggability")(Promise, Context);
var CapturedTrace = debug.CapturedTrace;
var PassThroughHandlerContext =
    require("./finally")(Promise, tryConvertToPromise, NEXT_FILTER);
var catchFilter = require("./catch_filter")(NEXT_FILTER);
var nodebackForPromise = require("./nodeback");
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
function check(self, executor) {
    if (self == null || self.constructor !== Promise) {
        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    if (typeof executor !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(executor));
    }

}

function Promise(executor) {
    if (executor !== INTERNAL) {
        check(this, executor);
    }
    this._bitField = 0;
    this._fulfillmentHandler0 = undefined;
    this._rejectionHandler0 = undefined;
    this._promise0 = undefined;
    this._receiver0 = undefined;
    this._resolveFromExecutor(executor);
    this._promiseCreated();
    this._fireEvent("promiseCreated", this);
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
    var len = arguments.length;
    if (len > 1) {
        var catchInstances = new Array(len - 1),
            j = 0, i;
        for (i = 0; i < len - 1; ++i) {
            var item = arguments[i];
            if (util.isObject(item)) {
                catchInstances[j++] = item;
            } else {
                return apiRejection("Catch statement predicate: " +
                    "expecting an object but got " + util.classString(item));
            }
        }
        catchInstances.length = j;
        fn = arguments[i];
        return this.then(undefined, catchFilter(catchInstances, fn, this));
    }
    return this.then(undefined, fn);
};

Promise.prototype.reflect = function () {
    return this._then(reflectHandler,
        reflectHandler, undefined, this, undefined);
};

Promise.prototype.then = function (didFulfill, didReject) {
    if (debug.warnings() && arguments.length > 0 &&
        typeof didFulfill !== "function" &&
        typeof didReject !== "function") {
        var msg = ".then() only accepts functions but was passed: " +
                util.classString(didFulfill);
        if (arguments.length > 1) {
            msg += ", " + util.classString(didReject);
        }
        this._warn(msg);
    }
    return this._then(didFulfill, didReject, undefined, undefined, undefined);
};

Promise.prototype.done = function (didFulfill, didReject) {
    var promise =
        this._then(didFulfill, didReject, undefined, undefined, undefined);
    promise._setIsFinal();
};

Promise.prototype.spread = function (fn) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }
    return this.all()._then(fn, undefined, undefined, APPLY, undefined);
};

Promise.prototype.toJSON = function () {
    var ret = {
        isFulfilled: false,
        isRejected: false,
        fulfillmentValue: undefined,
        rejectionReason: undefined
    };
    if (this.isFulfilled()) {
        ret.fulfillmentValue = this.value();
        ret.isFulfilled = true;
    } else if (this.isRejected()) {
        ret.rejectionReason = this.reason();
        ret.isRejected = true;
    }
    return ret;
};

Promise.prototype.all = function () {
    if (arguments.length > 0) {
        this._warn(".all() was passed arguments but it does not take any");
    }
    return new PromiseArray(this).promise();
};

Promise.prototype.error = function (fn) {
    return this.caught(util.originatesFromRejection, fn);
};

Promise.getNewLibraryCopy = module.exports;

Promise.is = function (val) {
    return val instanceof Promise;
};

Promise.fromNode = Promise.fromCallback = function(fn) {
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
                                         : false;
    var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
    if (result === errorObj) {
        ret._rejectCallback(result.e, true);
    }
    if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
    return ret;
};

Promise.all = function (promises) {
    return new PromiseArray(promises).promise();
};

Promise.cast = function (obj) {
    var ret = tryConvertToPromise(obj);
    if (!(ret instanceof Promise)) {
        ret = new Promise(INTERNAL);
        ret._captureStackTrace();
        ret._setFulfilled();
        ret._rejectionHandler0 = obj;
    }
    return ret;
};

Promise.resolve = Promise.fulfilled = Promise.cast;

Promise.reject = Promise.rejected = function (reason) {
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._rejectCallback(reason, true);
    return ret;
};

Promise.setScheduler = function(fn) {
    if (typeof fn !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(fn));
    }
    return async.setScheduler(fn);
};

Promise.prototype._then = function (
    didFulfill,
    didReject,
    _,    receiver,
    internalData
) {
    var haveInternalData = internalData !== undefined;
    var promise = haveInternalData ? internalData : new Promise(INTERNAL);
    var target = this._target();
    var bitField = target._bitField;

    if (!haveInternalData) {
        promise._propagateFrom(this, 3);
        promise._captureStackTrace();
        if (receiver === undefined &&
            ((this._bitField & 2097152) !== 0)) {
            if (!((bitField & 50397184) === 0)) {
                receiver = this._boundValue();
            } else {
                receiver = target === this ? undefined : this._boundTo;
            }
        }
        this._fireEvent("promiseChained", this, promise);
    }

    var domain = getDomain();
    if (!((bitField & 50397184) === 0)) {
        var handler, value, settler = target._settlePromiseCtx;
        if (((bitField & 33554432) !== 0)) {
            value = target._rejectionHandler0;
            handler = didFulfill;
        } else if (((bitField & 16777216) !== 0)) {
            value = target._fulfillmentHandler0;
            handler = didReject;
            target._unsetRejectionIsUnhandled();
        } else {
            settler = target._settlePromiseLateCancellationObserver;
            value = new CancellationError("late cancellation observer");
            target._attachExtraTrace(value);
            handler = didReject;
        }

        async.invoke(settler, target, {
            handler: domain === null ? handler
                : (typeof handler === "function" &&
                    util.domainBind(domain, handler)),
            promise: promise,
            receiver: receiver,
            value: value
        });
    } else {
        target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
    }

    return promise;
};

Promise.prototype._length = function () {
    return this._bitField & 65535;
};

Promise.prototype._isFateSealed = function () {
    return (this._bitField & 117506048) !== 0;
};

Promise.prototype._isFollowing = function () {
    return (this._bitField & 67108864) === 67108864;
};

Promise.prototype._setLength = function (len) {
    this._bitField = (this._bitField & -65536) |
        (len & 65535);
};

Promise.prototype._setFulfilled = function () {
    this._bitField = this._bitField | 33554432;
    this._fireEvent("promiseFulfilled", this);
};

Promise.prototype._setRejected = function () {
    this._bitField = this._bitField | 16777216;
    this._fireEvent("promiseRejected", this);
};

Promise.prototype._setFollowing = function () {
    this._bitField = this._bitField | 67108864;
    this._fireEvent("promiseResolved", this);
};

Promise.prototype._setIsFinal = function () {
    this._bitField = this._bitField | 4194304;
};

Promise.prototype._isFinal = function () {
    return (this._bitField & 4194304) > 0;
};

Promise.prototype._unsetCancelled = function() {
    this._bitField = this._bitField & (~65536);
};

Promise.prototype._setCancelled = function() {
    this._bitField = this._bitField | 65536;
    this._fireEvent("promiseCancelled", this);
};

Promise.prototype._setWillBeCancelled = function() {
    this._bitField = this._bitField | 8388608;
};

Promise.prototype._setAsyncGuaranteed = function() {
    if (async.hasCustomScheduler()) return;
    this._bitField = this._bitField | 134217728;
};

Promise.prototype._receiverAt = function (index) {
    var ret = index === 0 ? this._receiver0 : this[
            index * 4 - 4 + 3];
    if (ret === UNDEFINED_BINDING) {
        return undefined;
    } else if (ret === undefined && this._isBound()) {
        return this._boundValue();
    }
    return ret;
};

Promise.prototype._promiseAt = function (index) {
    return this[
            index * 4 - 4 + 2];
};

Promise.prototype._fulfillmentHandlerAt = function (index) {
    return this[
            index * 4 - 4 + 0];
};

Promise.prototype._rejectionHandlerAt = function (index) {
    return this[
            index * 4 - 4 + 1];
};

Promise.prototype._boundValue = function() {};

Promise.prototype._migrateCallback0 = function (follower) {
    var bitField = follower._bitField;
    var fulfill = follower._fulfillmentHandler0;
    var reject = follower._rejectionHandler0;
    var promise = follower._promise0;
    var receiver = follower._receiverAt(0);
    if (receiver === undefined) receiver = UNDEFINED_BINDING;
    this._addCallbacks(fulfill, reject, promise, receiver, null);
};

Promise.prototype._migrateCallbackAt = function (follower, index) {
    var fulfill = follower._fulfillmentHandlerAt(index);
    var reject = follower._rejectionHandlerAt(index);
    var promise = follower._promiseAt(index);
    var receiver = follower._receiverAt(index);
    if (receiver === undefined) receiver = UNDEFINED_BINDING;
    this._addCallbacks(fulfill, reject, promise, receiver, null);
};

Promise.prototype._addCallbacks = function (
    fulfill,
    reject,
    promise,
    receiver,
    domain
) {
    var index = this._length();

    if (index >= 65535 - 4) {
        index = 0;
        this._setLength(0);
    }

    if (index === 0) {
        this._promise0 = promise;
        this._receiver0 = receiver;
        if (typeof fulfill === "function") {
            this._fulfillmentHandler0 =
                domain === null ? fulfill : util.domainBind(domain, fulfill);
        }
        if (typeof reject === "function") {
            this._rejectionHandler0 =
                domain === null ? reject : util.domainBind(domain, reject);
        }
    } else {
        var base = index * 4 - 4;
        this[base + 2] = promise;
        this[base + 3] = receiver;
        if (typeof fulfill === "function") {
            this[base + 0] =
                domain === null ? fulfill : util.domainBind(domain, fulfill);
        }
        if (typeof reject === "function") {
            this[base + 1] =
                domain === null ? reject : util.domainBind(domain, reject);
        }
    }
    this._setLength(index + 1);
    return index;
};

Promise.prototype._proxy = function (proxyable, arg) {
    this._addCallbacks(undefined, undefined, arg, proxyable, null);
};

Promise.prototype._resolveCallback = function(value, shouldBind) {
    if (((this._bitField & 117506048) !== 0)) return;
    if (value === this)
        return this._rejectCallback(makeSelfResolutionError(), false);
    var maybePromise = tryConvertToPromise(value, this);
    if (!(maybePromise instanceof Promise)) return this._fulfill(value);

    if (shouldBind) this._propagateFrom(maybePromise, 2);

    var promise = maybePromise._target();

    if (promise === this) {
        this._reject(makeSelfResolutionError());
        return;
    }

    var bitField = promise._bitField;
    if (((bitField & 50397184) === 0)) {
        var len = this._length();
        if (len > 0) promise._migrateCallback0(this);
        for (var i = 1; i < len; ++i) {
            promise._migrateCallbackAt(this, i);
        }
        this._setFollowing();
        this._setLength(0);
        this._setFollowee(promise);
    } else if (((bitField & 33554432) !== 0)) {
        this._fulfill(promise._value());
    } else if (((bitField & 16777216) !== 0)) {
        this._reject(promise._reason());
    } else {
        var reason = new CancellationError("late cancellation observer");
        promise._attachExtraTrace(reason);
        this._reject(reason);
    }
};

Promise.prototype._rejectCallback =
function(reason, synchronous, ignoreNonErrorWarnings) {
    var trace = util.ensureErrorObject(reason);
    var hasStack = trace === reason;
    if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
        var message = "a promise was rejected with a non-error: " +
            util.classString(reason);
        this._warn(message, true);
    }
    this._attachExtraTrace(trace, synchronous ? hasStack : false);
    this._reject(reason);
};

Promise.prototype._resolveFromExecutor = function (executor) {
    if (executor === INTERNAL) return;
    var promise = this;
    this._captureStackTrace();
    this._pushContext();
    var synchronous = true;
    var r = this._execute(executor, function(value) {
        promise._resolveCallback(value);
    }, function (reason) {
        promise._rejectCallback(reason, synchronous);
    });
    synchronous = false;
    this._popContext();

    if (r !== undefined) {
        promise._rejectCallback(r, true);
    }
};

Promise.prototype._settlePromiseFromHandler = function (
    handler, receiver, value, promise
) {
    var bitField = promise._bitField;
    if (((bitField & 65536) !== 0)) return;
    promise._pushContext();
    var x;
    if (receiver === APPLY) {
        if (!value || typeof value.length !== "number") {
            x = errorObj;
            x.e = new TypeError("cannot .spread() a non-array: " +
                                    util.classString(value));
        } else {
            x = tryCatch(handler).apply(this._boundValue(), value);
        }
    } else {
        x = tryCatch(handler).call(receiver, value);
    }
    var promiseCreated = promise._popContext();
    bitField = promise._bitField;
    if (((bitField & 65536) !== 0)) return;

    if (x === NEXT_FILTER) {
        promise._reject(value);
    } else if (x === errorObj) {
        promise._rejectCallback(x.e, false);
    } else {
        debug.checkForgottenReturns(x, promiseCreated, "",  promise, this);
        promise._resolveCallback(x);
    }
};

Promise.prototype._target = function() {
    var ret = this;
    while (ret._isFollowing()) ret = ret._followee();
    return ret;
};

Promise.prototype._followee = function() {
    return this._rejectionHandler0;
};

Promise.prototype._setFollowee = function(promise) {
    this._rejectionHandler0 = promise;
};

Promise.prototype._settlePromise = function(promise, handler, receiver, value) {
    var isPromise = promise instanceof Promise;
    var bitField = this._bitField;
    var asyncGuaranteed = ((bitField & 134217728) !== 0);
    if (((bitField & 65536) !== 0)) {
        if (isPromise) promise._invokeInternalOnCancel();

        if (receiver instanceof PassThroughHandlerContext &&
            receiver.isFinallyHandler()) {
            receiver.cancelPromise = promise;
            if (tryCatch(handler).call(receiver, value) === errorObj) {
                promise._reject(errorObj.e);
            }
        } else if (handler === reflectHandler) {
            promise._fulfill(reflectHandler.call(receiver));
        } else if (receiver instanceof Proxyable) {
            receiver._promiseCancelled(promise);
        } else if (isPromise || promise instanceof PromiseArray) {
            promise._cancel();
        } else {
            receiver.cancel();
        }
    } else if (typeof handler === "function") {
        if (!isPromise) {
            handler.call(receiver, value, promise);
        } else {
            if (asyncGuaranteed) promise._setAsyncGuaranteed();
            this._settlePromiseFromHandler(handler, receiver, value, promise);
        }
    } else if (receiver instanceof Proxyable) {
        if (!receiver._isResolved()) {
            if (((bitField & 33554432) !== 0)) {
                receiver._promiseFulfilled(value, promise);
            } else {
                receiver._promiseRejected(value, promise);
            }
        }
    } else if (isPromise) {
        if (asyncGuaranteed) promise._setAsyncGuaranteed();
        if (((bitField & 33554432) !== 0)) {
            promise._fulfill(value);
        } else {
            promise._reject(value);
        }
    }
};

Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) {
    var handler = ctx.handler;
    var promise = ctx.promise;
    var receiver = ctx.receiver;
    var value = ctx.value;
    if (typeof handler === "function") {
        if (!(promise instanceof Promise)) {
            handler.call(receiver, value, promise);
        } else {
            this._settlePromiseFromHandler(handler, receiver, value, promise);
        }
    } else if (promise instanceof Promise) {
        promise._reject(value);
    }
};

Promise.prototype._settlePromiseCtx = function(ctx) {
    this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
};

Promise.prototype._settlePromise0 = function(handler, value, bitField) {
    var promise = this._promise0;
    var receiver = this._receiverAt(0);
    this._promise0 = undefined;
    this._receiver0 = undefined;
    this._settlePromise(promise, handler, receiver, value);
};

Promise.prototype._clearCallbackDataAtIndex = function(index) {
    var base = index * 4 - 4;
    this[base + 2] =
    this[base + 3] =
    this[base + 0] =
    this[base + 1] = undefined;
};

Promise.prototype._fulfill = function (value) {
    var bitField = this._bitField;
    if (((bitField & 117506048) >>> 16)) return;
    if (value === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._reject(err);
    }
    this._setFulfilled();
    this._rejectionHandler0 = value;

    if ((bitField & 65535) > 0) {
        if (((bitField & 134217728) !== 0)) {
            this._settlePromises();
        } else {
            async.settlePromises(this);
        }
        this._dereferenceTrace();
    }
};

Promise.prototype._reject = function (reason) {
    var bitField = this._bitField;
    if (((bitField & 117506048) >>> 16)) return;
    this._setRejected();
    this._fulfillmentHandler0 = reason;

    if (this._isFinal()) {
        return async.fatalError(reason, util.isNode);
    }

    if ((bitField & 65535) > 0) {
        async.settlePromises(this);
    } else {
        this._ensurePossibleRejectionHandled();
    }
};

Promise.prototype._fulfillPromises = function (len, value) {
    for (var i = 1; i < len; i++) {
        var handler = this._fulfillmentHandlerAt(i);
        var promise = this._promiseAt(i);
        var receiver = this._receiverAt(i);
        this._clearCallbackDataAtIndex(i);
        this._settlePromise(promise, handler, receiver, value);
    }
};

Promise.prototype._rejectPromises = function (len, reason) {
    for (var i = 1; i < len; i++) {
        var handler = this._rejectionHandlerAt(i);
        var promise = this._promiseAt(i);
        var receiver = this._receiverAt(i);
        this._clearCallbackDataAtIndex(i);
        this._settlePromise(promise, handler, receiver, reason);
    }
};

Promise.prototype._settlePromises = function () {
    var bitField = this._bitField;
    var len = (bitField & 65535);

    if (len > 0) {
        if (((bitField & 16842752) !== 0)) {
            var reason = this._fulfillmentHandler0;
            this._settlePromise0(this._rejectionHandler0, reason, bitField);
            this._rejectPromises(len, reason);
        } else {
            var value = this._rejectionHandler0;
            this._settlePromise0(this._fulfillmentHandler0, value, bitField);
            this._fulfillPromises(len, value);
        }
        this._setLength(0);
    }
    this._clearCancellationData();
};

Promise.prototype._settledValue = function() {
    var bitField = this._bitField;
    if (((bitField & 33554432) !== 0)) {
        return this._rejectionHandler0;
    } else if (((bitField & 16777216) !== 0)) {
        return this._fulfillmentHandler0;
    }
};

function deferResolve(v) {this.promise._resolveCallback(v);}
function deferReject(v) {this.promise._rejectCallback(v, false);}

Promise.defer = Promise.pending = function() {
    debug.deprecated("Promise.defer", "new Promise");
    var promise = new Promise(INTERNAL);
    return {
        promise: promise,
        resolve: deferResolve,
        reject: deferReject
    };
};

util.notEnumerableProp(Promise,
                       "_makeSelfResolutionError",
                       makeSelfResolutionError);

require("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection,
    debug);
require("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
require("./cancel")(Promise, PromiseArray, apiRejection, debug);
require("./direct_resolve")(Promise);
require("./synchronous_inspection")(Promise);
require("./join")(
    Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);
Promise.Promise = Promise;
Promise.version = "3.5.3";
require('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
require('./call_get.js')(Promise);
require('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
require('./timers.js')(Promise, INTERNAL, debug);
require('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
require('./nodeify.js')(Promise);
require('./promisify.js')(Promise, INTERNAL);
require('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
require('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
require('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
require('./settle.js')(Promise, PromiseArray, debug);
require('./some.js')(Promise, PromiseArray, apiRejection);
require('./filter.js')(Promise, INTERNAL);
require('./each.js')(Promise, INTERNAL);
require('./any.js')(Promise);
                                                         
    util.toFastProperties(Promise);                                          
    util.toFastProperties(Promise.prototype);                                
    function fillTypes(value) {                                              
        var p = new Promise(INTERNAL);                                       
        p._fulfillmentHandler0 = value;                                      
        p._rejectionHandler0 = value;                                        
        p._promise0 = value;                                                 
        p._receiver0 = value;                                                
    }                                                                        
    // Complete slack tracking, opt out of field-type tracking and           
    // stabilize map                                                         
    fillTypes({a: 1});                                                       
    fillTypes({b: 2});                                                       
    fillTypes({c: 3});                                                       
    fillTypes(1);                                                            
    fillTypes(function(){});                                                 
    fillTypes(undefined);                                                    
    fillTypes(false);                                                        
    fillTypes(new Promise(INTERNAL));                                        
    debug.setBounds(Async.firstLineError, util.lastLineError);               
    return Promise;                                                          

};

},{"./any.js":7,"./async":8,"./bind":9,"./call_get.js":11,"./cancel":12,"./catch_filter":13,"./context":14,"./debuggability":15,"./direct_resolve":16,"./each.js":17,"./errors":18,"./es5":19,"./filter.js":20,"./finally":21,"./generators.js":22,"./join":23,"./map.js":24,"./method":25,"./nodeback":26,"./nodeify.js":27,"./promise_array":29,"./promisify.js":30,"./props.js":31,"./race.js":33,"./reduce.js":34,"./settle.js":36,"./some.js":37,"./synchronous_inspection":38,"./thenables":39,"./timers.js":40,"./using.js":41,"./util":42}],29:[function(require,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise,
    apiRejection, Proxyable) {
var util = require("./util");
var isArray = util.isArray;

function toResolutionValue(val) {
    switch(val) {
    case -2: return [];
    case -3: return {};
    case -6: return new Map();
    }
}

function PromiseArray(values) {
    var promise = this._promise = new Promise(INTERNAL);
    if (values instanceof Promise) {
        promise._propagateFrom(values, 3);
    }
    promise._setOnCancel(this);
    this._values = values;
    this._length = 0;
    this._totalResolved = 0;
    this._init(undefined, -2);
}
util.inherits(PromiseArray, Proxyable);

PromiseArray.prototype.length = function () {
    return this._length;
};

PromiseArray.prototype.promise = function () {
    return this._promise;
};

PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
    var values = tryConvertToPromise(this._values, this._promise);
    if (values instanceof Promise) {
        values = values._target();
        var bitField = values._bitField;
        ;
        this._values = values;

        if (((bitField & 50397184) === 0)) {
            this._promise._setAsyncGuaranteed();
            return values._then(
                init,
                this._reject,
                undefined,
                this,
                resolveValueIfEmpty
           );
        } else if (((bitField & 33554432) !== 0)) {
            values = values._value();
        } else if (((bitField & 16777216) !== 0)) {
            return this._reject(values._reason());
        } else {
            return this._cancel();
        }
    }
    values = util.asArray(values);
    if (values === null) {
        var err = apiRejection(
            "expecting an array or an iterable object but got " + util.classString(values)).reason();
        this._promise._rejectCallback(err, false);
        return;
    }

    if (values.length === 0) {
        if (resolveValueIfEmpty === -5) {
            this._resolveEmptyArray();
        }
        else {
            this._resolve(toResolutionValue(resolveValueIfEmpty));
        }
        return;
    }
    this._iterate(values);
};

PromiseArray.prototype._iterate = function(values) {
    var len = this.getActualLength(values.length);
    this._length = len;
    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
    var result = this._promise;
    var isResolved = false;
    var bitField = null;
    for (var i = 0; i < len; ++i) {
        var maybePromise = tryConvertToPromise(values[i], result);

        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            bitField = maybePromise._bitField;
        } else {
            bitField = null;
        }

        if (isResolved) {
            if (bitField !== null) {
                maybePromise.suppressUnhandledRejections();
            }
        } else if (bitField !== null) {
            if (((bitField & 50397184) === 0)) {
                maybePromise._proxy(this, i);
                this._values[i] = maybePromise;
            } else if (((bitField & 33554432) !== 0)) {
                isResolved = this._promiseFulfilled(maybePromise._value(), i);
            } else if (((bitField & 16777216) !== 0)) {
                isResolved = this._promiseRejected(maybePromise._reason(), i);
            } else {
                isResolved = this._promiseCancelled(i);
            }
        } else {
            isResolved = this._promiseFulfilled(maybePromise, i);
        }
    }
    if (!isResolved) result._setAsyncGuaranteed();
};

PromiseArray.prototype._isResolved = function () {
    return this._values === null;
};

PromiseArray.prototype._resolve = function (value) {
    this._values = null;
    this._promise._fulfill(value);
};

PromiseArray.prototype._cancel = function() {
    if (this._isResolved() || !this._promise._isCancellable()) return;
    this._values = null;
    this._promise._cancel();
};

PromiseArray.prototype._reject = function (reason) {
    this._values = null;
    this._promise._rejectCallback(reason, false);
};

PromiseArray.prototype._promiseFulfilled = function (value, index) {
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
        return true;
    }
    return false;
};

PromiseArray.prototype._promiseCancelled = function() {
    this._cancel();
    return true;
};

PromiseArray.prototype._promiseRejected = function (reason) {
    this._totalResolved++;
    this._reject(reason);
    return true;
};

PromiseArray.prototype._resultCancelled = function() {
    if (this._isResolved()) return;
    var values = this._values;
    this._cancel();
    if (values instanceof Promise) {
        values.cancel();
    } else {
        for (var i = 0; i < values.length; ++i) {
            if (values[i] instanceof Promise) {
                values[i].cancel();
            }
        }
    }
};

PromiseArray.prototype.shouldCopyValues = function () {
    return true;
};

PromiseArray.prototype.getActualLength = function (len) {
    return len;
};

return PromiseArray;
};

},{"./util":42}],30:[function(require,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var THIS = {};
var util = require("./util");
var nodebackForPromise = require("./nodeback");
var withAppended = util.withAppended;
var maybeWrapAsError = util.maybeWrapAsError;
var canEvaluate = util.canEvaluate;
var TypeError = require("./errors").TypeError;
var defaultSuffix = "Async";
var defaultPromisified = {__isPromisified__: true};
var noCopyProps = [
    "arity",    "length",
    "name",
    "arguments",
    "caller",
    "callee",
    "prototype",
    "__isPromisified__"
];
var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

var defaultFilter = function(name) {
    return util.isIdentifier(name) &&
        name.charAt(0) !== "_" &&
        name !== "constructor";
};

function propsFilter(key) {
    return !noCopyPropsPattern.test(key);
}

function isPromisified(fn) {
    try {
        return fn.__isPromisified__ === true;
    }
    catch (e) {
        return false;
    }
}

function hasPromisified(obj, key, suffix) {
    var val = util.getDataPropertyOrDefault(obj, key + suffix,
                                            defaultPromisified);
    return val ? isPromisified(val) : false;
}
function checkValid(ret, suffix, suffixRegexp) {
    for (var i = 0; i < ret.length; i += 2) {
        var key = ret[i];
        if (suffixRegexp.test(key)) {
            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
            for (var j = 0; j < ret.length; j += 2) {
                if (ret[j] === keyWithoutAsyncSuffix) {
                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
                        .replace("%s", suffix));
                }
            }
        }
    }
}

function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
    var keys = util.inheritedDataKeys(obj);
    var ret = [];
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var value = obj[key];
        var passesDefaultFilter = filter === defaultFilter
            ? true : defaultFilter(key, value, obj);
        if (typeof value === "function" &&
            !isPromisified(value) &&
            !hasPromisified(obj, key, suffix) &&
            filter(key, value, obj, passesDefaultFilter)) {
            ret.push(key, value);
        }
    }
    checkValid(ret, suffix, suffixRegexp);
    return ret;
}

var escapeIdentRegex = function(str) {
    return str.replace(/([$])/, "\\$");
};

var makeNodePromisifiedEval;
if (!false) {
var switchCaseArgumentOrder = function(likelyArgumentCount) {
    var ret = [likelyArgumentCount];
    var min = Math.max(0, likelyArgumentCount - 1 - 3);
    for(var i = likelyArgumentCount - 1; i >= min; --i) {
        ret.push(i);
    }
    for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
        ret.push(i);
    }
    return ret;
};

var argumentSequence = function(argumentCount) {
    return util.filledRange(argumentCount, "_arg", "");
};

var parameterDeclaration = function(parameterCount) {
    return util.filledRange(
        Math.max(parameterCount, 3), "_arg", "");
};

var parameterCount = function(fn) {
    if (typeof fn.length === "number") {
        return Math.max(Math.min(fn.length, 1023 + 1), 0);
    }
    return 0;
};

makeNodePromisifiedEval =
function(callback, receiver, originalName, fn, _, multiArgs) {
    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
    var shouldProxyThis = typeof callback === "string" || receiver === THIS;

    function generateCallForArgumentCount(count) {
        var args = argumentSequence(count).join(", ");
        var comma = count > 0 ? ", " : "";
        var ret;
        if (shouldProxyThis) {
            ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
        } else {
            ret = receiver === undefined
                ? "ret = callback({{args}}, nodeback); break;\n"
                : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
        }
        return ret.replace("{{args}}", args).replace(", ", comma);
    }

    function generateArgumentSwitchCase() {
        var ret = "";
        for (var i = 0; i < argumentOrder.length; ++i) {
            ret += "case " + argumentOrder[i] +":" +
                generateCallForArgumentCount(argumentOrder[i]);
        }

        ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                ? "ret = callback.apply(this, args);\n"
                                : "ret = callback.apply(receiver, args);\n"));
        return ret;
    }

    var getFunctionCode = typeof callback === "string"
                                ? ("this != null ? this['"+callback+"'] : fn")
                                : "fn";
    var body = "'use strict';                                                \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
        .replace("[GetFunctionCode]", getFunctionCode);
    body = body.replace("Parameters", parameterDeclaration(newParameterCount));
    return new Function("Promise",
                        "fn",
                        "receiver",
                        "withAppended",
                        "maybeWrapAsError",
                        "nodebackForPromise",
                        "tryCatch",
                        "errorObj",
                        "notEnumerableProp",
                        "INTERNAL",
                        body)(
                    Promise,
                    fn,
                    receiver,
                    withAppended,
                    maybeWrapAsError,
                    nodebackForPromise,
                    util.tryCatch,
                    util.errorObj,
                    util.notEnumerableProp,
                    INTERNAL);
};
}

function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
    var defaultThis = (function() {return this;})();
    var method = callback;
    if (typeof method === "string") {
        callback = fn;
    }
    function promisified() {
        var _receiver = receiver;
        if (receiver === THIS) _receiver = this;
        var promise = new Promise(INTERNAL);
        promise._captureStackTrace();
        var cb = typeof method === "string" && this !== defaultThis
            ? this[method] : callback;
        var fn = nodebackForPromise(promise, multiArgs);
        try {
            cb.apply(_receiver, withAppended(arguments, fn));
        } catch(e) {
            promise._rejectCallback(maybeWrapAsError(e), true, true);
        }
        if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
        return promise;
    }
    util.notEnumerableProp(promisified, "__isPromisified__", true);
    return promisified;
}

var makeNodePromisified = canEvaluate
    ? makeNodePromisifiedEval
    : makeNodePromisifiedClosure;

function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
    var methods =
        promisifiableMethods(obj, suffix, suffixRegexp, filter);

    for (var i = 0, len = methods.length; i < len; i+= 2) {
        var key = methods[i];
        var fn = methods[i+1];
        var promisifiedKey = key + suffix;
        if (promisifier === makeNodePromisified) {
            obj[promisifiedKey] =
                makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
        } else {
            var promisified = promisifier(fn, function() {
                return makeNodePromisified(key, THIS, key,
                                           fn, suffix, multiArgs);
            });
            util.notEnumerableProp(promisified, "__isPromisified__", true);
            obj[promisifiedKey] = promisified;
        }
    }
    util.toFastProperties(obj);
    return obj;
}

function promisify(callback, receiver, multiArgs) {
    return makeNodePromisified(callback, receiver, undefined,
                                callback, null, multiArgs);
}

Promise.promisify = function (fn, options) {
    if (typeof fn !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(fn));
    }
    if (isPromisified(fn)) {
        return fn;
    }
    options = Object(options);
    var receiver = options.context === undefined ? THIS : options.context;
    var multiArgs = !!options.multiArgs;
    var ret = promisify(fn, receiver, multiArgs);
    util.copyDescriptors(fn, ret, propsFilter);
    return ret;
};

Promise.promisifyAll = function (target, options) {
    if (typeof target !== "function" && typeof target !== "object") {
        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    options = Object(options);
    var multiArgs = !!options.multiArgs;
    var suffix = options.suffix;
    if (typeof suffix !== "string") suffix = defaultSuffix;
    var filter = options.filter;
    if (typeof filter !== "function") filter = defaultFilter;
    var promisifier = options.promisifier;
    if (typeof promisifier !== "function") promisifier = makeNodePromisified;

    if (!util.isIdentifier(suffix)) {
        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }

    var keys = util.inheritedDataKeys(target);
    for (var i = 0; i < keys.length; ++i) {
        var value = target[keys[i]];
        if (keys[i] !== "constructor" &&
            util.isClass(value)) {
            promisifyAll(value.prototype, suffix, filter, promisifier,
                multiArgs);
            promisifyAll(value, suffix, filter, promisifier, multiArgs);
        }
    }

    return promisifyAll(target, suffix, filter, promisifier, multiArgs);
};
};


},{"./errors":18,"./nodeback":26,"./util":42}],31:[function(require,module,exports){
"use strict";
module.exports = function(
    Promise, PromiseArray, tryConvertToPromise, apiRejection) {
var util = require("./util");
var isObject = util.isObject;
var es5 = require("./es5");
var Es6Map;
if (typeof Map === "function") Es6Map = Map;

var mapToEntries = (function() {
    var index = 0;
    var size = 0;

    function extractEntry(value, key) {
        this[index] = value;
        this[index + size] = key;
        index++;
    }

    return function mapToEntries(map) {
        size = map.size;
        index = 0;
        var ret = new Array(map.size * 2);
        map.forEach(extractEntry, ret);
        return ret;
    };
})();

var entriesToMap = function(entries) {
    var ret = new Es6Map();
    var length = entries.length / 2 | 0;
    for (var i = 0; i < length; ++i) {
        var key = entries[length + i];
        var value = entries[i];
        ret.set(key, value);
    }
    return ret;
};

function PropertiesPromiseArray(obj) {
    var isMap = false;
    var entries;
    if (Es6Map !== undefined && obj instanceof Es6Map) {
        entries = mapToEntries(obj);
        isMap = true;
    } else {
        var keys = es5.keys(obj);
        var len = keys.length;
        entries = new Array(len * 2);
        for (var i = 0; i < len; ++i) {
            var key = keys[i];
            entries[i] = obj[key];
            entries[i + len] = key;
        }
    }
    this.constructor$(entries);
    this._isMap = isMap;
    this._init$(undefined, isMap ? -6 : -3);
}
util.inherits(PropertiesPromiseArray, PromiseArray);

PropertiesPromiseArray.prototype._init = function () {};

PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        var val;
        if (this._isMap) {
            val = entriesToMap(this._values);
        } else {
            val = {};
            var keyOffset = this.length();
            for (var i = 0, len = this.length(); i < len; ++i) {
                val[this._values[i + keyOffset]] = this._values[i];
            }
        }
        this._resolve(val);
        return true;
    }
    return false;
};

PropertiesPromiseArray.prototype.shouldCopyValues = function () {
    return false;
};

PropertiesPromiseArray.prototype.getActualLength = function (len) {
    return len >> 1;
};

function props(promises) {
    var ret;
    var castValue = tryConvertToPromise(promises);

    if (!isObject(castValue)) {
        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    } else if (castValue instanceof Promise) {
        ret = castValue._then(
            Promise.props, undefined, undefined, undefined, undefined);
    } else {
        ret = new PropertiesPromiseArray(castValue).promise();
    }

    if (castValue instanceof Promise) {
        ret._propagateFrom(castValue, 2);
    }
    return ret;
}

Promise.prototype.props = function () {
    return props(this);
};

Promise.props = function (promises) {
    return props(promises);
};
};

},{"./es5":19,"./util":42}],32:[function(require,module,exports){
"use strict";
function arrayMove(src, srcIndex, dst, dstIndex, len) {
    for (var j = 0; j < len; ++j) {
        dst[j + dstIndex] = src[j + srcIndex];
        src[j + srcIndex] = void 0;
    }
}

function Queue(capacity) {
    this._capacity = capacity;
    this._length = 0;
    this._front = 0;
}

Queue.prototype._willBeOverCapacity = function (size) {
    return this._capacity < size;
};

Queue.prototype._pushOne = function (arg) {
    var length = this.length();
    this._checkCapacity(length + 1);
    var i = (this._front + length) & (this._capacity - 1);
    this[i] = arg;
    this._length = length + 1;
};

Queue.prototype.push = function (fn, receiver, arg) {
    var length = this.length() + 3;
    if (this._willBeOverCapacity(length)) {
        this._pushOne(fn);
        this._pushOne(receiver);
        this._pushOne(arg);
        return;
    }
    var j = this._front + length - 3;
    this._checkCapacity(length);
    var wrapMask = this._capacity - 1;
    this[(j + 0) & wrapMask] = fn;
    this[(j + 1) & wrapMask] = receiver;
    this[(j + 2) & wrapMask] = arg;
    this._length = length;
};

Queue.prototype.shift = function () {
    var front = this._front,
        ret = this[front];

    this[front] = undefined;
    this._front = (front + 1) & (this._capacity - 1);
    this._length--;
    return ret;
};

Queue.prototype.length = function () {
    return this._length;
};

Queue.prototype._checkCapacity = function (size) {
    if (this._capacity < size) {
        this._resizeTo(this._capacity << 1);
    }
};

Queue.prototype._resizeTo = function (capacity) {
    var oldCapacity = this._capacity;
    this._capacity = capacity;
    var front = this._front;
    var length = this._length;
    var moveItemsCount = (front + length) & (oldCapacity - 1);
    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
};

module.exports = Queue;

},{}],33:[function(require,module,exports){
"use strict";
module.exports = function(
    Promise, INTERNAL, tryConvertToPromise, apiRejection) {
var util = require("./util");

var raceLater = function (promise) {
    return promise.then(function(array) {
        return race(array, promise);
    });
};

function race(promises, parent) {
    var maybePromise = tryConvertToPromise(promises);

    if (maybePromise instanceof Promise) {
        return raceLater(maybePromise);
    } else {
        promises = util.asArray(promises);
        if (promises === null)
            return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
    }

    var ret = new Promise(INTERNAL);
    if (parent !== undefined) {
        ret._propagateFrom(parent, 3);
    }
    var fulfill = ret._fulfill;
    var reject = ret._reject;
    for (var i = 0, len = promises.length; i < len; ++i) {
        var val = promises[i];

        if (val === undefined && !(i in promises)) {
            continue;
        }

        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
    }
    return ret;
}

Promise.race = function (promises) {
    return race(promises, undefined);
};

Promise.prototype.race = function () {
    return race(this, undefined);
};

};

},{"./util":42}],34:[function(require,module,exports){
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL,
                          debug) {
var getDomain = Promise._getDomain;
var util = require("./util");
var tryCatch = util.tryCatch;

function ReductionPromiseArray(promises, fn, initialValue, _each) {
    this.constructor$(promises);
    var domain = getDomain();
    this._fn = domain === null ? fn : util.domainBind(domain, fn);
    if (initialValue !== undefined) {
        initialValue = Promise.resolve(initialValue);
        initialValue._attachCancellationCallback(this);
    }
    this._initialValue = initialValue;
    this._currentCancellable = null;
    if(_each === INTERNAL) {
        this._eachValues = Array(this._length);
    } else if (_each === 0) {
        this._eachValues = null;
    } else {
        this._eachValues = undefined;
    }
    this._promise._captureStackTrace();
    this._init$(undefined, -5);
}
util.inherits(ReductionPromiseArray, PromiseArray);

ReductionPromiseArray.prototype._gotAccum = function(accum) {
    if (this._eachValues !== undefined && 
        this._eachValues !== null && 
        accum !== INTERNAL) {
        this._eachValues.push(accum);
    }
};

ReductionPromiseArray.prototype._eachComplete = function(value) {
    if (this._eachValues !== null) {
        this._eachValues.push(value);
    }
    return this._eachValues;
};

ReductionPromiseArray.prototype._init = function() {};

ReductionPromiseArray.prototype._resolveEmptyArray = function() {
    this._resolve(this._eachValues !== undefined ? this._eachValues
                                                 : this._initialValue);
};

ReductionPromiseArray.prototype.shouldCopyValues = function () {
    return false;
};

ReductionPromiseArray.prototype._resolve = function(value) {
    this._promise._resolveCallback(value);
    this._values = null;
};

ReductionPromiseArray.prototype._resultCancelled = function(sender) {
    if (sender === this._initialValue) return this._cancel();
    if (this._isResolved()) return;
    this._resultCancelled$();
    if (this._currentCancellable instanceof Promise) {
        this._currentCancellable.cancel();
    }
    if (this._initialValue instanceof Promise) {
        this._initialValue.cancel();
    }
};

ReductionPromiseArray.prototype._iterate = function (values) {
    this._values = values;
    var value;
    var i;
    var length = values.length;
    if (this._initialValue !== undefined) {
        value = this._initialValue;
        i = 0;
    } else {
        value = Promise.resolve(values[0]);
        i = 1;
    }

    this._currentCancellable = value;

    if (!value.isRejected()) {
        for (; i < length; ++i) {
            var ctx = {
                accum: null,
                value: values[i],
                index: i,
                length: length,
                array: this
            };
            value = value._then(gotAccum, undefined, undefined, ctx, undefined);
        }
    }

    if (this._eachValues !== undefined) {
        value = value
            ._then(this._eachComplete, undefined, undefined, this, undefined);
    }
    value._then(completed, completed, undefined, value, this);
};

Promise.prototype.reduce = function (fn, initialValue) {
    return reduce(this, fn, initialValue, null);
};

Promise.reduce = function (promises, fn, initialValue, _each) {
    return reduce(promises, fn, initialValue, _each);
};

function completed(valueOrReason, array) {
    if (this.isFulfilled()) {
        array._resolve(valueOrReason);
    } else {
        array._reject(valueOrReason);
    }
}

function reduce(promises, fn, initialValue, _each) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }
    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
    return array.promise();
}

function gotAccum(accum) {
    this.accum = accum;
    this.array._gotAccum(accum);
    var value = tryConvertToPromise(this.value, this.array._promise);
    if (value instanceof Promise) {
        this.array._currentCancellable = value;
        return value._then(gotValue, undefined, undefined, this, undefined);
    } else {
        return gotValue.call(this, value);
    }
}

function gotValue(value) {
    var array = this.array;
    var promise = array._promise;
    var fn = tryCatch(array._fn);
    promise._pushContext();
    var ret;
    if (array._eachValues !== undefined) {
        ret = fn.call(promise._boundValue(), value, this.index, this.length);
    } else {
        ret = fn.call(promise._boundValue(),
                              this.accum, value, this.index, this.length);
    }
    if (ret instanceof Promise) {
        array._currentCancellable = ret;
    }
    var promiseCreated = promise._popContext();
    debug.checkForgottenReturns(
        ret,
        promiseCreated,
        array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
        promise
    );
    return ret;
}
};

},{"./util":42}],35:[function(require,module,exports){
"use strict";
var util = require("./util");
var schedule;
var noAsyncScheduler = function() {
    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
};
var NativePromise = util.getNativePromise();
if (util.isNode && typeof MutationObserver === "undefined") {
    var GlobalSetImmediate = global.setImmediate;
    var ProcessNextTick = process.nextTick;
    schedule = util.isRecentNode
                ? function(fn) { GlobalSetImmediate.call(global, fn); }
                : function(fn) { ProcessNextTick.call(process, fn); };
} else if (typeof NativePromise === "function" &&
           typeof NativePromise.resolve === "function") {
    var nativePromise = NativePromise.resolve();
    schedule = function(fn) {
        nativePromise.then(fn);
    };
} else if ((typeof MutationObserver !== "undefined") &&
          !(typeof window !== "undefined" &&
            window.navigator &&
            (window.navigator.standalone || window.cordova))) {
    schedule = (function() {
        var div = document.createElement("div");
        var opts = {attributes: true};
        var toggleScheduled = false;
        var div2 = document.createElement("div");
        var o2 = new MutationObserver(function() {
            div.classList.toggle("foo");
            toggleScheduled = false;
        });
        o2.observe(div2, opts);

        var scheduleToggle = function() {
            if (toggleScheduled) return;
            toggleScheduled = true;
            div2.classList.toggle("foo");
        };

        return function schedule(fn) {
            var o = new MutationObserver(function() {
                o.disconnect();
                fn();
            });
            o.observe(div, opts);
            scheduleToggle();
        };
    })();
} else if (typeof setImmediate !== "undefined") {
    schedule = function (fn) {
        setImmediate(fn);
    };
} else if (typeof setTimeout !== "undefined") {
    schedule = function (fn) {
        setTimeout(fn, 0);
    };
} else {
    schedule = noAsyncScheduler;
}
module.exports = schedule;

},{"./util":42}],36:[function(require,module,exports){
"use strict";
module.exports =
    function(Promise, PromiseArray, debug) {
var PromiseInspection = Promise.PromiseInspection;
var util = require("./util");

function SettledPromiseArray(values) {
    this.constructor$(values);
}
util.inherits(SettledPromiseArray, PromiseArray);

SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
    this._values[index] = inspection;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
        return true;
    }
    return false;
};

SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var ret = new PromiseInspection();
    ret._bitField = 33554432;
    ret._settledValueField = value;
    return this._promiseResolved(index, ret);
};
SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
    var ret = new PromiseInspection();
    ret._bitField = 16777216;
    ret._settledValueField = reason;
    return this._promiseResolved(index, ret);
};

Promise.settle = function (promises) {
    debug.deprecated(".settle()", ".reflect()");
    return new SettledPromiseArray(promises).promise();
};

Promise.prototype.settle = function () {
    return Promise.settle(this);
};
};

},{"./util":42}],37:[function(require,module,exports){
"use strict";
module.exports =
function(Promise, PromiseArray, apiRejection) {
var util = require("./util");
var RangeError = require("./errors").RangeError;
var AggregateError = require("./errors").AggregateError;
var isArray = util.isArray;
var CANCELLATION = {};


function SomePromiseArray(values) {
    this.constructor$(values);
    this._howMany = 0;
    this._unwrap = false;
    this._initialized = false;
}
util.inherits(SomePromiseArray, PromiseArray);

SomePromiseArray.prototype._init = function () {
    if (!this._initialized) {
        return;
    }
    if (this._howMany === 0) {
        this._resolve([]);
        return;
    }
    this._init$(undefined, -5);
    var isArrayResolved = isArray(this._values);
    if (!this._isResolved() &&
        isArrayResolved &&
        this._howMany > this._canPossiblyFulfill()) {
        this._reject(this._getRangeError(this.length()));
    }
};

SomePromiseArray.prototype.init = function () {
    this._initialized = true;
    this._init();
};

SomePromiseArray.prototype.setUnwrap = function () {
    this._unwrap = true;
};

SomePromiseArray.prototype.howMany = function () {
    return this._howMany;
};

SomePromiseArray.prototype.setHowMany = function (count) {
    this._howMany = count;
};

SomePromiseArray.prototype._promiseFulfilled = function (value) {
    this._addFulfilled(value);
    if (this._fulfilled() === this.howMany()) {
        this._values.length = this.howMany();
        if (this.howMany() === 1 && this._unwrap) {
            this._resolve(this._values[0]);
        } else {
            this._resolve(this._values);
        }
        return true;
    }
    return false;

};
SomePromiseArray.prototype._promiseRejected = function (reason) {
    this._addRejected(reason);
    return this._checkOutcome();
};

SomePromiseArray.prototype._promiseCancelled = function () {
    if (this._values instanceof Promise || this._values == null) {
        return this._cancel();
    }
    this._addRejected(CANCELLATION);
    return this._checkOutcome();
};

SomePromiseArray.prototype._checkOutcome = function() {
    if (this.howMany() > this._canPossiblyFulfill()) {
        var e = new AggregateError();
        for (var i = this.length(); i < this._values.length; ++i) {
            if (this._values[i] !== CANCELLATION) {
                e.push(this._values[i]);
            }
        }
        if (e.length > 0) {
            this._reject(e);
        } else {
            this._cancel();
        }
        return true;
    }
    return false;
};

SomePromiseArray.prototype._fulfilled = function () {
    return this._totalResolved;
};

SomePromiseArray.prototype._rejected = function () {
    return this._values.length - this.length();
};

SomePromiseArray.prototype._addRejected = function (reason) {
    this._values.push(reason);
};

SomePromiseArray.prototype._addFulfilled = function (value) {
    this._values[this._totalResolved++] = value;
};

SomePromiseArray.prototype._canPossiblyFulfill = function () {
    return this.length() - this._rejected();
};

SomePromiseArray.prototype._getRangeError = function (count) {
    var message = "Input array must contain at least " +
            this._howMany + " items but contains only " + count + " items";
    return new RangeError(message);
};

SomePromiseArray.prototype._resolveEmptyArray = function () {
    this._reject(this._getRangeError(0));
};

function some(promises, howMany) {
    if ((howMany | 0) !== howMany || howMany < 0) {
        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(howMany);
    ret.init();
    return promise;
}

Promise.some = function (promises, howMany) {
    return some(promises, howMany);
};

Promise.prototype.some = function (howMany) {
    return some(this, howMany);
};

Promise._SomePromiseArray = SomePromiseArray;
};

},{"./errors":18,"./util":42}],38:[function(require,module,exports){
"use strict";
module.exports = function(Promise) {
function PromiseInspection(promise) {
    if (promise !== undefined) {
        promise = promise._target();
        this._bitField = promise._bitField;
        this._settledValueField = promise._isFateSealed()
            ? promise._settledValue() : undefined;
    }
    else {
        this._bitField = 0;
        this._settledValueField = undefined;
    }
}

PromiseInspection.prototype._settledValue = function() {
    return this._settledValueField;
};

var value = PromiseInspection.prototype.value = function () {
    if (!this.isFulfilled()) {
        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    return this._settledValue();
};

var reason = PromiseInspection.prototype.error =
PromiseInspection.prototype.reason = function () {
    if (!this.isRejected()) {
        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    return this._settledValue();
};

var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
    return (this._bitField & 33554432) !== 0;
};

var isRejected = PromiseInspection.prototype.isRejected = function () {
    return (this._bitField & 16777216) !== 0;
};

var isPending = PromiseInspection.prototype.isPending = function () {
    return (this._bitField & 50397184) === 0;
};

var isResolved = PromiseInspection.prototype.isResolved = function () {
    return (this._bitField & 50331648) !== 0;
};

PromiseInspection.prototype.isCancelled = function() {
    return (this._bitField & 8454144) !== 0;
};

Promise.prototype.__isCancelled = function() {
    return (this._bitField & 65536) === 65536;
};

Promise.prototype._isCancelled = function() {
    return this._target().__isCancelled();
};

Promise.prototype.isCancelled = function() {
    return (this._target()._bitField & 8454144) !== 0;
};

Promise.prototype.isPending = function() {
    return isPending.call(this._target());
};

Promise.prototype.isRejected = function() {
    return isRejected.call(this._target());
};

Promise.prototype.isFulfilled = function() {
    return isFulfilled.call(this._target());
};

Promise.prototype.isResolved = function() {
    return isResolved.call(this._target());
};

Promise.prototype.value = function() {
    return value.call(this._target());
};

Promise.prototype.reason = function() {
    var target = this._target();
    target._unsetRejectionIsUnhandled();
    return reason.call(target);
};

Promise.prototype._value = function() {
    return this._settledValue();
};

Promise.prototype._reason = function() {
    this._unsetRejectionIsUnhandled();
    return this._settledValue();
};

Promise.PromiseInspection = PromiseInspection;
};

},{}],39:[function(require,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var util = require("./util");
var errorObj = util.errorObj;
var isObject = util.isObject;

function tryConvertToPromise(obj, context) {
    if (isObject(obj)) {
        if (obj instanceof Promise) return obj;
        var then = getThen(obj);
        if (then === errorObj) {
            if (context) context._pushContext();
            var ret = Promise.reject(then.e);
            if (context) context._popContext();
            return ret;
        } else if (typeof then === "function") {
            if (isAnyBluebirdPromise(obj)) {
                var ret = new Promise(INTERNAL);
                obj._then(
                    ret._fulfill,
                    ret._reject,
                    undefined,
                    ret,
                    null
                );
                return ret;
            }
            return doThenable(obj, then, context);
        }
    }
    return obj;
}

function doGetThen(obj) {
    return obj.then;
}

function getThen(obj) {
    try {
        return doGetThen(obj);
    } catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}

var hasProp = {}.hasOwnProperty;
function isAnyBluebirdPromise(obj) {
    try {
        return hasProp.call(obj, "_promise0");
    } catch (e) {
        return false;
    }
}

function doThenable(x, then, context) {
    var promise = new Promise(INTERNAL);
    var ret = promise;
    if (context) context._pushContext();
    promise._captureStackTrace();
    if (context) context._popContext();
    var synchronous = true;
    var result = util.tryCatch(then).call(x, resolve, reject);
    synchronous = false;

    if (promise && result === errorObj) {
        promise._rejectCallback(result.e, true, true);
        promise = null;
    }

    function resolve(value) {
        if (!promise) return;
        promise._resolveCallback(value);
        promise = null;
    }

    function reject(reason) {
        if (!promise) return;
        promise._rejectCallback(reason, synchronous, true);
        promise = null;
    }
    return ret;
}

return tryConvertToPromise;
};

},{"./util":42}],40:[function(require,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, debug) {
var util = require("./util");
var TimeoutError = Promise.TimeoutError;

function HandleWrapper(handle)  {
    this.handle = handle;
}

HandleWrapper.prototype._resultCancelled = function() {
    clearTimeout(this.handle);
};

var afterValue = function(value) { return delay(+this).thenReturn(value); };
var delay = Promise.delay = function (ms, value) {
    var ret;
    var handle;
    if (value !== undefined) {
        ret = Promise.resolve(value)
                ._then(afterValue, null, null, ms, undefined);
        if (debug.cancellation() && value instanceof Promise) {
            ret._setOnCancel(value);
        }
    } else {
        ret = new Promise(INTERNAL);
        handle = setTimeout(function() { ret._fulfill(); }, +ms);
        if (debug.cancellation()) {
            ret._setOnCancel(new HandleWrapper(handle));
        }
        ret._captureStackTrace();
    }
    ret._setAsyncGuaranteed();
    return ret;
};

Promise.prototype.delay = function (ms) {
    return delay(ms, this);
};

var afterTimeout = function (promise, message, parent) {
    var err;
    if (typeof message !== "string") {
        if (message instanceof Error) {
            err = message;
        } else {
            err = new TimeoutError("operation timed out");
        }
    } else {
        err = new TimeoutError(message);
    }
    util.markAsOriginatingFromRejection(err);
    promise._attachExtraTrace(err);
    promise._reject(err);

    if (parent != null) {
        parent.cancel();
    }
};

function successClear(value) {
    clearTimeout(this.handle);
    return value;
}

function failureClear(reason) {
    clearTimeout(this.handle);
    throw reason;
}

Promise.prototype.timeout = function (ms, message) {
    ms = +ms;
    var ret, parent;

    var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
        if (ret.isPending()) {
            afterTimeout(ret, message, parent);
        }
    }, ms));

    if (debug.cancellation()) {
        parent = this.then();
        ret = parent._then(successClear, failureClear,
                            undefined, handleWrapper, undefined);
        ret._setOnCancel(handleWrapper);
    } else {
        ret = this._then(successClear, failureClear,
                            undefined, handleWrapper, undefined);
    }

    return ret;
};

};

},{"./util":42}],41:[function(require,module,exports){
"use strict";
module.exports = function (Promise, apiRejection, tryConvertToPromise,
    createContext, INTERNAL, debug) {
    var util = require("./util");
    var TypeError = require("./errors").TypeError;
    var inherits = require("./util").inherits;
    var errorObj = util.errorObj;
    var tryCatch = util.tryCatch;
    var NULL = {};

    function thrower(e) {
        setTimeout(function(){throw e;}, 0);
    }

    function castPreservingDisposable(thenable) {
        var maybePromise = tryConvertToPromise(thenable);
        if (maybePromise !== thenable &&
            typeof thenable._isDisposable === "function" &&
            typeof thenable._getDisposer === "function" &&
            thenable._isDisposable()) {
            maybePromise._setDisposable(thenable._getDisposer());
        }
        return maybePromise;
    }
    function dispose(resources, inspection) {
        var i = 0;
        var len = resources.length;
        var ret = new Promise(INTERNAL);
        function iterator() {
            if (i >= len) return ret._fulfill();
            var maybePromise = castPreservingDisposable(resources[i++]);
            if (maybePromise instanceof Promise &&
                maybePromise._isDisposable()) {
                try {
                    maybePromise = tryConvertToPromise(
                        maybePromise._getDisposer().tryDispose(inspection),
                        resources.promise);
                } catch (e) {
                    return thrower(e);
                }
                if (maybePromise instanceof Promise) {
                    return maybePromise._then(iterator, thrower,
                                              null, null, null);
                }
            }
            iterator();
        }
        iterator();
        return ret;
    }

    function Disposer(data, promise, context) {
        this._data = data;
        this._promise = promise;
        this._context = context;
    }

    Disposer.prototype.data = function () {
        return this._data;
    };

    Disposer.prototype.promise = function () {
        return this._promise;
    };

    Disposer.prototype.resource = function () {
        if (this.promise().isFulfilled()) {
            return this.promise().value();
        }
        return NULL;
    };

    Disposer.prototype.tryDispose = function(inspection) {
        var resource = this.resource();
        var context = this._context;
        if (context !== undefined) context._pushContext();
        var ret = resource !== NULL
            ? this.doDispose(resource, inspection) : null;
        if (context !== undefined) context._popContext();
        this._promise._unsetDisposable();
        this._data = null;
        return ret;
    };

    Disposer.isDisposer = function (d) {
        return (d != null &&
                typeof d.resource === "function" &&
                typeof d.tryDispose === "function");
    };

    function FunctionDisposer(fn, promise, context) {
        this.constructor$(fn, promise, context);
    }
    inherits(FunctionDisposer, Disposer);

    FunctionDisposer.prototype.doDispose = function (resource, inspection) {
        var fn = this.data();
        return fn.call(resource, resource, inspection);
    };

    function maybeUnwrapDisposer(value) {
        if (Disposer.isDisposer(value)) {
            this.resources[this.index]._setDisposable(value);
            return value.promise();
        }
        return value;
    }

    function ResourceList(length) {
        this.length = length;
        this.promise = null;
        this[length-1] = null;
    }

    ResourceList.prototype._resultCancelled = function() {
        var len = this.length;
        for (var i = 0; i < len; ++i) {
            var item = this[i];
            if (item instanceof Promise) {
                item.cancel();
            }
        }
    };

    Promise.using = function () {
        var len = arguments.length;
        if (len < 2) return apiRejection(
                        "you must pass at least 2 arguments to Promise.using");
        var fn = arguments[len - 1];
        if (typeof fn !== "function") {
            return apiRejection("expecting a function but got " + util.classString(fn));
        }
        var input;
        var spreadArgs = true;
        if (len === 2 && Array.isArray(arguments[0])) {
            input = arguments[0];
            len = input.length;
            spreadArgs = false;
        } else {
            input = arguments;
            len--;
        }
        var resources = new ResourceList(len);
        for (var i = 0; i < len; ++i) {
            var resource = input[i];
            if (Disposer.isDisposer(resource)) {
                var disposer = resource;
                resource = resource.promise();
                resource._setDisposable(disposer);
            } else {
                var maybePromise = tryConvertToPromise(resource);
                if (maybePromise instanceof Promise) {
                    resource =
                        maybePromise._then(maybeUnwrapDisposer, null, null, {
                            resources: resources,
                            index: i
                    }, undefined);
                }
            }
            resources[i] = resource;
        }

        var reflectedResources = new Array(resources.length);
        for (var i = 0; i < reflectedResources.length; ++i) {
            reflectedResources[i] = Promise.resolve(resources[i]).reflect();
        }

        var resultPromise = Promise.all(reflectedResources)
            .then(function(inspections) {
                for (var i = 0; i < inspections.length; ++i) {
                    var inspection = inspections[i];
                    if (inspection.isRejected()) {
                        errorObj.e = inspection.error();
                        return errorObj;
                    } else if (!inspection.isFulfilled()) {
                        resultPromise.cancel();
                        return;
                    }
                    inspections[i] = inspection.value();
                }
                promise._pushContext();

                fn = tryCatch(fn);
                var ret = spreadArgs
                    ? fn.apply(undefined, inspections) : fn(inspections);
                var promiseCreated = promise._popContext();
                debug.checkForgottenReturns(
                    ret, promiseCreated, "Promise.using", promise);
                return ret;
            });

        var promise = resultPromise.lastly(function() {
            var inspection = new Promise.PromiseInspection(resultPromise);
            return dispose(resources, inspection);
        });
        resources.promise = promise;
        promise._setOnCancel(resources);
        return promise;
    };

    Promise.prototype._setDisposable = function (disposer) {
        this._bitField = this._bitField | 131072;
        this._disposer = disposer;
    };

    Promise.prototype._isDisposable = function () {
        return (this._bitField & 131072) > 0;
    };

    Promise.prototype._getDisposer = function () {
        return this._disposer;
    };

    Promise.prototype._unsetDisposable = function () {
        this._bitField = this._bitField & (~131072);
        this._disposer = undefined;
    };

    Promise.prototype.disposer = function (fn) {
        if (typeof fn === "function") {
            return new FunctionDisposer(fn, this, createContext());
        }
        throw new TypeError();
    };

};

},{"./errors":18,"./util":42}],42:[function(require,module,exports){
"use strict";
var es5 = require("./es5");
var canEvaluate = typeof navigator == "undefined";

var errorObj = {e: {}};
var tryCatchTarget;
var globalObject = typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window :
    typeof global !== "undefined" ? global :
    this !== undefined ? this : null;

function tryCatcher() {
    try {
        var target = tryCatchTarget;
        tryCatchTarget = null;
        return target.apply(this, arguments);
    } catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}

var inherits = function(Child, Parent) {
    var hasProp = {}.hasOwnProperty;

    function T() {
        this.constructor = Child;
        this.constructor$ = Parent;
        for (var propertyName in Parent.prototype) {
            if (hasProp.call(Parent.prototype, propertyName) &&
                propertyName.charAt(propertyName.length-1) !== "$"
           ) {
                this[propertyName + "$"] = Parent.prototype[propertyName];
            }
        }
    }
    T.prototype = Parent.prototype;
    Child.prototype = new T();
    return Child.prototype;
};


function isPrimitive(val) {
    return val == null || val === true || val === false ||
        typeof val === "string" || typeof val === "number";

}

function isObject(value) {
    return typeof value === "function" ||
           typeof value === "object" && value !== null;
}

function maybeWrapAsError(maybeError) {
    if (!isPrimitive(maybeError)) return maybeError;

    return new Error(safeToString(maybeError));
}

function withAppended(target, appendee) {
    var len = target.length;
    var ret = new Array(len + 1);
    var i;
    for (i = 0; i < len; ++i) {
        ret[i] = target[i];
    }
    ret[i] = appendee;
    return ret;
}

function getDataPropertyOrDefault(obj, key, defaultValue) {
    if (es5.isES5) {
        var desc = Object.getOwnPropertyDescriptor(obj, key);

        if (desc != null) {
            return desc.get == null && desc.set == null
                    ? desc.value
                    : defaultValue;
        }
    } else {
        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
    }
}

function notEnumerableProp(obj, name, value) {
    if (isPrimitive(obj)) return obj;
    var descriptor = {
        value: value,
        configurable: true,
        enumerable: false,
        writable: true
    };
    es5.defineProperty(obj, name, descriptor);
    return obj;
}

function thrower(r) {
    throw r;
}

var inheritedDataKeys = (function() {
    var excludedPrototypes = [
        Array.prototype,
        Object.prototype,
        Function.prototype
    ];

    var isExcludedProto = function(val) {
        for (var i = 0; i < excludedPrototypes.length; ++i) {
            if (excludedPrototypes[i] === val) {
                return true;
            }
        }
        return false;
    };

    if (es5.isES5) {
        var getKeys = Object.getOwnPropertyNames;
        return function(obj) {
            var ret = [];
            var visitedKeys = Object.create(null);
            while (obj != null && !isExcludedProto(obj)) {
                var keys;
                try {
                    keys = getKeys(obj);
                } catch (e) {
                    return ret;
                }
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (visitedKeys[key]) continue;
                    visitedKeys[key] = true;
                    var desc = Object.getOwnPropertyDescriptor(obj, key);
                    if (desc != null && desc.get == null && desc.set == null) {
                        ret.push(key);
                    }
                }
                obj = es5.getPrototypeOf(obj);
            }
            return ret;
        };
    } else {
        var hasProp = {}.hasOwnProperty;
        return function(obj) {
            if (isExcludedProto(obj)) return [];
            var ret = [];

            /*jshint forin:false */
            enumeration: for (var key in obj) {
                if (hasProp.call(obj, key)) {
                    ret.push(key);
                } else {
                    for (var i = 0; i < excludedPrototypes.length; ++i) {
                        if (hasProp.call(excludedPrototypes[i], key)) {
                            continue enumeration;
                        }
                    }
                    ret.push(key);
                }
            }
            return ret;
        };
    }

})();

var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
function isClass(fn) {
    try {
        if (typeof fn === "function") {
            var keys = es5.names(fn.prototype);

            var hasMethods = es5.isES5 && keys.length > 1;
            var hasMethodsOtherThanConstructor = keys.length > 0 &&
                !(keys.length === 1 && keys[0] === "constructor");
            var hasThisAssignmentAndStaticMethods =
                thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

            if (hasMethods || hasMethodsOtherThanConstructor ||
                hasThisAssignmentAndStaticMethods) {
                return true;
            }
        }
        return false;
    } catch (e) {
        return false;
    }
}

function toFastProperties(obj) {
    /*jshint -W027,-W055,-W031*/
    function FakeConstructor() {}
    FakeConstructor.prototype = obj;
    var receiver = new FakeConstructor();
    function ic() {
        return typeof receiver.foo;
    }
    ic();
    ic();
    return obj;
    eval(obj);
}

var rident = /^[a-z$_][a-z$_0-9]*$/i;
function isIdentifier(str) {
    return rident.test(str);
}

function filledRange(count, prefix, suffix) {
    var ret = new Array(count);
    for(var i = 0; i < count; ++i) {
        ret[i] = prefix + i + suffix;
    }
    return ret;
}

function safeToString(obj) {
    try {
        return obj + "";
    } catch (e) {
        return "[no string representation]";
    }
}

function isError(obj) {
    return obj instanceof Error ||
        (obj !== null &&
           typeof obj === "object" &&
           typeof obj.message === "string" &&
           typeof obj.name === "string");
}

function markAsOriginatingFromRejection(e) {
    try {
        notEnumerableProp(e, "isOperational", true);
    }
    catch(ignore) {}
}

function originatesFromRejection(e) {
    if (e == null) return false;
    return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
        e["isOperational"] === true);
}

function canAttachTrace(obj) {
    return isError(obj) && es5.propertyIsWritable(obj, "stack");
}

var ensureErrorObject = (function() {
    if (!("stack" in new Error())) {
        return function(value) {
            if (canAttachTrace(value)) return value;
            try {throw new Error(safeToString(value));}
            catch(err) {return err;}
        };
    } else {
        return function(value) {
            if (canAttachTrace(value)) return value;
            return new Error(safeToString(value));
        };
    }
})();

function classString(obj) {
    return {}.toString.call(obj);
}

function copyDescriptors(from, to, filter) {
    var keys = es5.names(from);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (filter(key)) {
            try {
                es5.defineProperty(to, key, es5.getDescriptor(from, key));
            } catch (ignore) {}
        }
    }
}

var asArray = function(v) {
    if (es5.isArray(v)) {
        return v;
    }
    return null;
};

if (typeof Symbol !== "undefined" && Symbol.iterator) {
    var ArrayFrom = typeof Array.from === "function" ? function(v) {
        return Array.from(v);
    } : function(v) {
        var ret = [];
        var it = v[Symbol.iterator]();
        var itResult;
        while (!((itResult = it.next()).done)) {
            ret.push(itResult.value);
        }
        return ret;
    };

    asArray = function(v) {
        if (es5.isArray(v)) {
            return v;
        } else if (v != null && typeof v[Symbol.iterator] === "function") {
            return ArrayFrom(v);
        }
        return null;
    };
}

var isNode = typeof process !== "undefined" &&
        classString(process).toLowerCase() === "[object process]";

var hasEnvVariables = typeof process !== "undefined" &&
    typeof process.env !== "undefined";

function env(key) {
    return hasEnvVariables ? process.env[key] : undefined;
}

function getNativePromise() {
    if (typeof Promise === "function") {
        try {
            var promise = new Promise(function(){});
            if ({}.toString.call(promise) === "[object Promise]") {
                return Promise;
            }
        } catch (e) {}
    }
}

function domainBind(self, cb) {
    return self.bind(cb);
}

var ret = {
    isClass: isClass,
    isIdentifier: isIdentifier,
    inheritedDataKeys: inheritedDataKeys,
    getDataPropertyOrDefault: getDataPropertyOrDefault,
    thrower: thrower,
    isArray: es5.isArray,
    asArray: asArray,
    notEnumerableProp: notEnumerableProp,
    isPrimitive: isPrimitive,
    isObject: isObject,
    isError: isError,
    canEvaluate: canEvaluate,
    errorObj: errorObj,
    tryCatch: tryCatch,
    inherits: inherits,
    withAppended: withAppended,
    maybeWrapAsError: maybeWrapAsError,
    toFastProperties: toFastProperties,
    filledRange: filledRange,
    toString: safeToString,
    canAttachTrace: canAttachTrace,
    ensureErrorObject: ensureErrorObject,
    originatesFromRejection: originatesFromRejection,
    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
    classString: classString,
    copyDescriptors: copyDescriptors,
    hasDevTools: typeof chrome !== "undefined" && chrome &&
                 typeof chrome.loadTimes === "function",
    isNode: isNode,
    hasEnvVariables: hasEnvVariables,
    env: env,
    global: globalObject,
    getNativePromise: getNativePromise,
    domainBind: domainBind
};
ret.isRecentNode = ret.isNode && (function() {
    var version = process.versions.node.split(".").map(Number);
    return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
})();

if (ret.isNode) ret.toFastProperties(process);

try {throw new Error(); } catch (e) {ret.lastLineError = e;}
module.exports = ret;

},{"./es5":19}],43:[function(require,module,exports){
var concatMap = require('concat-map');
var balanced = require('balanced-match');

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function identity(e) {
  return e;
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m || /\$$/.test(m.pre)) return [str];

  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m.body.indexOf(',') >= 0;
  if (!isSequence && !isOptions) {
    // {a},b}
    if (m.post.match(/,.*\}/)) {
      str = m.pre + '{' + m.body + escClose + m.post;
      return expand(str);
    }
    return [str];
  }

  var n;
  if (isSequence) {
    n = m.body.split(/\.\./);
  } else {
    n = parseCommaParts(m.body);
    if (n.length === 1) {
      // x{{a,b}}y ==> x{a}y x{b}y
      n = expand(n[0], false).map(embrace);
      if (n.length === 1) {
        var post = m.post.length
          ? expand(m.post, false)
          : [''];
        return post.map(function(p) {
          return m.pre + n[0] + p;
        });
      }
    }
  }

  // at this point, n is the parts, and we know it's not a comma set
  // with a single entry.

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  var N;

  if (isSequence) {
    var x = numeric(n[0]);
    var y = numeric(n[1]);
    var width = Math.max(n[0].length, n[1].length)
    var incr = n.length == 3
      ? Math.abs(numeric(n[2]))
      : 1;
    var test = lte;
    var reverse = y < x;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n.some(isPadded);

    N = [];

    for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) {
        c = String.fromCharCode(i);
        if (c === '\\')
          c = '';
      } else {
        c = String(i);
        if (pad) {
          var need = width - c.length;
          if (need > 0) {
            var z = new Array(need + 1).join('0');
            if (i < 0)
              c = '-' + z + c.slice(1);
            else
              c = z + c;
          }
        }
      }
      N.push(c);
    }
  } else {
    N = concatMap(n, function(el) { return expand(el, false) });
  }

  for (var j = 0; j < N.length; j++) {
    for (var k = 0; k < post.length; k++) {
      var expansion = pre + N[j] + post[k];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }

  return expansions;
}


},{"balanced-match":4,"concat-map":64}],44:[function(require,module,exports){
'use strict';

const stringify = require('./lib/stringify');
const compile = require('./lib/compile');
const expand = require('./lib/expand');
const parse = require('./lib/parse');

/**
 * Expand the given pattern or create a regex-compatible string.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']
 * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {String}
 * @api public
 */

const braces = (input, options = {}) => {
  let output = [];

  if (Array.isArray(input)) {
    for (let pattern of input) {
      let result = braces.create(pattern, options);
      if (Array.isArray(result)) {
        output.push(...result);
      } else {
        output.push(result);
      }
    }
  } else {
    output = [].concat(braces.create(input, options));
  }

  if (options && options.expand === true && options.nodupes === true) {
    output = [...new Set(output)];
  }
  return output;
};

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * // braces.parse(pattern, [, options]);
 * const ast = braces.parse('a/{b,c}/d');
 * console.log(ast);
 * ```
 * @param {String} pattern Brace pattern to parse
 * @param {Object} options
 * @return {Object} Returns an AST
 * @api public
 */

braces.parse = (input, options = {}) => parse(input, options);

/**
 * Creates a braces string from an AST, or an AST node.
 *
 * ```js
 * const braces = require('braces');
 * let ast = braces.parse('foo/{a,b}/bar');
 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.stringify = (input, options = {}) => {
  if (typeof input === 'string') {
    return stringify(braces.parse(input, options), options);
  }
  return stringify(input, options);
};

/**
 * Compiles a brace pattern into a regex-compatible, optimized string.
 * This method is called by the main [braces](#braces) function by default.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.compile('a/{b,c}/d'));
 * //=> ['a/(b|c)/d']
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.compile = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options);
  }
  return compile(input, options);
};

/**
 * Expands a brace pattern into an array. This method is called by the
 * main [braces](#braces) function when `options.expand` is true. Before
 * using this method it's recommended that you read the [performance notes](#performance))
 * and advantages of using [.compile](#compile) instead.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/b/d', 'a/c/d'];
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.expand = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options);
  }

  let result = expand(input, options);

  // filter out empty strings if specified
  if (options.noempty === true) {
    result = result.filter(Boolean);
  }

  // filter out duplicates if specified
  if (options.nodupes === true) {
    result = [...new Set(result)];
  }

  return result;
};

/**
 * Processes a brace pattern and returns either an expanded array
 * (if `options.expand` is true), a highly optimized regex-compatible string.
 * This method is called by the main [braces](#braces) function.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.create = (input, options = {}) => {
  if (input === '' || input.length < 3) {
    return [input];
  }

 return options.expand !== true
    ? braces.compile(input, options)
    : braces.expand(input, options);
};

/**
 * Expose "braces"
 */

module.exports = braces;

},{"./lib/compile":45,"./lib/expand":47,"./lib/parse":48,"./lib/stringify":49}],45:[function(require,module,exports){
'use strict';

const fill = require('fill-range');
const utils = require('./utils');

const compile = (ast, options = {}) => {
  let walk = (node, parent = {}) => {
    let invalidBlock = utils.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let invalid = invalidBlock === true || invalidNode === true;
    let prefix = options.escapeInvalid === true ? '\\' : '';
    let output = '';

    if (node.isOpen === true) {
      return prefix + node.value;
    }
    if (node.isClose === true) {
      return prefix + node.value;
    }

    if (node.type === 'open') {
      return invalid ? (prefix + node.value) : '(';
    }

    if (node.type === 'close') {
      return invalid ? (prefix + node.value) : ')';
    }

    if (node.type === 'comma') {
      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');
    }

    if (node.value) {
      return node.value;
    }

    if (node.nodes && node.ranges > 0) {
      let args = utils.reduce(node.nodes);
      let range = fill(...args, { ...options, wrap: false, toRegex: true });

      if (range.length !== 0) {
        return args.length > 1 && range.length > 1 ? `(${range})` : range;
      }
    }

    if (node.nodes) {
      for (let child of node.nodes) {
        output += walk(child, node);
      }
    }
    return output;
  };

  return walk(ast);
};

module.exports = compile;

},{"./utils":50,"fill-range":65}],46:[function(require,module,exports){
'use strict';

module.exports = {
  MAX_LENGTH: 1024 * 64,

  // Digits
  CHAR_0: '0', /* 0 */
  CHAR_9: '9', /* 9 */

  // Alphabet chars.
  CHAR_UPPERCASE_A: 'A', /* A */
  CHAR_LOWERCASE_A: 'a', /* a */
  CHAR_UPPERCASE_Z: 'Z', /* Z */
  CHAR_LOWERCASE_Z: 'z', /* z */

  CHAR_LEFT_PARENTHESES: '(', /* ( */
  CHAR_RIGHT_PARENTHESES: ')', /* ) */

  CHAR_ASTERISK: '*', /* * */

  // Non-alphabetic chars.
  CHAR_AMPERSAND: '&', /* & */
  CHAR_AT: '@', /* @ */
  CHAR_BACKSLASH: '\\', /* \ */
  CHAR_BACKTICK: '`', /* ` */
  CHAR_CARRIAGE_RETURN: '\r', /* \r */
  CHAR_CIRCUMFLEX_ACCENT: '^', /* ^ */
  CHAR_COLON: ':', /* : */
  CHAR_COMMA: ',', /* , */
  CHAR_DOLLAR: '$', /* . */
  CHAR_DOT: '.', /* . */
  CHAR_DOUBLE_QUOTE: '"', /* " */
  CHAR_EQUAL: '=', /* = */
  CHAR_EXCLAMATION_MARK: '!', /* ! */
  CHAR_FORM_FEED: '\f', /* \f */
  CHAR_FORWARD_SLASH: '/', /* / */
  CHAR_HASH: '#', /* # */
  CHAR_HYPHEN_MINUS: '-', /* - */
  CHAR_LEFT_ANGLE_BRACKET: '<', /* < */
  CHAR_LEFT_CURLY_BRACE: '{', /* { */
  CHAR_LEFT_SQUARE_BRACKET: '[', /* [ */
  CHAR_LINE_FEED: '\n', /* \n */
  CHAR_NO_BREAK_SPACE: '\u00A0', /* \u00A0 */
  CHAR_PERCENT: '%', /* % */
  CHAR_PLUS: '+', /* + */
  CHAR_QUESTION_MARK: '?', /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: '>', /* > */
  CHAR_RIGHT_CURLY_BRACE: '}', /* } */
  CHAR_RIGHT_SQUARE_BRACKET: ']', /* ] */
  CHAR_SEMICOLON: ';', /* ; */
  CHAR_SINGLE_QUOTE: '\'', /* ' */
  CHAR_SPACE: ' ', /*   */
  CHAR_TAB: '\t', /* \t */
  CHAR_UNDERSCORE: '_', /* _ */
  CHAR_VERTICAL_LINE: '|', /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\uFEFF' /* \uFEFF */
};

},{}],47:[function(require,module,exports){
'use strict';

const fill = require('fill-range');
const stringify = require('./stringify');
const utils = require('./utils');

const append = (queue = '', stash = '', enclose = false) => {
  let result = [];

  queue = [].concat(queue);
  stash = [].concat(stash);

  if (!stash.length) return queue;
  if (!queue.length) {
    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;
  }

  for (let item of queue) {
    if (Array.isArray(item)) {
      for (let value of item) {
        result.push(append(value, stash, enclose));
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;
        result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));
      }
    }
  }
  return utils.flatten(result);
};

const expand = (ast, options = {}) => {
  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;

  let walk = (node, parent = {}) => {
    node.queue = [];

    let p = parent;
    let q = parent.queue;

    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {
      p = p.parent;
      q = p.queue;
    }

    if (node.invalid || node.dollar) {
      q.push(append(q.pop(), stringify(node, options)));
      return;
    }

    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {
      q.push(append(q.pop(), ['{}']));
      return;
    }

    if (node.nodes && node.ranges > 0) {
      let args = utils.reduce(node.nodes);

      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');
      }

      let range = fill(...args, options);
      if (range.length === 0) {
        range = stringify(node, options);
      }

      q.push(append(q.pop(), range));
      node.nodes = [];
      return;
    }

    let enclose = utils.encloseBrace(node);
    let queue = node.queue;
    let block = node;

    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {
      block = block.parent;
      queue = block.queue;
    }

    for (let i = 0; i < node.nodes.length; i++) {
      let child = node.nodes[i];

      if (child.type === 'comma' && node.type === 'brace') {
        if (i === 1) queue.push('');
        queue.push('');
        continue;
      }

      if (child.type === 'close') {
        q.push(append(q.pop(), queue, enclose));
        continue;
      }

      if (child.value && child.type !== 'open') {
        queue.push(append(queue.pop(), child.value));
        continue;
      }

      if (child.nodes) {
        walk(child, node);
      }
    }

    return queue;
  };

  return utils.flatten(walk(ast));
};

module.exports = expand;

},{"./stringify":49,"./utils":50,"fill-range":65}],48:[function(require,module,exports){
'use strict';

const stringify = require('./stringify');

/**
 * Constants
 */

const {
  MAX_LENGTH,
  CHAR_BACKSLASH, /* \ */
  CHAR_BACKTICK, /* ` */
  CHAR_COMMA, /* , */
  CHAR_DOT, /* . */
  CHAR_LEFT_PARENTHESES, /* ( */
  CHAR_RIGHT_PARENTHESES, /* ) */
  CHAR_LEFT_CURLY_BRACE, /* { */
  CHAR_RIGHT_CURLY_BRACE, /* } */
  CHAR_LEFT_SQUARE_BRACKET, /* [ */
  CHAR_RIGHT_SQUARE_BRACKET, /* ] */
  CHAR_DOUBLE_QUOTE, /* " */
  CHAR_SINGLE_QUOTE, /* ' */
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE
} = require('./constants');

/**
 * parse
 */

const parse = (input, options = {}) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string');
  }

  let opts = options || {};
  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  if (input.length > max) {
    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
  }

  let ast = { type: 'root', input, nodes: [] };
  let stack = [ast];
  let block = ast;
  let prev = ast;
  let brackets = 0;
  let length = input.length;
  let index = 0;
  let depth = 0;
  let value;
  let memo = {};

  /**
   * Helpers
   */

  const advance = () => input[index++];
  const push = node => {
    if (node.type === 'text' && prev.type === 'dot') {
      prev.type = 'text';
    }

    if (prev && prev.type === 'text' && node.type === 'text') {
      prev.value += node.value;
      return;
    }

    block.nodes.push(node);
    node.parent = block;
    node.prev = prev;
    prev = node;
    return node;
  };

  push({ type: 'bos' });

  while (index < length) {
    block = stack[stack.length - 1];
    value = advance();

    /**
     * Invalid chars
     */

    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
      continue;
    }

    /**
     * Escaped chars
     */

    if (value === CHAR_BACKSLASH) {
      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });
      continue;
    }

    /**
     * Right square bracket (literal): ']'
     */

    if (value === CHAR_RIGHT_SQUARE_BRACKET) {
      push({ type: 'text', value: '\\' + value });
      continue;
    }

    /**
     * Left square bracket: '['
     */

    if (value === CHAR_LEFT_SQUARE_BRACKET) {
      brackets++;

      let closed = true;
      let next;

      while (index < length && (next = advance())) {
        value += next;

        if (next === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          continue;
        }

        if (next === CHAR_BACKSLASH) {
          value += advance();
          continue;
        }

        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          brackets--;

          if (brackets === 0) {
            break;
          }
        }
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Parentheses
     */

    if (value === CHAR_LEFT_PARENTHESES) {
      block = push({ type: 'paren', nodes: [] });
      stack.push(block);
      push({ type: 'text', value });
      continue;
    }

    if (value === CHAR_RIGHT_PARENTHESES) {
      if (block.type !== 'paren') {
        push({ type: 'text', value });
        continue;
      }
      block = stack.pop();
      push({ type: 'text', value });
      block = stack[stack.length - 1];
      continue;
    }

    /**
     * Quotes: '|"|`
     */

    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
      let open = value;
      let next;

      if (options.keepQuotes !== true) {
        value = '';
      }

      while (index < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value += next + advance();
          continue;
        }

        if (next === open) {
          if (options.keepQuotes === true) value += next;
          break;
        }

        value += next;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Left curly brace: '{'
     */

    if (value === CHAR_LEFT_CURLY_BRACE) {
      depth++;

      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;
      let brace = {
        type: 'brace',
        open: true,
        close: false,
        dollar,
        depth,
        commas: 0,
        ranges: 0,
        nodes: []
      };

      block = push(brace);
      stack.push(block);
      push({ type: 'open', value });
      continue;
    }

    /**
     * Right curly brace: '}'
     */

    if (value === CHAR_RIGHT_CURLY_BRACE) {
      if (block.type !== 'brace') {
        push({ type: 'text', value });
        continue;
      }

      let type = 'close';
      block = stack.pop();
      block.close = true;

      push({ type, value });
      depth--;

      block = stack[stack.length - 1];
      continue;
    }

    /**
     * Comma: ','
     */

    if (value === CHAR_COMMA && depth > 0) {
      if (block.ranges > 0) {
        block.ranges = 0;
        let open = block.nodes.shift();
        block.nodes = [open, { type: 'text', value: stringify(block) }];
      }

      push({ type: 'comma', value });
      block.commas++;
      continue;
    }

    /**
     * Dot: '.'
     */

    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
      let siblings = block.nodes;

      if (depth === 0 || siblings.length === 0) {
        push({ type: 'text', value });
        continue;
      }

      if (prev.type === 'dot') {
        block.range = [];
        prev.value += value;
        prev.type = 'range';

        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true;
          block.ranges = 0;
          prev.type = 'text';
          continue;
        }

        block.ranges++;
        block.args = [];
        continue;
      }

      if (prev.type === 'range') {
        siblings.pop();

        let before = siblings[siblings.length - 1];
        before.value += prev.value + value;
        prev = before;
        block.ranges--;
        continue;
      }

      push({ type: 'dot', value });
      continue;
    }

    /**
     * Text
     */

    push({ type: 'text', value });
  }

  // Mark imbalanced braces and brackets as invalid
  do {
    block = stack.pop();

    if (block.type !== 'root') {
      block.nodes.forEach(node => {
        if (!node.nodes) {
          if (node.type === 'open') node.isOpen = true;
          if (node.type === 'close') node.isClose = true;
          if (!node.nodes) node.type = 'text';
          node.invalid = true;
        }
      });

      // get the location of the block on parent.nodes (block's siblings)
      let parent = stack[stack.length - 1];
      let index = parent.nodes.indexOf(block);
      // replace the (invalid) block with it's nodes
      parent.nodes.splice(index, 1, ...block.nodes);
    }
  } while (stack.length > 0);

  push({ type: 'eos' });
  return ast;
};

module.exports = parse;

},{"./constants":46,"./stringify":49}],49:[function(require,module,exports){
'use strict';

const utils = require('./utils');

module.exports = (ast, options = {}) => {
  let stringify = (node, parent = {}) => {
    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let output = '';

    if (node.value) {
      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
        return '\\' + node.value;
      }
      return node.value;
    }

    if (node.value) {
      return node.value;
    }

    if (node.nodes) {
      for (let child of node.nodes) {
        output += stringify(child);
      }
    }
    return output;
  };

  return stringify(ast);
};


},{"./utils":50}],50:[function(require,module,exports){
'use strict';

exports.isInteger = num => {
  if (typeof num === 'number') {
    return Number.isInteger(num);
  }
  if (typeof num === 'string' && num.trim() !== '') {
    return Number.isInteger(Number(num));
  }
  return false;
};

/**
 * Find a node of the given type
 */

exports.find = (node, type) => node.nodes.find(node => node.type === type);

/**
 * Find a node of the given type
 */

exports.exceedsLimit = (min, max, step = 1, limit) => {
  if (limit === false) return false;
  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
  return ((Number(max) - Number(min)) / Number(step)) >= limit;
};

/**
 * Escape the given node with '\\' before node.value
 */

exports.escapeNode = (block, n = 0, type) => {
  let node = block.nodes[n];
  if (!node) return;

  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {
    if (node.escaped !== true) {
      node.value = '\\' + node.value;
      node.escaped = true;
    }
  }
};

/**
 * Returns true if the given brace node should be enclosed in literal braces
 */

exports.encloseBrace = node => {
  if (node.type !== 'brace') return false;
  if ((node.commas >> 0 + node.ranges >> 0) === 0) {
    node.invalid = true;
    return true;
  }
  return false;
};

/**
 * Returns true if a brace node is invalid.
 */

exports.isInvalidBrace = block => {
  if (block.type !== 'brace') return false;
  if (block.invalid === true || block.dollar) return true;
  if ((block.commas >> 0 + block.ranges >> 0) === 0) {
    block.invalid = true;
    return true;
  }
  if (block.open !== true || block.close !== true) {
    block.invalid = true;
    return true;
  }
  return false;
};

/**
 * Returns true if a node is an open or close node
 */

exports.isOpenOrClose = node => {
  if (node.type === 'open' || node.type === 'close') {
    return true;
  }
  return node.open === true || node.close === true;
};

/**
 * Reduce an array of text nodes.
 */

exports.reduce = nodes => nodes.reduce((acc, node) => {
  if (node.type === 'text') acc.push(node.value);
  if (node.type === 'range') node.type = 'text';
  return acc;
}, []);

/**
 * Flatten an array
 */

exports.flatten = (...args) => {
  const result = [];
  const flat = arr => {
    for (let i = 0; i < arr.length; i++) {
      let ele = arr[i];
      Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
    }
    return result;
  };
  flat(args);
  return result;
};

},{}],51:[function(require,module,exports){

},{}],52:[function(require,module,exports){
'use strict';
const { EventEmitter } = require('events');
const fs = require('fs');
const sysPath = require('path');
const readdirp = require('readdirp');
const anymatch = require('anymatch').default;
const globParent = require('glob-parent');
const isGlob = require('is-glob');
const braces = require('braces');
const normalizePath = require('normalize-path');
const { promisify } = require('util');

const NodeFsHandler = require('./lib/nodefs-handler');
const FsEventsHandler = require('./lib/fsevents-handler');

const stat = promisify(fs.stat);
const readdir = promisify(fs.readdir);

/**
 * @typedef {String} Path
 * @typedef {'all'|'add'|'addDir'|'change'|'unlink'|'unlinkDir'|'raw'|'error'|'ready'} EventName
 * @typedef {'readdir'|'watch'|'add'|'remove'|'change'} ThrottleType
 */

/**
 *
 * @typedef {Object} WatchHelpers
 * @property {Boolean} followSymlinks
 * @property {'stat'|'lstat'} statMethod
 * @property {Path} path
 * @property {Path} watchPath
 * @property {Function} entryPath
 * @property {Boolean} hasGlob
 * @property {Object} globFilter
 * @property {Function} filterPath
 * @property {Function} filterDir
 */

// Optimize RAM usage.
const BACK_SLASH_RE = /\\/g;
const SLASH = '/';
const DOUBLE_SLASH = /\/\//;
const SLASH_OR_BACK_SLASH = /[\/\\]/;
const BRACE_START = '{';
const BANG = '!';
const ONE_DOT = '.';
const TWO_DOTS = '..';
const GLOBSTAR = '**';
const SLASH_GLOBSTAR = '/**';
const DOT_RE = /\..*\.(sw[px])$|\~$|\.subl.*\.tmp/;
const REPLACER_RE = /^\.[\/\\]/;
const ANYMATCH_OPTS = {dot: true};
const STRING_TYPE = 'string';
const isWindows = process.platform === 'win32';
const EMPTY_FN = () => {};

const EV_ALL = 'all';
const EV_READY = 'ready';
const EV_ADD = 'add';
const EV_CHANGE = 'change';
const EV_UNLINK = 'unlink';
const EV_ADD_DIR = 'addDir';
const EV_UNLINK_DIR = 'unlinkDir';
const EV_RAW = 'raw';
const EV_ERROR = 'error';

const arrify = (value = []) => Array.isArray(value) ? value : [value];
const flatten = (list, result = []) => {
  list.forEach(item => {
    if (Array.isArray(item)) {
      flatten(item, result);
    } else {
      result.push(item);
    }
  });
  return result;
};

const unifyPaths = (paths_) => {
  /**
   * @type {Array<String>}
   */
  let paths = flatten(arrify(paths_));
  if (!paths.every(p => typeof p === STRING_TYPE)) {
    throw new TypeError('Non-string provided as watch path: ' + paths);
  }
  paths = paths.map(normalizePathToUnix);
  return paths;
};

const toUnix = (string) => {
  let str = string.replace(BACK_SLASH_RE, SLASH);
  while (str.match(DOUBLE_SLASH)) {
    str = str.replace(DOUBLE_SLASH, SLASH);
  }
  return str;
};

// Our version of upath.normalize
// TODO: this is not equal to path-normalize module - investigate why
const normalizePathToUnix = (path) => toUnix(sysPath.normalize(toUnix(path)));

const normalizeIgnored = (cwd = '') => (path) => {
  if (typeof path !== STRING_TYPE) return path;
  return normalizePathToUnix(sysPath.isAbsolute(path) ? path : sysPath.join(cwd, path));
};

const getAbsolutePath = (path, cwd) => {
  if (sysPath.isAbsolute(path)) {
    return path;
  } else if (path[0] === BANG) {
    return BANG + sysPath.join(cwd, path.substring(1));
  } else {
    return sysPath.join(cwd, path);
  }
};

const undef = (opts, key) => opts[key] === undefined;

/**
 * Directory entry.
 * @property {Path} path
 * @property {Set<Path>} items
 */
class DirEntry {
  /**
   * @param {Path} dir
   * @param {Function} removeWatcher
   */
  constructor(dir, removeWatcher) {
    this.path = dir;
    this._removeWatcher = removeWatcher;
    /** @type {Set<Path>} */
    this.items = new Set();
  }

  add(item) {
    if (item !== ONE_DOT && item !== TWO_DOTS) this.items.add(item);
  }

  async remove(item) {
    this.items.delete(item);

    if (!this.items.size) {
      const dir = this.path;
      try {
        await readdir(dir);
      } catch (err) {
        this._removeWatcher(sysPath.dirname(dir), sysPath.basename(dir));
      }
    }
  }

  has(item) {
    return this.items.has(item);
  }

  /**
   * @returns {Array<String>}
   */
  getChildren() {
    return Array.from(this.items.values());
  }
}

class WatchHelper {
  constructor(path, watchPath, follow, fsw) {
    this.fsw = fsw;
    this.path = path = path.replace(REPLACER_RE, '');
    this.watchPath = watchPath;
    this.fullWatchPath = sysPath.resolve(watchPath);
    this.hasGlob = watchPath !== path;
    /** @type {object|boolean} */
    if (path === '') this.hasGlob = false;
    this.globSymlink = this.hasGlob && follow ? undefined : false;
    this.globFilter = this.hasGlob ? anymatch(path, undefined, ANYMATCH_OPTS) : false;
    this.dirParts = this.getDirParts(path);
    this.dirParts.forEach((parts) => {
      if (parts.length > 1) parts.pop();
    });
    this.followSymlinks = follow;
    this.statMethod = follow ? 'stat' : 'lstat';
  }

  checkGlobSymlink(entry) {
    // only need to resolve once
    // first entry should always have entry.parentDir === ''
    if (this.globSymlink === undefined) {
      this.globSymlink = entry.fullParentDir === this.fullWatchPath ?
        false : {realPath: entry.fullParentDir, linkPath: this.fullWatchPath};
    }

    if (this.globSymlink) {
      return entry.fullPath.replace(this.globSymlink.realPath, this.globSymlink.linkPath);
    }

    return entry.fullPath;
  }

  entryPath(entry) {
    return sysPath.join(this.watchPath,
      sysPath.relative(this.watchPath, this.checkGlobSymlink(entry))
    );
  }

  filterPath(entry) {
    const {stats} = entry;
    if (stats && stats.isSymbolicLink()) return this.filterDir(entry);
    const resolvedPath = this.entryPath(entry);
    const matchesGlob = this.hasGlob && typeof this.globFilter === 'function' ?
      this.globFilter(resolvedPath) : true;
    return matchesGlob &&
      this.fsw._isntIgnored(resolvedPath, stats) &&
      this.fsw._hasReadPermissions(stats);
  }

  getDirParts(path) {
    if (!this.hasGlob) return [];
    const parts = [];
    const expandedPath = path.includes(BRACE_START)
      ? braces.expand(path)
      : [path];
    expandedPath.forEach((path) => {
      parts.push(sysPath.relative(this.watchPath, path).split(SLASH_OR_BACK_SLASH));
    });
    return parts;
  }

  filterDir(entry) {
    if (this.hasGlob) {
      const entryParts = this.getDirParts(this.checkGlobSymlink(entry));
      let globstar = false;
      this.unmatchedGlob = !this.dirParts.some((parts) => {
        return parts.every((part, i) => {
          if (part === GLOBSTAR) globstar = true;
          return globstar || !entryParts[0][i] || anymatch(part, entryParts[0][i], ANYMATCH_OPTS);
        });
      });
    }
    return !this.unmatchedGlob && this.fsw._isntIgnored(this.entryPath(entry), entry.stats);
  }
}

/**
 * Watches files & directories for changes. Emitted events:
 * `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`
 *
 *     new FSWatcher()
 *       .add(directories)
 *       .on('add', path => log('File', path, 'was added'))
 */
class FSWatcher extends EventEmitter {
// Not indenting methods for history sake; for now.
constructor(_opts) {
  super();

  const opts = {};
  if (_opts) Object.assign(opts, _opts); // for frozen objects

  /** @type {Map<String, DirEntry>} */
  this._watched = new Map();
  /** @type {Map<String, Array>} */
  this._closers = new Map();
  /** @type {Set<String>} */
  this._ignoredPaths = new Set();

  /** @type {Map<ThrottleType, Map>} */
  this._throttled = new Map();

  /** @type {Map<Path, String|Boolean>} */
  this._symlinkPaths = new Map();

  this._streams = new Set();
  this.closed = false;


  // Set up default options.
  if (undef(opts, 'persistent')) opts.persistent = true;
  if (undef(opts, 'ignoreInitial')) opts.ignoreInitial = false;
  if (undef(opts, 'ignorePermissionErrors')) opts.ignorePermissionErrors = false;
  if (undef(opts, 'interval')) opts.interval = 100;
  if (undef(opts, 'binaryInterval')) opts.binaryInterval = 300;
  if (undef(opts, 'disableGlobbing')) opts.disableGlobbing = false;
  opts.enableBinaryInterval = opts.binaryInterval !== opts.interval;

  // Enable fsevents on OS X when polling isn't explicitly enabled.
  if (undef(opts, 'useFsEvents')) opts.useFsEvents = !opts.usePolling;

  // If we can't use fsevents, ensure the options reflect it's disabled.
  const canUseFsEvents = FsEventsHandler.canUse();
  if (!canUseFsEvents) opts.useFsEvents = false;

  // Use polling on Mac if not using fsevents.
  // Other platforms use non-polling fs_watch.
  if (undef(opts, 'usePolling') && !opts.useFsEvents) {
    opts.usePolling = process.platform === 'darwin';
  }

  // Global override (useful for end-developers that need to force polling for all
  // instances of chokidar, regardless of usage/dependency depth)
  const envPoll = process.env.CHOKIDAR_USEPOLLING;
  if (envPoll !== undefined) {
    const envLower = envPoll.toLowerCase();

    if (envLower === 'false' || envLower === '0') {
      opts.usePolling = false;
    } else if (envLower === 'true' || envLower === '1') {
      opts.usePolling = true;
    } else {
      opts.usePolling = !!envLower;
    }
  }
  const envInterval = process.env.CHOKIDAR_INTERVAL;
  if (envInterval) {
    opts.interval = parseInt(envInterval);
  }

  // Editor atomic write normalization enabled by default with fs.watch
  if (undef(opts, 'atomic')) opts.atomic = !opts.usePolling && !opts.useFsEvents;
  if (opts.atomic) this._pendingUnlinks = new Map();

  if (undef(opts, 'followSymlinks')) opts.followSymlinks = true;

  if (undef(opts, 'awaitWriteFinish')) opts.awaitWriteFinish = false;
  if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};
  const awf = opts.awaitWriteFinish;
  if (awf) {
    if (!awf.stabilityThreshold) awf.stabilityThreshold = 2000;
    if (!awf.pollInterval) awf.pollInterval = 100;
    this._pendingWrites = new Map();
  }
  if (opts.ignored) opts.ignored = arrify(opts.ignored);

  let readyCalls = 0;
  this._emitReady = () => {
    readyCalls++;
    if (readyCalls >= this._readyCount) {
      this._emitReady = EMPTY_FN;
      this._readyEmitted = true;
      // use process.nextTick to allow time for listener to be bound
      process.nextTick(() => this.emit(EV_READY));
    }
  };
  this._emitRaw = (...args) => this.emit(EV_RAW, ...args);
  this._readyEmitted = false;
  this.options = opts;

  // Initialize with proper watcher.
  if (opts.useFsEvents) {
    this._fsEventsHandler = new FsEventsHandler(this);
  } else {
    this._nodeFsHandler = new NodeFsHandler(this);
  }

  // You’re frozen when your heart’s not open.
  Object.freeze(opts);
}

// Public methods

/**
 * Adds paths to be watched on an existing FSWatcher instance
 * @param {Path|Array<Path>} paths_
 * @param {String=} _origAdd private; for handling non-existent paths to be watched
 * @param {Boolean=} _internal private; indicates a non-user add
 * @returns {FSWatcher} for chaining
 */
add(paths_, _origAdd, _internal) {
  const {cwd, disableGlobbing} = this.options;
  this.closed = false;
  let paths = unifyPaths(paths_);
  if (cwd) {
    paths = paths.map((path) => {
      const absPath = getAbsolutePath(path, cwd);

      // Check `path` instead of `absPath` because the cwd portion can't be a glob
      if (disableGlobbing || !isGlob(path)) {
        return absPath;
      } else {
        return normalizePath(absPath);
      }
    });
  }

  // set aside negated glob strings
  paths = paths.filter((path) => {
    if (path[0] === BANG) {
      this._ignoredPaths.add(path.substring(1));
      return false;
    } else {
      // if a path is being added that was previously ignored, stop ignoring it
      this._ignoredPaths.delete(path);
      this._ignoredPaths.delete(path + SLASH_GLOBSTAR);

      // reset the cached userIgnored anymatch fn
      // to make ignoredPaths changes effective
      this._userIgnored = undefined;

      return true;
    }
  });

  if (this.options.useFsEvents && this._fsEventsHandler) {
    if (!this._readyCount) this._readyCount = paths.length;
    if (this.options.persistent) this._readyCount *= 2;
    paths.forEach((path) => this._fsEventsHandler._addToFsEvents(path));
  } else {
    if (!this._readyCount) this._readyCount = 0;
    this._readyCount += paths.length;
    Promise.all(
      paths.map(async path => {
        const res = await this._nodeFsHandler._addToNodeFs(path, !_internal, 0, 0, _origAdd);
        if (res) this._emitReady();
        return res;
      })
    ).then(results => {
      if (this.closed) return;
      results.filter(item => item).forEach(item => {
        this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));
      });
    });
  }

  return this;
}

/**
 * Close watchers or start ignoring events from specified paths.
 * @param {Path|Array<Path>} paths_ - string or array of strings, file/directory paths and/or globs
 * @returns {FSWatcher} for chaining
*/
unwatch(paths_) {
  if (this.closed) return this;
  let paths = unifyPaths(paths_);
  const cwd = this.options.cwd;

  paths.forEach((path) => {
    // convert to absolute path unless relative path already matches
    if (!sysPath.isAbsolute(path) && !this._closers.has(path)) {
      if (cwd) path = sysPath.join(cwd, path);
      path = sysPath.resolve(path);
    }

    this._closePath(path);

    this._ignoredPaths.add(path);
    if (this._watched.has(path)) {
      this._ignoredPaths.add(path + SLASH_GLOBSTAR);
    }

    // reset the cached userIgnored anymatch fn
    // to make ignoredPaths changes effective
    this._userIgnored = undefined;
  });

  return this;
}

/**
 * Close watchers and remove all listeners from watched paths.
 * @returns {FSWatcher} for chaining.
*/
close() {
  if (this.closed) return this;
  this.closed = true;

  // Memory management.
  this.removeAllListeners();
  this._closers.forEach(closerList => closerList.forEach(closer => closer()));
  this._streams.forEach(stream => stream.destroy());
  this._userIgnored = undefined;
  this._readyCount = 0;
  this._readyEmitted = false;
  ['closers', 'watched', 'streams', 'symlinkPaths', 'throttled'].forEach(key => {
    this['_' + key].clear();
  });
  return this;
}

/**
 * Expose list of watched paths
 * @returns {Object} for chaining
*/
getWatched() {
  const watchList = {};
  this._watched.forEach((entry, dir) => {
    const key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;
    watchList[key || ONE_DOT] = entry.getChildren().sort();
  });
  return watchList;
}

emitWithAll(event, args) {
  this.emit(...args);
  if (event !== EV_ERROR) this.emit(EV_ALL, ...args);
}

// Common helpers
// --------------

/**
 * Normalize and emit events.
 * Calling _emit DOES NOT MEAN emit() would be called!
 * @param {EventName} event Type of event
 * @param {Path} path File or directory path
 * @param {*=} val1 arguments to be passed with event
 * @param {*=} val2
 * @param {*=} val3
 * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */
async _emit(event, path, val1, val2, val3) {
  if (this.closed) return;

  const opts = this.options;
  if (isWindows) path = sysPath.normalize(path);
  if (opts.cwd) path = sysPath.relative(opts.cwd, path);
  /** @type Array<any> */
  const args = [event, path];
  if (val3 !== undefined) args.push(val1, val2, val3);
  else if (val2 !== undefined) args.push(val1, val2);
  else if (val1 !== undefined) args.push(val1);

  const awf = opts.awaitWriteFinish;
  let pw;
  if (awf && (pw = this._pendingWrites.get(path))) {
    pw.lastChange = new Date();
    return this;
  }

  if (opts.atomic) {
    if (event === EV_UNLINK) {
      this._pendingUnlinks.set(path, args);
      setTimeout(() => {
        this._pendingUnlinks.forEach((entry, path) => {
          this.emit(...entry);
          this.emit(EV_ALL, ...entry);
          this._pendingUnlinks.delete(path);
        });
      }, typeof opts.atomic === "number" ? opts.atomic : 100);
      return this;
    } else if (event === EV_ADD && this._pendingUnlinks.has(path)) {
      event = args[0] = EV_CHANGE;
      this._pendingUnlinks.delete(path);
    }
  }

  if (awf && (event === EV_ADD || event === EV_CHANGE) && this._readyEmitted) {
    const awfEmit = (err, stats) => {
      if (err) {
        event = args[0] = EV_ERROR;
        args[1] = err;
        this.emitWithAll(event, args);
      } else if (stats) {
        // if stats doesn't exist the file must have been deleted
        if (args.length > 2) {
          args[2] = stats;
        } else {
          args.push(stats);
        }
        this.emitWithAll(event, args);
      }
    };

    this._awaitWriteFinish(path, awf.stabilityThreshold, event, awfEmit);
    return this;
  }

  if (event === EV_CHANGE) {
    const isThrottled = !this._throttle(EV_CHANGE, path, 50);
    if (isThrottled) return this;
  }

  if (opts.alwaysStat && val1 === undefined &&
    (event === EV_ADD || event === EV_ADD_DIR || event === EV_CHANGE)
  ) {
    const fullPath = opts.cwd ? sysPath.join(opts.cwd, path) : path;
    try {
      const stats = await stat(fullPath);
      // Suppress event when fs_stat fails, to avoid sending undefined 'stat'
      if (!stats) return;
      args.push(stats);
      this.emitWithAll(event, args);
    } catch (err) {}
  } else {
    this.emitWithAll(event, args);
  }

  return this;
}

/**
 * Common handler for errors
 * @param {Error} error
 * @returns {Error|Boolean} The error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */
_handleError(error) {
  const code = error && error.code;
  if (error && code !== 'ENOENT' && code !== 'ENOTDIR' &&
    (!this.options.ignorePermissionErrors || (code !== 'EPERM' && code !== 'EACCES'))
  ) {
    this.emit(EV_ERROR, error);
  }
  return error || this.closed;
}

/**
 * Helper utility for throttling
 * @param {ThrottleType} actionType type being throttled
 * @param {Path} path being acted upon
 * @param {Number} timeout duration of time to suppress duplicate actions
 * @returns {Object|false} tracking object or false if action should be suppressed
 */
_throttle(actionType, path, timeout) {
  if (!this._throttled.has(actionType)) {
    this._throttled.set(actionType, new Map());
  }

  /** @type {Map<Path, Object>} */
  const action = this._throttled.get(actionType);
  /** @type {Object} */
  const actionPath = action.get(path);

  if (actionPath) {
    actionPath.count++;
    return false;
  }

  let timeoutObject;
  const clear = () => {
    const item = action.get(path);
    const count = item ? item.count : 0;
    action.delete(path);
    clearTimeout(timeoutObject);
    if (item) clearTimeout(item.timeoutObject);
    return count;
  };
  timeoutObject = setTimeout(clear, timeout);
  const thr = {timeoutObject: timeoutObject, clear: clear, count: 0};
  action.set(path, thr);
  return thr;
}

_incrReadyCount() {
  return this._readyCount++;
}

/**
 * Awaits write operation to finish.
 * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.
 * @param {Path} path being acted upon
 * @param {Number} threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished
 * @param {EventName} event
 * @param {Function} awfEmit Callback to be called when ready for event to be emitted.
 */
_awaitWriteFinish(path, threshold, event, awfEmit) {
  let timeoutHandler;

  let fullPath = path;
  if (this.options.cwd && !sysPath.isAbsolute(path)) {
    fullPath = sysPath.join(this.options.cwd, path);
  }

  const now = new Date();

  const awaitWriteFinish = (prevStat) => {
    fs.stat(fullPath, (err, curStat) => {
      if (err || !this._pendingWrites.has(path)) {
        if (err && err.code !== 'ENOENT') awfEmit(err);
        return;
      }

      const now = Number(new Date());

      if (prevStat && curStat.size != prevStat.size) {
        this._pendingWrites.get(path).lastChange = now;
      }
      const pw = this._pendingWrites.get(path);
      const df = now - pw.lastChange;

      if (df >= threshold) {
        this._pendingWrites.delete(path);
        awfEmit(null, curStat);
      } else {
        timeoutHandler = setTimeout(
          awaitWriteFinish,
          this.options.awaitWriteFinish.pollInterval,
          curStat
        );
      }
    });
  };

  if (!this._pendingWrites.has(path)) {
    this._pendingWrites.set(path, {
      lastChange: now,
      cancelWait: () => {
        this._pendingWrites.delete(path);
        clearTimeout(timeoutHandler);
        return event;
      }
    });
    timeoutHandler = setTimeout(
      awaitWriteFinish,
      this.options.awaitWriteFinish.pollInterval
    );
  }
}

_getGlobIgnored() {
  return Array.from(this._ignoredPaths.values());
}

/**
 * Determines whether user has asked to ignore this path.
 * @param {Path} path filepath or dir
 * @param {fs.Stats=} stats result of fs.stat
 * @returns {Boolean}
 */
_isIgnored(path, stats) {
  if (this.options.atomic && DOT_RE.test(path)) return true;
  if (!this._userIgnored) {
    const cwd = this.options.cwd;
    const ign = this.options.ignored;

    const ignored = ign && ign.map(normalizeIgnored(cwd));
    const paths = arrify(ignored)
      .filter((path) => typeof path === STRING_TYPE && !isGlob(path))
      .map((path) => path + SLASH_GLOBSTAR);
    this._userIgnored = anymatch(
      this._getGlobIgnored()
        .map(normalizeIgnored(cwd))
        .concat(ignored)
        .concat(paths)
      , undefined, ANYMATCH_OPTS
    );
  }

  return this._userIgnored([path, stats]);
}

_isntIgnored(path, stat) {
  return !this._isIgnored(path, stat);
}

/**
 * Provides a set of common helpers and properties relating to symlink and glob handling.
 * @param {Path} path file, directory, or glob pattern being watched
 * @param {Number=} depth at any depth > 0, this isn't a glob
 * @returns {WatchHelper} object containing helpers for this path
 */
_getWatchHelpers(path, depth) {
  const watchPath = depth || this.options.disableGlobbing || !isGlob(path) ? path : globParent(path);
  const follow = this.options.followSymlinks;

  return new WatchHelper(path, watchPath, follow, this);
}

// Directory helpers
// -----------------

/**
 * Provides directory tracking objects
 * @param {String} directory path of the directory
 * @returns {DirEntry} the directory's tracking object
 */
_getWatchedDir(directory) {
  if (!this._boundRemove) this._boundRemove = this._remove.bind(this);
  const dir = sysPath.resolve(directory);
  if (!this._watched.has(dir)) this._watched.set(dir, new DirEntry(dir, this._boundRemove));
  return this._watched.get(dir);
}

// File helpers
// ------------

/**
 * Check for read permissions.
 * Based on this answer on SO: http://stackoverflow.com/a/11781404/1358405
 * @param {fs.Stats} stats - object, result of fs_stat
 * @returns {Boolean} indicates whether the file can be read
*/
_hasReadPermissions(stats) {
  if (this.options.ignorePermissionErrors) return true;

  // stats.mode may be bigint
  const md = stats && Number.parseInt(stats.mode);
  const st = md & 0o777;
  const it = parseInt(st.toString(8)[0], 10);
  return Boolean(4 & it);
}

/**
 * Handles emitting unlink events for
 * files and directories, and via recursion, for
 * files and directories within directories that are unlinked
 * @param {String} directory within which the following item is located
 * @param {String} item      base path of item/directory
 * @returns {void}
*/
_remove(directory, item) {
  // if what is being deleted is a directory, get that directory's paths
  // for recursive deleting and cleaning of watched object
  // if it is not a directory, nestedDirectoryChildren will be empty array
  const path = sysPath.join(directory, item);
  const fullPath = sysPath.resolve(path);
  const isDirectory = this._watched.has(path) || this._watched.has(fullPath);

  // prevent duplicate handling in case of arriving here nearly simultaneously
  // via multiple paths (such as _handleFile and _handleDir)
  if (!this._throttle('remove', path, 100)) return;

  // if the only watched file is removed, watch for its return
  if (!isDirectory && !this.options.useFsEvents && this._watched.size === 1) {
    this.add(directory, item, true);
  }

  // This will create a new entry in the watched object in either case
  // so we got to do the directory check beforehand
  const wp = this._getWatchedDir(path);
  const nestedDirectoryChildren = wp.getChildren();

  // Recursively remove children directories / files.
  nestedDirectoryChildren.forEach(nested => this._remove(path, nested));

  // Check if item was on the watched list and remove it
  const parent = this._getWatchedDir(directory);
  const wasTracked = parent.has(item);
  parent.remove(item);

  // If we wait for this file to be fully written, cancel the wait.
  let relPath = path;
  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);
  if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {
    const event = this._pendingWrites.get(relPath).cancelWait();
    if (event === EV_ADD) return;
  }

  // The Entry will either be a directory that just got removed
  // or a bogus entry to a file, in either case we have to remove it
  this._watched.delete(path);
  this._watched.delete(fullPath);
  const eventName = isDirectory ? EV_UNLINK_DIR : EV_UNLINK;
  if (wasTracked && !this._isIgnored(path)) this._emit(eventName, path);

  // Avoid conflicts if we later create another file with the same name
  if (!this.options.useFsEvents) {
    this._closePath(path);
  }
}

/**
 *
 * @param {Path} path
 */
_closePath(path) {
  let closers = this._closers.get(path);
  if (!closers) return;
  closers.forEach(closer => closer());
  this._closers.delete(path);
  closers = [];
  const dir = sysPath.dirname(path);
  this._getWatchedDir(dir).remove(sysPath.basename(path));
}

/**
 *
 * @param {Path} path
 * @param {Function} closer
 */
_addPathCloser(path, closer) {
  if (!closer) return;
  let list = this._closers.get(path);
  if (!list) {
    list = [];
    this._closers.set(path, list);
  }
  list.push(closer);
}

_readdirp(root, opts) {
  const options = Object.assign({type: EV_ALL, alwaysStat: true, lstat: true}, opts);
  let stream = readdirp(root, options);
  this._streams.add(stream);
  stream.once('close', () => {
    stream = undefined;
  });
  stream.once('end', () => {
    if (stream) {
      this._streams.delete(stream);
      stream = undefined;
    }
  });
  return stream;
}

}

// Export FSWatcher class
exports.FSWatcher = FSWatcher;

/**
 * Instantiates watcher with paths to be tracked.
 * @param {String|Array<String>} paths file/directory paths and/or globs
 * @param {Object=} options chokidar opts
 * @returns an instance of FSWatcher for chaining.
 */
const watch = (paths, options) => {
  const watcher = new FSWatcher(options);
  watcher.add(paths);
  return watcher;
};

exports.watch = watch;

},{"./lib/fsevents-handler":53,"./lib/nodefs-handler":54,"anymatch":1,"braces":44,"events":undefined,"fs":undefined,"glob-parent":66,"is-glob":72,"normalize-path":77,"path":undefined,"readdirp":96,"util":undefined}],53:[function(require,module,exports){
'use strict';

const fs = require('fs');
const sysPath = require('path');
const { promisify } = require('util');

let fsevents;
try { fsevents = require('fsevents'); } catch (error) {
  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);
}

if (fsevents) {
  // TODO: real check
  let mtch = process.version.match(/v(\d+)\.(\d+)/);
  if (mtch && mtch[1] && mtch[2]) {
    let maj = parseInt(mtch[1]);
    let min = parseInt(mtch[2]);
    if (maj === 8 && min < 16) {
      fsevents = undefined;
    }
  }
}

const EV_ADD = 'add';
const EV_CHANGE = 'change';
const EV_ADD_DIR = 'addDir';
const EMPTY_FN = () => {};

const Option = (key, value) => isNaN(value) ? {} : {[key]: value};

const stat = promisify(fs.stat);
const open = promisify(fs.open);
const close = promisify(fs.close);
const lstat = promisify(fs.lstat);
const realpath = promisify(fs.realpath);

const statMethods = { stat, lstat };

/**
 * @typedef {String} Path
 */

/**
 * @typedef {Object} FsEventsWatchContainer
 * @property {Set<Function>} listeners
 * @property {Function} rawEmitter
 * @property {{stop: Function}} watcher
 */

// fsevents instance helper functions
/**
 * Object to hold per-process fsevents instances (may be shared across chokidar FSWatcher instances)
 * @type {Map<Path,FsEventsWatchContainer>}
 */
const FSEventsWatchers = new Map();

// Threshold of duplicate path prefixes at which to start
// consolidating going forward
const consolidateThreshhold = 10;

const wrongEventFlags = new Set([
  69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912
]);

/**
 * Instantiates the fsevents interface
 * @param {Path} path path to be watched
 * @param {Function} callback called when fsevents is bound and ready
 * @returns {{stop: Function}} new fsevents instance
 */
const createFSEventsInstance = (path, callback) => {
  const stop = fsevents.watch(path, callback);
  return {stop};
};

/**
 * Instantiates the fsevents interface or binds listeners to an existing one covering
 * the same file tree.
 * @param {Path} path           - to be watched
 * @param {Path} realPath       - real path for symlinks
 * @param {Function} listener   - called when fsevents emits events
 * @param {Function} rawEmitter - passes data to listeners of the 'raw' event
 * @returns {Function} closer
 */
function setFSEventsListener(path, realPath, listener, rawEmitter, fsw) {
  let watchPath = sysPath.extname(path) ? sysPath.dirname(path) : path;
  const parentPath = sysPath.dirname(watchPath);
  let cont = FSEventsWatchers.get(watchPath);

  // If we've accumulated a substantial number of paths that
  // could have been consolidated by watching one directory
  // above the current one, create a watcher on the parent
  // path instead, so that we do consolidate going forward.
  if (couldConsolidate(parentPath)) {
    watchPath = parentPath;
  }

  const resolvedPath = sysPath.resolve(path);
  const hasSymlink = resolvedPath !== realPath;

  const filteredListener = (fullPath, flags, info) => {
    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);
    if (
      fullPath === resolvedPath ||
      !fullPath.indexOf(resolvedPath + sysPath.sep)
    ) listener(fullPath, flags, info);
  };

  // check if there is already a watcher on a parent path
  // modifies `watchPath` to the parent path when it finds a match
  let watchedParent = false;
  for (const watchedPath of FSEventsWatchers.keys()) {
    if (realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep) === 0) {
      watchPath = watchedPath;
      cont = FSEventsWatchers.get(watchPath);
      watchedParent = true;
      break;
    }
  }

  if (cont || watchedParent) {
    cont.listeners.add(filteredListener);
  } else {
    cont = {
      listeners: new Set([filteredListener]),
      rawEmitter: rawEmitter,
      watcher: createFSEventsInstance(watchPath, (fullPath, flags) => {
        if (fsw.closed) return;
        const info = fsevents.getInfo(fullPath, flags);
        cont.listeners.forEach(list => {
          list(fullPath, flags, info);
        });

        cont.rawEmitter(info.event, fullPath, info);
      })
    };
    FSEventsWatchers.set(watchPath, cont);
  }

  // removes this instance's listeners and closes the underlying fsevents
  // instance if there are no more listeners left
  return () => {
    const lst = cont.listeners;

    lst.delete(filteredListener);
    if (!lst.size) {
      FSEventsWatchers.delete(watchPath);
      cont.watcher.stop();
      cont.rawEmitter = cont.watcher = undefined;
      Object.freeze(cont);
    }
  };
}

// Decide whether or not we should start a new higher-level
// parent watcher
const couldConsolidate = (path) => {
  let count = 0;
  for (const watchPath of FSEventsWatchers.keys()) {
    if (watchPath.indexOf(path) === 0) {
      count++;
      if (count >= consolidateThreshhold) {
        return true;
      }
    }
  }

  return false;
};

// returns boolean indicating whether fsevents can be used
const canUse = () => fsevents && FSEventsWatchers.size < 128;

// determines subdirectory traversal levels from root to path
const depth = (path, root) => {
  let i = 0;
  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;
  return i;
};

/**
 * @mixin
 */
class FsEventsHandler {

/**
 * @param {import('../index').FSWatcher} fsw
 */
constructor(fsw) {
  this.fsw = fsw;
}
checkIgnored(path, stats) {
  const ipaths = this.fsw._ignoredPaths;
  if (this.fsw._isIgnored(path, stats)) {
    ipaths.add(path);
    if (stats && stats.isDirectory()) {
      ipaths.add(path + '/**/*');
    }
    return true;
  } else {
    ipaths.delete(path);
    ipaths.delete(path + '/**/*');
  }
}

addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts) {
  const event = watchedDir.has(item) ? EV_CHANGE : EV_ADD;
  this.handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts);
}

async checkFd(path, fullPath, realPath, parent, watchedDir, item, info, opts) {
  try {
    const fd = await open(path, 'r');
    if (this.fsw.closed) {
      return;
    }
    await close(fd);
    if (this.fsw.closed) {
      return;
    }
    this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
  } catch (error) {
    if (error.code !== 'EACCES') {
      this.handleEvent('unlink', path, fullPath, realPath, parent, watchedDir, item, info, opts);
    } else {
      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
    }
  }
}

handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts) {
  if (this.fsw.closed || this.checkIgnored(path)) return;

  if (event === 'unlink') {
    // suppress unlink events on never before seen files
    if (info.type === 'directory' || watchedDir.has(item)) {
      this.fsw._remove(parent, item);
    }
  } else {
    if (event === EV_ADD) {
      // track new directories
      if (info.type === 'directory') this.fsw._getWatchedDir(path);

      if (info.type === 'symlink' && opts.followSymlinks) {
        // push symlinks back to the top of the stack to get handled
        const curDepth = opts.depth === undefined ?
          undefined : depth(fullPath, realPath) + 1;
        return this._addToFsEvents(path, false, true, curDepth);
      } else {
        // track new paths
        // (other than symlinks being followed, which will be tracked soon)
        this.fsw._getWatchedDir(parent).add(item);
      }
    }
    /**
     * @type {'add'|'addDir'|'unlink'|'unlinkDir'}
     */
    const eventName = info.type === 'directory' ? event + 'Dir' : event;
    this.fsw._emit(eventName, path);
    if (eventName === EV_ADD_DIR) this._addToFsEvents(path, false, true);
  }
}

/**
 * Handle symlinks encountered during directory scan
 * @param {String} watchPath  - file/dir path to be watched with fsevents
 * @param {String} realPath   - real path (in case of symlinks)
 * @param {Function} transform  - path transformer
 * @param {Function} globFilter - path filter in case a glob pattern was provided
 * @returns {Function} closer for the watcher instance
*/
_watchWithFsEvents(watchPath, realPath, transform, globFilter) {
  if (this.fsw.closed) return;
  if (this.fsw._isIgnored(watchPath)) return;
  const opts = this.fsw.options;
  const watchCallback = async (fullPath, flags, info) => {
    if (this.fsw.closed) return;
    if (
      opts.depth !== undefined &&
      depth(fullPath, realPath) > opts.depth
    ) return;
    const path = transform(sysPath.join(
      watchPath, sysPath.relative(watchPath, fullPath)
    ));
    if (globFilter && !globFilter(path)) return;
    // ensure directories are tracked
    const parent = sysPath.dirname(path);
    const item = sysPath.basename(path);
    const watchedDir = this.fsw._getWatchedDir(
      info.type === 'directory' ? path : parent
    );

    // correct for wrong events emitted
    if (wrongEventFlags.has(flags) || info.event === 'unknown') {
      if (typeof opts.ignored === 'function') {
        let stats;
        try {
          stats = await stat(path);
        } catch (error) {}
        if (this.fsw.closed) {
          return;
        }
        if (this.checkIgnored(path, stats)) return;
        if (stats) {
          this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
        } else {
          this.handleEvent('unlink', path, fullPath, realPath, parent, watchedDir, item, info, opts);
        }
      } else {
        this.checkFd(path, fullPath, realPath, parent, watchedDir, item, info, opts);
      }
    } else {
      switch (info.event) {
      case 'created':
      case 'modified':
        return this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
      case 'deleted':
      case 'moved':
        return this.checkFd(path, fullPath, realPath, parent, watchedDir, item, info, opts);
      }
    }
  };

  const closer = setFSEventsListener(
    watchPath,
    realPath,
    watchCallback,
    this.fsw._emitRaw,
    this.fsw
  );

  this.fsw._emitReady();
  return closer;
}

/**
 * Handle symlinks encountered during directory scan
 * @param {String} linkPath path to symlink
 * @param {String} fullPath absolute path to the symlink
 * @param {Function} transform pre-existing path transformer
 * @param {Number} curDepth level of subdirectories traversed to where symlink is
 * @returns {Promise<void>}
 */
async _handleFsEventsSymlink(linkPath, fullPath, transform, curDepth) {
  // don't follow the same symlink more than once
  if (this.fsw.closed || this.fsw._symlinkPaths.has(fullPath)) return;

  this.fsw._symlinkPaths.set(fullPath, true);
  this.fsw._incrReadyCount();

  try {
    const linkTarget = await realpath(linkPath);
    if (this.fsw.closed) {
      return;
    }
    if (this.fsw._isIgnored(linkTarget)) {
      return this.fsw._emitReady();
    }

    this.fsw._incrReadyCount();

    // add the linkTarget for watching with a wrapper for transform
    // that causes emitted paths to incorporate the link's path
    this._addToFsEvents(linkTarget || linkPath, (path) => {
      const dotSlash = '.' + sysPath.sep;
      let aliasedPath = linkPath;
      if (linkTarget && linkTarget !== dotSlash) {
        aliasedPath = path.replace(linkTarget, linkPath);
      } else if (path !== dotSlash) {
        aliasedPath = sysPath.join(linkPath, path);
      }
      return transform(aliasedPath);
    }, false, curDepth);
  } catch(error) {
    if (this.fsw._handleError(error)) {
      return this.fsw._emitReady();
    }
  }
}

/**
 *
 * @param {Path} newPath
 * @param {fs.Stats} stats
 */
emitAdd(newPath, stats, processPath, opts, forceAdd) {
  const pp = processPath(newPath);
  const isDir = stats.isDirectory();
  const dirObj = this.fsw._getWatchedDir(sysPath.dirname(pp));
  const base = sysPath.basename(pp);

  // ensure empty dirs get tracked
  if (isDir) this.fsw._getWatchedDir(pp);
  if (dirObj.has(base)) return;
  dirObj.add(base);

  if (!opts.ignoreInitial || forceAdd === true) {
    this.fsw._emit(isDir ? EV_ADD_DIR : EV_ADD, pp, stats);
  }
}

initWatch(realPath, path, wh, processPath) {
  if (this.fsw.closed) return;
  const closer = this._watchWithFsEvents(
    wh.watchPath,
    sysPath.resolve(realPath || wh.watchPath),
    processPath,
    wh.globFilter
  );
  this.fsw._addPathCloser(path, closer);
}

/**
 * Handle added path with fsevents
 * @param {String} path file/dir path or glob pattern
 * @param {Function|Boolean=} transform converts working path to what the user expects
 * @param {Boolean=} forceAdd ensure add is emitted
 * @param {Number=} priorDepth Level of subdirectories already traversed.
 * @returns {Promise<void>}
 */
async _addToFsEvents(path, transform, forceAdd, priorDepth) {
  if (this.fsw.closed) {
    return;
  }
  const opts = this.fsw.options;
  const processPath = typeof transform === 'function' ? transform : (val => val);

  const wh = this.fsw._getWatchHelpers(path);

  // evaluate what is at the path we're being asked to watch
  try {
    const stats = await statMethods[wh.statMethod](wh.watchPath);
    if (this.fsw.closed) {
      return;
    }
    if (this.fsw._isIgnored(wh.watchPath, stats)) {
      throw null;
    }
    if (stats.isDirectory()) {
      // emit addDir unless this is a glob parent
      if (!wh.globFilter) this.emitAdd(processPath(path), stats, processPath, opts, forceAdd);

      // don't recurse further if it would exceed depth setting
      if (priorDepth && priorDepth > opts.depth) return;

      // scan the contents of the dir
      this.fsw._readdirp(wh.watchPath, {
        fileFilter: entry => wh.filterPath(entry),
        directoryFilter: entry => wh.filterDir(entry),
        ...Option("depth", opts.depth - (priorDepth || 0))
      }).on('data', (entry) => {
        // need to check filterPath on dirs b/c filterDir is less restrictive
        if (this.fsw.closed) {
          return;
        }
        if (entry.stats.isDirectory() && !wh.filterPath(entry)) return;

        const joinedPath = sysPath.join(wh.watchPath, entry.path);
        const fullPath = entry.fullPath;

        if (wh.followSymlinks && entry.stats.isSymbolicLink()) {
          // preserve the current depth here since it can't be derived from
          // real paths past the symlink
          const curDepth = opts.depth === undefined ?
            undefined : depth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;

          this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);
        } else {
          this.emitAdd(joinedPath, entry.stats, processPath, opts, forceAdd);
        }
      }).on('error', EMPTY_FN).on('end', () => {
        this.fsw._emitReady();
      });
    } else {
      this.emitAdd(wh.watchPath, stats, processPath, opts, forceAdd);
      this.fsw._emitReady();
    }
  } catch (error) {
    if (!error || this.fsw._handleError(error)) {
      // TODO: Strange thing: "should not choke on an ignored watch path" will be failed without 2 ready calls -__-
      this.fsw._emitReady();
      this.fsw._emitReady();
    }
  }

  if (opts.persistent && forceAdd !== true) {
    if (typeof transform === 'function') {
      // realpath has already been resolved
      this.initWatch(null, path, wh, processPath);
    } else {
      let realPath;
      try {
        realPath = await realpath(wh.watchPath);
      } catch (e) {}
      this.initWatch(realPath, path, wh, processPath);
    }
  }
}

}

module.exports = FsEventsHandler;
module.exports.canUse = canUse;

},{"fs":undefined,"fsevents":51,"path":undefined,"util":undefined}],54:[function(require,module,exports){
'use strict';

const fs = require('fs');
const sysPath = require('path');
const isBinaryPath = require('is-binary-path');
const { promisify } = require('util');

const open = promisify(fs.open);
const stat = promisify(fs.stat);
const lstat = promisify(fs.lstat);
const close = promisify(fs.close);
const fsrealpath = promisify(fs.realpath);

const statMethods = { lstat, stat };
const isWindows = process.platform === 'win32';
const emptyFn = () => {};
const KEY_LISTENERS = 'listeners';
const KEY_ERR = 'errHandlers';
const KEY_RAW = 'rawEmitters';
const HANDLER_KEYS = [KEY_LISTENERS, KEY_ERR, KEY_RAW];

const EV_CHANGE = 'change';
const EV_ADD = 'add';
const EV_ADD_DIR = 'addDir';

// TODO: emit errors properly. Example: EMFILE on Macos.
const foreach = (val, fn) => {
  if (val instanceof Set) {
    val.forEach(fn);
  } else {
    fn(val);
  }
};

const addAndConvert = (main, prop, item) => {
  let container = main[prop];
  if (!(container instanceof Set)) {
    main[prop] = container = new Set([container]);
  }
  container.add(item);
};

const clearItem = cont => key => {
  const set = cont[key];
  if (set instanceof Set) {
    set.clear();
  } else {
    delete cont[key];
  }
};

const delFromSet = (main, prop, item) => {
  const container = main[prop];
  if (!(container instanceof Set)) {
    if (container === item) delete main[prop];
  } else {
    container.delete(item);
  }
};

const isEmptySet = (val) => val instanceof Set ? val.size === 0 : !val;

/**
 * @typedef {String} Path
 */

// fs_watch helpers

// object to hold per-process fs_watch instances
// (may be shared across chokidar FSWatcher instances)

/**
 * @typedef {Object} FsWatchContainer
 * @property {Set} listeners
 * @property {Set} errHandlers
 * @property {Set} rawEmitters
 * @property {fs.FSWatcher=} watcher
 * @property {Boolean=} watcherUnusable
 */

/**
 * @type {Map<String,FsWatchContainer>}
 */
const FsWatchInstances = new Map();

/**
 * Instantiates the fs_watch interface
 * @param {String} path to be watched
 * @param {Object} options to be passed to fs_watch
 * @param {Function} listener main event handler
 * @param {Function} errHandler emits info about errors
 * @param {Function} emitRaw emits raw event data
 * @returns {fs.FSWatcher} new fsevents instance
 */
function createFsWatchInstance(path, options, listener, errHandler, emitRaw) {
  const handleEvent = (rawEvent, evPath) => {
    listener(path);
    emitRaw(rawEvent, evPath, {watchedPath: path});

    // emit based on events occurring for files from a directory's watcher in
    // case the file's watcher misses it (and rely on throttling to de-dupe)
    if (evPath && path !== evPath) {
      fsWatchBroadcast(
        sysPath.resolve(path, evPath), KEY_LISTENERS, sysPath.join(path, evPath)
      );
    }
  };
  try {
    return fs.watch(path, options, handleEvent);
  } catch (error) {
    errHandler(error);
  }
}

/**
 * Helper for passing fs_watch event data to a collection of listeners
 * @param {Path} fullPath absolute path bound to fs_watch instance
 * @param {String} type listener type
 * @param {*=} val1 arguments to be passed to listeners
 * @param {*=} val2
 * @param {*=} val3
 */
const fsWatchBroadcast = (fullPath, type, val1, val2, val3) => {
  const cont = FsWatchInstances.get(fullPath);
  if (!cont) return;
  foreach(cont[type], (listener) => {
    listener(val1, val2, val3);
  });
};

/**
 * Instantiates the fs_watch interface or binds listeners
 * to an existing one covering the same file system entry
 * @param {String} path
 * @param {String} fullPath absolute path
 * @param {Object} options to be passed to fs_watch
 * @param {Object} handlers container for event listener functions
 */
const setFsWatchListener = (path, fullPath, options, handlers) => {
  const {listener, errHandler, rawEmitter} = handlers;
  let cont = FsWatchInstances.get(fullPath);

  /** @type {fs.FSWatcher=} */
  let watcher;
  if (!options.persistent) {
    watcher = createFsWatchInstance(
      path, options, listener, errHandler, rawEmitter
    );
    return watcher.close.bind(watcher);
  }
  if (cont) {
    addAndConvert(cont, KEY_LISTENERS, listener);
    addAndConvert(cont, KEY_ERR, errHandler);
    addAndConvert(cont, KEY_RAW, rawEmitter);
  } else {
    watcher = createFsWatchInstance(
      path,
      options,
      fsWatchBroadcast.bind(null, fullPath, KEY_LISTENERS),
      errHandler, // no need to use broadcast here
      fsWatchBroadcast.bind(null, fullPath, KEY_RAW)
    );
    if (!watcher) return;
    watcher.on('error', async (error) => {
      const broadcastErr = fsWatchBroadcast.bind(null, fullPath, KEY_ERR);
      cont.watcherUnusable = true; // documented since Node 10.4.1
      // Workaround for https://github.com/joyent/node/issues/4337
      if (isWindows && error.code === 'EPERM') {
        try {
          const fd = await open(path, 'r');
          await close(fd);
          broadcastErr(error);
        } catch (err) {}
      } else {
        broadcastErr(error);
      }
    });
    cont = {
      listeners: listener,
      errHandlers: errHandler,
      rawEmitters: rawEmitter,
      watcher: watcher
    };
    FsWatchInstances.set(fullPath, cont);
  }
  // const index = cont.listeners.indexOf(listener);

  // removes this instance's listeners and closes the underlying fs_watch
  // instance if there are no more listeners left
  return () => {
    delFromSet(cont, KEY_LISTENERS, listener);
    delFromSet(cont, KEY_ERR, errHandler);
    delFromSet(cont, KEY_RAW, rawEmitter);
    if (isEmptySet(cont.listeners)) {
      // Check to protect against issue gh-730.
      // if (cont.watcherUnusable) {
      cont.watcher.close();
      // }
      FsWatchInstances.delete(fullPath);
      HANDLER_KEYS.forEach(clearItem(cont));
      cont.watcher = undefined;
      Object.freeze(cont);
    }
  };
};

// fs_watchFile helpers

// object to hold per-process fs_watchFile instances
// (may be shared across chokidar FSWatcher instances)
const FsWatchFileInstances = new Map();

/**
 * Instantiates the fs_watchFile interface or binds listeners
 * to an existing one covering the same file system entry
 * @param {String} path to be watched
 * @param {String} fullPath absolute path
 * @param {Object} options options to be passed to fs_watchFile
 * @param {Object} handlers container for event listener functions
 * @returns {Function} closer
 */
const setFsWatchFileListener = (path, fullPath, options, handlers) => {
  const listener = handlers.listener;
  const rawEmitter = handlers.rawEmitter;
  let cont = FsWatchFileInstances.get(fullPath);
  let listeners = new Set();
  let rawEmitters = new Set();

  const copts = cont && cont.options;
  if (copts && (copts.persistent < options.persistent || copts.interval > options.interval)) {
    // "Upgrade" the watcher to persistence or a quicker interval.
    // This creates some unlikely edge case issues if the user mixes
    // settings in a very weird way, but solving for those cases
    // doesn't seem worthwhile for the added complexity.
    listeners = cont.listeners;
    rawEmitters = cont.rawEmitters;
    fs.unwatchFile(fullPath);
    cont = undefined;
  }

  if (cont) {
    addAndConvert(cont, KEY_LISTENERS, listener);
    addAndConvert(cont, KEY_RAW, rawEmitter);
  } else {
    // TODO
    // listeners.add(listener);
    // rawEmitters.add(rawEmitter);
    cont = {
      listeners: listener,
      rawEmitters: rawEmitter,
      options: options,
      watcher: fs.watchFile(fullPath, options, (curr, prev) => {
        foreach(cont.rawEmitters, (rawEmitter) => {
          rawEmitter(EV_CHANGE, fullPath, {curr, prev});
        });
        const currmtime = curr.mtimeMs;
        if (curr.size !== prev.size || currmtime > prev.mtimeMs || currmtime === 0) {
          foreach(cont.listeners, (listener) => listener(path, curr));
        }
      })
    };
    FsWatchFileInstances.set(fullPath, cont);
  }
  // const index = cont.listeners.indexOf(listener);

  // Removes this instance's listeners and closes the underlying fs_watchFile
  // instance if there are no more listeners left.
  return () => {
    delFromSet(cont, KEY_LISTENERS, listener);
    delFromSet(cont, KEY_RAW, rawEmitter);
    if (isEmptySet(cont.listeners)) {
      FsWatchFileInstances.delete(fullPath);
      fs.unwatchFile(fullPath);
      cont.options = cont.watcher = undefined;
      Object.freeze(cont);
    }
  };
};

/**
 * @mixin
 */
class NodeFsHandler {

/**
 * @param {import("../index").FSWatcher} fsW
 */
constructor(fsW) {
  this.fsw = fsW;
  this._boundHandleError = (error) => fsW._handleError(error);
}

/**
 * Watch file for changes with fs_watchFile or fs_watch.
 * @param {String} path to file or dir
 * @param {Function} listener on fs change
 * @returns {Function} closer for the watcher instance
 */
_watchWithNodeFs(path, listener) {
  const opts = this.fsw.options;
  const directory = sysPath.dirname(path);
  const basename = sysPath.basename(path);
  const parent = this.fsw._getWatchedDir(directory);
  parent.add(basename);
  const absolutePath = sysPath.resolve(path);
  const options = {persistent: opts.persistent};
  if (!listener) listener = emptyFn;

  let closer;
  if (opts.usePolling) {
    options.interval = opts.enableBinaryInterval && isBinaryPath(basename) ?
      opts.binaryInterval : opts.interval;
    closer = setFsWatchFileListener(path, absolutePath, options, {
      listener: listener,
      rawEmitter: this.fsw._emitRaw
    });
  } else {
    closer = setFsWatchListener(path, absolutePath, options, {
      listener: listener,
      errHandler: this._boundHandleError,
      rawEmitter: this.fsw._emitRaw
    });
  }
  return closer;
}

/**
 * Watch a file and emit add event if warranted.
 * @param {Path} file Path
 * @param {fs.Stats} stats result of fs_stat
 * @param {Boolean} initialAdd was the file added at watch instantiation?
 * @returns {Function} closer for the watcher instance
 */
_handleFile(file, stats, initialAdd) {
  if (this.fsw.closed) {
    return;
  }
  const dirname = sysPath.dirname(file);
  const basename = sysPath.basename(file);
  const parent = this.fsw._getWatchedDir(dirname);
  // stats is always present
  let prevStats = stats;

  // if the file is already being watched, do nothing
  if (parent.has(basename)) return;

  // kick off the watcher
  const closer = this._watchWithNodeFs(file, async (path, newStats) => {
    if (!this.fsw._throttle('watch', file, 5)) return;
    if (!newStats || newStats && newStats.mtimeMs === 0) {
      try {
        const newStats = await stat(file);
        if (this.fsw.closed) {
          return;
        }
        // Check that change event was not fired because of changed only accessTime.
        const at = newStats.atimeMs;
        const mt = newStats.mtimeMs;
        if (!at || at <= mt || mt !== prevStats.mtimeMs) {
          this.fsw._emit(EV_CHANGE, file, newStats);
        }
        prevStats = newStats;
      } catch (error) {
        // Fix issues where mtime is null but file is still present
        this.fsw._remove(dirname, basename);
      }
    // add is about to be emitted if file not already tracked in parent
    } else if (parent.has(basename)) {
      // Check that change event was not fired because of changed only accessTime.
      const at = newStats.atimeMs;
      const mt = newStats.mtimeMs;
      if (!at || at <= mt || mt !== prevStats.mtimeMs) {
        this.fsw._emit(EV_CHANGE, file, newStats);
      }
      prevStats = newStats;
    }
  });

  // emit an add event if we're supposed to
  if (!(initialAdd && this.fsw.options.ignoreInitial) && this.fsw._isntIgnored(file)) {
    if (!this.fsw._throttle(EV_ADD, file, 0)) return;
    this.fsw._emit(EV_ADD, file, stats);
  }

  return closer;
}

/**
 * Handle symlinks encountered while reading a dir.
 * @param {Object} entry returned by readdirp
 * @param {String} directory path of dir being read
 * @param {String} path of this item
 * @param {String} item basename of this item
 * @returns {Promise<Boolean>} true if no more processing is needed for this entry.
 */
async _handleSymlink(entry, directory, path, item) {
  if (this.fsw.closed) {
    return;
  }
  const full = entry.fullPath;
  const dir = this.fsw._getWatchedDir(directory);

  if (!this.fsw.options.followSymlinks) {
    // watch symlink directly (don't follow) and detect changes
    this.fsw._incrReadyCount();
    const linkPath = await fsrealpath(path);
    if (this.fsw.closed) {
      return;
    }
    if (dir.has(item)) {
      if (this.fsw._symlinkPaths.get(full) !== linkPath) {
        this.fsw._symlinkPaths.set(full, linkPath);
        this.fsw._emit(EV_CHANGE, path, entry.stats);
      }
    } else {
      dir.add(item);
      this.fsw._symlinkPaths.set(full, linkPath);
      this.fsw._emit(EV_ADD, path, entry.stats);
    }
    this.fsw._emitReady();
    return true;
  }

  // don't follow the same symlink more than once
  if (this.fsw._symlinkPaths.has(full)) {
    return true;
  } else {
    this.fsw._symlinkPaths.set(full,  true);
  }
}

_handleRead(directory, initialAdd, wh, target, dir, depth, throttler) {
  // Normalize the directory name on Windows
  directory = sysPath.join(directory, '');

  if (!wh.hasGlob) {
    // throttler = this.fsw._throttle('readdir', directory, 1000);
    // if (!throttler) return;
  }

  const previous = this.fsw._getWatchedDir(wh.path);
  const current = new Set();

  const stream = this.fsw._readdirp(directory, {
    fileFilter: entry => wh.filterPath(entry),
    directoryFilter: entry => wh.filterDir(entry),
    depth: 0,
  }).on('data', async (entry) => {
    if (this.fsw.closed) {
      return;
    }
    const item = entry.path;
    let path = sysPath.join(directory, item);
    current.add(item);

    if (entry.stats.isSymbolicLink() && await this._handleSymlink(entry, directory, path, item)) {
      return;
    }

    if (this.fsw.closed) {
      return;
    }

    // Files that present in current directory snapshot
    // but absent in previous are added to watch list and
    // emit `add` event.
    if (item === target || !target && !previous.has(item)) {
      this.fsw._incrReadyCount();

      // ensure relativeness of path is preserved in case of watcher reuse
      path = sysPath.join(dir, sysPath.relative(dir, path));

      this._addToNodeFs(path, initialAdd, wh, depth + 1);
    }
  }).on('error', this._boundHandleError);
  return new Promise(res =>
    stream
    .on('end', () => {
      const wasThrottled = throttler ? throttler.clear() : false;

      res();

      // Files that absent in current directory snapshot
      // but present in previous emit `remove` event
      // and are removed from @watched[directory].
      previous.getChildren().filter((item) =>
        item !== directory &&
          !current.has(item) &&
          // in case of intersecting globs;
          // a path may have been filtered out of this readdir, but
          // shouldn't be removed because it matches a different glob
          (!wh.hasGlob || wh.filterPath({
            fullPath: sysPath.resolve(directory, item)
          }))
      ).forEach((item) => {
        this.fsw._remove(directory, item);
      });

      // one more time for any missed in case changes came in extremely quickly
      if (wasThrottled) this._handleRead(directory, false, wh, target, dir, depth, throttler);
    })
  );
}

/**
 * Read directory to add / remove files from `@watched` list and re-read it on change.
 * @param {String} dir fs path
 * @param {fs.Stats} stats
 * @param {Boolean} initialAdd
 * @param {Number} depth relative to user-supplied path
 * @param {String} target child path targetted for watch
 * @param {Object} wh Common watch helpers for this path
 * @param {String} realpath
 * @returns {Promise<Function>} closer for the watcher instance.
 */
async _handleDir(dir, stats, initialAdd, depth, target, wh, realpath) {
  const parentDir = this.fsw._getWatchedDir(sysPath.dirname(dir));
  const tracked = parentDir.has(sysPath.basename(dir));
  if (!(initialAdd && this.fsw.options.ignoreInitial) && !target && !tracked) {
    if (!wh.hasGlob || wh.globFilter(dir)) this.fsw._emit(EV_ADD_DIR, dir, stats);
  }

  // ensure dir is tracked (harmless if redundant)
  parentDir.add(sysPath.basename(dir));
  this.fsw._getWatchedDir(dir);
  let throttler;


  let closer;

  const oDepth = this.fsw.options.depth;
  if ((oDepth == null || depth <= oDepth) && !this.fsw._symlinkPaths.has(realpath)) {
    if (!target) {
      await this._handleRead(dir, initialAdd, wh, target, dir, depth, throttler);
      if (this.fsw.closed) {
        return;
      }
    }

    closer = this._watchWithNodeFs(dir, (dirPath, stats) => {
      // if current directory is removed, do nothing
      if (stats && stats.mtimeMs === 0) return;

      this._handleRead(dirPath, false, wh, target, dir, depth, throttler);
    });
  }
  return closer;
}

/**
 * Handle added file, directory, or glob pattern.
 * Delegates call to _handleFile / _handleDir after checks.
 * @param {String} path to file or ir
 * @param {Boolean} initialAdd was the file added at watch instantiation?
 * @param {Object} priorWh depth relative to user-supplied path
 * @param {Number} depth Child path actually targetted for watch
 * @param {String=} target Child path actually targeted for watch
 * @returns {Promise}
 */
async _addToNodeFs(path, initialAdd, priorWh, depth, target) {
  const ready = this.fsw._emitReady;
  if (this.fsw._isIgnored(path) || this.fsw.closed) {
    ready();
    return false;
  }

  let wh = this.fsw._getWatchHelpers(path, depth);
  if (!wh.hasGlob && priorWh) {
    wh.hasGlob = priorWh.hasGlob;
    wh.globFilter = priorWh.globFilter;
    wh.filterPath = entry => priorWh.filterPath(entry);
    wh.filterDir = entry => priorWh.filterDir(entry);
  }

  // evaluate what is at the path we're being asked to watch
  try {
    const stats = await statMethods[wh.statMethod](wh.watchPath);
    if (this.fsw.closed) {
      return;
    }
    if (this.fsw._isIgnored(wh.watchPath, stats)) {
      ready();
      return false;
    }

    const follow = this.fsw.options.followSymlinks && !path.includes("*") && !path.includes("{");
    let closer;
    if (stats.isDirectory()) {
      const targetPath = follow ? await fsrealpath(path) : path;
      if (this.fsw.closed) {
        return;
      }
      closer = await this._handleDir(wh.watchPath, stats, initialAdd, depth, target, wh, targetPath);
      if (this.fsw.closed) {
        return;
      }
      // preserve this symlink's target path
      if (path !== targetPath && targetPath !== undefined) {
        this.fsw._symlinkPaths.set(targetPath, true);
      }
    } else if (stats.isSymbolicLink()) {
      const targetPath = follow ? await fsrealpath(path) : path;
      if (this.fsw.closed) {
        return;
      }
      const parent = sysPath.dirname(wh.watchPath);
      this.fsw._getWatchedDir(parent).add(wh.watchPath);
      this.fsw._emit(EV_ADD, wh.watchPath, stats);
      closer = await this._handleDir(parent, stats, initialAdd, depth, path, wh, targetPath);
      if (this.fsw.closed) {
        return;
      }

      // preserve this symlink's target path
      if (targetPath !== undefined) {
        this.fsw._symlinkPaths.set(sysPath.resolve(path), targetPath);
      }
    } else {
      closer = this._handleFile(wh.watchPath, stats, initialAdd);
    }
    ready();

    this.fsw._addPathCloser(path, closer);
    return false;

  } catch (error) {
    if (this.fsw._handleError(error)) {
      ready();
      return path;
    }
  }
}

}

module.exports = NodeFsHandler;

},{"fs":undefined,"is-binary-path":70,"path":undefined,"util":undefined}],55:[function(require,module,exports){
var _ = require("lodash");

var autocomplete = require("./autocomplete");
var parsers = require("./parsers");
var utils = require("./utils");

var argument = module.exports = {};

argument.argument = function(name, options) {
  options = options || {};
  options.name = name || "argument";
  options.parser = options.parser || parsers.stringParser;
  options.description = options.description || "";
  options.complete = options.complete || autocomplete.defaultCompleter;
  options.default = typeof options.default !== "undefined" ? options.default : null;

  return options;
};

argument.parse = function(argument, value) {
  var result;
  if(typeof value !== 'undefined' && value !== null) {
    result = argument.parser(value);
  } else if(argument.default !== null) {
    result = parsers.success(argument.default);
  } else {
    result = parsers.error("missing value");
  }

  result.argument = argument;
  return result;
};

argument.parseList = function(args, providedArguments) {
  if(providedArguments.length <= args.length) {
    var combined = _.zip(args, _.take(providedArguments, args.length));

    var results = _.map(combined, function(kv) {
      return argument.parse(kv[0], kv[1]);
    });

    if(_.every(results, parsers.isSuccess)) {
      return parsers.success(_.map(results, "success"));
    } else {
      return parsers.error(results);
    }
  } else {
    return parsers.error([parsers.error("Too many arguments: " + _.drop(providedArguments, args.length).join(", "))]);
  }
};

argument.usage = function(argument) {
  if(argument.default !== null) {
    return "[" + argument.name.toUpperCase() + "]";
  } else {
    return argument.name.toUpperCase();
  }
};

argument.help = function(arg) {
  var description = arg.description;
  if(arg.default !== null) description += " (default: " + arg.default + ")";
  return [argument.usage(arg), description];
};

argument.complete = function(arg, word) {
  return arg.complete(word);
};

},{"./autocomplete":56,"./parsers":62,"./utils":63,"lodash":74}],56:[function(require,module,exports){
var _ = require("lodash");

var autocomplete = module.exports = {};

autocomplete.empty = {
  words: [],
  glob: false,
  files: false,
  directories: false
};

autocomplete.defaultCompleter = function() {
  return autocomplete.empty;
};

autocomplete.words = function(words) {
  var result = _.clone(autocomplete.empty);
  result.words = words;
  return result;
}

autocomplete.glob = function(glob) {
  return {
    words: [],
    glob: glob,
    files: false,
    directories: false
  };
};

autocomplete.files = {
  words: [],
  glob: false,
  files: true,
  directories: false
}

autocomplete.directories = {
  words: [],
  glob: false,
  files: false,
  directories: true
}

autocomplete.mappend = function(result1, result2) {
  return {
    words: result1.words.concat(result2.words),
    glob: result2.glob || result1.glob,
    files: result1.files || result2.files,
    directories: result1.directories || result2.directories
  };
};

autocomplete.mconcat = function(results) {
  return _.reduce(results, autocomplete.mappend, _.clone(autocomplete.empty));
};

autocomplete.compgen = function(results, current) {
  var wordlist = !_.isEmpty(results.words) ? "-W $'" + results.words.join('\n') + "'" : '';
  var globpat = results.glob ? "-G '" + results.glob + "'" : "";
  var files = results.files && !results.glob ? '-f' : '';
  var directories = results.directories && !results.files && !results.glob ? '-d' : '';

  return 'compgen ' + [wordlist, globpat, files, directories].join(' ').trim() + ' -- ' + current;
};

autocomplete.currentArg = function(words, wordIndex, args) {
  var initialState = {
    argsIndex: -1,
    argsLeft: _.clone(args),
    isOption: false,
    wasOption: false
  };

  var finalState = _.reduce(_.take(words, wordIndex + 1), function(state, word) {
    state.wasOption = false;
    if(_.isEmpty(state.argsLeft)) {
      return state;
    }

    if(state.isOption) {
      if(word.slice(0,1) !== '-') {
        state.isOption = false;
        state.wasOption = true;
        return state;
      } else {
        state.isOption = true;
        state.wasOption = true;
        return state;
      }
    }

    if(word === '--') {
      state.isOption = false;
      return state;
    } else if(word.slice(0,1) === '-') {
      state.isOption = true;
      return state;
    } else if(word === state.argsLeft[0]) {
      state.argsIndex ++;
      state.argsLeft.shift();
      return state;
    } else {
      console.error('unhandled state');
      return state;
    }
  }, initialState);

  return {
    argIndex: !finalState.isOption && !finalState.wasOption ? finalState.argsIndex : false,
    consumedArgs: _.take(args, finalState.argsIndex + 1)
  };
};

autocomplete.subpaths = function(cmd) {
  var subcmds = cmd.commands;
  if(cmd.topLevel) {
      subcmds = _.reject(cmd.commands, function(c) { return c.helpCommand; });
  }

  if(_.isEmpty(subcmds)) {
    return [];
  } else {
    var result = _.map(subcmds, function(cmd) {
      var subpaths = autocomplete.subpaths(cmd);

      if(_.isEmpty(subpaths)) {
        return [[ cmd.name ]];
      } else {
        return _.map(subpaths, function(path) {
          return [cmd.name].concat(path);
        });
      }
    });
    return _.flatten(result);
  }
};

autocomplete.autocompleteHelpCommand = function(cmd, argsLeft) {
  var givenPrefix = _.initial(argsLeft);
  var currentWord = _.last(argsLeft) || '';
  var subpaths = autocomplete.subpaths(cmd);
  var matchingSubpaths = _.filter(subpaths, function(path) {
    var pathPrefix = _.take(path, argsLeft.length - 1);
    var currentPathElem = path[argsLeft.length - 1] || '';
    return _.isEqual(pathPrefix, givenPrefix) &&
           _.startsWith(currentPathElem, currentWord);
  });

  var results = _.flatten(_.map(matchingSubpaths, function(x) {
    return x[argsLeft.length - 1] || [];
  }));

  return autocomplete.words(_.uniq(results));
};

},{"lodash":74}],57:[function(require,module,exports){
var _ = require("lodash");
var p = require("path");

var autocompleteScript = module.exports = {};

autocompleteScript.bashScript = function(exec, zshCompat) {
  zshCompat = !!zshCompat;
  var fname = p.basename(exec, ".js");
  var name = p.basename(exec);
  var path = p.normalize(exec);

  return (zshCompat ? '#compdef ' + name + '\nautoload -U +X bashcompinit && bashcompinit\n' : '') +
  '_' + fname + '()\n'+
'{\n'+
'  local ARGS COMPGENCMD\n'+
'\n'+
'  cur=${COMP_WORDS[COMP_CWORD]};\n'+
'\n'+
'  ARGS=(--autocomplete-index $COMP_CWORD)\n'+
'  for word in ${COMP_WORDS[@]}; do\n'+
'    ARGS=(${ARGS[@]}  --autocomplete-words="$word")\n'+
'  done\n'+
'\n'+
'  COMPGENCMD=( $(' + exec + ' "${ARGS[@]}") )\n'+
'\n'+
'  COMPREPLY=( $(eval ${COMPGENCMD[@]}) )\n'+
'\n'+
'  return 0;\n'+
'}\n'+
'complete -o nospace -F _' + fname + ' ' + name;

}

},{"lodash":74,"path":undefined}],58:[function(require,module,exports){
var _ = require("lodash");
var minimist = require("minimist");
var Promise = require("bluebird").Promise;

var argument = require("./argument");
var autocomplete = require("./autocomplete");
var autocompleteScript = require("./autocompleteScript");
var command = require("./command");
var option = require("./option");
var parsers = require("./parsers");
var utils = require("./utils");

var cli = module.exports = {};

cli.cli = function(options, cb) {
  options.topLevel = true;
  options.version = typeof options.version !== 'undefined' ? options.version : null;
  options.helpCommand = typeof options.helpCommand !== 'undefined' ? options.helpCommand : true;
  options.options = [ option.helpOption, option.versionOption ].concat(options.options || []);

  if(options.helpCommand) {
    options.commands = [ command.helpCommand ].concat(options.commands || []);
  }

  return command.command(
    options.name || utils.getProcessName(process.argv),
    options,
    cb
  );
};

cli.displayVersion = function(cli) {
  console.log(cli.version !== null ? cli.version : 'N/A');
};

cli.displayUsage = function(cliApp, givenArgs) {
  var context = _.reduce(givenArgs, function(acc, arg) {
    var isDone = acc[0];
    var cmd = _.last(acc[1]);

    var matchingSubcommand = _.find(cmd.commands, function(cmd) {
      return cmd.name === arg;
    });

    if(!isDone && matchingSubcommand) {
      return [false, acc[1].concat(matchingSubcommand)];
    } else {
      return [true, acc[1]];
    }
  }, [false, [cliApp]])[1];

  console.log(command.help(context).trim());
};

cli.displayErrors = function(errors, cliApp, givenArgs) {
  var argsErrors = _.map(errors.args, function(error) {
    if(error.argument) {
      return error.argument.name + ': ' + error.error;
    } else {
      return error.error;
    }
  });
  var optionsErrors = _.map(errors.options, function(error) {
    if(error.option) {
      return error.option.name + ': ' + error.error;
    } else {
      return error.error;
    }
  });

  if(!_.isEmpty(argsErrors)) console.log(argsErrors.join('\n'));
  if(!_.isEmpty(optionsErrors)) console.log(optionsErrors.join('\n'));

  if(!_.isEmpty(argsErrors) || !_.isEmpty(optionsErrors)) console.log();

  cli.displayUsage(cliApp, givenArgs);
};

cli.execute = function(cliApp, args, options) {
  var result = command.parse(cliApp, [], args, options);

  if(parsers.isError(result)) {
    cli.displayErrors(result.error, cliApp, args);
  } else {
    if(!_.last(result.context).action) {
      cli.displayUsage(cliApp, args);
    } else {
      _.last(result.context).action(result.success);
    }
  }
};

cli.autocomplete = function(cliApp, words, index, flagNames, optionNames) {
  if(typeof words !== 'object') words = [words];
  if(index >= words.length) words.push('');
  var opts = {
     string: optionNames.concat(["_"]),
    boolean: flagNames
  }
  var argv = minimist(words, opts);
  var current = words[index] || '';
  var consumedArgs = autocomplete.currentArg(words, index, argv._).consumedArgs;
  var results;

  if(argv._[1] === 'help' && cliApp.helpCommand) {
    results = Promise.resolve(autocomplete.autocompleteHelpCommand(cliApp, _.drop(consumedArgs, 2)));
  } else {
    results = command.autocomplete(
      cliApp,
      _.drop(consumedArgs, 1),
      argv,
      words,
      index,
      []);
  }

  results.then(function(rs) {
    return autocomplete.compgen(rs, current);
  }).then(console.log);
};

cli.cleanArgv = function(argv) {
  // check the command is launched via the node interpreter (+ ensure windows compat)
  if (argv[0].match(/node/)) {
    return _.drop(argv, 2);
  } else {
    return _.drop(argv, 1);
  }
};

cli.parse = function(cliApp, argv) {
  argv = (typeof argv === "undefined") ? process.argv : argv;

  var flagNames = command.getFlagNames(cliApp);
  var optionNames = command.getOptionNames(cliApp);

  var opts = {
    string: optionNames.concat(["autocomplete-words", "_"]), // All other options should be treated as strings (and not coerced)
    boolean: flagNames // Declare flags as not expecting values
  };

  var cliValues = minimist(argv, opts);
  var optionsWithFlagDefaults = _.omit(cliValues, "_");

  // Minimist adds all the names declared as flags even though they are not
  // present (with value false). These interfere with the parsing later, so we
  // remove them here.
  var options = _.fromPairs(_.filter(_.toPairs(optionsWithFlagDefaults), function(kv) {
    return kv[1] || !_.includes(flagNames, kv[0]);
  }));
  var args = cli.cleanArgv(cliValues._);

  if(option.parse(option.helpOption, options).success === true) {
    cli.displayUsage(cliApp, args);
  } else if(!cliApp.noHelpCommand && args[0] === 'help') {
    cli.displayUsage(cliApp, _.drop(args, 1));
  } else if(option.parse(option.versionOption, options).success === true) {
    cli.displayVersion(cliApp);
  } else if(options["bash-autocomplete-script"]) {
    console.log(autocompleteScript.bashScript(options["bash-autocomplete-script"]));
  } else if(options["zsh-autocomplete-script"]) {
    console.log(autocompleteScript.bashScript(options["zsh-autocomplete-script"], true));
  } else if(options["autocomplete-words"] && options["autocomplete-index"]) {
    cli.autocomplete(cliApp, options["autocomplete-words"], options["autocomplete-index"], flagNames, optionNames);
  } else {
    cli.execute(cliApp, args, options);
  }
};

},{"./argument":55,"./autocomplete":56,"./autocompleteScript":57,"./command":60,"./option":61,"./parsers":62,"./utils":63,"bluebird":10,"lodash":74,"minimist":76}],59:[function(require,module,exports){
var minimist = require("minimist");
var _ = require("lodash");

var argument = require("./argument").argument;
var autocomplete = require("./autocomplete.js");
var cli = require("./cli").cli;
var command = require("./command").command;
var flag = require("./option").flag;
var option = require("./option").option;
var parse = require("./cli").parse;
var parsers = require("./parsers");
var utils = require("./utils");

var cliparse = module.exports = {};

cliparse.argument = argument;
cliparse.autocomplete = autocomplete;
cliparse.cli = cli;
cliparse.command = command;
cliparse.flag = flag;
cliparse.option = option;
cliparse.parse = parse;
cliparse.parsers = parsers;

},{"./argument":55,"./autocomplete.js":56,"./cli":58,"./command":60,"./option":61,"./parsers":62,"./utils":63,"lodash":74,"minimist":76}],60:[function(require,module,exports){
var _ = require("lodash");
var Promise = require("bluebird").Promise;

var argument = require("./argument");
var autocomplete = require("./autocomplete");
var option = require("./option");
var parsers = require("./parsers");
var utils = require("./utils");


var command = module.exports = {};

command.command = function(name, options, cb) {
  options = options || {};
  options.name = name;
  options.description = options.description || "";
  options.args = options.args || [];
  options.options = options.options || [];
  options.commands = options.commands || [];
  options.action = typeof cb !== 'undefined' ? cb : null;
  return options;
};

command.autocompleteFinal = function(cmd, argsLeft, argv, words, index, parentOptions) {
  var currentWord = words[index];
  var previousWord = words[index - 1];
  var availOptionNames = autocomplete.empty;
  var availOptionValues = autocomplete.empty;
  var availArg = autocomplete.empty;
  var availCommands = autocomplete.empty;

  var allOptions = parentOptions.concat(cmd.options);

  if(typeof currentWord === 'string' && currentWord.slice(0, 1) === '-') {
    // Complete option name
    availOptionNames = autocomplete.mconcat(_.map(allOptions, option.completeName));
  } else if(typeof previousWord === 'string' && previousWord.slice(0, 1) === '-') {
    // Complete option value
    var name = previousWord.slice(0, 2) === '--' ? previousWord.slice(2) : previousWord.slice(1);
    var previousOption = _.find(allOptions, function(opt) {
      return _.includes(opt.names, name);
    });

    if(previousOption && previousOption.metavar) {
      availOptionValues = option.complete(previousOption, currentWord);
    }
  }

  // Complete commands
  var commandNames = _.map(cmd.commands, 'name');
  availCommands = autocomplete.words(commandNames);
  // Complete argument
  var argIndex = argsLeft.length;
  if(cmd.args[argIndex - 1]) {
    availArg = argument.complete(cmd.args[argIndex - 1], currentWord);
  }

  return Promise.all([availOptionNames, availOptionValues, availArg, availCommands]).then(autocomplete.mconcat);
}

command.autocomplete = function(cmd, argsLeft, argv, words, index, parentOptions) {
  var matchedCommand = _.find(cmd.commands, function(subcommand) {
    return subcommand.name === _.head(argsLeft);
  });
  if(matchedCommand) {
    return command.autocomplete(
      matchedCommand,
      _.drop(argsLeft, 1),
      argv,
      words,
      index,
      parentOptions.concat(cmd.options));
  } else {
    return command.autocompleteFinal(cmd, argsLeft, argv, words, index, parentOptions);
  }
};

command.parseFinal = function(cmd, parentOptions, givenArgs, givenOpts) {
  var result;
  var parsedArguments = argument.parseList(cmd.args, givenArgs);
  var parsedOptions = option.parseObject(cmd.options.concat(parentOptions), givenOpts);

  if(parsers.isSuccess(parsedArguments) && parsers.isSuccess(parsedOptions)) {
    result = parsers.success({
      args: parsedArguments.success,
      options: parsedOptions.success
    });
  } else {
    result = parsers.error({
      args: parsedArguments.error || [],
      options: parsedOptions.error || {}
    });
  }
  result.context = [cmd];

  return result;
};

command.parse = function(cmd, parentOptions, givenArgs, givenOpts) {
  var result;
  var matchedCommand = _.find(cmd.commands, function(subcommand) {
    return subcommand.name === _.head(givenArgs);
  });

  if(matchedCommand) {
    result = command.parse(matchedCommand, cmd.options.concat(parentOptions), _.drop(givenArgs, 1), givenOpts);
    result.context = [cmd].concat(result.context);
  } else {
    result = command.parseFinal(cmd, parentOptions, givenArgs, givenOpts);
  }

  return result;
};

command.singleLineHelp = function(cmd) {
  return [cmd.name + " " + _.map(cmd.arg, argument.help), cmd.description];
};

command.usage = function(context) {
  var cmd = _.last(context);
  var elems = _(context).map(function(cmd) {
    var required = _.filter(cmd.options, function(opt) { return opt.required; });
    return [ cmd.name ].concat(_.map(required, option.usage));
  }).flatten();
  var args = _.map(cmd.args, argument.usage);

  return elems.concat(args).join(' ');
};

command.help = function(context) {
  var options = _.flatten(_.map(context, function(cmd) { return cmd.options; }));

  var usage = "Usage: " + command.usage(context);

  var cmd = _.last(context);
  var argumentHelp = _.map(cmd.args, argument.help);
  var commandsList = _.map(cmd.commands, command.singleLineHelp);
  var optionsList = _.map(options, option.help);

  var leftColumnWidth = 5 + _.max(_.map(argumentHelp.concat(commandsList, optionsList), function(cells) {
    return cells[0].length;
  }));

  var output = usage + '\n';
  if(cmd.description) output += cmd.description + '\n';
  output += '\n';

  if(!_.isEmpty(argumentHelp)) {
    output += 'Arguments:\n';
    _.each(argumentHelp, function(arg) {
      var padding = new Array(leftColumnWidth - arg[0].length + 1).join(' ');
      output += arg[0] + padding + arg[1] +'\n';
    });
    output += '\n';
  }

  if(!_.isEmpty(optionsList)) {
    output += 'Options:\n';
    _.each(optionsList, function(arg) {
      var padding = new Array(leftColumnWidth - arg[0].length + 1).join(' ');
      output += arg[0] + padding + arg[1] +'\n';
    });
    output += '\n';
  }

  if(!_.isEmpty(commandsList)) {
    output += 'Available Commands:\n';
    _.each(commandsList, function(arg) {
      var padding = new Array(leftColumnWidth - arg[0].length + 1).join(' ');
      output += arg[0] + padding + arg[1] +'\n';
    });
    output += '\n';
  }
  return output;
};

command.helpCommand = function() {
  var c = command.command('help', { description: 'display help about this program' });
  c.helpCommand = true;
  return c;
}();

command.getFlagNames = function(cmd) {
  return _([cmd])
    .concat(cmd.commands)
    .flatMap('options')
    .reject(function(opt) { return opt.expects_value; })
    .flatMap('names')
    .uniq()
    .value()
};


command.getOptionNames = function (cmd) {
  return _([cmd])
    .concat(cmd.commands)
    .flatMap('options')
    .filter(function(opt) { return opt.expects_value; })
    .flatMap('names')
    .uniq()
    .value()
}

},{"./argument":55,"./autocomplete":56,"./option":61,"./parsers":62,"./utils":63,"bluebird":10,"lodash":74}],61:[function(require,module,exports){
var _ = require("lodash");

var autocomplete = require("./autocomplete");
var parsers = require("./parsers");
var utils = require("./utils");

var option = module.exports = {};

option.option = function(name, options) {
  options = options || {};
  options.name = name;
  options.names = [options.name].concat(options.aliases || []);
  options.expects_value = (typeof options.expects_value !== 'undefined') ? false : true;
  options.metavar = options.metavar || null;
  options.parser = options.parser || parsers.stringParser;
  options.description = options.description || "";
  options.complete = options.complete || autocomplete.defaultCompleter;
  options.default = (typeof options.default !== 'undefined') ? options.default : null;
  options.required = options.required && !options.defaultValue ? true : false;

  return options;
};

option.parse = function(opt, providedOptions) {
  var result;
  var value = _(opt.names)
    .map(function(name) { return providedOptions[name]; })
    .find(function(v) { return typeof v !== 'undefined'; });

  if(typeof value !== 'undefined' && value !== null) {
    result = opt.parser(value);
  } else if(opt.default !== null || !opt.required) {
    result = parsers.success(opt.default);
  } else {
    result = parsers.error("missing value");
  }
  result.option = opt;

  return result;
};

option.isRecognized = function(options, providedOption) {
  var recognizedNames = _(options).map(function(opt) { return opt.names}).flatten().value();
  return recognizedNames.indexOf(providedOption) >= 0;
};

option.listUnknown = function(options, providedOptions) {
  return _.reject(providedOptions, _.partial(option.isRecognized, options));
};

option.parseObject = function(options, providedOptions) {
  var results = _.map(options, function(opt) {
    return option.parse(opt, providedOptions);
  });


  var unknownOptions = option.listUnknown(options, Object.keys(providedOptions));
  var unknownOptionsErrors = _.map(unknownOptions, function(name) {
    return parsers.error("Unknown option: " + name);
  });

  if(_.every(results, parsers.isSuccess)) {
    if(unknownOptions.length === 0) {
      return parsers.success(_.fromPairs(_.map(results, function(r) {
        return [r.option.name, r.success];
      })));
    } else {
      return parsers.error(unknownOptionsErrors);
    }
  } else {
    return parsers.error(_.filter(results, parsers.isError).concat(unknownOptionsErrors));
  }
};


option.help = function(opt) {
  var output = option.displayOptionNames(opt.names, opt.required, true);
  var description = opt.description;
  if(opt.metavar) output += ' ' + opt.metavar.toUpperCase();
  if(opt.default !== null) description += " (default: " + opt.default + ")";

  return [output, description.trim()];
};

option.usage = function(opt) {
  var output = option.displayOptionNames(opt.names, opt.required, false);
  if(opt.metavar) output += ' ' + opt.metavar.toUpperCase();
  return output;
};

option.flag = function(name, options) {
    options = options || {};
    options.expects_value = false;
    options.parser = parsers.booleanParser;
    if(typeof options.default === 'undefined' && !options.required) options.default = false;
    return option.option(name, options);
};


option.availableOptionsText = function(options) {
  if(_.isEmpty(options)) {
    return '';
  } else {
    return "Available options: \n" + _.map(options, function(opt) {
      var h = option.help(opt);
      // ToDo
      return h[0] + '\t' + h[1];
    }).join('\n');
  }
};

option.displayOptionNames = function(names, required, allNames) {
  var output;
  if(!allNames) {
    names = _.take(names, 1);
  };

  output =  _.map(names, function(name) {
    if(name.length > 1) return '--' + name;
    else return '-' + name;
  }).join(", ");

  if(!required) output = '[' + output + ']';

  return output;
};

option.helpOption = option.flag('help', { aliases: ['?'], description: 'Display help about this program' });
option.versionOption = option.flag('version', { aliases: ['V'], description: 'Display the version of this program' });

option.complete = function(opt, word) {
  return opt.complete(word);
};

option.completeName = function(opt) {
  var names = _.map(opt.names, function(name) {
    if(name.length > 1) return '--' + name;
    else return '-' + name;
  });
  return autocomplete.words(names);
};

},{"./autocomplete":56,"./parsers":62,"./utils":63,"lodash":74}],62:[function(require,module,exports){
var _ = require("lodash");
var fs = require("fs");

var parsers = module.exports = {};

parsers.success = function(value) {
  return { success: value };
};

parsers.error = function(error) {
  return { error: error };
};

parsers.intParser = function(value) {
  var parsed = parseInt(value, 10);
  if(isNaN(value)) {
    return parsers.error("invalid int: " + value);
  } else {
    return parsers.success(parsed);
  }
};

parsers.stringParser = function(value) {
  return parsers.success(value.toString());
};

parsers.booleanParser = function(value) {
  // minimist autoparses stuff anyway…
  if(typeof value === 'boolean') {
    return parsers.success(value);
  } else {
    return parsers.error("invalid boolean: " + value);
  }
};

parsers.existingPathParser = function(value) {
  // Check that the given string is a legit path of a file that exists
  if (fs.existsSync(value)) {
    return parsers.success(value);
  } else {
    return parsers.error('File ' + value + ' does not exist');
  }
};

parsers.fold = function(result, errorCb, successCb) {
  if(_.has(result, "success")) {
    return successCb(result.success);
  } else {
    return errorCb(result.error);
  }
};

parsers.isError = function(result) {
  return parsers.fold(result, function(__) { return true; }, function(__) { return false });
};

parsers.isSuccess = function(result) {
  return !parsers.isError(result);
};

},{"fs":undefined,"lodash":74}],63:[function(require,module,exports){
var _ = require("lodash");

var utils = {
  getProcessName: function(args) {
    if(args[0] === 'node') {
      return _.take(args, 2).join(" ");
    } else {
      return args[0];
    }
  },

  withIndexes: function(vs) {
    return _.reduce(vs, function(r, value) {
        r.vs.push([r.idx, value]);
        return {
          idx: r.idx + 1,
          vs: r.vs
        };
    }, { idx: 0, vs: []}).vs;
  },

  isError: function(x) {
    return _.has(x, "errors");
  },

  isValid: function(x) {
    return _.has(x, "success");
  },

  areValid: function(xs) {
    return _.every(xs, this.isValid);
  },

  isValidOption: function(x) {
    return _.has(x[1], "success");
  },

  areValidOptions: function(xs) {
      return _.every(xs, this.isValidOption);
  }
};

module.exports = utils;

},{"lodash":74}],64:[function(require,module,exports){
module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],65:[function(require,module,exports){
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */

'use strict';

const util = require('util');
const toRegexRange = require('to-regex-range');

const isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);

const transform = toNumber => {
  return value => toNumber === true ? Number(value) : String(value);
};

const isValidValue = value => {
  return typeof value === 'number' || (typeof value === 'string' && value !== '');
};

const isNumber = num => Number.isInteger(+num);

const zeros = input => {
  let value = `${input}`;
  let index = -1;
  if (value[0] === '-') value = value.slice(1);
  if (value === '0') return false;
  while (value[++index] === '0');
  return index > 0;
};

const stringify = (start, end, options) => {
  if (typeof start === 'string' || typeof end === 'string') {
    return true;
  }
  return options.stringify === true;
};

const pad = (input, maxLength, toNumber) => {
  if (maxLength > 0) {
    let dash = input[0] === '-' ? '-' : '';
    if (dash) input = input.slice(1);
    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));
  }
  if (toNumber === false) {
    return String(input);
  }
  return input;
};

const toMaxLen = (input, maxLength) => {
  let negative = input[0] === '-' ? '-' : '';
  if (negative) {
    input = input.slice(1);
    maxLength--;
  }
  while (input.length < maxLength) input = '0' + input;
  return negative ? ('-' + input) : input;
};

const toSequence = (parts, options) => {
  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);

  let prefix = options.capture ? '' : '?:';
  let positives = '';
  let negatives = '';
  let result;

  if (parts.positives.length) {
    positives = parts.positives.join('|');
  }

  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.join('|')})`;
  }

  if (positives && negatives) {
    result = `${positives}|${negatives}`;
  } else {
    result = positives || negatives;
  }

  if (options.wrap) {
    return `(${prefix}${result})`;
  }

  return result;
};

const toRange = (a, b, isNumbers, options) => {
  if (isNumbers) {
    return toRegexRange(a, b, { wrap: false, ...options });
  }

  let start = String.fromCharCode(a);
  if (a === b) return start;

  let stop = String.fromCharCode(b);
  return `[${start}-${stop}]`;
};

const toRegex = (start, end, options) => {
  if (Array.isArray(start)) {
    let wrap = options.wrap === true;
    let prefix = options.capture ? '' : '?:';
    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');
  }
  return toRegexRange(start, end, options);
};

const rangeError = (...args) => {
  return new RangeError('Invalid range arguments: ' + util.inspect(...args));
};

const invalidRange = (start, end, options) => {
  if (options.strictRanges === true) throw rangeError([start, end]);
  return [];
};

const invalidStep = (step, options) => {
  if (options.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`);
  }
  return [];
};

const fillNumbers = (start, end, step = 1, options = {}) => {
  let a = Number(start);
  let b = Number(end);

  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options.strictRanges === true) throw rangeError([start, end]);
    return [];
  }

  // fix negative zero
  if (a === 0) a = 0;
  if (b === 0) b = 0;

  let descending = a > b;
  let startString = String(start);
  let endString = String(end);
  let stepString = String(step);
  step = Math.max(Math.abs(step), 1);

  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
  let toNumber = padded === false && stringify(start, end, options) === false;
  let format = options.transform || transform(toNumber);

  if (options.toRegex && step === 1) {
    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
  }

  let parts = { negatives: [], positives: [] };
  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));
  let range = [];
  let index = 0;

  while (descending ? a >= b : a <= b) {
    if (options.toRegex === true && step > 1) {
      push(a);
    } else {
      range.push(pad(format(a, index), maxLen, toNumber));
    }
    a = descending ? a - step : a + step;
    index++;
  }

  if (options.toRegex === true) {
    return step > 1
      ? toSequence(parts, options)
      : toRegex(range, null, { wrap: false, ...options });
  }

  return range;
};

const fillLetters = (start, end, step = 1, options = {}) => {
  if ((!isNumber(start) && start.length > 1) || (!isNumber(end) && end.length > 1)) {
    return invalidRange(start, end, options);
  }


  let format = options.transform || (val => String.fromCharCode(val));
  let a = `${start}`.charCodeAt(0);
  let b = `${end}`.charCodeAt(0);

  let descending = a > b;
  let min = Math.min(a, b);
  let max = Math.max(a, b);

  if (options.toRegex && step === 1) {
    return toRange(min, max, false, options);
  }

  let range = [];
  let index = 0;

  while (descending ? a >= b : a <= b) {
    range.push(format(a, index));
    a = descending ? a - step : a + step;
    index++;
  }

  if (options.toRegex === true) {
    return toRegex(range, null, { wrap: false, options });
  }

  return range;
};

const fill = (start, end, step, options = {}) => {
  if (end == null && isValidValue(start)) {
    return [start];
  }

  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options);
  }

  if (typeof step === 'function') {
    return fill(start, end, 1, { transform: step });
  }

  if (isObject(step)) {
    return fill(start, end, 0, step);
  }

  let opts = { ...options };
  if (opts.capture === true) opts.wrap = true;
  step = step || opts.step || 1;

  if (!isNumber(step)) {
    if (step != null && !isObject(step)) return invalidStep(step, opts);
    return fill(start, end, 1, step);
  }

  if (isNumber(start) && isNumber(end)) {
    return fillNumbers(start, end, step, opts);
  }

  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
};

module.exports = fill;

},{"to-regex-range":97,"util":undefined}],66:[function(require,module,exports){
'use strict';

var isGlob = require('is-glob');
var pathPosixDirname = require('path').posix.dirname;
var isWin32 = require('os').platform() === 'win32';

var slash = '/';
var backslash = /\\/g;
var enclosure = /[\{\[].*[\/]*.*[\}\]]$/;
var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
var escaped = /\\([\*\?\|\[\]\(\)\{\}])/g;

/**
 * @param {string} str
 * @param {Object} opts
 * @param {boolean} [opts.flipBackslashes=true]
 */
module.exports = function globParent(str, opts) {
  var options = Object.assign({ flipBackslashes: true }, opts);

  // flip windows path separators
  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
    str = str.replace(backslash, slash);
  }

  // special case for strings ending in enclosure containing path separator
  if (enclosure.test(str)) {
    str += slash;
  }

  // preserves full path in case of trailing path separator
  str += 'a';

  // remove path parts that are globby
  do {
    str = pathPosixDirname(str);
  } while (isGlob(str) || globby.test(str));

  // remove escape chars and return result
  return str.replace(escaped, '$1');
};

},{"is-glob":72,"os":undefined,"path":undefined}],67:[function(require,module,exports){
var wrappy = require('wrappy')
var reqs = Object.create(null)
var once = require('once')

module.exports = wrappy(inflight)

function inflight (key, cb) {
  if (reqs[key]) {
    reqs[key].push(cb)
    return null
  } else {
    reqs[key] = [cb]
    return makeres(key)
  }
}

function makeres (key) {
  return once(function RES () {
    var cbs = reqs[key]
    var len = cbs.length
    var args = slice(arguments)

    // XXX It's somewhat ambiguous whether a new callback added in this
    // pass should be queued for later execution if something in the
    // list of callbacks throws, or if it should just be discarded.
    // However, it's such an edge case that it hardly matters, and either
    // choice is likely as surprising as the other.
    // As it happens, we do go ahead and schedule it for later execution.
    try {
      for (var i = 0; i < len; i++) {
        cbs[i].apply(null, args)
      }
    } finally {
      if (cbs.length > len) {
        // added more in the interim.
        // de-zalgo, just in case, but don't call again.
        cbs.splice(0, len)
        process.nextTick(function () {
          RES.apply(null, args)
        })
      } else {
        delete reqs[key]
      }
    }
  })
}

function slice (args) {
  var length = args.length
  var array = []

  for (var i = 0; i < length; i++) array[i] = args[i]
  return array
}

},{"once":78,"wrappy":98}],68:[function(require,module,exports){
try {
  var util = require('util');
  if (typeof util.inherits !== 'function') throw '';
  module.exports = util.inherits;
} catch (e) {
  module.exports = require('./inherits_browser.js');
}

},{"./inherits_browser.js":69,"util":undefined}],69:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],70:[function(require,module,exports){
'use strict';
const path = require('path');
const binaryExtensions = require('binary-extensions');

const extensions = new Set(binaryExtensions);

module.exports = filePath => extensions.has(path.extname(filePath).slice(1).toLowerCase());

},{"binary-extensions":6,"path":undefined}],71:[function(require,module,exports){
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */

module.exports = function isExtglob(str) {
  if (typeof str !== 'string' || str === '') {
    return false;
  }

  var match;
  while ((match = /(\\).|([@?!+*]\(.*\))/g.exec(str))) {
    if (match[2]) return true;
    str = str.slice(match.index + match[0].length);
  }

  return false;
};

},{}],72:[function(require,module,exports){
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isExtglob = require('is-extglob');
var chars = { '{': '}', '(': ')', '[': ']'};
var strictRegex = /\\(.)|(^!|\*|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/;
var relaxedRegex = /\\(.)|(^!|[*?{}()[\]]|\(\?)/;

module.exports = function isGlob(str, options) {
  if (typeof str !== 'string' || str === '') {
    return false;
  }

  if (isExtglob(str)) {
    return true;
  }

  var regex = strictRegex;
  var match;

  // optionally relax regex
  if (options && options.strict === false) {
    regex = relaxedRegex;
  }

  while ((match = regex.exec(str))) {
    if (match[2]) return true;
    var idx = match.index + match[0].length;

    // if an open bracket/brace/paren is escaped,
    // set the index to the next closing character
    var open = match[1];
    var close = open ? chars[open] : null;
    if (open && close) {
      var n = str.indexOf(close, idx);
      if (n !== -1) {
        idx = n + 1;
      }
    }

    str = str.slice(idx);
  }
  return false;
};

},{"is-extglob":71}],73:[function(require,module,exports){
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */

'use strict';

module.exports = function(num) {
  if (typeof num === 'number') {
    return num - num === 0;
  }
  if (typeof num === 'string' && num.trim() !== '') {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
  }
  return false;
};

},{}],74:[function(require,module,exports){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.14';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      // Like with sourceURL, we take care to not check the option's prototype,
      // as this configuration is a code injection vector.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

},{}],75:[function(require,module,exports){
module.exports = minimatch
minimatch.Minimatch = Minimatch

var path = { sep: '/' }
try {
  path = require('path')
} catch (er) {}

var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
var expand = require('brace-expansion')

var plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
var qmark = '[^/]'

// * => any number of characters
var star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// characters that need to be escaped in RegExp.
var reSpecials = charSet('().*{}+?[]^$\\!')

// "abc" -> { a:true, b:true, c:true }
function charSet (s) {
  return s.split('').reduce(function (set, c) {
    set[c] = true
    return set
  }, {})
}

// normalizes slashes.
var slashSplit = /\/+/

minimatch.filter = filter
function filter (pattern, options) {
  options = options || {}
  return function (p, i, list) {
    return minimatch(p, pattern, options)
  }
}

function ext (a, b) {
  a = a || {}
  b = b || {}
  var t = {}
  Object.keys(b).forEach(function (k) {
    t[k] = b[k]
  })
  Object.keys(a).forEach(function (k) {
    t[k] = a[k]
  })
  return t
}

minimatch.defaults = function (def) {
  if (!def || !Object.keys(def).length) return minimatch

  var orig = minimatch

  var m = function minimatch (p, pattern, options) {
    return orig.minimatch(p, pattern, ext(def, options))
  }

  m.Minimatch = function Minimatch (pattern, options) {
    return new orig.Minimatch(pattern, ext(def, options))
  }

  return m
}

Minimatch.defaults = function (def) {
  if (!def || !Object.keys(def).length) return Minimatch
  return minimatch.defaults(def).Minimatch
}

function minimatch (p, pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('glob pattern string required')
  }

  if (!options) options = {}

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  // "" only matches ""
  if (pattern.trim() === '') return p === ''

  return new Minimatch(pattern, options).match(p)
}

function Minimatch (pattern, options) {
  if (!(this instanceof Minimatch)) {
    return new Minimatch(pattern, options)
  }

  if (typeof pattern !== 'string') {
    throw new TypeError('glob pattern string required')
  }

  if (!options) options = {}
  pattern = pattern.trim()

  // windows support: need to use /, not \
  if (path.sep !== '/') {
    pattern = pattern.split(path.sep).join('/')
  }

  this.options = options
  this.set = []
  this.pattern = pattern
  this.regexp = null
  this.negate = false
  this.comment = false
  this.empty = false

  // make the set of regexps etc.
  this.make()
}

Minimatch.prototype.debug = function () {}

Minimatch.prototype.make = make
function make () {
  // don't do it more than once.
  if (this._made) return

  var pattern = this.pattern
  var options = this.options

  // empty patterns and comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    this.comment = true
    return
  }
  if (!pattern) {
    this.empty = true
    return
  }

  // step 1: figure out negation, etc.
  this.parseNegate()

  // step 2: expand braces
  var set = this.globSet = this.braceExpand()

  if (options.debug) this.debug = console.error

  this.debug(this.pattern, set)

  // step 3: now we have a set, so turn each one into a series of path-portion
  // matching patterns.
  // These will be regexps, except in the case of "**", which is
  // set to the GLOBSTAR object for globstar behavior,
  // and will not contain any / characters
  set = this.globParts = set.map(function (s) {
    return s.split(slashSplit)
  })

  this.debug(this.pattern, set)

  // glob --> regexps
  set = set.map(function (s, si, set) {
    return s.map(this.parse, this)
  }, this)

  this.debug(this.pattern, set)

  // filter out everything that didn't compile properly.
  set = set.filter(function (s) {
    return s.indexOf(false) === -1
  })

  this.debug(this.pattern, set)

  this.set = set
}

Minimatch.prototype.parseNegate = parseNegate
function parseNegate () {
  var pattern = this.pattern
  var negate = false
  var options = this.options
  var negateOffset = 0

  if (options.nonegate) return

  for (var i = 0, l = pattern.length
    ; i < l && pattern.charAt(i) === '!'
    ; i++) {
    negate = !negate
    negateOffset++
  }

  if (negateOffset) this.pattern = pattern.substr(negateOffset)
  this.negate = negate
}

// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = function (pattern, options) {
  return braceExpand(pattern, options)
}

Minimatch.prototype.braceExpand = braceExpand

function braceExpand (pattern, options) {
  if (!options) {
    if (this instanceof Minimatch) {
      options = this.options
    } else {
      options = {}
    }
  }

  pattern = typeof pattern === 'undefined'
    ? this.pattern : pattern

  if (typeof pattern === 'undefined') {
    throw new TypeError('undefined pattern')
  }

  if (options.nobrace ||
    !pattern.match(/\{.*\}/)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
Minimatch.prototype.parse = parse
var SUBPARSE = {}
function parse (pattern, isSub) {
  if (pattern.length > 1024 * 64) {
    throw new TypeError('pattern is too long')
  }

  var options = this.options

  // shortcuts
  if (!options.noglobstar && pattern === '**') return GLOBSTAR
  if (pattern === '') return ''

  var re = ''
  var hasMagic = !!options.nocase
  var escaping = false
  // ? => one single character
  var patternListStack = []
  var negativeLists = []
  var stateChar
  var inClass = false
  var reClassStart = -1
  var classStart = -1
  // . and .. never match anything that doesn't start with .,
  // even when options.dot is set.
  var patternStart = pattern.charAt(0) === '.' ? '' // anything
  // not (start or / followed by . or .. followed by / or end)
  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
  : '(?!\\.)'
  var self = this

  function clearStateChar () {
    if (stateChar) {
      // we had some state-tracking character
      // that wasn't consumed by this pass.
      switch (stateChar) {
        case '*':
          re += star
          hasMagic = true
        break
        case '?':
          re += qmark
          hasMagic = true
        break
        default:
          re += '\\' + stateChar
        break
      }
      self.debug('clearStateChar %j %j', stateChar, re)
      stateChar = false
    }
  }

  for (var i = 0, len = pattern.length, c
    ; (i < len) && (c = pattern.charAt(i))
    ; i++) {
    this.debug('%s\t%s %s %j', pattern, i, re, c)

    // skip over any that are escaped.
    if (escaping && reSpecials[c]) {
      re += '\\' + c
      escaping = false
      continue
    }

    switch (c) {
      case '/':
        // completely not allowed, even escaped.
        // Should already be path-split by now.
        return false

      case '\\':
        clearStateChar()
        escaping = true
      continue

      // the various stateChar values
      // for the "extglob" stuff.
      case '?':
      case '*':
      case '+':
      case '@':
      case '!':
        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

        // all of those are literals inside a class, except that
        // the glob [!a] means [^a] in regexp
        if (inClass) {
          this.debug('  in class')
          if (c === '!' && i === classStart + 1) c = '^'
          re += c
          continue
        }

        // if we already have a stateChar, then it means
        // that there was something like ** or +? in there.
        // Handle the stateChar, then proceed with this one.
        self.debug('call clearStateChar %j', stateChar)
        clearStateChar()
        stateChar = c
        // if extglob is disabled, then +(asdf|foo) isn't a thing.
        // just clear the statechar *now*, rather than even diving into
        // the patternList stuff.
        if (options.noext) clearStateChar()
      continue

      case '(':
        if (inClass) {
          re += '('
          continue
        }

        if (!stateChar) {
          re += '\\('
          continue
        }

        patternListStack.push({
          type: stateChar,
          start: i - 1,
          reStart: re.length,
          open: plTypes[stateChar].open,
          close: plTypes[stateChar].close
        })
        // negation is (?:(?!js)[^/]*)
        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
        this.debug('plType %j %j', stateChar, re)
        stateChar = false
      continue

      case ')':
        if (inClass || !patternListStack.length) {
          re += '\\)'
          continue
        }

        clearStateChar()
        hasMagic = true
        var pl = patternListStack.pop()
        // negation is (?:(?!js)[^/]*)
        // The others are (?:<pattern>)<type>
        re += pl.close
        if (pl.type === '!') {
          negativeLists.push(pl)
        }
        pl.reEnd = re.length
      continue

      case '|':
        if (inClass || !patternListStack.length || escaping) {
          re += '\\|'
          escaping = false
          continue
        }

        clearStateChar()
        re += '|'
      continue

      // these are mostly the same in regexp and glob
      case '[':
        // swallow any state-tracking char before the [
        clearStateChar()

        if (inClass) {
          re += '\\' + c
          continue
        }

        inClass = true
        classStart = i
        reClassStart = re.length
        re += c
      continue

      case ']':
        //  a right bracket shall lose its special
        //  meaning and represent itself in
        //  a bracket expression if it occurs
        //  first in the list.  -- POSIX.2 2.8.3.2
        if (i === classStart + 1 || !inClass) {
          re += '\\' + c
          escaping = false
          continue
        }

        // handle the case where we left a class open.
        // "[z-a]" is valid, equivalent to "\[z-a\]"
        if (inClass) {
          // split where the last [ was, make sure we don't have
          // an invalid re. if so, re-walk the contents of the
          // would-be class to re-translate any characters that
          // were passed through as-is
          // TODO: It would probably be faster to determine this
          // without a try/catch and a new RegExp, but it's tricky
          // to do safely.  For now, this is safe and works.
          var cs = pattern.substring(classStart + 1, i)
          try {
            RegExp('[' + cs + ']')
          } catch (er) {
            // not a valid class!
            var sp = this.parse(cs, SUBPARSE)
            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
            hasMagic = hasMagic || sp[1]
            inClass = false
            continue
          }
        }

        // finish up the class.
        hasMagic = true
        inClass = false
        re += c
      continue

      default:
        // swallow any state char that wasn't consumed
        clearStateChar()

        if (escaping) {
          // no need
          escaping = false
        } else if (reSpecials[c]
          && !(c === '^' && inClass)) {
          re += '\\'
        }

        re += c

    } // switch
  } // for

  // handle the case where we left a class open.
  // "[abc" is valid, equivalent to "\[abc"
  if (inClass) {
    // split where the last [ was, and escape it
    // this is a huge pita.  We now have to re-walk
    // the contents of the would-be class to re-translate
    // any characters that were passed through as-is
    cs = pattern.substr(classStart + 1)
    sp = this.parse(cs, SUBPARSE)
    re = re.substr(0, reClassStart) + '\\[' + sp[0]
    hasMagic = hasMagic || sp[1]
  }

  // handle the case where we had a +( thing at the *end*
  // of the pattern.
  // each pattern list stack adds 3 chars, and we need to go through
  // and escape any | chars that were passed through as-is for the regexp.
  // Go through and escape them, taking care not to double-escape any
  // | chars that were already escaped.
  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
    var tail = re.slice(pl.reStart + pl.open.length)
    this.debug('setting tail', re, pl)
    // maybe some even number of \, then maybe 1 \, followed by a |
    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
      if (!$2) {
        // the | isn't already escaped, so escape it.
        $2 = '\\'
      }

      // need to escape all those slashes *again*, without escaping the
      // one that we need for escaping the | character.  As it works out,
      // escaping an even number of slashes can be done by simply repeating
      // it exactly after itself.  That's why this trick works.
      //
      // I am sorry that you have to see this.
      return $1 + $1 + $2 + '|'
    })

    this.debug('tail=%j\n   %s', tail, tail, pl, re)
    var t = pl.type === '*' ? star
      : pl.type === '?' ? qmark
      : '\\' + pl.type

    hasMagic = true
    re = re.slice(0, pl.reStart) + t + '\\(' + tail
  }

  // handle trailing things that only matter at the very end.
  clearStateChar()
  if (escaping) {
    // trailing \\
    re += '\\\\'
  }

  // only need to apply the nodot start if the re starts with
  // something that could conceivably capture a dot
  var addPatternStart = false
  switch (re.charAt(0)) {
    case '.':
    case '[':
    case '(': addPatternStart = true
  }

  // Hack to work around lack of negative lookbehind in JS
  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
  // like 'a.xyz.yz' doesn't match.  So, the first negative
  // lookahead, has to look ALL the way ahead, to the end of
  // the pattern.
  for (var n = negativeLists.length - 1; n > -1; n--) {
    var nl = negativeLists[n]

    var nlBefore = re.slice(0, nl.reStart)
    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
    var nlAfter = re.slice(nl.reEnd)

    nlLast += nlAfter

    // Handle nested stuff like *(*.js|!(*.json)), where open parens
    // mean that we should *not* include the ) in the bit that is considered
    // "after" the negated section.
    var openParensBefore = nlBefore.split('(').length - 1
    var cleanAfter = nlAfter
    for (i = 0; i < openParensBefore; i++) {
      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
    }
    nlAfter = cleanAfter

    var dollar = ''
    if (nlAfter === '' && isSub !== SUBPARSE) {
      dollar = '$'
    }
    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
    re = newRe
  }

  // if the re is not "" at this point, then we need to make sure
  // it doesn't match against an empty path part.
  // Otherwise a/* will match a/, which it should not.
  if (re !== '' && hasMagic) {
    re = '(?=.)' + re
  }

  if (addPatternStart) {
    re = patternStart + re
  }

  // parsing just a piece of a larger pattern.
  if (isSub === SUBPARSE) {
    return [re, hasMagic]
  }

  // skip the regexp for non-magical patterns
  // unescape anything in it, though, so that it'll be
  // an exact match against a file etc.
  if (!hasMagic) {
    return globUnescape(pattern)
  }

  var flags = options.nocase ? 'i' : ''
  try {
    var regExp = new RegExp('^' + re + '$', flags)
  } catch (er) {
    // If it was an invalid regular expression, then it can't match
    // anything.  This trick looks for a character after the end of
    // the string, which is of course impossible, except in multi-line
    // mode, but it's not a /m regex.
    return new RegExp('$.')
  }

  regExp._glob = pattern
  regExp._src = re

  return regExp
}

minimatch.makeRe = function (pattern, options) {
  return new Minimatch(pattern, options || {}).makeRe()
}

Minimatch.prototype.makeRe = makeRe
function makeRe () {
  if (this.regexp || this.regexp === false) return this.regexp

  // at this point, this.set is a 2d array of partial
  // pattern strings, or "**".
  //
  // It's better to use .match().  This function shouldn't
  // be used, really, but it's pretty convenient sometimes,
  // when you just want to work with a regex.
  var set = this.set

  if (!set.length) {
    this.regexp = false
    return this.regexp
  }
  var options = this.options

  var twoStar = options.noglobstar ? star
    : options.dot ? twoStarDot
    : twoStarNoDot
  var flags = options.nocase ? 'i' : ''

  var re = set.map(function (pattern) {
    return pattern.map(function (p) {
      return (p === GLOBSTAR) ? twoStar
      : (typeof p === 'string') ? regExpEscape(p)
      : p._src
    }).join('\\\/')
  }).join('|')

  // must match entire pattern
  // ending in a * or ** will make it less strict.
  re = '^(?:' + re + ')$'

  // can match anything, as long as it's not this.
  if (this.negate) re = '^(?!' + re + ').*$'

  try {
    this.regexp = new RegExp(re, flags)
  } catch (ex) {
    this.regexp = false
  }
  return this.regexp
}

minimatch.match = function (list, pattern, options) {
  options = options || {}
  var mm = new Minimatch(pattern, options)
  list = list.filter(function (f) {
    return mm.match(f)
  })
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

Minimatch.prototype.match = match
function match (f, partial) {
  this.debug('match', f, this.pattern)
  // short-circuit in the case of busted things.
  // comments, etc.
  if (this.comment) return false
  if (this.empty) return f === ''

  if (f === '/' && partial) return true

  var options = this.options

  // windows: need to use /, not \
  if (path.sep !== '/') {
    f = f.split(path.sep).join('/')
  }

  // treat the test path as a set of pathparts.
  f = f.split(slashSplit)
  this.debug(this.pattern, 'split', f)

  // just ONE of the pattern sets in this.set needs to match
  // in order for it to be valid.  If negating, then just one
  // match means that we have failed.
  // Either way, return on the first hit.

  var set = this.set
  this.debug(this.pattern, 'set', set)

  // Find the basename of the path by looking for the last non-empty segment
  var filename
  var i
  for (i = f.length - 1; i >= 0; i--) {
    filename = f[i]
    if (filename) break
  }

  for (i = 0; i < set.length; i++) {
    var pattern = set[i]
    var file = f
    if (options.matchBase && pattern.length === 1) {
      file = [filename]
    }
    var hit = this.matchOne(file, pattern, partial)
    if (hit) {
      if (options.flipNegate) return true
      return !this.negate
    }
  }

  // didn't get any hits.  this is success if it's a negative
  // pattern, failure otherwise.
  if (options.flipNegate) return false
  return this.negate
}

// set partial to true to test if, for example,
// "/a/b" matches the start of "/*/b/*/d"
// Partial means, if you run out of file before you run
// out of pattern, then that's fine, as long as all
// the parts match.
Minimatch.prototype.matchOne = function (file, pattern, partial) {
  var options = this.options

  this.debug('matchOne',
    { 'this': this, file: file, pattern: pattern })

  this.debug('matchOne', file.length, pattern.length)

  for (var fi = 0,
      pi = 0,
      fl = file.length,
      pl = pattern.length
      ; (fi < fl) && (pi < pl)
      ; fi++, pi++) {
    this.debug('matchOne loop')
    var p = pattern[pi]
    var f = file[fi]

    this.debug(pattern, p, f)

    // should be impossible.
    // some invalid regexp stuff in the set.
    if (p === false) return false

    if (p === GLOBSTAR) {
      this.debug('GLOBSTAR', [pattern, p, f])

      // "**"
      // a/**/b/**/c would match the following:
      // a/b/x/y/z/c
      // a/x/y/z/b/c
      // a/b/x/b/x/c
      // a/b/c
      // To do this, take the rest of the pattern after
      // the **, and see if it would match the file remainder.
      // If so, return success.
      // If not, the ** "swallows" a segment, and try again.
      // This is recursively awful.
      //
      // a/**/b/**/c matching a/b/x/y/z/c
      // - a matches a
      // - doublestar
      //   - matchOne(b/x/y/z/c, b/**/c)
      //     - b matches b
      //     - doublestar
      //       - matchOne(x/y/z/c, c) -> no
      //       - matchOne(y/z/c, c) -> no
      //       - matchOne(z/c, c) -> no
      //       - matchOne(c, c) yes, hit
      var fr = fi
      var pr = pi + 1
      if (pr === pl) {
        this.debug('** at the end')
        // a ** at the end will just swallow the rest.
        // We have found a match.
        // however, it will not swallow /.x, unless
        // options.dot is set.
        // . and .. are *never* matched by **, for explosively
        // exponential reasons.
        for (; fi < fl; fi++) {
          if (file[fi] === '.' || file[fi] === '..' ||
            (!options.dot && file[fi].charAt(0) === '.')) return false
        }
        return true
      }

      // ok, let's see if we can swallow whatever we can.
      while (fr < fl) {
        var swallowee = file[fr]

        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

        // XXX remove this slice.  Just pass the start index.
        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
          this.debug('globstar found match!', fr, fl, swallowee)
          // found a match.
          return true
        } else {
          // can't swallow "." or ".." ever.
          // can only swallow ".foo" when explicitly asked.
          if (swallowee === '.' || swallowee === '..' ||
            (!options.dot && swallowee.charAt(0) === '.')) {
            this.debug('dot detected!', file, fr, pattern, pr)
            break
          }

          // ** swallows a segment, and continue.
          this.debug('globstar swallow a segment, and continue')
          fr++
        }
      }

      // no match was found.
      // However, in partial mode, we can't say this is necessarily over.
      // If there's more *pattern* left, then
      if (partial) {
        // ran out of file
        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
        if (fr === fl) return true
      }
      return false
    }

    // something other than **
    // non-magic patterns just have to match exactly
    // patterns with magic have been turned into regexps.
    var hit
    if (typeof p === 'string') {
      if (options.nocase) {
        hit = f.toLowerCase() === p.toLowerCase()
      } else {
        hit = f === p
      }
      this.debug('string match', p, f, hit)
    } else {
      hit = f.match(p)
      this.debug('pattern match', p, f, hit)
    }

    if (!hit) return false
  }

  // Note: ending in / means that we'll get a final ""
  // at the end of the pattern.  This can only match a
  // corresponding "" at the end of the file.
  // If the file ends in /, then it can only match a
  // a pattern that ends in /, unless the pattern just
  // doesn't have any more for it. But, a/b/ should *not*
  // match "a/b/*", even though "" matches against the
  // [^/]*? pattern, except in partial mode, where it might
  // simply not be reached yet.
  // However, a/b/ should still satisfy a/*

  // now either we fell off the end of the pattern, or we're done.
  if (fi === fl && pi === pl) {
    // ran out of pattern and filename at the same time.
    // an exact hit!
    return true
  } else if (fi === fl) {
    // ran out of file, but still had pattern left.
    // this is ok if we're doing the match as part of
    // a glob fs traversal.
    return partial
  } else if (pi === pl) {
    // ran out of pattern, still have file left.
    // this is only acceptable if we're on the very last
    // empty segment of a file with a trailing slash.
    // a/* should match a/b/
    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
    return emptyFileEnd
  }

  // should be unreachable.
  throw new Error('wtf?')
}

// replace stuff like \* with *
function globUnescape (s) {
  return s.replace(/\\(.)/g, '$1')
}

function regExpEscape (s) {
  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
}

},{"brace-expansion":43,"path":undefined}],76:[function(require,module,exports){
module.exports = function (args, opts) {
    if (!opts) opts = {};
    
    var flags = { bools : {}, strings : {}, unknownFn: null };

    if (typeof opts['unknown'] === 'function') {
        flags.unknownFn = opts['unknown'];
    }

    if (typeof opts['boolean'] === 'boolean' && opts['boolean']) {
      flags.allBools = true;
    } else {
      [].concat(opts['boolean']).filter(Boolean).forEach(function (key) {
          flags.bools[key] = true;
      });
    }
    
    var aliases = {};
    Object.keys(opts.alias || {}).forEach(function (key) {
        aliases[key] = [].concat(opts.alias[key]);
        aliases[key].forEach(function (x) {
            aliases[x] = [key].concat(aliases[key].filter(function (y) {
                return x !== y;
            }));
        });
    });

    [].concat(opts.string).filter(Boolean).forEach(function (key) {
        flags.strings[key] = true;
        if (aliases[key]) {
            flags.strings[aliases[key]] = true;
        }
     });

    var defaults = opts['default'] || {};
    
    var argv = { _ : [] };
    Object.keys(flags.bools).forEach(function (key) {
        setArg(key, defaults[key] === undefined ? false : defaults[key]);
    });
    
    var notFlags = [];

    if (args.indexOf('--') !== -1) {
        notFlags = args.slice(args.indexOf('--')+1);
        args = args.slice(0, args.indexOf('--'));
    }

    function argDefined(key, arg) {
        return (flags.allBools && /^--[^=]+$/.test(arg)) ||
            flags.strings[key] || flags.bools[key] || aliases[key];
    }

    function setArg (key, val, arg) {
        if (arg && flags.unknownFn && !argDefined(key, arg)) {
            if (flags.unknownFn(arg) === false) return;
        }

        var value = !flags.strings[key] && isNumber(val)
            ? Number(val) : val
        ;
        setKey(argv, key.split('.'), value);
        
        (aliases[key] || []).forEach(function (x) {
            setKey(argv, x.split('.'), value);
        });
    }

    function setKey (obj, keys, value) {
        var o = obj;
        keys.slice(0,-1).forEach(function (key) {
            if (o[key] === undefined) o[key] = {};
            o = o[key];
        });

        var key = keys[keys.length - 1];
        if (o[key] === undefined || flags.bools[key] || typeof o[key] === 'boolean') {
            o[key] = value;
        }
        else if (Array.isArray(o[key])) {
            o[key].push(value);
        }
        else {
            o[key] = [ o[key], value ];
        }
    }
    
    function aliasIsBoolean(key) {
      return aliases[key].some(function (x) {
          return flags.bools[x];
      });
    }

    for (var i = 0; i < args.length; i++) {
        var arg = args[i];
        
        if (/^--.+=/.test(arg)) {
            // Using [\s\S] instead of . because js doesn't support the
            // 'dotall' regex modifier. See:
            // http://stackoverflow.com/a/1068308/13216
            var m = arg.match(/^--([^=]+)=([\s\S]*)$/);
            var key = m[1];
            var value = m[2];
            if (flags.bools[key]) {
                value = value !== 'false';
            }
            setArg(key, value, arg);
        }
        else if (/^--no-.+/.test(arg)) {
            var key = arg.match(/^--no-(.+)/)[1];
            setArg(key, false, arg);
        }
        else if (/^--.+/.test(arg)) {
            var key = arg.match(/^--(.+)/)[1];
            var next = args[i + 1];
            if (next !== undefined && !/^-/.test(next)
            && !flags.bools[key]
            && !flags.allBools
            && (aliases[key] ? !aliasIsBoolean(key) : true)) {
                setArg(key, next, arg);
                i++;
            }
            else if (/^(true|false)$/.test(next)) {
                setArg(key, next === 'true', arg);
                i++;
            }
            else {
                setArg(key, flags.strings[key] ? '' : true, arg);
            }
        }
        else if (/^-[^-]+/.test(arg)) {
            var letters = arg.slice(1,-1).split('');
            
            var broken = false;
            for (var j = 0; j < letters.length; j++) {
                var next = arg.slice(j+2);
                
                if (next === '-') {
                    setArg(letters[j], next, arg)
                    continue;
                }
                
                if (/[A-Za-z]/.test(letters[j]) && /=/.test(next)) {
                    setArg(letters[j], next.split('=')[1], arg);
                    broken = true;
                    break;
                }
                
                if (/[A-Za-z]/.test(letters[j])
                && /-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) {
                    setArg(letters[j], next, arg);
                    broken = true;
                    break;
                }
                
                if (letters[j+1] && letters[j+1].match(/\W/)) {
                    setArg(letters[j], arg.slice(j+2), arg);
                    broken = true;
                    break;
                }
                else {
                    setArg(letters[j], flags.strings[letters[j]] ? '' : true, arg);
                }
            }
            
            var key = arg.slice(-1)[0];
            if (!broken && key !== '-') {
                if (args[i+1] && !/^(-|--)[^-]/.test(args[i+1])
                && !flags.bools[key]
                && (aliases[key] ? !aliasIsBoolean(key) : true)) {
                    setArg(key, args[i+1], arg);
                    i++;
                }
                else if (args[i+1] && /true|false/.test(args[i+1])) {
                    setArg(key, args[i+1] === 'true', arg);
                    i++;
                }
                else {
                    setArg(key, flags.strings[key] ? '' : true, arg);
                }
            }
        }
        else {
            if (!flags.unknownFn || flags.unknownFn(arg) !== false) {
                argv._.push(
                    flags.strings['_'] || !isNumber(arg) ? arg : Number(arg)
                );
            }
            if (opts.stopEarly) {
                argv._.push.apply(argv._, args.slice(i + 1));
                break;
            }
        }
    }
    
    Object.keys(defaults).forEach(function (key) {
        if (!hasKey(argv, key.split('.'))) {
            setKey(argv, key.split('.'), defaults[key]);
            
            (aliases[key] || []).forEach(function (x) {
                setKey(argv, x.split('.'), defaults[key]);
            });
        }
    });
    
    if (opts['--']) {
        argv['--'] = new Array();
        notFlags.forEach(function(key) {
            argv['--'].push(key);
        });
    }
    else {
        notFlags.forEach(function(key) {
            argv._.push(key);
        });
    }

    return argv;
};

function hasKey (obj, keys) {
    var o = obj;
    keys.slice(0,-1).forEach(function (key) {
        o = (o[key] || {});
    });

    var key = keys[keys.length - 1];
    return key in o;
}

function isNumber (x) {
    if (typeof x === 'number') return true;
    if (/^0x[0-9a-f]+$/i.test(x)) return true;
    return /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
}


},{}],77:[function(require,module,exports){
/*!
 * normalize-path <https://github.com/jonschlinkert/normalize-path>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */

module.exports = function(path, stripTrailing) {
  if (typeof path !== 'string') {
    throw new TypeError('expected path to be a string');
  }

  if (path === '\\' || path === '/') return '/';

  var len = path.length;
  if (len <= 1) return path;

  // ensure that win32 namespaces has two leading slashes, so that the path is
  // handled properly by the win32 version of path.parse() after being normalized
  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces
  var prefix = '';
  if (len > 4 && path[3] === '\\') {
    var ch = path[2];
    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\') {
      path = path.slice(2);
      prefix = '//';
    }
  }

  var segs = path.split(/[/\\]+/);
  if (stripTrailing !== false && segs[segs.length - 1] === '') {
    segs.pop();
  }
  return prefix + segs.join('/');
};

},{}],78:[function(require,module,exports){
var wrappy = require('wrappy')
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}

},{"wrappy":98}],79:[function(require,module,exports){
exports.alphasort = alphasort
exports.alphasorti = alphasorti
exports.setopts = setopts
exports.ownProp = ownProp
exports.makeAbs = makeAbs
exports.finish = finish
exports.mark = mark
exports.isIgnored = isIgnored
exports.childrenIgnored = childrenIgnored

function ownProp (obj, field) {
  return Object.prototype.hasOwnProperty.call(obj, field)
}

var path = require("path")
var minimatch = require("minimatch")
var isAbsolute = require("path-is-absolute")
var Minimatch = minimatch.Minimatch

function alphasorti (a, b) {
  return a.toLowerCase().localeCompare(b.toLowerCase())
}

function alphasort (a, b) {
  return a.localeCompare(b)
}

function setupIgnores (self, options) {
  self.ignore = options.ignore || []

  if (!Array.isArray(self.ignore))
    self.ignore = [self.ignore]

  if (self.ignore.length) {
    self.ignore = self.ignore.map(ignoreMap)
  }
}

// ignore patterns are always in dot:true mode.
function ignoreMap (pattern) {
  var gmatcher = null
  if (pattern.slice(-3) === '/**') {
    var gpattern = pattern.replace(/(\/\*\*)+$/, '')
    gmatcher = new Minimatch(gpattern, { dot: true })
  }

  return {
    matcher: new Minimatch(pattern, { dot: true }),
    gmatcher: gmatcher
  }
}

function setopts (self, pattern, options) {
  if (!options)
    options = {}

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  self.silent = !!options.silent
  self.pattern = pattern
  self.strict = options.strict !== false
  self.realpath = !!options.realpath
  self.realpathCache = options.realpathCache || Object.create(null)
  self.follow = !!options.follow
  self.dot = !!options.dot
  self.mark = !!options.mark
  self.nodir = !!options.nodir
  if (self.nodir)
    self.mark = true
  self.sync = !!options.sync
  self.nounique = !!options.nounique
  self.nonull = !!options.nonull
  self.nosort = !!options.nosort
  self.nocase = !!options.nocase
  self.stat = !!options.stat
  self.noprocess = !!options.noprocess

  self.maxLength = options.maxLength || Infinity
  self.cache = options.cache || Object.create(null)
  self.statCache = options.statCache || Object.create(null)
  self.symlinks = options.symlinks || Object.create(null)

  setupIgnores(self, options)

  self.changedCwd = false
  var cwd = process.cwd()
  if (!ownProp(options, "cwd"))
    self.cwd = cwd
  else {
    self.cwd = options.cwd
    self.changedCwd = path.resolve(options.cwd) !== cwd
  }

  self.root = options.root || path.resolve(self.cwd, "/")
  self.root = path.resolve(self.root)
  if (process.platform === "win32")
    self.root = self.root.replace(/\\/g, "/")

  self.nomount = !!options.nomount

  // disable comments and negation in Minimatch.
  // Note that they are not supported in Glob itself anyway.
  options.nonegate = true
  options.nocomment = true

  self.minimatch = new Minimatch(pattern, options)
  self.options = self.minimatch.options
}

function finish (self) {
  var nou = self.nounique
  var all = nou ? [] : Object.create(null)

  for (var i = 0, l = self.matches.length; i < l; i ++) {
    var matches = self.matches[i]
    if (!matches || Object.keys(matches).length === 0) {
      if (self.nonull) {
        // do like the shell, and spit out the literal glob
        var literal = self.minimatch.globSet[i]
        if (nou)
          all.push(literal)
        else
          all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou)
        all.push.apply(all, m)
      else
        m.forEach(function (m) {
          all[m] = true
        })
    }
  }

  if (!nou)
    all = Object.keys(all)

  if (!self.nosort)
    all = all.sort(self.nocase ? alphasorti : alphasort)

  // at *some* point we statted all of these
  if (self.mark) {
    for (var i = 0; i < all.length; i++) {
      all[i] = self._mark(all[i])
    }
    if (self.nodir) {
      all = all.filter(function (e) {
        return !(/\/$/.test(e))
      })
    }
  }

  if (self.ignore.length)
    all = all.filter(function(m) {
      return !isIgnored(self, m)
    })

  self.found = all
}

function mark (self, p) {
  var abs = makeAbs(self, p)
  var c = self.cache[abs]
  var m = p
  if (c) {
    var isDir = c === 'DIR' || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      var mabs = makeAbs(self, m)
      self.statCache[mabs] = self.statCache[abs]
      self.cache[mabs] = self.cache[abs]
    }
  }

  return m
}

// lotta situps...
function makeAbs (self, f) {
  var abs = f
  if (f.charAt(0) === '/') {
    abs = path.join(self.root, f)
  } else if (isAbsolute(f) || f === '') {
    abs = f
  } else if (self.changedCwd) {
    abs = path.resolve(self.cwd, f)
  } else {
    abs = path.resolve(f)
  }
  return abs
}


// Return true, if pattern ends with globstar '**', for the accompanying parent directory.
// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents
function isIgnored (self, path) {
  if (!self.ignore.length)
    return false

  return self.ignore.some(function(item) {
    return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))
  })
}

function childrenIgnored (self, path) {
  if (!self.ignore.length)
    return false

  return self.ignore.some(function(item) {
    return !!(item.gmatcher && item.gmatcher.match(path))
  })
}

},{"minimatch":75,"path":undefined,"path-is-absolute":89}],80:[function(require,module,exports){
// Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    fs.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (this.matches[index][e])
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = this._makeAbs(e)

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  if (this.mark)
    e = this._mark(e)

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[this._makeAbs(f)] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c !== 'DIR')
    return cb()

  return cb(null, c, stat)
}

},{"./common.js":79,"./sync.js":81,"assert":undefined,"events":undefined,"fs":undefined,"inflight":67,"inherits":68,"minimatch":75,"once":78,"path":undefined,"path-is-absolute":89,"util":undefined}],81:[function(require,module,exports){
module.exports = globSync
globSync.GlobSync = GlobSync

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var Glob = require('./glob.js').Glob
var util = require('util')
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var childrenIgnored = common.childrenIgnored

function globSync (pattern, options) {
  if (typeof options === 'function' || arguments.length === 3)
    throw new TypeError('callback provided to sync glob\n'+
                        'See: https://github.com/isaacs/node-glob/issues/167')

  return new GlobSync(pattern, options).found
}

function GlobSync (pattern, options) {
  if (!pattern)
    throw new Error('must provide pattern')

  if (typeof options === 'function' || arguments.length === 3)
    throw new TypeError('callback provided to sync glob\n'+
                        'See: https://github.com/isaacs/node-glob/issues/167')

  if (!(this instanceof GlobSync))
    return new GlobSync(pattern, options)

  setopts(this, pattern, options)

  if (this.noprocess)
    return this

  var n = this.minimatch.set.length
  this.matches = new Array(n)
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false)
  }
  this._finish()
}

GlobSync.prototype._finish = function () {
  assert(this instanceof GlobSync)
  if (this.realpath) {
    var self = this
    this.matches.forEach(function (matchset, index) {
      var set = self.matches[index] = Object.create(null)
      for (var p in matchset) {
        try {
          p = self._makeAbs(p)
          var real = fs.realpathSync(p, self.realpathCache)
          set[real] = true
        } catch (er) {
          if (er.syscall === 'stat')
            set[self._makeAbs(p)] = true
          else
            throw er
        }
      }
    })
  }
  common.finish(this)
}


GlobSync.prototype._process = function (pattern, index, inGlobStar) {
  assert(this instanceof GlobSync)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // See if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip processing
  if (childrenIgnored(this, read))
    return

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)
}


GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {
  var entries = this._readdir(abs, inGlobStar)

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix.slice(-1) !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this.matches[index][e] = true
    }
    // This was the last one, and no stats were needed
    return
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix)
      newPattern = [prefix, e]
    else
      newPattern = [e]
    this._process(newPattern.concat(remain), index, inGlobStar)
  }
}


GlobSync.prototype._emitMatch = function (index, e) {
  var abs = this._makeAbs(e)
  if (this.mark)
    e = this._mark(e)

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[this._makeAbs(e)]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true
  if (this.stat)
    this._stat(e)
}


GlobSync.prototype._readdirInGlobStar = function (abs) {
  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false)

  var entries
  var lstat
  var stat
  try {
    lstat = fs.lstatSync(abs)
  } catch (er) {
    // lstat failed, doesn't exist
    return null
  }

  var isSym = lstat.isSymbolicLink()
  this.symlinks[abs] = isSym

  // If it's not a symlink or a dir, then it's definitely a regular file.
  // don't bother doing a readdir in that case.
  if (!isSym && !lstat.isDirectory())
    this.cache[abs] = 'FILE'
  else
    entries = this._readdir(abs, false)

  return entries
}

GlobSync.prototype._readdir = function (abs, inGlobStar) {
  var entries

  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return null

    if (Array.isArray(c))
      return c
  }

  try {
    return this._readdirEntries(abs, fs.readdirSync(abs))
  } catch (er) {
    this._readdirError(abs, er)
    return null
  }
}

GlobSync.prototype._readdirEntries = function (abs, entries) {
  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries

  // mark and cache dir-ness
  return entries
}

GlobSync.prototype._readdirError = function (f, er) {
  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[this._makeAbs(f)] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict)
        throw er
      if (!this.silent)
        console.error('glob error', er)
      break
  }
}

GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {

  var entries = this._readdir(abs, inGlobStar)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false)

  var len = entries.length
  var isSym = this.symlinks[abs]

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true)
  }
}

GlobSync.prototype._processSimple = function (prefix, index) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var exists = this._stat(prefix)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this.matches[index][prefix] = true
}

// Returns either 'DIR', 'FILE', or false
GlobSync.prototype._stat = function (f) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return false

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return c

    if (needDir && c === 'FILE')
      return false

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (!stat) {
    var lstat
    try {
      lstat = fs.lstatSync(abs)
    } catch (er) {
      return false
    }

    if (lstat.isSymbolicLink()) {
      try {
        stat = fs.statSync(abs)
      } catch (er) {
        stat = lstat
      }
    } else {
      stat = lstat
    }
  }

  this.statCache[abs] = stat

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c !== 'DIR')
    return false

  return c
}

GlobSync.prototype._mark = function (p) {
  return common.mark(this, p)
}

GlobSync.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

},{"./common.js":79,"./glob.js":80,"assert":undefined,"fs":undefined,"minimatch":75,"path":undefined,"path-is-absolute":89,"util":undefined}],82:[function(require,module,exports){
/* Generated by Opal 0.11.99.dev */
Opal.modules["base64"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$delete']);
  return (function($base, $parent_nesting) {
    function $Base64() {};
    var self = $Base64 = $module($base, 'Base64', $Base64);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Base64_decode64_1, TMP_Base64_encode64_2, TMP_Base64_strict_decode64_3, TMP_Base64_strict_encode64_4, TMP_Base64_urlsafe_decode64_5, TMP_Base64_urlsafe_encode64_6;

    
    
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    var encode, decode;

    // encoder
    // [https://gist.github.com/999166] by [https://github.com/nignag]
    encode = Opal.global.btoa || function (input) {
      var str = String(input);
      /* jshint ignore:start */
      for (
        // initialize result and counter
        var block, charCode, idx = 0, map = chars, output = '';
        // if the next str index does not exist:
        //   change the mapping table to "="
        //   check if d has no fractional digits
        str.charAt(idx | 0) || (map = '=', idx % 1);
        // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
        output += map.charAt(63 & block >> 8 - idx % 1 * 8)
      ) {
        charCode = str.charCodeAt(idx += 3/4);
        if (charCode > 0xFF) {
          self.$raise($$($nesting, 'ArgumentError'), "invalid character (failed: The string to be encoded contains characters outside of the Latin1 range.)");
        }
        block = block << 8 | charCode;
      }
      return output;
      /* jshint ignore:end */
    };

    // decoder
    // [https://gist.github.com/1020396] by [https://github.com/atk]
    decode = Opal.global.atob || function (input) {
      var str = String(input).replace(/=+$/, '');
      if (str.length % 4 == 1) {
        self.$raise($$($nesting, 'ArgumentError'), "invalid base64 (failed: The string to be decoded is not correctly encoded.)");
      }
      /* jshint ignore:start */
      for (
        // initialize result and counters
        var bc = 0, bs, buffer, idx = 0, output = '';
        // get next character
        buffer = str.charAt(idx++);
        // character found in table? initialize bit storage and add its ascii value;
        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
          // and if not first of each 4 characters,
          // convert the first 8 bits to one ascii character
          bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
      ) {
        // try to find character in table (0-63, not found => -1)
        buffer = chars.indexOf(buffer);
      }
      return output;
      /* jshint ignore:end */
    };
  ;
    Opal.defs(self, '$decode64', TMP_Base64_decode64_1 = function $$decode64(string) {
      var self = this;

      return decode(string.replace(/\r?\n/g, ''));
    }, TMP_Base64_decode64_1.$$arity = 1);
    Opal.defs(self, '$encode64', TMP_Base64_encode64_2 = function $$encode64(string) {
      var self = this;

      return encode(string).replace(/(.{60})/g, "$1\n").replace(/([^\n])$/g, "$1\n");
    }, TMP_Base64_encode64_2.$$arity = 1);
    Opal.defs(self, '$strict_decode64', TMP_Base64_strict_decode64_3 = function $$strict_decode64(string) {
      var self = this;

      return decode(string);
    }, TMP_Base64_strict_decode64_3.$$arity = 1);
    Opal.defs(self, '$strict_encode64', TMP_Base64_strict_encode64_4 = function $$strict_encode64(string) {
      var self = this;

      return encode(string);
    }, TMP_Base64_strict_encode64_4.$$arity = 1);
    Opal.defs(self, '$urlsafe_decode64', TMP_Base64_urlsafe_decode64_5 = function $$urlsafe_decode64(string) {
      var self = this;

      return decode(string.replace(/\-/g, '+').replace(/_/g, '/'));
    }, TMP_Base64_urlsafe_decode64_5.$$arity = 1);
    Opal.defs(self, '$urlsafe_encode64', TMP_Base64_urlsafe_encode64_6 = function $$urlsafe_encode64(string, $kwargs) {
      var padding, self = this, str = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      padding = $kwargs.$$smap["padding"];
      if (padding == null) {
        padding = true
      };
      str = encode(string).replace(/\+/g, '-').replace(/\//g, '_');
      if ($truthy(padding)) {
      } else {
        str = str.$delete("=")
      };
      return str;
    }, TMP_Base64_urlsafe_encode64_6.$$arity = -2);
  })($nesting[0], $nesting)
};

},{}],83:[function(require,module,exports){
/* global Opal */
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#Fundamental_objects
const fundamentalObjects = [
  Function,
  Boolean,
  Error,
  Number,
  Date,
  String,
  RegExp,
  Array
];
const backup = {};
for (let index in fundamentalObjects) {
  const fundamentalObject = fundamentalObjects[index];
  backup[fundamentalObject.name] = {
    call: fundamentalObject.call,
    apply: fundamentalObject.apply,
    bind: fundamentalObject.bind
  }
}
require('./opal.js');
// restore Function methods (see https://github.com/opal/opal/issues/1846)
for (let index in fundamentalObjects) {
  const fundamentalObject = fundamentalObjects[index];
  const name = fundamentalObject.name;
  if (typeof fundamentalObject.call !== 'function') {
    fundamentalObject.call = backup[name].call;
  }
  if (typeof fundamentalObject.apply !== 'function') {
    fundamentalObject.apply = backup[name].apply;
  }
  if (typeof fundamentalObject.bind !== 'function') {
    fundamentalObject.bind = backup[name].bind;
  }
}
require('./nodejs.js');
require('./pathname.js');
require('./base64.js');
require('./open-uri.js');
require('./stringio.js');

module.exports.Opal = Opal;

},{"./base64.js":82,"./nodejs.js":84,"./opal.js":85,"./open-uri.js":86,"./pathname.js":87,"./stringio.js":88}],84:[function(require,module,exports){
/* Generated by Opal 0.11.99.dev */
Opal.modules["nodejs/kernel"] = function(Opal) {
  var TMP_$$$eq_3, TMP_$$_4, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$warn', '$to_str', '$new', '$to_s']);
  
  Opal.exit = process.exit;
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_caller_1, TMP_Kernel_node_require_2;

    
    Opal.const_set($nesting[0], 'NODE_REQUIRE', require);
    
    Opal.def(self, '$caller', TMP_Kernel_caller_1 = function $$caller($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var stack;
      try {
        var err = Error("my error");
        throw err;
      } catch(e) {
        stack = e.stack;
      }
      return stack.$split("\n").slice(3);
    ;
    }, TMP_Kernel_caller_1.$$arity = -1);
    
    Opal.def(self, '$node_require', TMP_Kernel_node_require_2 = function $$node_require(path) {
      var self = this;

      
      self.$warn("[DEPRECATION] node_require is deprecated. Please use `require('module')` instead.");
      return $$($nesting, 'NODE_REQUIRE')(path.$to_str());
    }, TMP_Kernel_node_require_2.$$arity = 1);
  })($nesting[0], $nesting);
  Opal.const_set($nesting[0], 'ARGV', process.argv.slice(2));
  Opal.const_set($nesting[0], 'ENV', $$($nesting, 'Object').$new());
  Opal.defs($$($nesting, 'ENV'), '$[]=', TMP_$$$eq_3 = function(name, value) {
    var self = this;

    return process.env[name.$to_s()] = value.$to_s()
  }, TMP_$$$eq_3.$$arity = 2);
  return (Opal.defs($$($nesting, 'ENV'), '$[]', TMP_$$_4 = function(name) {
    var self = this;

    return process.env[name] || nil
  }, TMP_$$_4.$$arity = 1), nil) && '[]';
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["nodejs/file"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$raise', '$warn', '$const_get', '$new', '$const_defined?', '$const_set', '$include', '$size', '$respond_to?', '$path', '$join', '$call', '$exist?', '$realpath', '$!=', '$close', '$to_str', '$pwd', '$delete', '$match?', '$sub', '$attr_reader', '$to_a', '$each_line', '$to_enum', '$read', '$chomp']);
  
  
  var warnings = {}, errno_code, errno_codes = [
    'EACCES',
    'EISDIR',
    'EMFILE',
    'ENOENT',
    'EPERM'
  ];

  function handle_unsupported_feature(message) {
    switch (Opal.config.unsupported_features_severity) {
    case 'error':
      $$($nesting, 'Kernel').$raise($$($nesting, 'NotImplementedError'), message)
      break;
    case 'warning':
      warn(message)
      break;
    default: // ignore
      // noop
    }
  }
  function warn(string) {
    if (warnings[string]) {
      return;
    }
    warnings[string] = true;
    self.$warn(string);
  }
  function executeIOAction(action) {
    try {
      return action();
    } catch (error) {
      if (errno_codes.indexOf(error.code) >= 0) {
        var error_class = $$($nesting, 'Errno').$const_get(error.code)
        throw (error_class).$new(error.message);
      }
      throw error;
    }
  }

  for(var i = 0, ii = errno_codes.length; i < ii; i++) {
    errno_code = errno_codes[i];
    if (!$$($nesting, 'Errno')['$const_defined?'](errno_code)) {
      $$($nesting, 'Errno').$const_set(errno_code, $$($nesting, 'Class').$new($$($nesting, 'SystemCallError')))
    }
  }
;
  (function($base, $super, $parent_nesting) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_File_read_1, TMP_File_write_2, TMP_File_exist$q_3, TMP_File_realpath_4, TMP_File_join_5, TMP_File_directory$q_6, TMP_File_file$q_7, TMP_File_readable$q_8, TMP_File_size_9, TMP_File_open_10, TMP_File_stat_11, TMP_File_mtime_12, TMP_File_symlink$q_13, TMP_File_expand_path_14, TMP_File_initialize_15, TMP_File_read_16, TMP_File_readlines_17, TMP_File_each_line_18, TMP_File_write_19, TMP_File_flush_20, TMP_File_close_21, TMP_File_mtime_22;
    if (self.__fs__ == null) self.__fs__ = nil;
    if (self.__path__ == null) self.__path__ = nil;

    def.eof = def.path = def.fd = nil;
    
    self.$include($$$($$$('::', 'IO'), 'Writable'));
    self.$include($$$($$$('::', 'IO'), 'Readable'));
    self.__fs__ = require('fs');
    self.__path__ = require('path');
    var __fs__ = self.__fs__;
    var __path__ = self.__path__;
    if ($truthy(__path__.sep !== $$($nesting, 'Separator'))) {
      Opal.const_set($nesting[0], 'ALT_SEPARATOR', __path__.sep)};
    Opal.defs(self, '$read', TMP_File_read_1 = function $$read(path) {
      var self = this;

      return executeIOAction(function(){return __fs__.readFileSync(path).toString()})
    }, TMP_File_read_1.$$arity = 1);
    Opal.defs(self, '$write', TMP_File_write_2 = function $$write(path, data) {
      var self = this;

      
      executeIOAction(function(){return __fs__.writeFileSync(path, data)});
      return data.$size();
    }, TMP_File_write_2.$$arity = 2);
    Opal.defs(self, '$exist?', TMP_File_exist$q_3 = function(path) {
      var self = this;

      
      if ($truthy(path['$respond_to?']("path"))) {
        path = path.$path()};
      return executeIOAction(function(){return __fs__.existsSync(path)});
    }, TMP_File_exist$q_3.$$arity = 1);
    Opal.defs(self, '$realpath', TMP_File_realpath_4 = function $$realpath(pathname, dir_string, cache) {
      var $iter = TMP_File_realpath_4.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_File_realpath_4.$$p = null;
      
      
      if ($iter) TMP_File_realpath_4.$$p = null;;
      
      if (dir_string == null) {
        dir_string = nil;
      };
      
      if (cache == null) {
        cache = nil;
      };
      if ($truthy(dir_string)) {
        pathname = self.$join(dir_string, pathname)};
      if ((block !== nil)) {
        
        __fs__.realpath(pathname, cache, function(error, realpath){
          if (error) Opal.IOError.$new(error.message)
          else block.$call(realpath)
        })
        
      } else {
        return executeIOAction(function(){return __fs__.realpathSync(pathname, cache)})
      };
    }, TMP_File_realpath_4.$$arity = -2);
    Opal.defs(self, '$join', TMP_File_join_5 = function $$join($a) {
      var $post_args, paths, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      paths = $post_args;;
      return __path__.posix.join.apply(__path__, paths);
    }, TMP_File_join_5.$$arity = -1);
    Opal.defs(self, '$directory?', TMP_File_directory$q_6 = function(path) {
      var self = this, result = nil, realpath = nil;

      
      if ($truthy(self['$exist?'](path))) {
      } else {
        return false
      };
      result = executeIOAction(function(){return !!__fs__.lstatSync(path).isDirectory()});
      if ($truthy(result)) {
      } else {
        
        realpath = self.$realpath(path);
        if ($truthy(realpath['$!='](path))) {
          result = executeIOAction(function(){return !!__fs__.lstatSync(realpath).isDirectory()})};
      };
      return result;
    }, TMP_File_directory$q_6.$$arity = 1);
    Opal.defs(self, '$file?', TMP_File_file$q_7 = function(path) {
      var self = this, result = nil, realpath = nil;

      
      if ($truthy(self['$exist?'](path))) {
      } else {
        return false
      };
      result = executeIOAction(function(){return !!__fs__.lstatSync(path).isFile()});
      if ($truthy(result)) {
      } else {
        
        realpath = self.$realpath(path);
        if ($truthy(realpath['$!='](path))) {
          result = executeIOAction(function(){return !!__fs__.lstatSync(realpath).isFile()})};
      };
      return result;
    }, TMP_File_file$q_7.$$arity = 1);
    Opal.defs(self, '$readable?', TMP_File_readable$q_8 = function(path) {
      var self = this;

      
      if ($truthy(self['$exist?'](path))) {
      } else {
        return false
      };
      return "" + "\n" + "        try {\n" + "          __fs__.accessSync(path, __fs__.R_OK);\n" + "          return true;\n" + "        } catch (error) {\n" + "          return false;\n" + "        }\n" + "      ";
    }, TMP_File_readable$q_8.$$arity = 1);
    Opal.defs(self, '$size', TMP_File_size_9 = function $$size(path) {
      var self = this;

      return executeIOAction(function(){return __fs__.lstatSync(path).size});
    }, TMP_File_size_9.$$arity = 1);
    Opal.defs(self, '$open', TMP_File_open_10 = function $$open(path, mode) {
      var $iter = TMP_File_open_10.$$p, $yield = $iter || nil, self = this, file = nil;

      if ($iter) TMP_File_open_10.$$p = null;
      
      
      if (mode == null) {
        mode = "r";
      };
      file = self.$new(path, mode);
      if (($yield !== nil)) {
        
        return (function() { try {
        return Opal.yield1($yield, file);
        } finally {
          file.$close()
        }; })();
      } else {
        return file
      };
    }, TMP_File_open_10.$$arity = -2);
    Opal.defs(self, '$stat', TMP_File_stat_11 = function $$stat(path) {
      var self = this;

      
      if ($truthy(path['$respond_to?']("path"))) {
        path = path.$path()};
      return $$$($$($nesting, 'File'), 'Stat').$new(path);
    }, TMP_File_stat_11.$$arity = 1);
    Opal.defs(self, '$mtime', TMP_File_mtime_12 = function $$mtime(path) {
      var self = this;

      return executeIOAction(function(){return __fs__.statSync(path).mtime})
    }, TMP_File_mtime_12.$$arity = 1);
    Opal.defs(self, '$symlink?', TMP_File_symlink$q_13 = function(path) {
      var self = this;

      return executeIOAction(function(){return __fs__.lstatSync(path).isSymbolicLink()})
    }, TMP_File_symlink$q_13.$$arity = 1);
    Opal.defs(self, '$expand_path', TMP_File_expand_path_14 = function $$expand_path(path, basedir) {
      var $a, self = this;

      
      
      if (basedir == null) {
        basedir = nil;
      };
      path = path.$to_str();
      basedir = ($truthy($a = basedir) ? $a : $$($nesting, 'Dir').$pwd());
      return __path__.normalize(__path__.resolve(basedir.$to_str(), path)).split(__path__.sep).join(__path__.posix.sep);
    }, TMP_File_expand_path_14.$$arity = -2);
    
    Opal.def(self, '$initialize', TMP_File_initialize_15 = function $$initialize(path, flags) {
      var self = this, encoding_option_rx = nil;

      
      
      if (flags == null) {
        flags = "r";
      };
      flags = flags.$delete("b");
      encoding_option_rx = /:(.*)/;
      if ($truthy(encoding_option_rx['$match?'](flags))) {
        
        handle_unsupported_feature("Encoding option (:encoding) is unsupported by Node.js openSync method and will be removed.");
        flags = flags.$sub(encoding_option_rx, "");};
      self.path = path;
      self.flags = flags;
      return (self.fd = executeIOAction(function(){return __fs__.openSync(path, flags)}));
    }, TMP_File_initialize_15.$$arity = -2);
    self.$attr_reader("path");
    
    Opal.def(self, '$read', TMP_File_read_16 = function $$read() {
      var self = this, res = nil;

      if ($truthy(self.eof)) {
        return ""
      } else {
        
        res = executeIOAction(function(){return __fs__.readFileSync(self.path).toString()});
        self.eof = true;
        self.lineno = res.$size();
        return res;
      }
    }, TMP_File_read_16.$$arity = 0);
    
    Opal.def(self, '$readlines', TMP_File_readlines_17 = function $$readlines(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      return self.$each_line(separator).$to_a();
    }, TMP_File_readlines_17.$$arity = -1);
    
    Opal.def(self, '$each_line', TMP_File_each_line_18 = function $$each_line(separator) {
      var $iter = TMP_File_each_line_18.$$p, block = $iter || nil, self = this, lines = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if ($iter) TMP_File_each_line_18.$$p = null;
      
      
      if ($iter) TMP_File_each_line_18.$$p = null;;
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      if ($truthy(self.eof)) {
        return (function() {if ((block !== nil)) {
          return self
        } else {
          return [].$to_enum()
        }; return nil; })()};
      if ((block !== nil)) {
        
        lines = $$($nesting, 'File').$read(self.path);
        
        self.eof = false;
        self.lineno = 0;
        var chomped  = lines.$chomp(),
            trailing = lines.length != chomped.length,
            splitted = chomped.split(separator);
        for (var i = 0, length = splitted.length; i < length; i++) {
          self.lineno += 1;
          if (i < length - 1 || trailing) {
            Opal.yield1(block, splitted[i] + separator);
          }
          else {
            Opal.yield1(block, splitted[i]);
          }
        }
        self.eof = true;
      ;
        return self;
      } else {
        return self.$read().$each_line(separator)
      };
    }, TMP_File_each_line_18.$$arity = -1);
    
    Opal.def(self, '$write', TMP_File_write_19 = function $$write(string) {
      var self = this;

      return executeIOAction(function(){return __fs__.writeSync(self.fd, string)})
    }, TMP_File_write_19.$$arity = 1);
    
    Opal.def(self, '$flush', TMP_File_flush_20 = function $$flush() {
      var self = this;

      return executeIOAction(function(){return __fs__.fsyncSync(self.fd)})
    }, TMP_File_flush_20.$$arity = 0);
    
    Opal.def(self, '$close', TMP_File_close_21 = function $$close() {
      var self = this;

      return executeIOAction(function(){return __fs__.closeSync(self.fd)})
    }, TMP_File_close_21.$$arity = 0);
    return (Opal.def(self, '$mtime', TMP_File_mtime_22 = function $$mtime() {
      var self = this;

      return executeIOAction(function(){return __fs__.statSync(self.path).mtime})
    }, TMP_File_mtime_22.$$arity = 0), nil) && 'mtime';
  })($nesting[0], $$($nesting, 'IO'), $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Stat(){};
    var self = $Stat = $klass($base, $super, 'Stat', $Stat);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Stat_initialize_23, TMP_Stat_file$q_24, TMP_Stat_mtime_25;
    if (self.__fs__ == null) self.__fs__ = nil;

    def.path = nil;
    
    self.__fs__ = require('fs');
    var __fs__ = self.__fs__;
    
    Opal.def(self, '$initialize', TMP_Stat_initialize_23 = function $$initialize(path) {
      var self = this;

      return (self.path = path)
    }, TMP_Stat_initialize_23.$$arity = 1);
    
    Opal.def(self, '$file?', TMP_Stat_file$q_24 = function() {
      var self = this;

      return executeIOAction(function(){return __fs__.statSync(self.path).isFile()})
    }, TMP_Stat_file$q_24.$$arity = 0);
    return (Opal.def(self, '$mtime', TMP_Stat_mtime_25 = function $$mtime() {
      var self = this;

      return executeIOAction(function(){return __fs__.statSync(self.path).mtime})
    }, TMP_Stat_mtime_25.$$arity = 0), nil) && 'mtime';
  })($$($nesting, 'File'), null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["nodejs/dir"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$respond_to?', '$flat_map', '$to_path', '$coerce_to!']);
  return (function($base, $super, $parent_nesting) {
    function $Dir(){};
    var self = $Dir = $klass($base, $super, 'Dir', $Dir);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);
    if (self.__glob__ == null) self.__glob__ = nil;
    if (self.__fs__ == null) self.__fs__ = nil;
    if (self.__path__ == null) self.__path__ = nil;

    
    self.__glob__ = require('glob');
    self.__fs__ = require('fs');
    self.__path__ = require('path');
    var __glob__ = self.__glob__;
    var __fs__ = self.__fs__;
    var __path__ = self.__path__;
    return (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_$$_1, TMP_pwd_2, TMP_mkdir_3, TMP_entries_4, TMP_glob_5;

      
      
      Opal.def(self, '$[]', TMP_$$_1 = function(glob) {
        var self = this;

        return __glob__.sync(glob)
      }, TMP_$$_1.$$arity = 1);
      
      Opal.def(self, '$pwd', TMP_pwd_2 = function $$pwd() {
        var self = this;

        return process.cwd().split(__path__.sep).join(__path__.posix.sep);
      }, TMP_pwd_2.$$arity = 0);
      
      Opal.def(self, '$mkdir', TMP_mkdir_3 = function $$mkdir(path) {
        var self = this;

        return __fs__.mkdirSync(path)
      }, TMP_mkdir_3.$$arity = 1);
      
      Opal.def(self, '$entries', TMP_entries_4 = function $$entries(dirname) {
        var self = this;

        
        var result = [];
        var entries = __fs__.readdirSync(dirname);
        for (var i = 0, ii = entries.length; i < ii; i++) {
          result.push(entries[i]);
        }
        return result;
      
      }, TMP_entries_4.$$arity = 1);
      
      Opal.def(self, '$glob', TMP_glob_5 = function $$glob(pattern) {
        var TMP_6, self = this;

        
        if ($truthy(pattern['$respond_to?']("each"))) {
        } else {
          pattern = [pattern]
        };
        return $send(pattern, 'flat_map', [], (TMP_6 = function(subpattern){var self = TMP_6.$$s || this;

        
          
          if (subpattern == null) {
            subpattern = nil;
          };
          if ($truthy(subpattern['$respond_to?']("to_path"))) {
            subpattern = subpattern.$to_path()};
          subpattern = $$($nesting, 'Opal')['$coerce_to!'](subpattern, $$($nesting, 'String'), "to_str");
          return __glob__.sync(subpattern);;}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
      }, TMP_glob_5.$$arity = 1);
      return Opal.alias(self, "getwd", "pwd");
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["nodejs/io"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var TMP_5, TMP_6, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $lambda = Opal.lambda, $send = Opal.send, $writer = nil;

  Opal.add_stubs(['$attr_reader', '$write', '$read', '$write_proc=', '$-', '$tty=']);
  
  
  function executeIOAction(action) {
    try {
      return action();
    } catch (error) {
      if (error.code === 'EACCES' ||
          error.code === 'EISDIR' ||
          error.code === 'EMFILE' ||
          error.code === 'ENOENT' ||
          error.code === 'EPERM') {
        throw Opal.IOError.$new(error.message)
      }
      throw error;
    }
  }
;
  (function($base, $super, $parent_nesting) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_IO_initialize_1, TMP_IO_write_2, TMP_IO_read_3, TMP_IO_binread_4;
    if (self.__fs__ == null) self.__fs__ = nil;

    
    self.__fs__ = require('fs');
    var __fs__ = self.__fs__;
    self.$attr_reader("eof");
    self.$attr_reader("lineno");
    
    Opal.def(self, '$initialize', TMP_IO_initialize_1 = function $$initialize() {
      var self = this;

      
      self.eof = false;
      return (self.lineno = 0);
    }, TMP_IO_initialize_1.$$arity = 0);
    Opal.defs(self, '$write', TMP_IO_write_2 = function $$write(path, data) {
      var self = this;

      return $$($nesting, 'File').$write(path, data)
    }, TMP_IO_write_2.$$arity = 2);
    Opal.defs(self, '$read', TMP_IO_read_3 = function $$read(path) {
      var self = this;

      return $$($nesting, 'File').$read(path)
    }, TMP_IO_read_3.$$arity = 1);
    return (Opal.defs(self, '$binread', TMP_IO_binread_4 = function $$binread(path) {
      var self = this;

      return executeIOAction(function(){return __fs__.readFileSync(path).toString('binary')})
    }, TMP_IO_binread_4.$$arity = 1), nil) && 'binread';
  })($nesting[0], null, $nesting);
  
  $writer = [$lambda((TMP_5 = function(string){var self = TMP_5.$$s || this;

  
    
    if (string == null) {
      string = nil;
    };
    return process.stdout.write(string);;}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5))];
  $send($$($nesting, 'STDOUT'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [$lambda((TMP_6 = function(string){var self = TMP_6.$$s || this;

  
    
    if (string == null) {
      string = nil;
    };
    return process.stderr.write(string);;}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))];
  $send($$($nesting, 'STDERR'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [true];
  $send($$($nesting, 'STDOUT'), 'tty=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [true];
  $send($$($nesting, 'STDERR'), 'tty=', Opal.to_a($writer));
  return $writer[$rb_minus($writer["length"], 1)];;
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["nodejs/open-uri"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    function $OpenURI() {};
    var self = $OpenURI = $module($base, 'OpenURI', $OpenURI);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_OpenURI_request_1;
    if (self.__xmlhttprequest__ == null) self.__xmlhttprequest__ = nil;

    
    self.__xmlhttprequest__ = require('xmlhttprequest');
    var __XMLHttpRequest__ = self.__xmlhttprequest__.XMLHttpRequest;
    Opal.defs(self, '$request', TMP_OpenURI_request_1 = function $$request(uri) {
      var self = this;

      
      var xhr = new __XMLHttpRequest__();
      xhr.open('GET', uri, false);
      xhr.send();
      return xhr;
    
    }, TMP_OpenURI_request_1.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base, $parent_nesting) {
    function $Comparable() {};
    var self = $Comparable = $module($base, 'Comparable', $Comparable);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Comparable_normalize_1, TMP_Comparable_$eq$eq_2, TMP_Comparable_$gt_3, TMP_Comparable_$gt$eq_4, TMP_Comparable_$lt_5, TMP_Comparable_$lt$eq_6, TMP_Comparable_between$q_7, TMP_Comparable_clamp_8;

    
    Opal.defs(self, '$normalize', TMP_Comparable_normalize_1 = function $$normalize(what) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](what))) {
        return what};
      if ($truthy($rb_gt(what, 0))) {
        return 1};
      if ($truthy($rb_lt(what, 0))) {
        return -1};
      return 0;
    }, TMP_Comparable_normalize_1.$$arity = 1);
    
    Opal.def(self, '$==', TMP_Comparable_$eq$eq_2 = function(other) {
      var self = this, cmp = nil;

      try {
        
        if ($truthy(self['$equal?'](other))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    ;
        if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
          return false
        };
        return $$($nesting, 'Comparable').$normalize(cmp) == 0;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Comparable_$eq$eq_2.$$arity = 1);
    
    Opal.def(self, '$>', TMP_Comparable_$gt_3 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) > 0;
    }, TMP_Comparable_$gt_3.$$arity = 1);
    
    Opal.def(self, '$>=', TMP_Comparable_$gt$eq_4 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) >= 0;
    }, TMP_Comparable_$gt$eq_4.$$arity = 1);
    
    Opal.def(self, '$<', TMP_Comparable_$lt_5 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) < 0;
    }, TMP_Comparable_$lt_5.$$arity = 1);
    
    Opal.def(self, '$<=', TMP_Comparable_$lt$eq_6 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) <= 0;
    }, TMP_Comparable_$lt$eq_6.$$arity = 1);
    
    Opal.def(self, '$between?', TMP_Comparable_between$q_7 = function(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, TMP_Comparable_between$q_7.$$arity = 2);
    
    Opal.def(self, '$clamp', TMP_Comparable_clamp_8 = function $$clamp(min, max) {
      var self = this, cmp = nil;

      
      cmp = min['$<=>'](max);
      if ($truthy(cmp)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (min.$class()) + " with " + (max.$class()) + " failed")
      };
      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(cmp), 0))) {
        self.$raise($$($nesting, 'ArgumentError'), "min argument must be smaller than max argument")};
      if ($truthy($rb_lt($$($nesting, 'Comparable').$normalize(self['$<=>'](min)), 0))) {
        return min};
      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(self['$<=>'](max)), 0))) {
        return max};
      return self;
    }, TMP_Comparable_clamp_8.$$arity = 2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["pathname"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$require', '$include', '$quote', '$===', '$to_s', '$path', '$respond_to?', '$to_path', '$is_a?', '$nil?', '$raise', '$class', '$==', '$attr_reader', '$!', '$relative?', '$chop_basename', '$basename', '$=~', '$new', '$source', '$[]', '$rindex', '$sub', '$absolute?', '$expand_path', '$plus', '$unshift', '$length', '$!=', '$empty?', '$first', '$shift', '$+', '$join', '$dirname', '$pop', '$reverse_each', '$directory?', '$extname', '$<=>', '$nonzero?', '$proc', '$casecmp', '$cleanpath', '$inspect', '$include?', '$fill', '$map', '$entries']);
  
  self.$require("corelib/comparable");
  (function($base, $super, $parent_nesting) {
    function $Pathname(){};
    var self = $Pathname = $klass($base, $super, 'Pathname', $Pathname);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Pathname_initialize_1, TMP_Pathname_$eq$eq_2, TMP_Pathname_absolute$q_3, TMP_Pathname_relative$q_4, TMP_Pathname_chop_basename_5, TMP_Pathname_root$q_6, TMP_Pathname_parent_7, TMP_Pathname_sub_8, TMP_Pathname_cleanpath_9, TMP_Pathname_to_path_10, TMP_Pathname_hash_11, TMP_Pathname_expand_path_12, TMP_Pathname_$_13, TMP_Pathname_plus_14, TMP_Pathname_join_15, TMP_Pathname_split_17, TMP_Pathname_dirname_18, TMP_Pathname_basename_19, TMP_Pathname_directory$q_20, TMP_Pathname_extname_21, TMP_Pathname_$lt$eq$gt_22, TMP_Pathname_23, TMP_Pathname_24, TMP_Pathname_relative_path_from_25, TMP_Pathname_entries_26;

    def.path = nil;
    
    self.$include($$($nesting, 'Comparable'));
    Opal.const_set($nesting[0], 'SEPARATOR_PAT', new RegExp($$($nesting, 'Regexp').$quote($$$($$($nesting, 'File'), 'SEPARATOR'))));
    
    Opal.def(self, '$initialize', TMP_Pathname_initialize_1 = function $$initialize(path) {
      var self = this;

      
      if ($truthy($$($nesting, 'Pathname')['$==='](path))) {
        self.path = path.$path().$to_s()
      } else if ($truthy(path['$respond_to?']("to_path"))) {
        self.path = path.$to_path()
      } else if ($truthy(path['$is_a?']($$($nesting, 'String')))) {
        self.path = path
      } else if ($truthy(path['$nil?']())) {
        self.$raise($$($nesting, 'TypeError'), "no implicit conversion of nil into String")
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (path.$class()) + " into String")
      };
      if (self.path['$==']("\u0000")) {
        return self.$raise($$($nesting, 'ArgumentError'))
      } else {
        return nil
      };
    }, TMP_Pathname_initialize_1.$$arity = 1);
    self.$attr_reader("path");
    
    Opal.def(self, '$==', TMP_Pathname_$eq$eq_2 = function(other) {
      var self = this;

      return other.$path()['$=='](self.path)
    }, TMP_Pathname_$eq$eq_2.$$arity = 1);
    
    Opal.def(self, '$absolute?', TMP_Pathname_absolute$q_3 = function() {
      var self = this;

      return self['$relative?']()['$!']()
    }, TMP_Pathname_absolute$q_3.$$arity = 0);
    
    Opal.def(self, '$relative?', TMP_Pathname_relative$q_4 = function() {
      var $a, $b, $c, self = this, path = nil, r = nil;

      
      path = self.path;
      while ($truthy((r = self.$chop_basename(path)))) {
        $c = r, $b = Opal.to_ary($c), (path = ($b[0] == null ? nil : $b[0])), $c
      };
      return path['$==']("");
    }, TMP_Pathname_relative$q_4.$$arity = 0);
    
    Opal.def(self, '$chop_basename', TMP_Pathname_chop_basename_5 = function $$chop_basename(path) {
      var self = this, base = nil;

      
      base = $$($nesting, 'File').$basename(path);
      if ($truthy($$($nesting, 'Regexp').$new("" + "^" + ($$$($$($nesting, 'Pathname'), 'SEPARATOR_PAT').$source()) + "?$")['$=~'](base))) {
        return nil
      } else {
        return [path['$[]'](0, path.$rindex(base)), base]
      };
    }, TMP_Pathname_chop_basename_5.$$arity = 1);
    
    Opal.def(self, '$root?', TMP_Pathname_root$q_6 = function() {
      var self = this;

      return self.path['$==']("/")
    }, TMP_Pathname_root$q_6.$$arity = 0);
    
    Opal.def(self, '$parent', TMP_Pathname_parent_7 = function $$parent() {
      var self = this, new_path = nil;

      
      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if (new_path['$==']("")) {
        new_path = (function() {if ($truthy(self['$absolute?']())) {
          return "/"
        } else {
          return "."
        }; return nil; })()};
      return $$($nesting, 'Pathname').$new(new_path);
    }, TMP_Pathname_parent_7.$$arity = 0);
    
    Opal.def(self, '$sub', TMP_Pathname_sub_8 = function $$sub($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $$($nesting, 'Pathname').$new($send(self.path, 'sub', Opal.to_a(args)));
    }, TMP_Pathname_sub_8.$$arity = -1);
    
    Opal.def(self, '$cleanpath', TMP_Pathname_cleanpath_9 = function $$cleanpath() {
      var self = this;

      return Opal.normalize(self.path)
    }, TMP_Pathname_cleanpath_9.$$arity = 0);
    
    Opal.def(self, '$to_path', TMP_Pathname_to_path_10 = function $$to_path() {
      var self = this;

      return self.path
    }, TMP_Pathname_to_path_10.$$arity = 0);
    
    Opal.def(self, '$hash', TMP_Pathname_hash_11 = function $$hash() {
      var self = this;

      return self.path
    }, TMP_Pathname_hash_11.$$arity = 0);
    
    Opal.def(self, '$expand_path', TMP_Pathname_expand_path_12 = function $$expand_path() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$expand_path(self.path))
    }, TMP_Pathname_expand_path_12.$$arity = 0);
    
    Opal.def(self, '$+', TMP_Pathname_$_13 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Pathname')['$==='](other))) {
      } else {
        other = $$($nesting, 'Pathname').$new(other)
      };
      return $$($nesting, 'Pathname').$new(self.$plus(self.path, other.$to_s()));
    }, TMP_Pathname_$_13.$$arity = 1);
    
    Opal.def(self, '$plus', TMP_Pathname_plus_14 = function $$plus(path1, path2) {
      var $a, $b, $c, self = this, prefix2 = nil, index_list2 = nil, basename_list2 = nil, r2 = nil, basename2 = nil, prefix1 = nil, r1 = nil, basename1 = nil, suffix2 = nil;

      
      prefix2 = path2;
      index_list2 = [];
      basename_list2 = [];
      while ($truthy((r2 = self.$chop_basename(prefix2)))) {
        
        $c = r2, $b = Opal.to_ary($c), (prefix2 = ($b[0] == null ? nil : $b[0])), (basename2 = ($b[1] == null ? nil : $b[1])), $c;
        index_list2.$unshift(prefix2.$length());
        basename_list2.$unshift(basename2);
      };
      if ($truthy(prefix2['$!='](""))) {
        return path2};
      prefix1 = path1;
      while ($truthy(true)) {
        
        while ($truthy(($truthy($c = basename_list2['$empty?']()['$!']()) ? basename_list2.$first()['$=='](".") : $c))) {
          
          index_list2.$shift();
          basename_list2.$shift();
        };
        if ($truthy((r1 = self.$chop_basename(prefix1)))) {
        } else {
          break;
        };
        $c = r1, $b = Opal.to_ary($c), (prefix1 = ($b[0] == null ? nil : $b[0])), (basename1 = ($b[1] == null ? nil : $b[1])), $c;
        if (basename1['$=='](".")) {
          continue;};
        if ($truthy(($truthy($b = ($truthy($c = basename1['$==']("..")) ? $c : basename_list2['$empty?']())) ? $b : basename_list2.$first()['$!=']("..")))) {
          
          prefix1 = $rb_plus(prefix1, basename1);
          break;;};
        index_list2.$shift();
        basename_list2.$shift();
      };
      r1 = self.$chop_basename(prefix1);
      if ($truthy(($truthy($a = r1['$!']()) ? new RegExp($$($nesting, 'SEPARATOR_PAT'))['$=~']($$($nesting, 'File').$basename(prefix1)) : $a))) {
        while ($truthy(($truthy($b = basename_list2['$empty?']()['$!']()) ? basename_list2.$first()['$==']("..") : $b))) {
          
          index_list2.$shift();
          basename_list2.$shift();
        }};
      if ($truthy(basename_list2['$empty?']()['$!']())) {
        
        suffix2 = path2['$[]'](Opal.Range.$new(index_list2.$first(), -1, false));
        if ($truthy(r1)) {
          return $$($nesting, 'File').$join(prefix1, suffix2)
        } else {
          return $rb_plus(prefix1, suffix2)
        };
      } else if ($truthy(r1)) {
        return prefix1
      } else {
        return $$($nesting, 'File').$dirname(prefix1)
      };
    }, TMP_Pathname_plus_14.$$arity = 2);
    
    Opal.def(self, '$join', TMP_Pathname_join_15 = function $$join($a) {try {

      var $post_args, args, TMP_16, self = this, result = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(args['$empty?']())) {
        return self};
      result = args.$pop();
      if ($truthy($$($nesting, 'Pathname')['$==='](result))) {
      } else {
        result = $$($nesting, 'Pathname').$new(result)
      };
      if ($truthy(result['$absolute?']())) {
        return result};
      $send(args, 'reverse_each', [], (TMP_16 = function(arg){var self = TMP_16.$$s || this;

      
        
        if (arg == null) {
          arg = nil;
        };
        if ($truthy($$($nesting, 'Pathname')['$==='](arg))) {
        } else {
          arg = $$($nesting, 'Pathname').$new(arg)
        };
        result = $rb_plus(arg, result);
        if ($truthy(result['$absolute?']())) {
          Opal.ret(result)
        } else {
          return nil
        };}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));
      return $rb_plus(self, result);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Pathname_join_15.$$arity = -1);
    
    Opal.def(self, '$split', TMP_Pathname_split_17 = function $$split() {
      var self = this;

      return [self.$dirname(), self.$basename()]
    }, TMP_Pathname_split_17.$$arity = 0);
    
    Opal.def(self, '$dirname', TMP_Pathname_dirname_18 = function $$dirname() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$dirname(self.path))
    }, TMP_Pathname_dirname_18.$$arity = 0);
    
    Opal.def(self, '$basename', TMP_Pathname_basename_19 = function $$basename() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$basename(self.path))
    }, TMP_Pathname_basename_19.$$arity = 0);
    
    Opal.def(self, '$directory?', TMP_Pathname_directory$q_20 = function() {
      var self = this;

      return $$($nesting, 'File')['$directory?'](self.path)
    }, TMP_Pathname_directory$q_20.$$arity = 0);
    
    Opal.def(self, '$extname', TMP_Pathname_extname_21 = function $$extname() {
      var self = this;

      return $$($nesting, 'File').$extname(self.path)
    }, TMP_Pathname_extname_21.$$arity = 0);
    
    Opal.def(self, '$<=>', TMP_Pathname_$lt$eq$gt_22 = function(other) {
      var self = this;

      return self.$path()['$<=>'](other.$path())
    }, TMP_Pathname_$lt$eq$gt_22.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    Opal.alias(self, "to_str", "to_path");
    Opal.alias(self, "to_s", "to_path");
    Opal.const_set($nesting[0], 'SAME_PATHS', (function() {if ($truthy($$$($$($nesting, 'File'), 'FNM_SYSCASE')['$nonzero?']())) {
      return $send(self, 'proc', [], (TMP_Pathname_23 = function(a, b){var self = TMP_Pathname_23.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a.$casecmp(b)['$=='](0);}, TMP_Pathname_23.$$s = self, TMP_Pathname_23.$$arity = 2, TMP_Pathname_23))
    } else {
      return $send(self, 'proc', [], (TMP_Pathname_24 = function(a, b){var self = TMP_Pathname_24.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a['$=='](b);}, TMP_Pathname_24.$$s = self, TMP_Pathname_24.$$arity = 2, TMP_Pathname_24))
    }; return nil; })());
    
    Opal.def(self, '$relative_path_from', TMP_Pathname_relative_path_from_25 = function $$relative_path_from(base_directory) {
      var $a, $b, $c, self = this, dest_directory = nil, dest_prefix = nil, dest_names = nil, r = nil, basename = nil, base_prefix = nil, base_names = nil, relpath_names = nil;

      
      dest_directory = self.$cleanpath().$to_s();
      base_directory = base_directory.$cleanpath().$to_s();
      dest_prefix = dest_directory;
      dest_names = [];
      while ($truthy((r = self.$chop_basename(dest_prefix)))) {
        
        $c = r, $b = Opal.to_ary($c), (dest_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(basename['$!=']("."))) {
          dest_names.$unshift(basename)};
      };
      base_prefix = base_directory;
      base_names = [];
      while ($truthy((r = self.$chop_basename(base_prefix)))) {
        
        $c = r, $b = Opal.to_ary($c), (base_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(basename['$!=']("."))) {
          base_names.$unshift(basename)};
      };
      if ($truthy($$($nesting, 'SAME_PATHS')['$[]'](dest_prefix, base_prefix))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "different prefix: " + (dest_prefix.$inspect()) + " and " + (base_directory.$inspect()))
      };
      while ($truthy(($truthy($b = ($truthy($c = dest_names['$empty?']()['$!']()) ? base_names['$empty?']()['$!']() : $c)) ? $$($nesting, 'SAME_PATHS')['$[]'](dest_names.$first(), base_names.$first()) : $b))) {
        
        dest_names.$shift();
        base_names.$shift();
      };
      if ($truthy(base_names['$include?'](".."))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "base_directory has ..: " + (base_directory.$inspect()))};
      base_names.$fill("..");
      relpath_names = $rb_plus(base_names, dest_names);
      if ($truthy(relpath_names['$empty?']())) {
        return $$($nesting, 'Pathname').$new(".")
      } else {
        return $$($nesting, 'Pathname').$new($send($$($nesting, 'File'), 'join', Opal.to_a(relpath_names)))
      };
    }, TMP_Pathname_relative_path_from_25.$$arity = 1);
    return (Opal.def(self, '$entries', TMP_Pathname_entries_26 = function $$entries() {
      var TMP_27, self = this;

      return $send($$($nesting, 'Dir').$entries(self.path), 'map', [], (TMP_27 = function(f){var self = TMP_27.$$s || this;

      
        
        if (f == null) {
          f = nil;
        };
        return self.$class().$new(f);}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27))
    }, TMP_Pathname_entries_26.$$arity = 0), nil) && 'entries';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_Pathname_28;

    
    Opal.def(self, '$Pathname', TMP_Kernel_Pathname_28 = function $$Pathname(path) {
      var self = this;

      return $$($nesting, 'Pathname').$new(path)
    }, TMP_Kernel_Pathname_28.$$arity = 1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["nodejs/pathname"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$to_str', '$!', '$absolute?']);
  
  self.$require("pathname");
  return (function($base, $super, $parent_nesting) {
    function $Pathname(){};
    var self = $Pathname = $klass($base, $super, 'Pathname', $Pathname);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Pathname_absolute$q_1, TMP_Pathname_relative$q_2;
    if (self.__path__ == null) self.__path__ = nil;

    def.path = nil;
    
    self.$include($$($nesting, 'Comparable'));
    self.__path__ = require('path');
    var __path__ = self.__path__;
    
    Opal.def(self, '$absolute?', TMP_Pathname_absolute$q_1 = function() {
      var self = this;

      return __path__.isAbsolute(self.path.$to_str())
    }, TMP_Pathname_absolute$q_1.$$arity = 0);
    return (Opal.def(self, '$relative?', TMP_Pathname_relative$q_2 = function() {
      var self = this;

      return self['$absolute?']()['$!']()
    }, TMP_Pathname_relative$q_2.$$arity = 0), nil) && 'relative?';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["nodejs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  
  (function($base, $parent_nesting) {
    function $NodeJS() {};
    var self = $NodeJS = $module($base, 'NodeJS', $NodeJS);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting);
  self.$require("nodejs/kernel");
  self.$require("nodejs/file");
  self.$require("nodejs/dir");
  self.$require("nodejs/io");
  self.$require("nodejs/open-uri");
  return self.$require("nodejs/pathname");
};

},{"fs":undefined,"glob":80,"path":undefined,"xmlhttprequest":99}],85:[function(require,module,exports){
(function(undefined) {
  // @note
  //   A few conventions for the documentation of this file:
  //   1. Always use "//" (in contrast with "/**/")
  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)
  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to
  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.
  //   4. `nil` and `null` being unambiguous refer to the respective
  //      objects/values in Ruby and JavaScript
  //   5. This is still WIP :) so please give feedback and suggestions on how
  //      to improve or for alternative solutions
  //
  //   The way the code is digested before going through Yardoc is a secret kept
  //   in the docs repo (https://github.com/opal/docs/tree/master).

  var global_object = this, console;

  // Detect the global object
  if (typeof(global) !== 'undefined') { global_object = global; }
  if (typeof(window) !== 'undefined') { global_object = window; }

  // Setup a dummy console object if missing
  if (typeof(global_object.console) === 'object') {
    console = global_object.console;
  } else if (global_object.console == null) {
    console = global_object.console = {};
  } else {
    console = {};
  }

  if (!('log' in console)) { console.log = function () {}; }
  if (!('warn' in console)) { console.warn = console.log; }

  if (typeof(this.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return this.Opal;
  }

  var nil;

  // The actual class for BasicObject
  var BasicObject;

  // The actual Object class.
  // The leading underscore is to avoid confusion with window.Object()
  var _Object;

  // The actual Module class
  var Module;

  // The actual Class class
  var Class;

  // The Opal object that is exposed globally
  var Opal = this.Opal = {};

  // This is a useful reference to global object inside ruby files
  Opal.global = global_object;
  global_object.Opal = Opal;

  // Configure runtime behavior with regards to require and unsupported fearures
  Opal.config = {
    missing_require_severity: 'error',        // error, warning, ignore
    unsupported_features_severity: 'warning', // error, warning, ignore
    enable_stack_trace: true                  // true, false
  }

  // Minify common function calls
  var $hasOwn       = Object.hasOwnProperty;
  var $bind         = Function.prototype.bind;
  var $setPrototype = Object.setPrototypeOf;
  var $slice        = Array.prototype.slice;

  // Nil object id is always 4
  var nil_id = 4;

  // Generates even sequential numbers greater than 4
  // (nil_id) to serve as unique ids for ruby objects
  var unique_id = nil_id;

  // Return next unique id
  Opal.uid = function() {
    unique_id += 2;
    return unique_id;
  };

  // Retrieve or assign the id of an object
  Opal.id = function(obj) {
    if (obj.$$is_number) return (obj * 2)+1;
    if (obj.$$id != null) {
      return obj.$$id;
    };
    $defineProperty(obj, '$$id', Opal.uid());
    return obj.$$id;
  };

  // Globals table
  Opal.gvars = {};

  // Exit function, this should be replaced by platform specific implementation
  // (See nodejs and chrome for examples)
  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };

  // keeps track of exceptions for $!
  Opal.exceptions = [];

  // @private
  // Pops an exception from the stack and updates `$!`.
  Opal.pop_exception = function() {
    Opal.gvars["!"] = Opal.exceptions.pop() || nil;
  }

  // Inspect any kind of object, including non Ruby ones
  Opal.inspect = function(obj) {
    if (obj === undefined) {
      return "undefined";
    }
    else if (obj === null) {
      return "null";
    }
    else if (!obj.$$class) {
      return obj.toString();
    }
    else {
      return obj.$inspect();
    }
  }

  function $defineProperty(object, name, initialValue) {
    if (typeof(object) === "string") {
      // Special case for:
      //   s = "string"
      //   def s.m; end
      // String class is the only class that:
      // + compiles to JS primitive
      // + allows method definition directly on instances
      // numbers, true, false and nil do not support it.
      object[name] = initialValue;
    } else {
      Object.defineProperty(object, name, {
        value: initialValue,
        enumerable: false,
        configurable: true,
        writable: true
      });
    }
  }

  Opal.defineProperty = $defineProperty;

  Opal.slice = $slice;


  // Truth
  // -----

  Opal.truthy = function(val) {
    return (val !== nil && val != null && (!val.$$is_boolean || val == true));
  };

  Opal.falsy = function(val) {
    return (val === nil || val == null || (val.$$is_boolean && val == false))
  };


  // Constants
  // ---------
  //
  // For future reference:
  // - The Rails autoloading guide (http://guides.rubyonrails.org/v5.0/autoloading_and_reloading_constants.html)
  // - @ConradIrwin's 2012 post on “Everything you ever wanted to know about constant lookup in Ruby” (http://cirw.in/blog/constant-lookup.html)
  //
  // Legend of MRI concepts/names:
  // - constant reference (cref): the module/class that acts as a namespace
  // - nesting: the namespaces wrapping the current scope, e.g. nesting inside
  //            `module A; module B::C; end; end` is `[B::C, A]`

  // Get the constant in the scope of the current cref
  function const_get_name(cref, name) {
    if (cref) return cref.$$const[name];
  }

  // Walk up the nesting array looking for the constant
  function const_lookup_nesting(nesting, name) {
    var i, ii, result, constant;

    if (nesting.length === 0) return;

    // If the nesting is not empty the constant is looked up in its elements
    // and in order. The ancestors of those elements are ignored.
    for (i = 0, ii = nesting.length; i < ii; i++) {
      constant = nesting[i].$$const[name];
      if (constant != null) return constant;
    }
  }

  // Walk up the ancestors chain looking for the constant
  function const_lookup_ancestors(cref, name) {
    var i, ii, result, ancestors;

    if (cref == null) return;

    ancestors = Opal.ancestors(cref);

    for (i = 0, ii = ancestors.length; i < ii; i++) {
      if (ancestors[i].$$const && $hasOwn.call(ancestors[i].$$const, name)) {
        return ancestors[i].$$const[name];
      }
    }
  }

  // Walk up Object's ancestors chain looking for the constant,
  // but only if cref is missing or a module.
  function const_lookup_Object(cref, name) {
    if (cref == null || cref.$$is_module) {
      return const_lookup_ancestors(_Object, name);
    }
  }

  // Call const_missing if nothing else worked
  function const_missing(cref, name, skip_missing) {
    if (!skip_missing) {
      return (cref || _Object).$const_missing(name);
    }
  }

  // Look for the constant just in the current cref or call `#const_missing`
  Opal.const_get_local = function(cref, name, skip_missing) {
    var result;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_module && !cref.$$is_class) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    result = const_get_name(cref, name);              if (result != null) return result;
    result = const_missing(cref, name, skip_missing); if (result != null) return result;
  }

  // Look for the constant relative to a cref or call `#const_missing` (when the
  // constant is prefixed by `::`).
  Opal.const_get_qualified = function(cref, name, skip_missing) {
    var result, cache, cached, current_version = Opal.const_cache_version;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_module && !cref.$$is_class) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    if ((cache = cref.$$const_cache) == null) {
      $defineProperty(cref, '$$const_cache', Object.create(null));
      cache = cref.$$const_cache;
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null);
      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null ? result : const_missing(cref, name, skip_missing);
  };

  // Initialize the top level constant cache generation counter
  Opal.const_cache_version = 1;

  // Look for the constant in the open using the current nesting and the nearest
  // cref ancestors or call `#const_missing` (when the constant has no :: prefix).
  Opal.const_get_relative = function(nesting, name, skip_missing) {
    var cref = nesting[0], result, current_version = Opal.const_cache_version, cache, cached;

    if ((cache = nesting.$$const_cache) == null) {
      $defineProperty(nesting, '$$const_cache', Object.create(null));
      cache = nesting.$$const_cache;
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_nesting(nesting, name))     != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null) ||
      ((result = const_lookup_Object(cref, name))         != null);

      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null ? result : const_missing(cref, name, skip_missing);
  };

  // Register the constant on a cref and opportunistically set the name of
  // unnamed classes/modules.
  Opal.const_set = function(cref, name, value) {
    if (cref == null || cref === '::') cref = _Object;

    if (value.$$is_a_module) {
      if (value.$$name == null || value.$$name === nil) value.$$name = name;
      if (value.$$base_module == null) value.$$base_module = cref;
    }

    cref.$$const = (cref.$$const || Object.create(null));
    cref.$$const[name] = value;

    // Add a short helper to navigate constants manually.
    // @example
    //   Opal.$$.Regexp.$$.IGNORECASE
    cref.$$ = cref.$$const;

    Opal.const_cache_version++;

    // Expose top level constants onto the Opal object
    if (cref === _Object) Opal[name] = value;

    // Name new class directly onto current scope (Opal.Foo.Baz = klass)
    $defineProperty(cref, name, value);

    return value;
  };

  // Get all the constants reachable from a given cref, by default will include
  // inherited constants.
  Opal.constants = function(cref, inherit) {
    if (inherit == null) inherit = true;

    var module, modules = [cref], module_constants, i, ii, constants = {}, constant;

    if (inherit) modules = modules.concat(Opal.ancestors(cref));
    if (inherit && cref.$$is_module) modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));

    for (i = 0, ii = modules.length; i < ii; i++) {
      module = modules[i];

      // Don not show Objects constants unless we're querying Object itself
      if (cref !== _Object && module == _Object) break;

      for (constant in module.$$const) {
        constants[constant] = true;
      }
    }

    return Object.keys(constants);
  };

  // Remove a constant from a cref.
  Opal.const_remove = function(cref, name) {
    Opal.const_cache_version++;

    if (cref.$$const[name] != null) {
      var old = cref.$$const[name];
      delete cref.$$const[name];
      return old;
    }

    if (cref.$$autoload != null && cref.$$autoload[name] != null) {
      delete cref.$$autoload[name];
      return nil;
    }

    throw Opal.NameError.$new("constant "+cref+"::"+cref.$name()+" not defined");
  };


  // Modules & Classes
  // -----------------

  // A `class Foo; end` expression in ruby is compiled to call this runtime
  // method which either returns an existing class of the given name, or creates
  // a new class in the given `base` scope.
  //
  // If a constant with the given name exists, then we check to make sure that
  // it is a class and also that the superclasses match. If either of these
  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one
  // was not specified in the ruby code.
  //
  // We pass a constructor to this method of the form `function ClassName() {}`
  // simply so that classes show up with nicely formatted names inside debuggers
  // in the web browser (or node/sprockets).
  //
  // The `scope` is the current `self` value where the class is being created
  // from. We use this to get the scope for where the class should be created.
  // If `scope` is an object (not a class/module), we simple get its class and
  // use that as the scope instead.
  //
  // @param scope        [Object] where the class is being created
  // @param superclass  [Class,null] superclass of the new class (may be null)
  // @param id          [String] the name of the class to be created
  // @param constructor [JS.Function] function to use as constructor
  //
  // @return new [Class]  or existing ruby class
  //
  Opal.allocate_class = function(name, superclass, constructor) {
    var klass = constructor;

    if (superclass != null && superclass.$$bridge) {
      // Inheritance from bridged classes requires
      // calling original JS constructors
      klass = function SubclassOfNativeClass() {
        var args = $slice.call(arguments),
            self = new ($bind.apply(superclass, [null].concat(args)))();

        // and replacing a __proto__ manually
        $setPrototype(self, klass.prototype);
        return self;
      }
    }

    $defineProperty(klass, '$$name', name);
    $defineProperty(klass, '$$const', {});
    $defineProperty(klass, '$$is_class', true);
    $defineProperty(klass, '$$is_a_module', true);
    $defineProperty(klass, '$$super', superclass);
    $defineProperty(klass, '$$cvars', {});
    $defineProperty(klass, '$$own_included_modules', []);
    $defineProperty(klass, '$$own_prepended_modules', []);
    $defineProperty(klass, '$$ancestors', []);
    $defineProperty(klass, '$$ancestors_cache_version', null);

    $defineProperty(klass.prototype, '$$class', klass);

    // By default if there are no singleton class methods
    // __proto__ is Class.prototype
    // Later singleton methods generate a singleton_class
    // and inject it into ancestors chain
    if (Opal.Class) {
      $setPrototype(klass, Opal.Class.prototype);
    }

    if (superclass != null) {
      $setPrototype(klass.prototype, superclass.prototype);

      if (superclass !== Opal.Module && superclass.$$meta) {
        // If superclass has metaclass then we have explicitely inherit it.
        Opal.build_class_singleton_class(klass);
      }
    };

    return klass;
  }


  function find_existing_class(scope, name) {
    // Try to find the class in the current scope
    var klass = const_get_name(scope, name);

    // If the class exists in the scope, then we must use that
    if (klass) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(name + " is not a class");
      }

      return klass;
    }
  }

  function ensureSuperclassMatch(klass, superclass) {
    if (klass.$$super !== superclass) {
      throw Opal.TypeError.$new("superclass mismatch for class " + klass.$$name);
    }
  }

  Opal.klass = function(scope, superclass, name, constructor) {
    var bridged;

    if (scope == null) {
      // Global scope
      scope = _Object;
    } else if (!scope.$$is_class && !scope.$$is_module) {
      // Scope is an object, use its class
      scope = scope.$$class;
    }

    // If the superclass is not an Opal-generated class then we're bridging a native JS class
    if (superclass != null && !superclass.hasOwnProperty('$$is_class')) {
      bridged = superclass;
      superclass = _Object;
    }

    var klass = find_existing_class(scope, name);

    if (klass) {
      if (superclass) {
        // Make sure existing class has same superclass
        ensureSuperclassMatch(klass, superclass);
      }
      return klass;
    }

    // Class doesnt exist, create a new one with given superclass...

    // Not specifying a superclass means we can assume it to be Object
    if (superclass == null) {
      superclass = _Object;
    }

    if (bridged) {
      Opal.bridge(bridged);
      klass = bridged;
      Opal.const_set(scope, name, klass);
    } else {
      // Create the class object (instance of Class)
      klass = Opal.allocate_class(name, superclass, constructor);
      Opal.const_set(scope, name, klass);
      // Call .inherited() hook with new class on the superclass
      if (superclass.$inherited) {
        superclass.$inherited(klass);
      }
    }

    return klass;

  }

  // Define new module (or return existing module). The given `scope` is basically
  // the current `self` value the `module` statement was defined in. If this is
  // a ruby module or class, then it is used, otherwise if the scope is a ruby
  // object then that objects real ruby class is used (e.g. if the scope is the
  // main object, then the top level `Object` class is used as the scope).
  //
  // If a module of the given name is already defined in the scope, then that
  // instance is just returned.
  //
  // If there is a class of the given name in the scope, then an error is
  // generated instead (cannot have a class and module of same name in same scope).
  //
  // Otherwise, a new module is created in the scope with the given name, and that
  // new instance is returned back (to be referenced at runtime).
  //
  // @param  scope [Module, Class] class or module this definition is inside
  // @param  id   [String] the name of the new (or existing) module
  //
  // @return [Module]
  Opal.allocate_module = function(name, constructor) {
    var module = constructor;

    $defineProperty(module, '$$name', name);
    $defineProperty(module, '$$const', {});
    $defineProperty(module, '$$is_module', true);
    $defineProperty(module, '$$is_a_module', true);
    $defineProperty(module, '$$cvars', {});
    $defineProperty(module, '$$iclasses', []);
    $defineProperty(module, '$$own_included_modules', []);
    $defineProperty(module, '$$own_prepended_modules', []);
    $defineProperty(module, '$$ancestors', [module]);
    $defineProperty(module, '$$ancestors_cache_version', null);

    $setPrototype(module, Opal.Module.prototype);

    return module;
  }

  function find_existing_module(scope, name) {
    var module = const_get_name(scope, name);
    if (module == null && scope === _Object) module = const_lookup_ancestors(_Object, name);

    if (module) {
      if (!module.$$is_module && module !== _Object) {
        throw Opal.TypeError.$new(name + " is not a module");
      }
    }

    return module;
  }

  Opal.module = function(scope, name, constructor) {
    var module;

    if (scope == null) {
      // Global scope
      scope = _Object;
    } else if (!scope.$$is_class && !scope.$$is_module) {
      // Scope is an object, use its class
      scope = scope.$$class;
    }

    module = find_existing_module(scope, name);

    if (module) {
      return module;
    }

    // Module doesnt exist, create a new one...
    module = Opal.allocate_module(name, constructor);
    Opal.const_set(scope, name, module);

    return module;
  }

  // Return the singleton class for the passed object.
  //
  // If the given object alredy has a singleton class, then it will be stored on
  // the object as the `$$meta` property. If this exists, then it is simply
  // returned back.
  //
  // Otherwise, a new singleton object for the class or object is created, set on
  // the object at `$$meta` for future use, and then returned.
  //
  // @param object [Object] the ruby object
  // @return [Class] the singleton class for object
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.hasOwnProperty('$$is_class')) {
      return Opal.build_class_singleton_class(object);
    } else if (object.hasOwnProperty('$$is_module')) {
      return Opal.build_module_singletin_class(object);
    } else {
      return Opal.build_object_singleton_class(object);
    }
  };

  // Build the singleton class for an existing class. Class object are built
  // with their singleton class already in the prototype chain and inheriting
  // from their superclass object (up to `Class` itself).
  //
  // NOTE: Actually in MRI a class' singleton class inherits from its
  // superclass' singleton class which in turn inherits from Class.
  //
  // @param klass [Class]
  // @return [Class]
  Opal.build_class_singleton_class = function(klass) {
    var superclass, meta;

    if (klass.$$meta) {
      return klass.$$meta;
    }

    // The singleton_class superclass is the singleton_class of its superclass;
    // but BasicObject has no superclass (its `$$super` is null), thus we
    // fallback on `Class`.
    superclass = klass === BasicObject ? Class : Opal.get_singleton_class(klass.$$super);

    meta = Opal.allocate_class(null, superclass, function(){});

    $defineProperty(meta, '$$is_singleton', true);
    $defineProperty(meta, '$$singleton_of', klass);
    $defineProperty(klass, '$$meta', meta);
    $setPrototype(klass, meta.prototype);
    // Restoring ClassName.class
    $defineProperty(klass, '$$class', Opal.Class);

    return meta;
  };

  Opal.build_module_singletin_class = function(mod) {
    if (mod.$$meta) {
      return mod.$$meta;
    }

    var meta = Opal.allocate_class(null, Opal.Module, function(){});

    $defineProperty(meta, '$$is_singleton', true);
    $defineProperty(meta, '$$singleton_of', mod);
    $defineProperty(mod, '$$meta', meta);
    $setPrototype(mod, meta.prototype);
    // Restoring ModuleName.class
    $defineProperty(mod, '$$class', Opal.Module);

    return meta;
  }

  // Build the singleton class for a Ruby (non class) Object.
  //
  // @param object [Object]
  // @return [Class]
  Opal.build_object_singleton_class = function(object) {
    var superclass = object.$$class,
        klass = Opal.allocate_class(nil, superclass, function(){});

    $defineProperty(klass, '$$is_singleton', true);
    $defineProperty(klass, '$$singleton_of', object);

    delete klass.prototype.$$class;

    $defineProperty(object, '$$meta', klass);

    $setPrototype(object, object.$$meta.prototype);

    return klass;
  };

  Opal.is_method = function(prop) {
    return (prop[0] === '$' && prop[1] !== '$');
  }

  Opal.instance_methods = function(mod) {
    var exclude = [], results = [], ancestors = Opal.ancestors(mod);

    for (var i = 0, l = ancestors.length; i < l; i++) {
      var ancestor = ancestors[i],
          proto = ancestor.prototype;

      if (proto.hasOwnProperty('$$dummy')) {
        proto = proto.$$define_methods_on;
      }

      var props = Object.getOwnPropertyNames(proto);

      for (var j = 0, ll = props.length; j < ll; j++) {
        var prop = props[j];

        if (Opal.is_method(prop)) {
          var method_name = prop.slice(1),
              method = proto[prop];

          if (method.$$stub && exclude.indexOf(method_name) === -1) {
            exclude.push(method_name);
          }

          if (!method.$$stub && results.indexOf(method_name) === -1 && exclude.indexOf(method_name) === -1) {
            results.push(method_name);
          }
        }
      }
    }

    return results;
  }

  Opal.own_instance_methods = function(mod) {
    var results = [],
        proto = mod.prototype;

    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }

    var props = Object.getOwnPropertyNames(proto);

    for (var i = 0, length = props.length; i < length; i++) {
      var prop = props[i];

      if (Opal.is_method(prop)) {
        var method = proto[prop];

        if (!method.$$stub) {
          var method_name = prop.slice(1);
          results.push(method_name);
        }
      }
    }

    return results;
  }

  Opal.methods = function(obj) {
    return Opal.instance_methods(Opal.get_singleton_class(obj));
  }

  Opal.own_methods = function(obj) {
    return Opal.own_instance_methods(Opal.get_singleton_class(obj));
  }

  Opal.receiver_methods = function(obj) {
    var mod = Opal.get_singleton_class(obj);
    var singleton_methods = Opal.own_instance_methods(mod);
    var instance_methods = Opal.own_instance_methods(mod.$$super);
    return singleton_methods.concat(instance_methods);
  }

  // Returns an object containing all pairs of names/values
  // for all class variables defined in provided +module+
  // and its ancestors.
  //
  // @param module [Module]
  // @return [Object]
  Opal.class_variables = function(module) {
    var ancestors = Opal.ancestors(module),
        i, length = ancestors.length,
        result = {};

    for (i = length - 1; i >= 0; i--) {
      var ancestor = ancestors[i];

      for (var cvar in ancestor.$$cvars) {
        result[cvar] = ancestor.$$cvars[cvar];
      }
    }

    return result;
  }

  // Sets class variable with specified +name+ to +value+
  // in provided +module+
  //
  // @param module [Module]
  // @param name [String]
  // @param value [Object]
  Opal.class_variable_set = function(module, name, value) {
    var ancestors = Opal.ancestors(module),
        i, length = ancestors.length;

    for (i = length - 2; i >= 0; i--) {
      var ancestor = ancestors[i];

      if ($hasOwn.call(ancestor.$$cvars, name)) {
        ancestor.$$cvars[name] = value;
        return value;
      }
    }

    module.$$cvars[name] = value;

    return value;
  }

  function isRoot(proto) {
    return proto.hasOwnProperty('$$iclass') && proto.hasOwnProperty('$$root');
  }

  function own_included_modules(module) {
    var result = [], mod, proto = Object.getPrototypeOf(module.prototype);

    while (proto) {
      if (proto.hasOwnProperty('$$class')) {
        // superclass
        break;
      }
      mod = protoToModule(proto);
      if (mod) {
        result.push(mod);
      }
      proto = Object.getPrototypeOf(proto);
    }

    return result;
  }

  function own_prepended_modules(module) {
    var result = [], mod, proto = Object.getPrototypeOf(module.prototype);

    if (module.prototype.hasOwnProperty('$$dummy')) {
      while (proto) {
        if (proto === module.prototype.$$define_methods_on) {
          break;
        }

        mod = protoToModule(proto);
        if (mod) {
          result.push(mod);
        }

        proto = Object.getPrototypeOf(proto);
      }
    }

    return result;
  }


  // The actual inclusion of a module into a class.
  //
  // ## Class `$$parent` and `iclass`
  //
  // To handle `super` calls, every class has a `$$parent`. This parent is
  // used to resolve the next class for a super call. A normal class would
  // have this point to its superclass. However, if a class includes a module
  // then this would need to take into account the module. The module would
  // also have to then point its `$$parent` to the actual superclass. We
  // cannot modify modules like this, because it might be included in more
  // then one class. To fix this, we actually insert an `iclass` as the class'
  // `$$parent` which can then point to the superclass. The `iclass` acts as
  // a proxy to the actual module, so the `super` chain can then search it for
  // the required method.
  //
  // @param module [Module] the module to include
  // @param includer [Module] the target class to include module into
  // @return [null]
  Opal.append_features = function(module, includer) {
    var module_ancestors = Opal.ancestors(module);
    var iclasses = [];

    if (module_ancestors.indexOf(includer) !== -1) {
      throw Opal.ArgumentError.$new('cyclic include detected');
    }

    for (var i = 0, length = module_ancestors.length; i < length; i++) {
      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);
      $defineProperty(iclass, '$$included', true);
      iclasses.push(iclass);
    }
    var includer_ancestors = Opal.ancestors(includer),
        chain = chain_iclasses(iclasses),
        start_chain_after,
        end_chain_on;

    if (includer_ancestors.indexOf(module) === -1) {
      // first time include

      // includer -> chain.first -> ...chain... -> chain.last -> includer.parent
      start_chain_after = includer.prototype;
      end_chain_on = Object.getPrototypeOf(includer.prototype);
    } else {
      // The module has been already included,
      // we don't need to put it into the ancestors chain again,
      // but this module may have new included modules.
      // If it's true we need to copy them.
      //
      // The simplest way is to replace ancestors chain from
      //          parent
      //            |
      //   `module` iclass (has a $$root flag)
      //            |
      //   ...previos chain of module.included_modules ...
      //            |
      //  "next ancestor" (has a $$root flag or is a real class)
      //
      // to
      //          parent
      //            |
      //    `module` iclass (has a $$root flag)
      //            |
      //   ...regenerated chain of module.included_modules
      //            |
      //   "next ancestor" (has a $$root flag or is a real class)
      //
      // because there are no intermediate classes between `parent` and `next ancestor`.
      // It doesn't break any prototypes of other objects as we don't change class references.

      var proto = includer.prototype, parent = proto, module_iclass = Object.getPrototypeOf(parent);

      while (module_iclass != null) {
        if (isRoot(module_iclass) && module_iclass.$$module === module) {
          break;
        }

        parent = module_iclass;
        module_iclass = Object.getPrototypeOf(module_iclass);
      }

      var next_ancestor = Object.getPrototypeOf(module_iclass);

      // skip non-root iclasses (that were recursively included)
      while (next_ancestor.hasOwnProperty('$$iclass') && !isRoot(next_ancestor)) {
        next_ancestor = Object.getPrototypeOf(next_ancestor);
      }

      start_chain_after = parent;
      end_chain_on = next_ancestor;
    }

    $setPrototype(start_chain_after, chain.first);
    $setPrototype(chain.last, end_chain_on);

    // recalculate own_included_modules cache
    includer.$$own_included_modules = own_included_modules(includer);

    Opal.const_cache_version++;
  }

  Opal.prepend_features = function(module, prepender) {
    // Here we change the ancestors chain from
    //
    //   prepender
    //      |
    //    parent
    //
    // to:
    //
    // dummy(prepender)
    //      |
    //  iclass(module)
    //      |
    // iclass(prepender)
    //      |
    //    parent
    var module_ancestors = Opal.ancestors(module);
    var iclasses = [];

    if (module_ancestors.indexOf(prepender) !== -1) {
      throw Opal.ArgumentError.$new('cyclic prepend detected');
    }

    for (var i = 0, length = module_ancestors.length; i < length; i++) {
      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);
      $defineProperty(iclass, '$$prepended', true);
      iclasses.push(iclass);
    }

    var chain = chain_iclasses(iclasses),
        dummy_prepender = prepender.prototype,
        previous_parent = Object.getPrototypeOf(dummy_prepender),
        prepender_iclass,
        start_chain_after,
        end_chain_on;

    if (dummy_prepender.hasOwnProperty('$$dummy')) {
      // The module already has some prepended modules
      // which means that we don't need to make it "dummy"
      prepender_iclass = dummy_prepender.$$define_methods_on;
    } else {
      // Making the module "dummy"
      prepender_iclass = create_dummy_iclass(prepender);
      flush_methods_in(prepender);
      $defineProperty(dummy_prepender, '$$dummy', true);
      $defineProperty(dummy_prepender, '$$define_methods_on', prepender_iclass);

      // Converting
      //   dummy(prepender) -> previous_parent
      // to
      //   dummy(prepender) -> iclass(prepender) -> previous_parent
      $setPrototype(dummy_prepender, prepender_iclass);
      $setPrototype(prepender_iclass, previous_parent);
    }

    var prepender_ancestors = Opal.ancestors(prepender);

    if (prepender_ancestors.indexOf(module) === -1) {
      // first time prepend

      start_chain_after = dummy_prepender;

      // next $$root or prepender_iclass or non-$$iclass
      end_chain_on = Object.getPrototypeOf(dummy_prepender);
      while (end_chain_on != null) {
        if (
          end_chain_on.hasOwnProperty('$$root') ||
          end_chain_on === prepender_iclass ||
          !end_chain_on.hasOwnProperty('$$iclass')
        ) {
          break;
        }

        end_chain_on = Object.getPrototypeOf(end_chain_on);
      }
    } else {
      throw Opal.RuntimeError.$new("Prepending a module multiple times is not supported");
    }

    $setPrototype(start_chain_after, chain.first);
    $setPrototype(chain.last, end_chain_on);

    // recalculate own_prepended_modules cache
    prepender.$$own_prepended_modules = own_prepended_modules(prepender);

    Opal.const_cache_version++;
  }

  function flush_methods_in(module) {
    var proto = module.prototype,
        props = Object.getOwnPropertyNames(proto);

    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      if (Opal.is_method(prop)) {
        delete proto[prop];
      }
    }
  }

  function create_iclass(module) {
    var iclass = create_dummy_iclass(module);

    if (module.$$is_module) {
      module.$$iclasses.push(iclass);
    }

    return iclass;
  }

  // Dummy iclass doesn't receive updates when the module gets a new method.
  function create_dummy_iclass(module) {
    var iclass = {},
        proto = module.prototype;

    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }

    var props = Object.getOwnPropertyNames(proto),
        length = props.length, i;

    for (i = 0; i < length; i++) {
      var prop = props[i];
      $defineProperty(iclass, prop, proto[prop]);
    }

    $defineProperty(iclass, '$$iclass', true);
    $defineProperty(iclass, '$$module', module);

    return iclass;
  }

  function chain_iclasses(iclasses) {
    var length = iclasses.length, first = iclasses[0];

    $defineProperty(first, '$$root', true);

    if (length === 1) {
      return { first: first, last: first };
    }

    var previous = first;

    for (var i = 1; i < length; i++) {
      var current = iclasses[i];
      $setPrototype(previous, current);
      previous = current;
    }


    return { first: iclasses[0], last: iclasses[length - 1] };
  }

  // For performance, some core Ruby classes are toll-free bridged to their
  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).
  //
  // This method is used to setup a native constructor (e.g. Array), to have
  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is
  // created using the native constructor so that its prototype is set as the
  // target for th new class. Note: all bridged classes are set to inherit
  // from Object.
  //
  // Example:
  //
  //    Opal.bridge(self, Function);
  //
  // @param klass       [Class] the Ruby class to bridge
  // @param constructor [JS.Function] native JavaScript constructor to use
  // @return [Class] returns the passed Ruby class
  //
  Opal.bridge = function(constructor, klass) {
    if (constructor.hasOwnProperty('$$bridge')) {
      throw Opal.ArgumentError.$new("already bridged");
    }

    var klass_to_inject, klass_reference;

    if (klass == null) {
      klass_to_inject = Opal.Object;
      klass_reference = constructor;
    } else {
      klass_to_inject = klass;
      klass_reference = klass;
    }

    // constructor is a JS function with a prototype chain like:
    // - constructor
    //   - super
    //
    // What we need to do is to inject our class (with its prototype chain)
    // between constructor and super. For example, after injecting Ruby Object into JS Error we get:
    // - constructor
    //   - Opal.Object
    //     - Opal.Kernel
    //       - Opal.BasicObject
    //         - super
    //

    $setPrototype(constructor.prototype, klass_to_inject.prototype);
    $defineProperty(constructor.prototype, '$$class', klass_reference);
    $defineProperty(constructor, '$$bridge', true);
    $defineProperty(constructor, '$$is_class', true);
    $defineProperty(constructor, '$$is_a_module', true);
    $defineProperty(constructor, '$$super', klass_to_inject);
    $defineProperty(constructor, '$$const', {});
    $defineProperty(constructor, '$$own_included_modules', []);
    $defineProperty(constructor, '$$own_prepended_modules', []);
    $defineProperty(constructor, '$$ancestors', []);
    $defineProperty(constructor, '$$ancestors_cache_version', null);
    $setPrototype(constructor, Opal.Class.prototype);
  };

  function protoToModule(proto) {
    if (proto.hasOwnProperty('$$dummy')) {
      return;
    } else if (proto.hasOwnProperty('$$iclass')) {
      return proto.$$module;
    } else if (proto.hasOwnProperty('$$class')) {
      return proto.$$class;
    }
  }

  function own_ancestors(module) {
    return module.$$own_prepended_modules.concat([module]).concat(module.$$own_included_modules);
  }

  // The Array of ancestors for a given module/class
  Opal.ancestors = function(module) {
    if (!module) { return []; }

    if (module.$$ancestors_cache_version === Opal.const_cache_version) {
      return module.$$ancestors;
    }

    var result = [], i, mods, length;

    for (i = 0, mods = own_ancestors(module), length = mods.length; i < length; i++) {
      result.push(mods[i]);
    }

    if (module.$$super) {
      for (i = 0, mods = Opal.ancestors(module.$$super), length = mods.length; i < length; i++) {
        result.push(mods[i]);
      }
    }

    module.$$ancestors_cache_version = Opal.const_cache_version;
    module.$$ancestors = result;

    return result;
  }

  Opal.included_modules = function(module) {
    var result = [], mod = null, proto = Object.getPrototypeOf(module.prototype);

    for (; proto && Object.getPrototypeOf(proto); proto = Object.getPrototypeOf(proto)) {
      mod = protoToModule(proto);
      if (mod && mod.$$is_module && proto.$$iclass && proto.$$included) {
        result.push(mod);
      }
    }

    return result;
  }


  // Method Missing
  // --------------

  // Methods stubs are used to facilitate method_missing in opal. A stub is a
  // placeholder function which just calls `method_missing` on the receiver.
  // If no method with the given name is actually defined on an object, then it
  // is obvious to say that the stub will be called instead, and then in turn
  // method_missing will be called.
  //
  // When a file in ruby gets compiled to javascript, it includes a call to
  // this function which adds stubs for every method name in the compiled file.
  // It should then be safe to assume that method_missing will work for any
  // method call detected.
  //
  // Method stubs are added to the BasicObject prototype, which every other
  // ruby object inherits, so all objects should handle method missing. A stub
  // is only added if the given property name (method name) is not already
  // defined.
  //
  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will
  // have this prefix as well (to make this method more performant).
  //
  //    Opal.add_stubs(["$foo", "$bar", "$baz="]);
  //
  // All stub functions will have a private `$$stub` property set to true so
  // that other internal methods can detect if a method is just a stub or not.
  // `Kernel#respond_to?` uses this property to detect a methods presence.
  //
  // @param stubs [Array] an array of method stubs to add
  // @return [undefined]
  Opal.add_stubs = function(stubs) {
    var proto = Opal.BasicObject.prototype;

    for (var i = 0, length = stubs.length; i < length; i++) {
      var stub = stubs[i], existing_method = proto[stub];

      if (existing_method == null || existing_method.$$stub) {
        Opal.add_stub_for(proto, stub);
      }
    }
  };

  // Add a method_missing stub function to the given prototype for the
  // given name.
  //
  // @param prototype [Prototype] the target prototype
  // @param stub [String] stub name to add (e.g. "$foo")
  // @return [undefined]
  Opal.add_stub_for = function(prototype, stub) {
    var method_missing_stub = Opal.stub_for(stub);
    $defineProperty(prototype, stub, method_missing_stub);
  };

  // Generate the method_missing stub for a given method name.
  //
  // @param method_name [String] The js-name of the method to stub (e.g. "$foo")
  // @return [undefined]
  Opal.stub_for = function(method_name) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      var args_ary = new Array(arguments.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }

      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  };


  // Methods
  // -------

  // Arity count error dispatcher for methods
  //
  // @param actual [Fixnum] number of arguments given to method
  // @param expected [Fixnum] expected number of arguments
  // @param object [Object] owner of the method +meth+
  // @param meth [String] method name that got wrong number of arguments
  // @raise [ArgumentError]
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = '';
    if (object.$$is_a_module) {
      inspect += object.$$name + '.';
    }
    else {
      inspect += object.$$class.$$name + '#';
    }
    inspect += meth;

    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');
  };

  // Arity count error dispatcher for blocks
  //
  // @param actual [Fixnum] number of arguments given to block
  // @param expected [Fixnum] expected number of arguments
  // @param context [Object] context of the block definition
  // @raise [ArgumentError]
  Opal.block_ac = function(actual, expected, context) {
    var inspect = "`block in " + context + "'";

    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (' + actual + ' for ' + expected + ')');
  };

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, mid, current_func, defcheck, defs) {
    var jsid = '$' + mid, ancestors, super_method;

    if (obj.hasOwnProperty('$$meta')) {
      ancestors = Opal.ancestors(obj.$$meta);
    } else {
      ancestors = Opal.ancestors(obj.$$class);
    }

    var current_index = ancestors.indexOf(current_func.$$owner);

    for (var i = current_index + 1; i < ancestors.length; i++) {
      var ancestor = ancestors[i],
          proto = ancestor.prototype;

      if (proto.hasOwnProperty('$$dummy')) {
        proto = proto.$$define_methods_on;
      }

      if (proto.hasOwnProperty(jsid)) {
        var method = proto[jsid];

        if (!method.$$stub) {
          super_method = method;
        }
        break;
      }
    }

    if (!defcheck && super_method == null && Opal.Kernel.$method_missing === obj.$method_missing) {
      // method_missing hasn't been explicitly defined
      throw Opal.NoMethodError.$new('super: no superclass method `'+mid+"' for "+obj, mid);
    }

    return super_method;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {
    var call_jsid = jsid;

    if (!current_func) {
      throw Opal.RuntimeError.$new("super called outside of method");
    }

    if (implicit && current_func.$$define_meth) {
      throw Opal.RuntimeError.$new("implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly");
    }

    if (current_func.$$def) {
      call_jsid = current_func.$$jsid;
    }

    return Opal.find_super_dispatcher(obj, call_jsid, current_func, defcheck);
  };

  // Used to return as an expression. Sometimes, we can't simply return from
  // a javascript function as if we were a method, as the return is used as
  // an expression, or even inside a block which must "return" to the outer
  // method. This helper simply throws an error which is then caught by the
  // method. This approach is expensive, so it is only used when absolutely
  // needed.
  //
  Opal.ret = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // Used to break out of a block.
  Opal.brk = function(val, breaker) {
    breaker.$v = val;
    throw breaker;
  };

  // Builds a new unique breaker, this is to avoid multiple nested breaks to get
  // in the way of each other.
  Opal.new_brk = function() {
    return new Error('unexpected break');
  };

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    var has_mlhs = block.$$has_top_level_mlhs_arg,
        has_trailing_comma = block.$$has_trailing_comma_in_args;

    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {
      arg = Opal.to_ary(arg);
    }

    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length === 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      var args_ary = new Array(args.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

      return block.apply(null, args_ary);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate === Opal.JS.Error) {
        return candidate;
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (klass != null && object.$$meta === klass || object.$$class === klass) {
      return true;
    }

    if (object.$$is_number && klass.$$is_number_class) {
      return true;
    }

    var i, length, ancestors = Opal.ancestors(object.$$is_class ? Opal.get_singleton_class(object) : (object.$$meta || object.$$class));

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    return false;
  };

  // Helpers for extracting kwsplats
  // Used for: { **h }
  Opal.to_hash = function(value) {
    if (value.$$is_hash) {
      return value;
    }
    else if (value['$respond_to?']('to_hash', true)) {
      var hash = value.$to_hash();
      if (hash.$$is_hash) {
        return hash;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Hash (" + value.$$class + "#to_hash gives " + hash.$$class + ")");
      }
    }
    else {
      throw Opal.TypeError.$new("no implicit conversion of " + value.$$class + " into Hash");
    }
  };

  // Helpers for implementing multiple assignment
  // Our code for extracting the values and assigning them only works if the
  // return value is a JS array.
  // So if we get an Array subclass, extract the wrapped JS array from it

  // Used for: a, b = something (no splat)
  Opal.to_ary = function(value) {
    if (value.$$is_array) {
      return value;
    }
    else if (value['$respond_to?']('to_ary', true)) {
      var ary = value.$to_ary();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for: a, b = *something (with splat)
  Opal.to_a = function(value) {
    if (value.$$is_array) {
      // A splatted array must be copied
      return value.slice();
    }
    else if (value['$respond_to?']('to_a', true)) {
      var ary = value.$to_a();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for extracting keyword arguments from arguments passed to
  // JS function. If provided +arguments+ list doesn't have a Hash
  // as a last item, returns a blank Hash.
  //
  // @param parameters [Array]
  // @return [Hash]
  //
  Opal.extract_kwargs = function(parameters) {
    var kwargs = parameters[parameters.length - 1];
    if (kwargs != null && kwargs['$respond_to?']('to_hash', true)) {
      Array.prototype.splice.call(parameters, parameters.length - 1, 1);
      return kwargs.$to_hash();
    }
    else {
      return Opal.hash2([], {});
    }
  }

  // Used to get a list of rest keyword arguments. Method takes the given
  // keyword args, i.e. the hash literal passed to the method containing all
  // keyword arguemnts passed to method, as well as the used args which are
  // the names of required and optional arguments defined. This method then
  // just returns all key/value pairs which have not been used, in a new
  // hash literal.
  //
  // @param given_args [Hash] all kwargs given to method
  // @param used_args [Object<String: true>] all keys used as named kwargs
  // @return [Hash]
  //
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key       = null,
        given_map = given_args.$$smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  // Calls passed method on a ruby object with arguments and block:
  //
  // Can take a method or a method name.
  //
  // 1. When method name gets passed it invokes it by its name
  //    and calls 'method_missing' when object doesn't have this method.
  //    Used internally by Opal to invoke method that takes a block or a splat.
  // 2. When method (i.e. method body) gets passed, it doesn't trigger 'method_missing'
  //    because it doesn't know the name of the actual method.
  //    Used internally by Opal to invoke 'super'.
  //
  // @example
  //   var my_array = [1, 2, 3, 4]
  //   Opal.send(my_array, 'length')                    # => 4
  //   Opal.send(my_array, my_array.$length)            # => 4
  //
  //   Opal.send(my_array, 'reverse!')                  # => [4, 3, 2, 1]
  //   Opal.send(my_array, my_array['$reverse!']')      # => [4, 3, 2, 1]
  //
  // @param recv [Object] ruby object
  // @param method [Function, String] method body or name of the method
  // @param args [Array] arguments that will be passed to the method call
  // @param block [Function] ruby block
  // @return [Object] returning value of the method call
  Opal.send = function(recv, method, args, block) {
    var body = (typeof(method) === 'string') ? recv['$'+method] : method;

    if (body != null) {
      if (typeof block === 'function') {
        body.$$p = block;
      }
      return body.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [method].concat(args));
  }

  Opal.lambda = function(block) {
    block.$$is_lambda = true;
    return block;
  }

  // Used to define methods on an object. This is a helper method, used by the
  // compiled source to define methods on special case objects when the compiler
  // can not determine the destination object, or the object is a Module
  // instance. This can get called by `Module#define_method` as well.
  //
  // ## Modules
  //
  // Any method defined on a module will come through this runtime helper.
  // The method is added to the module body, and the owner of the method is
  // set to be the module itself. This is used later when choosing which
  // method should show on a class if more than 1 included modules define
  // the same method. Finally, if the module is in `module_function` mode,
  // then the method is also defined onto the module itself.
  //
  // ## Classes
  //
  // This helper will only be called for classes when a method is being
  // defined indirectly; either through `Module#define_method`, or by a
  // literal `def` method inside an `instance_eval` or `class_eval` body. In
  // either case, the method is simply added to the class' prototype. A special
  // exception exists for `BasicObject` and `Object`. These two classes are
  // special because they are used in toll-free bridged classes. In each of
  // these two cases, extra work is required to define the methods on toll-free
  // bridged class' prototypes as well.
  //
  // ## Objects
  //
  // If a simple ruby object is the object, then the method is simply just
  // defined on the object as a singleton method. This would be the case when
  // a method is defined inside an `instance_eval` block.
  //
  // @param obj  [Object, Class] the actual obj to define method for
  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')
  // @param body [JS.Function] the literal JavaScript function used as method
  // @return [null]
  //
  Opal.def = function(obj, jsid, body) {
    // Special case for a method definition in the
    // top-level namespace
    if (obj === Opal.top) {
      Opal.defn(Opal.Object, jsid, body)
    }
    // if instance_eval is invoked on a module/class, it sets inst_eval_mod
    else if (!obj.$$eval && obj.$$is_a_module) {
      Opal.defn(obj, jsid, body);
    }
    else {
      Opal.defs(obj, jsid, body);
    }
  };

  // Define method on a module or class (see Opal.def).
  Opal.defn = function(module, jsid, body) {
    body.$$owner = module;

    var proto = module.prototype;
    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }
    $defineProperty(proto, jsid, body);

    if (module.$$is_module) {
      if (module.$$module_function) {
        Opal.defs(module, jsid, body)
      }

      for (var i = 0, iclasses = module.$$iclasses, length = iclasses.length; i < length; i++) {
        var iclass = iclasses[i];
        $defineProperty(iclass, jsid, body);
      }
    }

    var singleton_of = module.$$singleton_of;
    if (module.$method_added && !module.$method_added.$$stub && !singleton_of) {
      module.$method_added(jsid.substr(1));
    }
    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
      singleton_of.$singleton_method_added(jsid.substr(1));
    }
  }

  // Define a singleton method on the given object (see Opal.def).
  Opal.defs = function(obj, jsid, body) {
    if (obj.$$is_string || obj.$$is_number) {
      // That's simply impossible
      return;
    }
    Opal.defn(Opal.get_singleton_class(obj), jsid, body)
  };

  // Called from #remove_method.
  Opal.rdef = function(obj, jsid) {
    if (!$hasOwn.call(obj.prototype, jsid)) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    delete obj.prototype[jsid];

    if (obj.$$is_singleton) {
      if (obj.prototype.$singleton_method_removed && !obj.prototype.$singleton_method_removed.$$stub) {
        obj.prototype.$singleton_method_removed(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_removed && !obj.$method_removed.$$stub) {
        obj.$method_removed(jsid.substr(1));
      }
    }
  };

  // Called from #undef_method.
  Opal.udef = function(obj, jsid) {
    if (!obj.prototype[jsid] || obj.prototype[jsid].$$stub) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    Opal.add_stub_for(obj.prototype, jsid);

    if (obj.$$is_singleton) {
      if (obj.prototype.$singleton_method_undefined && !obj.prototype.$singleton_method_undefined.$$stub) {
        obj.prototype.$singleton_method_undefined(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
        obj.$method_undefined(jsid.substr(1));
      }
    }
  };

  function is_method_body(body) {
    return (typeof(body) === "function" && !body.$$stub);
  }

  Opal.alias = function(obj, name, old) {
    var id     = '$' + name,
        old_id = '$' + old,
        body   = obj.prototype['$' + old],
        alias;

    // When running inside #instance_eval the alias refers to class methods.
    if (obj.$$eval) {
      return Opal.alias(Opal.get_singleton_class(obj), name, old);
    }

    if (!is_method_body(body)) {
      var ancestor = obj.$$super;

      while (typeof(body) !== "function" && ancestor) {
        body     = ancestor[old_id];
        ancestor = ancestor.$$super;
      }

      if (!is_method_body(body) && obj.$$is_module) {
        // try to look into Object
        body = Opal.Object.prototype[old_id]
      }

      if (!is_method_body(body)) {
        throw Opal.NameError.$new("undefined method `" + old + "' for class `" + obj.$name() + "'")
      }
    }

    // If the body is itself an alias use the original body
    // to keep the max depth at 1.
    if (body.$$alias_of) body = body.$$alias_of;

    // We need a wrapper because otherwise properties
    // would be ovrewritten on the original body.
    alias = function() {
      var block = alias.$$p, args, i, ii;

      args = new Array(arguments.length);
      for(i = 0, ii = arguments.length; i < ii; i++) {
        args[i] = arguments[i];
      }

      if (block != null) { alias.$$p = null }

      return Opal.send(this, body, args, block);
    };

    // Try to make the browser pick the right name
    alias.displayName       = name;
    alias.length            = body.length;
    alias.$$arity           = body.$$arity;
    alias.$$parameters      = body.$$parameters;
    alias.$$source_location = body.$$source_location;
    alias.$$alias_of        = body;
    alias.$$alias_name      = name;

    Opal.defn(obj, id, alias);

    return obj;
  };

  Opal.alias_native = function(obj, name, native_name) {
    var id   = '$' + name,
        body = obj.prototype[native_name];

    if (typeof(body) !== "function" || body.$$stub) {
      throw Opal.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'")
    }

    Opal.defn(obj, id, body);

    return obj;
  };


  // Hashes
  // ------

  Opal.hash_init = function(hash) {
    hash.$$smap = Object.create(null);
    hash.$$map  = Object.create(null);
    hash.$$keys = [];
  };

  Opal.hash_clone = function(from_hash, to_hash) {
    to_hash.$$none = from_hash.$$none;
    to_hash.$$proc = from_hash.$$proc;

    for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {
      key = keys[i];

      if (key.$$is_string) {
        value = smap[key];
      } else {
        value = key.value;
        key = key.key;
      }

      Opal.hash_put(to_hash, key, value);
    }
  };

  Opal.hash_put = function(hash, key, value) {
    if (key.$$is_string) {
      if (!$hasOwn.call(hash.$$smap, key)) {
        hash.$$keys.push(key);
      }
      hash.$$smap[key] = value;
      return;
    }

    var key_hash, bucket, last_bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if (!$hasOwn.call(hash.$$map, key_hash)) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      hash.$$map[key_hash] = bucket;
      return;
    }

    bucket = hash.$$map[key_hash];

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        last_bucket = undefined;
        bucket.value = value;
        break;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }

    if (last_bucket) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      last_bucket.next = bucket;
    }
  };

  Opal.hash_get = function(hash, key) {
    if (key.$$is_string) {
      if ($hasOwn.call(hash.$$smap, key)) {
        return hash.$$smap[key];
      }
      return;
    }

    var key_hash, bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if ($hasOwn.call(hash.$$map, key_hash)) {
      bucket = hash.$$map[key_hash];

      while (bucket) {
        if (key === bucket.key || key['$eql?'](bucket.key)) {
          return bucket.value;
        }
        bucket = bucket.next;
      }
    }
  };

  Opal.hash_delete = function(hash, key) {
    var i, keys = hash.$$keys, length = keys.length, value;

    if (key.$$is_string) {
      if (!$hasOwn.call(hash.$$smap, key)) {
        return;
      }

      for (i = 0; i < length; i++) {
        if (keys[i] === key) {
          keys.splice(i, 1);
          break;
        }
      }

      value = hash.$$smap[key];
      delete hash.$$smap[key];
      return value;
    }

    var key_hash = key.$hash();

    if (!$hasOwn.call(hash.$$map, key_hash)) {
      return;
    }

    var bucket = hash.$$map[key_hash], last_bucket;

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        value = bucket.value;

        for (i = 0; i < length; i++) {
          if (keys[i] === bucket) {
            keys.splice(i, 1);
            break;
          }
        }

        if (last_bucket && bucket.next) {
          last_bucket.next = bucket.next;
        }
        else if (last_bucket) {
          delete last_bucket.next;
        }
        else if (bucket.next) {
          hash.$$map[key_hash] = bucket.next;
        }
        else {
          delete hash.$$map[key_hash];
        }

        return value;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }
  };

  Opal.hash_rehash = function(hash) {
    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {

      if (hash.$$keys[i].$$is_string) {
        continue;
      }

      key_hash = hash.$$keys[i].key.$hash();

      if (key_hash === hash.$$keys[i].key_hash) {
        continue;
      }

      bucket = hash.$$map[hash.$$keys[i].key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          if (last_bucket && bucket.next) {
            last_bucket.next = bucket.next;
          }
          else if (last_bucket) {
            delete last_bucket.next;
          }
          else if (bucket.next) {
            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
          }
          else {
            delete hash.$$map[hash.$$keys[i].key_hash];
          }
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      hash.$$keys[i].key_hash = key_hash;

      if (!$hasOwn.call(hash.$$map, key_hash)) {
        hash.$$map[key_hash] = hash.$$keys[i];
        continue;
      }

      bucket = hash.$$map[key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          last_bucket = undefined;
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      if (last_bucket) {
        last_bucket.next = hash.$$keys[i];
      }
    }
  };

  Opal.hash = function() {
    var arguments_length = arguments.length, args, hash, i, length, key, value;

    if (arguments_length === 1 && arguments[0].$$is_hash) {
      return arguments[0];
    }

    hash = new Opal.Hash();
    Opal.hash_init(hash);

    if (arguments_length === 1 && arguments[0].$$is_array) {
      args = arguments[0];
      length = args.length;

      for (i = 0; i < length; i++) {
        if (args[i].length !== 2) {
          throw Opal.ArgumentError.$new("value not of length 2: " + args[i].$inspect());
        }

        key = args[i][0];
        value = args[i][1];

        Opal.hash_put(hash, key, value);
      }

      return hash;
    }

    if (arguments_length === 1) {
      args = arguments[0];
      for (key in args) {
        if ($hasOwn.call(args, key)) {
          value = args[key];

          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    }

    if (arguments_length % 2 !== 0) {
      throw Opal.ArgumentError.$new("odd number of arguments for Hash");
    }

    for (i = 0; i < arguments_length; i += 2) {
      key = arguments[i];
      value = arguments[i + 1];

      Opal.hash_put(hash, key, value);
    }

    return hash;
  };

  // A faster Hash creator for hashes that just use symbols and
  // strings as keys. The map and keys array can be constructed at
  // compile time, so they are just added here by the constructor
  // function.
  //
  Opal.hash2 = function(keys, smap) {
    var hash = new Opal.Hash();

    hash.$$smap = smap;
    hash.$$map  = Object.create(null);
    hash.$$keys = keys;

    return hash;
  };

  // Create a new range instance with first and last values, and whether the
  // range excludes the last value.
  //
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range();
        range.begin   = first;
        range.end     = last;
        range.excl    = exc;

    return range;
  };

  // Get the ivar name for a given name.
  // Mostly adds a trailing $ to reserved names.
  //
  Opal.ivar = function(name) {
    if (
        // properties
        name === "constructor" ||
        name === "displayName" ||
        name === "__count__" ||
        name === "__noSuchMethod__" ||
        name === "__parent__" ||
        name === "__proto__" ||

        // methods
        name === "hasOwnProperty" ||
        name === "valueOf"
       )
    {
      return name + "$";
    }

    return name;
  };


  // Regexps
  // -------

  // Escape Regexp special chars letting the resulting string be used to build
  // a new Regexp.
  //
  Opal.escape_regexp = function(str) {
    return str.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
              .replace(/[\n]/g, '\\n')
              .replace(/[\r]/g, '\\r')
              .replace(/[\f]/g, '\\f')
              .replace(/[\t]/g, '\\t');
  };

  // Create a global Regexp from a RegExp object and cache the result
  // on the object itself ($$g attribute).
  //
  Opal.global_regexp = function(pattern) {
    if (pattern.global) {
      return pattern; // RegExp already has the global flag
    }
    if (pattern.$$g == null) {
      pattern.$$g = new RegExp(pattern.source, (pattern.multiline ? 'gm' : 'g') + (pattern.ignoreCase ? 'i' : ''));
    } else {
      pattern.$$g.lastIndex = null; // reset lastIndex property
    }
    return pattern.$$g;
  };

  // Create a global multiline Regexp from a RegExp object and cache the result
  // on the object itself ($$gm or $$g attribute).
  //
  Opal.global_multiline_regexp = function(pattern) {
    var result;
    if (pattern.multiline) {
      if (pattern.global) {
        return pattern; // RegExp already has the global and multiline flag
      }
      // we are using the $$g attribute because the Regexp is already multiline
      if (pattern.$$g != null) {
        result = pattern.$$g;
      } else {
        result = pattern.$$g = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      }
    } else if (pattern.$$gm != null) {
      result = pattern.$$gm;
    } else {
      result = pattern.$$gm = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
    }
    result.lastIndex = null; // reset lastIndex property
    return result;
  };

  // Require system
  // --------------

  Opal.modules         = {};
  Opal.loaded_features = ['corelib/runtime'];
  Opal.current_dir     = '.';
  Opal.require_table   = {'corelib/runtime': true};

  Opal.normalize = function(path) {
    var parts, part, new_parts = [], SEPARATOR = '/';

    if (Opal.current_dir !== '.') {
      path = Opal.current_dir.replace(/\/*$/, '/') + path;
    }

    path = path.replace(/^\.\//, '');
    path = path.replace(/\.(rb|opal|js)$/, '');
    parts = path.split(SEPARATOR);

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part === '') continue;
      (part === '..') ? new_parts.pop() : new_parts.push(part)
    }

    return new_parts.join(SEPARATOR);
  };

  Opal.loaded = function(paths) {
    var i, l, path;

    for (i = 0, l = paths.length; i < l; i++) {
      path = Opal.normalize(paths[i]);

      if (Opal.require_table[path]) {
        continue;
      }

      Opal.loaded_features.push(path);
      Opal.require_table[path] = true;
    }
  };

  Opal.load = function(path) {
    path = Opal.normalize(path);

    Opal.loaded([path]);

    var module = Opal.modules[path];

    if (module) {
      module(Opal);
    }
    else {
      var severity = Opal.config.missing_require_severity;
      var message  = 'cannot load such file -- ' + path;

      if (severity === "error") {
        if (Opal.LoadError) {
          throw Opal.LoadError.$new(message)
        } else {
          throw message
        }
      }
      else if (severity === "warning") {
        console.warn('WARNING: LoadError: ' + message);
      }
    }

    return true;
  };

  Opal.require = function(path) {
    path = Opal.normalize(path);

    if (Opal.require_table[path]) {
      return false;
    }

    return Opal.load(path);
  };


  // Initialization
  // --------------
  function $BasicObject() {};
  function $Object() {};
  function $Module() {};
  function $Class() {};

  Opal.BasicObject = BasicObject = Opal.allocate_class('BasicObject', null, $BasicObject);
  Opal.Object      = _Object     = Opal.allocate_class('Object', Opal.BasicObject, $Object);
  Opal.Module      = Module      = Opal.allocate_class('Module', Opal.Object, $Module);
  Opal.Class       = Class       = Opal.allocate_class('Class', Opal.Module, $Class);

  $setPrototype(Opal.BasicObject, Opal.Class.prototype);
  $setPrototype(Opal.Object, Opal.Class.prototype);
  $setPrototype(Opal.Module, Opal.Class.prototype);
  $setPrototype(Opal.Class, Opal.Class.prototype);

  // BasicObject can reach itself, avoid const_set to skip the $$base_module logic
  BasicObject.$$const["BasicObject"] = BasicObject;

  // Assign basic constants
  Opal.const_set(_Object, "BasicObject",  BasicObject);
  Opal.const_set(_Object, "Object",       _Object);
  Opal.const_set(_Object, "Module",       Module);
  Opal.const_set(_Object, "Class",        Class);

  // Fix booted classes to have correct .class value
  BasicObject.$$class = Class;
  _Object.$$class     = Class;
  Module.$$class      = Class;
  Class.$$class       = Class;

  // Forward .toString() to #to_s
  $defineProperty(_Object.prototype, 'toString', function() {
    var to_s = this.$to_s();
    if (to_s.$$is_string && typeof(to_s) === 'object') {
      // a string created using new String('string')
      return to_s.valueOf();
    } else {
      return to_s;
    }
  });

  // Make Kernel#require immediately available as it's needed to require all the
  // other corelib files.
  $defineProperty(_Object.prototype, '$require', Opal.require);

  // Add a short helper to navigate constants manually.
  // @example
  //   Opal.$$.Regexp.$$.IGNORECASE
  Opal.$$ = _Object.$$;

  // Instantiate the main object
  Opal.top = new _Object();
  Opal.top.$to_s = Opal.top.$inspect = function() { return 'main' };


  // Nil
  function $NilClass() {};
  Opal.NilClass = Opal.allocate_class('NilClass', Opal.Object, $NilClass);
  Opal.const_set(_Object, 'NilClass', Opal.NilClass);
  nil = Opal.nil = new Opal.NilClass();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };

  // Errors
  Opal.breaker  = new Error('unexpected break (old)');
  Opal.returner = new Error('unexpected return');
  TypeError.$$super = Error;
}).call(this);
Opal.loaded(["corelib/runtime.js"]);
/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/helpers"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$coerce_to!', '$!=', '$[]', '$upcase']);
  return (function($base, $parent_nesting) {
    function $Opal() {};
    var self = $Opal = $module($base, 'Opal', $Opal);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Opal_bridge_1, TMP_Opal_type_error_2, TMP_Opal_coerce_to_3, TMP_Opal_coerce_to$B_4, TMP_Opal_coerce_to$q_5, TMP_Opal_try_convert_6, TMP_Opal_compare_7, TMP_Opal_destructure_8, TMP_Opal_respond_to$q_9, TMP_Opal_inspect_obj_10, TMP_Opal_instance_variable_name$B_11, TMP_Opal_class_variable_name$B_12, TMP_Opal_const_name$B_13, TMP_Opal_pristine_14;

    
    Opal.defs(self, '$bridge', TMP_Opal_bridge_1 = function $$bridge(constructor, klass) {
      var self = this;

      return Opal.bridge(constructor, klass);
    }, TMP_Opal_bridge_1.$$arity = 2);
    Opal.defs(self, '$type_error', TMP_Opal_type_error_2 = function $$type_error(object, type, method, coerced) {
      var $a, self = this;

      
      
      if (method == null) {
        method = nil;
      };
      
      if (coerced == null) {
        coerced = nil;
      };
      if ($truthy(($truthy($a = method) ? coerced : $a))) {
        return $$($nesting, 'TypeError').$new("" + "can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()) + ")")
      } else {
        return $$($nesting, 'TypeError').$new("" + "no implicit conversion of " + (object.$class()) + " into " + (type))
      };
    }, TMP_Opal_type_error_2.$$arity = -3);
    Opal.defs(self, '$coerce_to', TMP_Opal_coerce_to_3 = function $$coerce_to(object, type, method) {
      var self = this;

      
      if ($truthy(type['$==='](object))) {
        return object};
      if ($truthy(object['$respond_to?'](method))) {
      } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    }, TMP_Opal_coerce_to_3.$$arity = 3);
    Opal.defs(self, '$coerce_to!', TMP_Opal_coerce_to$B_4 = function(object, type, method) {
      var self = this, coerced = nil;

      
      coerced = self.$coerce_to(object, type, method);
      if ($truthy(type['$==='](coerced))) {
      } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_Opal_coerce_to$B_4.$$arity = 3);
    Opal.defs(self, '$coerce_to?', TMP_Opal_coerce_to$q_5 = function(object, type, method) {
      var self = this, coerced = nil;

      
      if ($truthy(object['$respond_to?'](method))) {
      } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ($truthy(coerced['$nil?']())) {
        return nil};
      if ($truthy(type['$==='](coerced))) {
      } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_Opal_coerce_to$q_5.$$arity = 3);
    Opal.defs(self, '$try_convert', TMP_Opal_try_convert_6 = function $$try_convert(object, type, method) {
      var self = this;

      
      if ($truthy(type['$==='](object))) {
        return object};
      if ($truthy(object['$respond_to?'](method))) {
        return object.$__send__(method)
      } else {
        return nil
      };
    }, TMP_Opal_try_convert_6.$$arity = 3);
    Opal.defs(self, '$compare', TMP_Opal_compare_7 = function $$compare(a, b) {
      var self = this, compare = nil;

      
      compare = a['$<=>'](b);
      if ($truthy(compare === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")};
      return compare;
    }, TMP_Opal_compare_7.$$arity = 2);
    Opal.defs(self, '$destructure', TMP_Opal_destructure_8 = function $$destructure(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        var args_ary = new Array(args.length);
        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

        return args_ary;
      }
    
    }, TMP_Opal_destructure_8.$$arity = 1);
    Opal.defs(self, '$respond_to?', TMP_Opal_respond_to$q_9 = function(obj, method, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      
      if (obj == null || !obj.$$class) {
        return false;
      }
    ;
      return obj['$respond_to?'](method, include_all);
    }, TMP_Opal_respond_to$q_9.$$arity = -3);
    Opal.defs(self, '$inspect_obj', TMP_Opal_inspect_obj_10 = function $$inspect_obj(obj) {
      var self = this;

      return Opal.inspect(obj);
    }, TMP_Opal_inspect_obj_10.$$arity = 1);
    Opal.defs(self, '$instance_variable_name!', TMP_Opal_instance_variable_name$B_11 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      if ($truthy(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name))) {
      } else {
        self.$raise($$($nesting, 'NameError').$new("" + "'" + (name) + "' is not allowed as an instance variable name", name))
      };
      return name;
    }, TMP_Opal_instance_variable_name$B_11.$$arity = 1);
    Opal.defs(self, '$class_variable_name!', TMP_Opal_class_variable_name$B_12 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      if ($truthy(name.length < 3 || name.slice(0,2) !== '@@')) {
        self.$raise($$($nesting, 'NameError').$new("" + "`" + (name) + "' is not allowed as a class variable name", name))};
      return name;
    }, TMP_Opal_class_variable_name$B_12.$$arity = 1);
    Opal.defs(self, '$const_name!', TMP_Opal_const_name$B_13 = function(const_name) {
      var self = this;

      
      const_name = $$($nesting, 'Opal')['$coerce_to!'](const_name, $$($nesting, 'String'), "to_str");
      if ($truthy(const_name['$[]'](0)['$!='](const_name['$[]'](0).$upcase()))) {
        self.$raise($$($nesting, 'NameError'), "" + "wrong constant name " + (const_name))};
      return const_name;
    }, TMP_Opal_const_name$B_13.$$arity = 1);
    Opal.defs(self, '$pristine', TMP_Opal_pristine_14 = function $$pristine(owner_class, $a) {
      var $post_args, method_names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      method_names = $post_args;;
      
      var method_name, method;
      for (var i = method_names.length - 1; i >= 0; i--) {
        method_name = method_names[i];
        method = owner_class.prototype['$'+method_name];

        if (method && !method.$$stub) {
          method.$$pristine = true;
        }
      }
    ;
      return nil;
    }, TMP_Opal_pristine_14.$$arity = -2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/module"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $lambda = Opal.lambda, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$module_eval', '$to_proc', '$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$class_variable_name!', '$new', '$const_name!', '$=~', '$inject', '$split', '$const_get', '$==', '$!~', '$start_with?', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$cover?', '$size', '$merge', '$compile', '$proc', '$any?', '$prepend_features', '$prepended', '$to_s', '$__id__', '$constants', '$include?', '$copy_class_variables', '$copy_constants']);
  return (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Module_allocate_1, TMP_Module_inherited_2, TMP_Module_initialize_3, TMP_Module_$eq$eq$eq_4, TMP_Module_$lt_5, TMP_Module_$lt$eq_6, TMP_Module_$gt_7, TMP_Module_$gt$eq_8, TMP_Module_$lt$eq$gt_9, TMP_Module_alias_method_10, TMP_Module_alias_native_11, TMP_Module_ancestors_12, TMP_Module_append_features_13, TMP_Module_attr_accessor_14, TMP_Module_attr_reader_15, TMP_Module_attr_writer_16, TMP_Module_autoload_17, TMP_Module_class_variables_18, TMP_Module_class_variable_get_19, TMP_Module_class_variable_set_20, TMP_Module_class_variable_defined$q_21, TMP_Module_remove_class_variable_22, TMP_Module_constants_23, TMP_Module_constants_24, TMP_Module_nesting_25, TMP_Module_const_defined$q_26, TMP_Module_const_get_27, TMP_Module_const_missing_29, TMP_Module_const_set_30, TMP_Module_public_constant_31, TMP_Module_define_method_32, TMP_Module_remove_method_34, TMP_Module_singleton_class$q_35, TMP_Module_include_36, TMP_Module_included_modules_37, TMP_Module_include$q_38, TMP_Module_instance_method_39, TMP_Module_instance_methods_40, TMP_Module_included_41, TMP_Module_extended_42, TMP_Module_extend_object_43, TMP_Module_method_added_44, TMP_Module_method_removed_45, TMP_Module_method_undefined_46, TMP_Module_module_eval_47, TMP_Module_module_exec_49, TMP_Module_method_defined$q_50, TMP_Module_module_function_51, TMP_Module_name_52, TMP_Module_prepend_53, TMP_Module_prepend_features_54, TMP_Module_prepended_55, TMP_Module_remove_const_56, TMP_Module_to_s_57, TMP_Module_undef_method_58, TMP_Module_instance_variables_59, TMP_Module_dup_60, TMP_Module_copy_class_variables_61, TMP_Module_copy_constants_62;

    
    Opal.defs(self, '$allocate', TMP_Module_allocate_1 = function $$allocate() {
      var self = this;

      
      var module = Opal.allocate_module(nil, function(){});
      return module;
    
    }, TMP_Module_allocate_1.$$arity = 0);
    Opal.defs(self, '$inherited', TMP_Module_inherited_2 = function $$inherited(klass) {
      var self = this;

      
      klass.$allocate = function() {
        var module = Opal.allocate_module(nil, function(){});
        Object.setPrototypeOf(module, klass.prototype);
        return module;
      }
    
    }, TMP_Module_inherited_2.$$arity = 1);
    
    Opal.def(self, '$initialize', TMP_Module_initialize_3 = function $$initialize() {
      var $iter = TMP_Module_initialize_3.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Module_initialize_3.$$p = null;
      
      
      if ($iter) TMP_Module_initialize_3.$$p = null;;
      if ((block !== nil)) {
        return $send(self, 'module_eval', [], block.$to_proc())
      } else {
        return nil
      };
    }, TMP_Module_initialize_3.$$arity = 0);
    
    Opal.def(self, '$===', TMP_Module_$eq$eq$eq_4 = function(object) {
      var self = this;

      
      if ($truthy(object == null)) {
        return false};
      return Opal.is_a(object, self);;
    }, TMP_Module_$eq$eq$eq_4.$$arity = 1);
    
    Opal.def(self, '$<', TMP_Module_$lt_5 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Module')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "compared with non class/module")
      };
      
      var working = self,
          ancestors,
          i, length;

      if (working === other) {
        return false;
      }

      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === other) {
          return true;
        }
      }

      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === self) {
          return false;
        }
      }

      return nil;
    ;
    }, TMP_Module_$lt_5.$$arity = 1);
    
    Opal.def(self, '$<=', TMP_Module_$lt$eq_6 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_lt(self, other))
    }, TMP_Module_$lt$eq_6.$$arity = 1);
    
    Opal.def(self, '$>', TMP_Module_$gt_7 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Module')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "compared with non class/module")
      };
      return $rb_lt(other, self);
    }, TMP_Module_$gt_7.$$arity = 1);
    
    Opal.def(self, '$>=', TMP_Module_$gt$eq_8 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_gt(self, other))
    }, TMP_Module_$gt$eq_8.$$arity = 1);
    
    Opal.def(self, '$<=>', TMP_Module_$lt$eq$gt_9 = function(other) {
      var self = this, lt = nil;

      
      
      if (self === other) {
        return 0;
      }
    ;
      if ($truthy($$($nesting, 'Module')['$==='](other))) {
      } else {
        return nil
      };
      lt = $rb_lt(self, other);
      if ($truthy(lt['$nil?']())) {
        return nil};
      if ($truthy(lt)) {
        return -1
      } else {
        return 1
      };
    }, TMP_Module_$lt$eq$gt_9.$$arity = 1);
    
    Opal.def(self, '$alias_method', TMP_Module_alias_method_10 = function $$alias_method(newname, oldname) {
      var self = this;

      
      Opal.alias(self, newname, oldname);
      return self;
    }, TMP_Module_alias_method_10.$$arity = 2);
    
    Opal.def(self, '$alias_native', TMP_Module_alias_native_11 = function $$alias_native(mid, jsid) {
      var self = this;

      
      
      if (jsid == null) {
        jsid = mid;
      };
      Opal.alias_native(self, mid, jsid);
      return self;
    }, TMP_Module_alias_native_11.$$arity = -2);
    
    Opal.def(self, '$ancestors', TMP_Module_ancestors_12 = function $$ancestors() {
      var self = this;

      return Opal.ancestors(self);
    }, TMP_Module_ancestors_12.$$arity = 0);
    
    Opal.def(self, '$append_features', TMP_Module_append_features_13 = function $$append_features(includer) {
      var self = this;

      
      Opal.append_features(self, includer);
      return self;
    }, TMP_Module_append_features_13.$$arity = 1);
    
    Opal.def(self, '$attr_accessor', TMP_Module_attr_accessor_14 = function $$attr_accessor($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      $send(self, 'attr_reader', Opal.to_a(names));
      return $send(self, 'attr_writer', Opal.to_a(names));
    }, TMP_Module_attr_accessor_14.$$arity = -1);
    Opal.alias(self, "attr", "attr_accessor");
    
    Opal.def(self, '$attr_reader', TMP_Module_attr_reader_15 = function $$attr_reader($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      var proto = self.prototype;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name,
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar) {
          return function() {
            if (this[ivar] == null) {
              return nil;
            }
            else {
              return this[ivar];
            }
          };
        })(ivar);

        // initialize the instance variable as nil
        Opal.defineProperty(proto, ivar, nil);

        body.$$parameters = [];
        body.$$arity = 0;

        Opal.defn(self, id, body);
      }
    ;
      return nil;
    }, TMP_Module_attr_reader_15.$$arity = -1);
    
    Opal.def(self, '$attr_writer', TMP_Module_attr_writer_16 = function $$attr_writer($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      var proto = self.prototype;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name + '=',
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar){
          return function(value) {
            return this[ivar] = value;
          }
        })(ivar);

        body.$$parameters = [['req']];
        body.$$arity = 1;

        // initialize the instance variable as nil
        Opal.defineProperty(proto, ivar, nil);

        Opal.defn(self, id, body);
      }
    ;
      return nil;
    }, TMP_Module_attr_writer_16.$$arity = -1);
    
    Opal.def(self, '$autoload', TMP_Module_autoload_17 = function $$autoload(const$, path) {
      var self = this;

      
      if (self.$$autoload == null) self.$$autoload = {};
      Opal.const_cache_version++;
      self.$$autoload[const$] = path;
      return nil;
    
    }, TMP_Module_autoload_17.$$arity = 2);
    
    Opal.def(self, '$class_variables', TMP_Module_class_variables_18 = function $$class_variables() {
      var self = this;

      return Object.keys(Opal.class_variables(self));
    }, TMP_Module_class_variables_18.$$arity = 0);
    
    Opal.def(self, '$class_variable_get', TMP_Module_class_variable_get_19 = function $$class_variable_get(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      
      var value = Opal.class_variables(self)[name];
      if (value == null) {
        self.$raise($$($nesting, 'NameError').$new("" + "uninitialized class variable " + (name) + " in " + (self), name))
      }
      return value;
    ;
    }, TMP_Module_class_variable_get_19.$$arity = 1);
    
    Opal.def(self, '$class_variable_set', TMP_Module_class_variable_set_20 = function $$class_variable_set(name, value) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      return Opal.class_variable_set(self, name, value);;
    }, TMP_Module_class_variable_set_20.$$arity = 2);
    
    Opal.def(self, '$class_variable_defined?', TMP_Module_class_variable_defined$q_21 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      return Opal.class_variables(self).hasOwnProperty(name);;
    }, TMP_Module_class_variable_defined$q_21.$$arity = 1);
    
    Opal.def(self, '$remove_class_variable', TMP_Module_remove_class_variable_22 = function $$remove_class_variable(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      
      if (Opal.hasOwnProperty.call(self.$$cvars, name)) {
        var value = self.$$cvars[name];
        delete self.$$cvars[name];
        return value;
      } else {
        self.$raise($$($nesting, 'NameError'), "" + "cannot remove " + (name) + " for " + (self))
      }
    ;
    }, TMP_Module_remove_class_variable_22.$$arity = 1);
    
    Opal.def(self, '$constants', TMP_Module_constants_23 = function $$constants(inherit) {
      var self = this;

      
      
      if (inherit == null) {
        inherit = true;
      };
      return Opal.constants(self, inherit);;
    }, TMP_Module_constants_23.$$arity = -1);
    Opal.defs(self, '$constants', TMP_Module_constants_24 = function $$constants(inherit) {
      var self = this;

      
      ;
      
      if (inherit == null) {
        var nesting = (self.$$nesting || []).concat(Opal.Object),
            constant, constants = {},
            i, ii;

        for(i = 0, ii = nesting.length; i < ii; i++) {
          for (constant in nesting[i].$$const) {
            constants[constant] = true;
          }
        }
        return Object.keys(constants);
      } else {
        return Opal.constants(self, inherit)
      }
    ;
    }, TMP_Module_constants_24.$$arity = -1);
    Opal.defs(self, '$nesting', TMP_Module_nesting_25 = function $$nesting() {
      var self = this;

      return self.$$nesting || [];
    }, TMP_Module_nesting_25.$$arity = 0);
    
    Opal.def(self, '$const_defined?', TMP_Module_const_defined$q_26 = function(name, inherit) {
      var self = this;

      
      
      if (inherit == null) {
        inherit = true;
      };
      name = $$($nesting, 'Opal')['$const_name!'](name);
      if ($truthy(name['$=~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {
      } else {
        self.$raise($$($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))
      };
      
      var module, modules = [self], module_constants, i, ii;

      // Add up ancestors if inherit is true
      if (inherit) {
        modules = modules.concat(Opal.ancestors(self));

        // Add Object's ancestors if it's a module – modules have no ancestors otherwise
        if (self.$$is_module) {
          modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));
        }
      }

      for (i = 0, ii = modules.length; i < ii; i++) {
        module = modules[i];
        if (module.$$const[name] != null) {
          return true;
        }
      }

      return false;
    ;
    }, TMP_Module_const_defined$q_26.$$arity = -2);
    
    Opal.def(self, '$const_get', TMP_Module_const_get_27 = function $$const_get(name, inherit) {
      var TMP_28, self = this;

      
      
      if (inherit == null) {
        inherit = true;
      };
      name = $$($nesting, 'Opal')['$const_name!'](name);
      
      if (name.indexOf('::') === 0 && name !== '::'){
        name = name.slice(2);
      }
    ;
      if ($truthy(name.indexOf('::') != -1 && name != '::')) {
        return $send(name.$split("::"), 'inject', [self], (TMP_28 = function(o, c){var self = TMP_28.$$s || this;

        
          
          if (o == null) {
            o = nil;
          };
          
          if (c == null) {
            c = nil;
          };
          return o.$const_get(c);}, TMP_28.$$s = self, TMP_28.$$arity = 2, TMP_28))};
      if ($truthy(name['$=~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {
      } else {
        self.$raise($$($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))
      };
      
      if (inherit) {
        return $$([self], name);
      } else {
        return Opal.const_get_local(self, name);
      }
    ;
    }, TMP_Module_const_get_27.$$arity = -2);
    
    Opal.def(self, '$const_missing', TMP_Module_const_missing_29 = function $$const_missing(name) {
      var self = this, full_const_name = nil;

      
      
      if (self.$$autoload) {
        var file = self.$$autoload[name];

        if (file) {
          self.$require(file);

          return self.$const_get(name);
        }
      }
    ;
      full_const_name = (function() {if (self['$==']($$($nesting, 'Object'))) {
        return name
      } else {
        return "" + (self) + "::" + (name)
      }; return nil; })();
      return self.$raise($$($nesting, 'NameError').$new("" + "uninitialized constant " + (full_const_name), name));
    }, TMP_Module_const_missing_29.$$arity = 1);
    
    Opal.def(self, '$const_set', TMP_Module_const_set_30 = function $$const_set(name, value) {
      var $a, self = this;

      
      name = $$($nesting, 'Opal')['$const_name!'](name);
      if ($truthy(($truthy($a = name['$!~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP'))) ? $a : name['$start_with?']("::")))) {
        self.$raise($$($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))};
      Opal.const_set(self, name, value);
      return value;
    }, TMP_Module_const_set_30.$$arity = 2);
    
    Opal.def(self, '$public_constant', TMP_Module_public_constant_31 = function $$public_constant(const_name) {
      var self = this;

      return nil
    }, TMP_Module_public_constant_31.$$arity = 1);
    
    Opal.def(self, '$define_method', TMP_Module_define_method_32 = function $$define_method(name, method) {
      var $iter = TMP_Module_define_method_32.$$p, block = $iter || nil, $a, TMP_33, self = this, $case = nil;

      if ($iter) TMP_Module_define_method_32.$$p = null;
      
      
      if ($iter) TMP_Module_define_method_32.$$p = null;;
      ;
      if ($truthy(method === undefined && block === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "tried to create a Proc object without a block")};
      block = ($truthy($a = block) ? $a : (function() {$case = method;
      if ($$($nesting, 'Proc')['$===']($case)) {return method}
      else if ($$($nesting, 'Method')['$===']($case)) {return method.$to_proc().$$unbound}
      else if ($$($nesting, 'UnboundMethod')['$===']($case)) {return $lambda((TMP_33 = function($b){var self = TMP_33.$$s || this, $post_args, args, bound = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        bound = method.$bind(self);
        return $send(bound, 'call', Opal.to_a(args));}, TMP_33.$$s = self, TMP_33.$$arity = -1, TMP_33))}
      else {return self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (block.$class()) + " (expected Proc/Method)")}})());
      
      var id = '$' + name;

      block.$$jsid        = name;
      block.$$s           = null;
      block.$$def         = block;
      block.$$define_meth = true;

      Opal.defn(self, id, block);

      return name;
    ;
    }, TMP_Module_define_method_32.$$arity = -2);
    
    Opal.def(self, '$remove_method', TMP_Module_remove_method_34 = function $$remove_method($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.rdef(self, "$" + names[i]);
      }
    ;
      return self;
    }, TMP_Module_remove_method_34.$$arity = -1);
    
    Opal.def(self, '$singleton_class?', TMP_Module_singleton_class$q_35 = function() {
      var self = this;

      return !!self.$$is_singleton;
    }, TMP_Module_singleton_class$q_35.$$arity = 0);
    
    Opal.def(self, '$include', TMP_Module_include_36 = function $$include($a) {
      var $post_args, mods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      mods = $post_args;;
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    ;
      return self;
    }, TMP_Module_include_36.$$arity = -1);
    
    Opal.def(self, '$included_modules', TMP_Module_included_modules_37 = function $$included_modules() {
      var self = this;

      return Opal.included_modules(self);
    }, TMP_Module_included_modules_37.$$arity = 0);
    
    Opal.def(self, '$include?', TMP_Module_include$q_38 = function(mod) {
      var self = this;

      
      if (!mod.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
      }

      var i, ii, mod2, ancestors = Opal.ancestors(self);

      for (i = 0, ii = ancestors.length; i < ii; i++) {
        mod2 = ancestors[i];
        if (mod2 === mod && mod2 !== self) {
          return true;
        }
      }

      return false;
    
    }, TMP_Module_include$q_38.$$arity = 1);
    
    Opal.def(self, '$instance_method', TMP_Module_instance_method_39 = function $$instance_method(name) {
      var self = this;

      
      var meth = self.prototype['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($$($nesting, 'NameError').$new("" + "undefined method `" + (name) + "' for class `" + (self.$name()) + "'", name));
      }

      return $$($nesting, 'UnboundMethod').$new(self, meth.$$owner || self, meth, name);
    
    }, TMP_Module_instance_method_39.$$arity = 1);
    
    Opal.def(self, '$instance_methods', TMP_Module_instance_methods_40 = function $$instance_methods(include_super) {
      var self = this;

      
      
      if (include_super == null) {
        include_super = true;
      };
      
      if ($truthy(include_super)) {
        return Opal.instance_methods(self);
      } else {
        return Opal.own_instance_methods(self);
      }
    ;
    }, TMP_Module_instance_methods_40.$$arity = -1);
    
    Opal.def(self, '$included', TMP_Module_included_41 = function $$included(mod) {
      var self = this;

      return nil
    }, TMP_Module_included_41.$$arity = 1);
    
    Opal.def(self, '$extended', TMP_Module_extended_42 = function $$extended(mod) {
      var self = this;

      return nil
    }, TMP_Module_extended_42.$$arity = 1);
    
    Opal.def(self, '$extend_object', TMP_Module_extend_object_43 = function $$extend_object(object) {
      var self = this;

      return nil
    }, TMP_Module_extend_object_43.$$arity = 1);
    
    Opal.def(self, '$method_added', TMP_Module_method_added_44 = function $$method_added($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, TMP_Module_method_added_44.$$arity = -1);
    
    Opal.def(self, '$method_removed', TMP_Module_method_removed_45 = function $$method_removed($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, TMP_Module_method_removed_45.$$arity = -1);
    
    Opal.def(self, '$method_undefined', TMP_Module_method_undefined_46 = function $$method_undefined($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, TMP_Module_method_undefined_46.$$arity = -1);
    
    Opal.def(self, '$module_eval', TMP_Module_module_eval_47 = function $$module_eval($a) {
      var $iter = TMP_Module_module_eval_47.$$p, block = $iter || nil, $post_args, args, $b, TMP_48, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      if ($iter) TMP_Module_module_eval_47.$$p = null;
      
      
      if ($iter) TMP_Module_module_eval_47.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {
        
        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {
        } else {
          $$($nesting, 'Kernel').$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy($b = file) ? $b : "(eval)"), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $$($nesting, 'Opal').$compile(string, compiling_options);
        block = $send($$($nesting, 'Kernel'), 'proc', [], (TMP_48 = function(){var self = TMP_48.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48));
      } else if ($truthy(args['$any?']())) {
        $$($nesting, 'Kernel').$raise($$($nesting, 'ArgumentError'), "" + ("" + "wrong number of arguments (" + (args.$size()) + " for 0)") + "\n\n  NOTE:If you want to enable passing a String argument please add \"require 'opal-parser'\" to your script\n")};
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.apply(self, [self]);
      block.$$s = old;

      return result;
    ;
    }, TMP_Module_module_eval_47.$$arity = -1);
    Opal.alias(self, "class_eval", "module_eval");
    
    Opal.def(self, '$module_exec', TMP_Module_module_exec_49 = function $$module_exec($a) {
      var $iter = TMP_Module_module_exec_49.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_Module_module_exec_49.$$p = null;
      
      
      if ($iter) TMP_Module_module_exec_49.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      if (block === nil) {
        self.$raise($$($nesting, 'LocalJumpError'), "no block given")
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    ;
    }, TMP_Module_module_exec_49.$$arity = -1);
    Opal.alias(self, "class_exec", "module_exec");
    
    Opal.def(self, '$method_defined?', TMP_Module_method_defined$q_50 = function(method) {
      var self = this;

      
      var body = self.prototype['$' + method];
      return (!!body) && !body.$$stub;
    
    }, TMP_Module_method_defined$q_50.$$arity = 1);
    
    Opal.def(self, '$module_function', TMP_Module_module_function_51 = function $$module_function($a) {
      var $post_args, methods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      methods = $post_args;;
      
      if (methods.length === 0) {
        self.$$module_function = true;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i],
              id   = '$' + meth,
              func = self.prototype[id];

          Opal.defs(self, id, func);
        }
      }

      return self;
    ;
    }, TMP_Module_module_function_51.$$arity = -1);
    
    Opal.def(self, '$name', TMP_Module_name_52 = function $$name() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        // Give up if any of the ancestors is unnamed
        if (base.$$name === nil || base.$$name == null) return nil;

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === Opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    }, TMP_Module_name_52.$$arity = 0);
    
    Opal.def(self, '$prepend', TMP_Module_prepend_53 = function $$prepend($a) {
      var $post_args, mods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      mods = $post_args;;
      
      if (mods.length === 0) {
        self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (given 0, expected 1+)")
      }

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$prepend_features(self);
        (mod).$prepended(self);
      }
    ;
      return self;
    }, TMP_Module_prepend_53.$$arity = -1);
    
    Opal.def(self, '$prepend_features', TMP_Module_prepend_features_54 = function $$prepend_features(prepender) {
      var self = this;

      
      
      if (!self.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (self.$class()) + " (expected Module)");
      }

      Opal.prepend_features(self, prepender)
    ;
      return self;
    }, TMP_Module_prepend_features_54.$$arity = 1);
    
    Opal.def(self, '$prepended', TMP_Module_prepended_55 = function $$prepended(mod) {
      var self = this;

      return nil
    }, TMP_Module_prepended_55.$$arity = 1);
    
    Opal.def(self, '$remove_const', TMP_Module_remove_const_56 = function $$remove_const(name) {
      var self = this;

      return Opal.const_remove(self, name);
    }, TMP_Module_remove_const_56.$$arity = 1);
    
    Opal.def(self, '$to_s', TMP_Module_to_s_57 = function $$to_s() {
      var $a, self = this;

      return ($truthy($a = Opal.Module.$name.call(self)) ? $a : "" + "#<" + (self.$$is_module ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">")
    }, TMP_Module_to_s_57.$$arity = 0);
    
    Opal.def(self, '$undef_method', TMP_Module_undef_method_58 = function $$undef_method($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.udef(self, "$" + names[i]);
      }
    ;
      return self;
    }, TMP_Module_undef_method_58.$$arity = -1);
    
    Opal.def(self, '$instance_variables', TMP_Module_instance_variables_59 = function $$instance_variables() {
      var self = this, consts = nil;

      
      consts = (Opal.Module.$$nesting = $nesting, self.$constants());
      
      var result = [];

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {
          result.push('@' + name);
        }
      }

      return result;
    ;
    }, TMP_Module_instance_variables_59.$$arity = 0);
    
    Opal.def(self, '$dup', TMP_Module_dup_60 = function $$dup() {
      var $iter = TMP_Module_dup_60.$$p, $yield = $iter || nil, self = this, copy = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Module_dup_60.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      copy = $send(self, Opal.find_super_dispatcher(self, 'dup', TMP_Module_dup_60, false), $zuper, $iter);
      copy.$copy_class_variables(self);
      copy.$copy_constants(self);
      return copy;
    }, TMP_Module_dup_60.$$arity = 0);
    
    Opal.def(self, '$copy_class_variables', TMP_Module_copy_class_variables_61 = function $$copy_class_variables(other) {
      var self = this;

      
      for (var name in other.$$cvars) {
        self.$$cvars[name] = other.$$cvars[name];
      }
    
    }, TMP_Module_copy_class_variables_61.$$arity = 1);
    return (Opal.def(self, '$copy_constants', TMP_Module_copy_constants_62 = function $$copy_constants(other) {
      var self = this;

      
      var name, other_constants = other.$$const;

      for (name in other_constants) {
        Opal.const_set(self, name, other_constants[name]);
      }
    
    }, TMP_Module_copy_constants_62.$$arity = 1), nil) && 'copy_constants';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$class_eval', '$to_proc', '$initialize_copy', '$allocate', '$name', '$to_s']);
  
  self.$require("corelib/module");
  return (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Class_new_1, TMP_Class_allocate_2, TMP_Class_inherited_3, TMP_Class_initialize_dup_4, TMP_Class_new_5, TMP_Class_superclass_6, TMP_Class_to_s_7;

    
    Opal.defs(self, '$new', TMP_Class_new_1 = function(superclass) {
      var $iter = TMP_Class_new_1.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Class_new_1.$$p = null;
      
      
      if ($iter) TMP_Class_new_1.$$p = null;;
      
      if (superclass == null) {
        superclass = $$($nesting, 'Object');
      };
      
      if (!superclass.$$is_class) {
        throw Opal.TypeError.$new("superclass must be a Class");
      }

      var klass = Opal.allocate_class(nil, superclass, function(){});
      superclass.$inherited(klass);
      (function() {if ((block !== nil)) {
        return $send((klass), 'class_eval', [], block.$to_proc())
      } else {
        return nil
      }; return nil; })()
      return klass;
    ;
    }, TMP_Class_new_1.$$arity = -1);
    
    Opal.def(self, '$allocate', TMP_Class_allocate_2 = function $$allocate() {
      var self = this;

      
      var obj = new self();
      obj.$$id = Opal.uid();
      return obj;
    
    }, TMP_Class_allocate_2.$$arity = 0);
    
    Opal.def(self, '$inherited', TMP_Class_inherited_3 = function $$inherited(cls) {
      var self = this;

      return nil
    }, TMP_Class_inherited_3.$$arity = 1);
    
    Opal.def(self, '$initialize_dup', TMP_Class_initialize_dup_4 = function $$initialize_dup(original) {
      var self = this;

      
      self.$initialize_copy(original);
      
      self.$$name = null;
      self.$$full_name = null;
    ;
    }, TMP_Class_initialize_dup_4.$$arity = 1);
    
    Opal.def(self, '$new', TMP_Class_new_5 = function($a) {
      var $iter = TMP_Class_new_5.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_Class_new_5.$$p = null;
      
      
      if ($iter) TMP_Class_new_5.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var object = self.$allocate();
      Opal.send(object, object.$initialize, args, block);
      return object;
    ;
    }, TMP_Class_new_5.$$arity = -1);
    
    Opal.def(self, '$superclass', TMP_Class_superclass_6 = function $$superclass() {
      var self = this;

      return self.$$super || nil;
    }, TMP_Class_superclass_6.$$arity = 0);
    return (Opal.def(self, '$to_s', TMP_Class_to_s_7 = function $$to_s() {
      var $iter = TMP_Class_to_s_7.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Class_to_s_7.$$p = null;
      
      var singleton_of = self.$$singleton_of;

      if (singleton_of && (singleton_of.$$is_a_module)) {
        return "" + "#<Class:" + ((singleton_of).$name()) + ">";
      }
      else if (singleton_of) {
        // a singleton class created from an object
        return "" + "#<Class:#<" + ((singleton_of.$$class).$name()) + ":0x" + ((Opal.id(singleton_of)).$to_s(16)) + ">>";
      }
      return $send(self, Opal.find_super_dispatcher(self, 'to_s', TMP_Class_to_s_7, false), [], null);
    
    }, TMP_Class_to_s_7.$$arity = 0), nil) && 'to_s';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/basic_object"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$merge', '$compile', '$proc', '$any?', '$inspect', '$new']);
  return (function($base, $super, $parent_nesting) {
    function $BasicObject(){};
    var self = $BasicObject = $klass($base, $super, 'BasicObject', $BasicObject);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_BasicObject_initialize_1, TMP_BasicObject_$eq$eq_2, TMP_BasicObject_eql$q_3, TMP_BasicObject___id___4, TMP_BasicObject___send___5, TMP_BasicObject_$B_6, TMP_BasicObject_$B$eq_7, TMP_BasicObject_instance_eval_8, TMP_BasicObject_instance_exec_10, TMP_BasicObject_singleton_method_added_11, TMP_BasicObject_singleton_method_removed_12, TMP_BasicObject_singleton_method_undefined_13, TMP_BasicObject_class_14, TMP_BasicObject_method_missing_15;

    
    
    Opal.def(self, '$initialize', TMP_BasicObject_initialize_1 = function $$initialize($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, TMP_BasicObject_initialize_1.$$arity = -1);
    
    Opal.def(self, '$==', TMP_BasicObject_$eq$eq_2 = function(other) {
      var self = this;

      return self === other;
    }, TMP_BasicObject_$eq$eq_2.$$arity = 1);
    
    Opal.def(self, '$eql?', TMP_BasicObject_eql$q_3 = function(other) {
      var self = this;

      return self['$=='](other)
    }, TMP_BasicObject_eql$q_3.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    
    Opal.def(self, '$__id__', TMP_BasicObject___id___4 = function $$__id__() {
      var self = this;

      
      if (self.$$id != null) {
        return self.$$id;
      }
      Opal.defineProperty(self, '$$id', Opal.uid());
      return self.$$id;
    
    }, TMP_BasicObject___id___4.$$arity = 0);
    
    Opal.def(self, '$__send__', TMP_BasicObject___send___5 = function $$__send__(symbol, $a) {
      var $iter = TMP_BasicObject___send___5.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_BasicObject___send___5.$$p = null;
      
      
      if ($iter) TMP_BasicObject___send___5.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    ;
    }, TMP_BasicObject___send___5.$$arity = -2);
    
    Opal.def(self, '$!', TMP_BasicObject_$B_6 = function() {
      var self = this;

      return false
    }, TMP_BasicObject_$B_6.$$arity = 0);
    
    Opal.def(self, '$!=', TMP_BasicObject_$B$eq_7 = function(other) {
      var self = this;

      return self['$=='](other)['$!']()
    }, TMP_BasicObject_$B$eq_7.$$arity = 1);
    
    Opal.def(self, '$instance_eval', TMP_BasicObject_instance_eval_8 = function $$instance_eval($a) {
      var $iter = TMP_BasicObject_instance_eval_8.$$p, block = $iter || nil, $post_args, args, $b, TMP_9, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      if ($iter) TMP_BasicObject_instance_eval_8.$$p = null;
      
      
      if ($iter) TMP_BasicObject_instance_eval_8.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {
        
        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {
        } else {
          $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy($b = file) ? $b : "(eval)"), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $$$('::', 'Opal').$compile(string, compiling_options);
        block = $send($$$('::', 'Kernel'), 'proc', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
      } else if ($truthy(args['$any?']())) {
        $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "" + "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;

      // Need to pass $$eval so that method definitions know if this is
      // being done on a class/module. Cannot be compiler driven since
      // send(:instance_eval) needs to work.
      if (self.$$is_a_module) {
        self.$$eval = true;
        try {
          result = block.call(self, self);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.call(self, self);
      }

      block.$$s = old;

      return result;
    ;
    }, TMP_BasicObject_instance_eval_8.$$arity = -1);
    
    Opal.def(self, '$instance_exec', TMP_BasicObject_instance_exec_10 = function $$instance_exec($a) {
      var $iter = TMP_BasicObject_instance_exec_10.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_BasicObject_instance_exec_10.$$p = null;
      
      
      if ($iter) TMP_BasicObject_instance_exec_10.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(block)) {
      } else {
        $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;

      if (self.$$is_a_module) {
        self.$$eval = true;
        try {
          result = block.apply(self, args);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.apply(self, args);
      }

      block.$$s = block_self;

      return result;
    ;
    }, TMP_BasicObject_instance_exec_10.$$arity = -1);
    
    Opal.def(self, '$singleton_method_added', TMP_BasicObject_singleton_method_added_11 = function $$singleton_method_added($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, TMP_BasicObject_singleton_method_added_11.$$arity = -1);
    
    Opal.def(self, '$singleton_method_removed', TMP_BasicObject_singleton_method_removed_12 = function $$singleton_method_removed($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, TMP_BasicObject_singleton_method_removed_12.$$arity = -1);
    
    Opal.def(self, '$singleton_method_undefined', TMP_BasicObject_singleton_method_undefined_13 = function $$singleton_method_undefined($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, TMP_BasicObject_singleton_method_undefined_13.$$arity = -1);
    
    Opal.def(self, '$class', TMP_BasicObject_class_14 = function() {
      var self = this;

      return self.$$class;
    }, TMP_BasicObject_class_14.$$arity = 0);
    return (Opal.def(self, '$method_missing', TMP_BasicObject_method_missing_15 = function $$method_missing(symbol, $a) {
      var $iter = TMP_BasicObject_method_missing_15.$$p, block = $iter || nil, $post_args, args, self = this, message = nil;

      if ($iter) TMP_BasicObject_method_missing_15.$$p = null;
      
      
      if ($iter) TMP_BasicObject_method_missing_15.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      message = (function() {if ($truthy(self.$inspect && !self.$inspect.$$stub)) {
        return "" + "undefined method `" + (symbol) + "' for " + (self.$inspect()) + ":" + (self.$$class)
      } else {
        return "" + "undefined method `" + (symbol) + "' for " + (self.$$class)
      }; return nil; })();
      return $$$('::', 'Kernel').$raise($$$('::', 'NoMethodError').$new(message, symbol));
    }, TMP_BasicObject_method_missing_15.$$arity = -2), nil) && 'method_missing';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/kernel"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2, $send = Opal.send, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$singleton_class', '$to_proc', '$initialize_dup', '$for', '$empty?', '$pop', '$call', '$coerce_to', '$append_features', '$extend_object', '$extended', '$length', '$respond_to?', '$[]', '$nil?', '$to_a', '$to_int', '$fetch', '$Integer', '$Float', '$to_ary', '$to_str', '$to_s', '$__id__', '$instance_variable_name!', '$coerce_to!', '$===', '$enum_for', '$result', '$any?', '$print', '$format', '$puts', '$each', '$<=', '$exception', '$is_a?', '$rand', '$respond_to_missing?', '$try_convert!', '$expand_path', '$join', '$start_with?', '$new_seed', '$srand', '$sym', '$arg', '$open', '$include']);
  
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_method_missing_1, TMP_Kernel_$eq$_2, TMP_Kernel_$B$_3, TMP_Kernel_$eq$eq$eq_4, TMP_Kernel_$lt$eq$gt_5, TMP_Kernel_method_6, TMP_Kernel_methods_7, TMP_Kernel_public_methods_8, TMP_Kernel_Array_9, TMP_Kernel_at_exit_10, TMP_Kernel_caller_11, TMP_Kernel_class_12, TMP_Kernel_copy_instance_variables_13, TMP_Kernel_copy_singleton_methods_14, TMP_Kernel_clone_15, TMP_Kernel_initialize_clone_16, TMP_Kernel_define_singleton_method_17, TMP_Kernel_dup_18, TMP_Kernel_initialize_dup_19, TMP_Kernel_enum_for_20, TMP_Kernel_equal$q_21, TMP_Kernel_exit_22, TMP_Kernel_extend_23, TMP_Kernel_format_24, TMP_Kernel_hash_25, TMP_Kernel_initialize_copy_26, TMP_Kernel_inspect_27, TMP_Kernel_instance_of$q_28, TMP_Kernel_instance_variable_defined$q_29, TMP_Kernel_instance_variable_get_30, TMP_Kernel_instance_variable_set_31, TMP_Kernel_remove_instance_variable_32, TMP_Kernel_instance_variables_33, TMP_Kernel_Integer_34, TMP_Kernel_Float_35, TMP_Kernel_Hash_36, TMP_Kernel_is_a$q_37, TMP_Kernel_itself_38, TMP_Kernel_lambda_39, TMP_Kernel_load_40, TMP_Kernel_loop_41, TMP_Kernel_nil$q_43, TMP_Kernel_printf_44, TMP_Kernel_proc_45, TMP_Kernel_puts_46, TMP_Kernel_p_47, TMP_Kernel_print_49, TMP_Kernel_warn_50, TMP_Kernel_raise_51, TMP_Kernel_rand_52, TMP_Kernel_respond_to$q_53, TMP_Kernel_respond_to_missing$q_54, TMP_Kernel_require_55, TMP_Kernel_require_relative_56, TMP_Kernel_require_tree_57, TMP_Kernel_singleton_class_58, TMP_Kernel_sleep_59, TMP_Kernel_srand_60, TMP_Kernel_String_61, TMP_Kernel_tap_62, TMP_Kernel_to_proc_63, TMP_Kernel_to_s_64, TMP_Kernel_catch_65, TMP_Kernel_throw_66, TMP_Kernel_open_67, TMP_Kernel_yield_self_68;

    
    
    Opal.def(self, '$method_missing', TMP_Kernel_method_missing_1 = function $$method_missing(symbol, $a) {
      var $iter = TMP_Kernel_method_missing_1.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_Kernel_method_missing_1.$$p = null;
      
      
      if ($iter) TMP_Kernel_method_missing_1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      return self.$raise($$($nesting, 'NoMethodError').$new("" + "undefined method `" + (symbol) + "' for " + (self.$inspect()), symbol, args));
    }, TMP_Kernel_method_missing_1.$$arity = -2);
    
    Opal.def(self, '$=~', TMP_Kernel_$eq$_2 = function(obj) {
      var self = this;

      return false
    }, TMP_Kernel_$eq$_2.$$arity = 1);
    
    Opal.def(self, '$!~', TMP_Kernel_$B$_3 = function(obj) {
      var self = this;

      return self['$=~'](obj)['$!']()
    }, TMP_Kernel_$B$_3.$$arity = 1);
    
    Opal.def(self, '$===', TMP_Kernel_$eq$eq$eq_4 = function(other) {
      var $a, self = this;

      return ($truthy($a = self.$object_id()['$=='](other.$object_id())) ? $a : self['$=='](other))
    }, TMP_Kernel_$eq$eq$eq_4.$$arity = 1);
    
    Opal.def(self, '$<=>', TMP_Kernel_$lt$eq$gt_5 = function(other) {
      var self = this;

      
      // set guard for infinite recursion
      self.$$comparable = true;

      var x = self['$=='](other);

      if (x && x !== nil) {
        return 0;
      }

      return nil;
    
    }, TMP_Kernel_$lt$eq$gt_5.$$arity = 1);
    
    Opal.def(self, '$method', TMP_Kernel_method_6 = function $$method(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($$($nesting, 'NameError').$new("" + "undefined method `" + (name) + "' for class `" + (self.$class()) + "'", name));
      }

      return $$($nesting, 'Method').$new(self, meth.$$owner || self.$class(), meth, name);
    
    }, TMP_Kernel_method_6.$$arity = 1);
    
    Opal.def(self, '$methods', TMP_Kernel_methods_7 = function $$methods(all) {
      var self = this;

      
      
      if (all == null) {
        all = true;
      };
      
      if ($truthy(all)) {
        return Opal.methods(self);
      } else {
        return Opal.own_methods(self);
      }
    ;
    }, TMP_Kernel_methods_7.$$arity = -1);
    
    Opal.def(self, '$public_methods', TMP_Kernel_public_methods_8 = function $$public_methods(all) {
      var self = this;

      
      
      if (all == null) {
        all = true;
      };
      
      if ($truthy(all)) {
        return Opal.methods(self);
      } else {
        return Opal.receiver_methods(self);
      }
    ;
    }, TMP_Kernel_public_methods_8.$$arity = -1);
    
    Opal.def(self, '$Array', TMP_Kernel_Array_9 = function $$Array(object) {
      var self = this;

      
      var coerced;

      if (object === nil) {
        return [];
      }

      if (object.$$is_array) {
        return object;
      }

      coerced = $$($nesting, 'Opal')['$coerce_to?'](object, $$($nesting, 'Array'), "to_ary");
      if (coerced !== nil) { return coerced; }

      coerced = $$($nesting, 'Opal')['$coerce_to?'](object, $$($nesting, 'Array'), "to_a");
      if (coerced !== nil) { return coerced; }

      return [object];
    
    }, TMP_Kernel_Array_9.$$arity = 1);
    
    Opal.def(self, '$at_exit', TMP_Kernel_at_exit_10 = function $$at_exit() {
      var $iter = TMP_Kernel_at_exit_10.$$p, block = $iter || nil, $a, self = this;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if ($iter) TMP_Kernel_at_exit_10.$$p = null;
      
      
      if ($iter) TMP_Kernel_at_exit_10.$$p = null;;
      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);
      return $gvars.__at_exit__['$<<'](block);
    }, TMP_Kernel_at_exit_10.$$arity = 0);
    
    Opal.def(self, '$caller', TMP_Kernel_caller_11 = function $$caller($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return [];
    }, TMP_Kernel_caller_11.$$arity = -1);
    
    Opal.def(self, '$class', TMP_Kernel_class_12 = function() {
      var self = this;

      return self.$$class;
    }, TMP_Kernel_class_12.$$arity = 0);
    
    Opal.def(self, '$copy_instance_variables', TMP_Kernel_copy_instance_variables_13 = function $$copy_instance_variables(other) {
      var self = this;

      
      var keys = Object.keys(other), i, ii, name;
      for (i = 0, ii = keys.length; i < ii; i++) {
        name = keys[i];
        if (name.charAt(0) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, TMP_Kernel_copy_instance_variables_13.$$arity = 1);
    
    Opal.def(self, '$copy_singleton_methods', TMP_Kernel_copy_singleton_methods_14 = function $$copy_singleton_methods(other) {
      var self = this;

      
      var i, name, names, length;

      if (other.hasOwnProperty('$$meta')) {
        var other_singleton_class = Opal.get_singleton_class(other);
        var self_singleton_class = Opal.get_singleton_class(self);
        names = Object.getOwnPropertyNames(other_singleton_class.prototype);

        for (i = 0, length = names.length; i < length; i++) {
          name = names[i];
          if (Opal.is_method(name)) {
            self_singleton_class.prototype[name] = other_singleton_class.prototype[name];
          }
        }

        self_singleton_class.$$const = Object.assign({}, other_singleton_class.$$const);
        Object.setPrototypeOf(
          self_singleton_class.prototype,
          Object.getPrototypeOf(other_singleton_class.prototype)
        );
      }

      for (i = 0, names = Object.getOwnPropertyNames(other), length = names.length; i < length; i++) {
        name = names[i];
        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, TMP_Kernel_copy_singleton_methods_14.$$arity = 1);
    
    Opal.def(self, '$clone', TMP_Kernel_clone_15 = function $$clone($kwargs) {
      var freeze, self = this, copy = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_Kernel_clone_15.$$arity = -1);
    
    Opal.def(self, '$initialize_clone', TMP_Kernel_initialize_clone_16 = function $$initialize_clone(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, TMP_Kernel_initialize_clone_16.$$arity = 1);
    
    Opal.def(self, '$define_singleton_method', TMP_Kernel_define_singleton_method_17 = function $$define_singleton_method(name, method) {
      var $iter = TMP_Kernel_define_singleton_method_17.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Kernel_define_singleton_method_17.$$p = null;
      
      
      if ($iter) TMP_Kernel_define_singleton_method_17.$$p = null;;
      ;
      return $send(self.$singleton_class(), 'define_method', [name, method], block.$to_proc());
    }, TMP_Kernel_define_singleton_method_17.$$arity = -2);
    
    Opal.def(self, '$dup', TMP_Kernel_dup_18 = function $$dup() {
      var self = this, copy = nil;

      
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_Kernel_dup_18.$$arity = 0);
    
    Opal.def(self, '$initialize_dup', TMP_Kernel_initialize_dup_19 = function $$initialize_dup(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, TMP_Kernel_initialize_dup_19.$$arity = 1);
    
    Opal.def(self, '$enum_for', TMP_Kernel_enum_for_20 = function $$enum_for($a, $b) {
      var $iter = TMP_Kernel_enum_for_20.$$p, block = $iter || nil, $post_args, method, args, self = this;

      if ($iter) TMP_Kernel_enum_for_20.$$p = null;
      
      
      if ($iter) TMP_Kernel_enum_for_20.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        method = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (method == null) {
        method = "each";
      };
      
      args = $post_args;;
      return $send($$($nesting, 'Enumerator'), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc());
    }, TMP_Kernel_enum_for_20.$$arity = -1);
    Opal.alias(self, "to_enum", "enum_for");
    
    Opal.def(self, '$equal?', TMP_Kernel_equal$q_21 = function(other) {
      var self = this;

      return self === other;
    }, TMP_Kernel_equal$q_21.$$arity = 1);
    
    Opal.def(self, '$exit', TMP_Kernel_exit_22 = function $$exit(status) {
      var $a, self = this, block = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      
      
      if (status == null) {
        status = true;
      };
      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);
      while (!($truthy($gvars.__at_exit__['$empty?']()))) {
        
        block = $gvars.__at_exit__.$pop();
        block.$call();
      };
      
      if (status.$$is_boolean) {
        status = status ? 0 : 1;
      } else {
        status = $$($nesting, 'Opal').$coerce_to(status, $$($nesting, 'Integer'), "to_int")
      }

      Opal.exit(status);
    ;
      return nil;
    }, TMP_Kernel_exit_22.$$arity = -1);
    
    Opal.def(self, '$extend', TMP_Kernel_extend_23 = function $$extend($a) {
      var $post_args, mods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      mods = $post_args;;
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(singleton);
        (mod).$extend_object(self);
        (mod).$extended(self);
      }
    ;
      return self;
    }, TMP_Kernel_extend_23.$$arity = -1);
    
    Opal.def(self, '$format', TMP_Kernel_format_24 = function $$format(format_string, $a) {
      var $post_args, args, $b, self = this, ary = nil;
      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      if ($truthy((($b = args.$length()['$=='](1)) ? args['$[]'](0)['$respond_to?']("to_ary") : args.$length()['$=='](1)))) {
        
        ary = $$($nesting, 'Opal')['$coerce_to?'](args['$[]'](0), $$($nesting, 'Array'), "to_ary");
        if ($truthy(ary['$nil?']())) {
        } else {
          args = ary.$to_a()
        };};
      
      var result = '',
          //used for slicing:
          begin_slice = 0,
          end_slice,
          //used for iterating over the format string:
          i,
          len = format_string.length,
          //used for processing field values:
          arg,
          str,
          //used for processing %g and %G fields:
          exponent,
          //used for keeping track of width and precision:
          width,
          precision,
          //used for holding temporary values:
          tmp_num,
          //used for processing %{} and %<> fileds:
          hash_parameter_key,
          closing_brace_char,
          //used for processing %b, %B, %o, %x, and %X fields:
          base_number,
          base_prefix,
          base_neg_zero_regex,
          base_neg_zero_digit,
          //used for processing arguments:
          next_arg,
          seq_arg_num = 1,
          pos_arg_num = 0,
          //used for keeping track of flags:
          flags,
          FNONE  = 0,
          FSHARP = 1,
          FMINUS = 2,
          FPLUS  = 4,
          FZERO  = 8,
          FSPACE = 16,
          FWIDTH = 32,
          FPREC  = 64,
          FPREC0 = 128;

      function CHECK_FOR_FLAGS() {
        if (flags&FWIDTH) { self.$raise($$($nesting, 'ArgumentError'), "flag after width") }
        if (flags&FPREC0) { self.$raise($$($nesting, 'ArgumentError'), "flag after precision") }
      }

      function CHECK_FOR_WIDTH() {
        if (flags&FWIDTH) { self.$raise($$($nesting, 'ArgumentError'), "width given twice") }
        if (flags&FPREC0) { self.$raise($$($nesting, 'ArgumentError'), "width after precision") }
      }

      function GET_NTH_ARG(num) {
        if (num >= args.length) { self.$raise($$($nesting, 'ArgumentError'), "too few arguments") }
        return args[num];
      }

      function GET_NEXT_ARG() {
        switch (pos_arg_num) {
        case -1: self.$raise($$($nesting, 'ArgumentError'), "" + "unnumbered(" + (seq_arg_num) + ") mixed with numbered")
        case -2: self.$raise($$($nesting, 'ArgumentError'), "" + "unnumbered(" + (seq_arg_num) + ") mixed with named")
        }
        pos_arg_num = seq_arg_num++;
        return GET_NTH_ARG(pos_arg_num - 1);
      }

      function GET_POS_ARG(num) {
        if (pos_arg_num > 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "numbered(" + (num) + ") after unnumbered(" + (pos_arg_num) + ")")
        }
        if (pos_arg_num === -2) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "numbered(" + (num) + ") after named")
        }
        if (num < 1) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid index - " + (num) + "$")
        }
        pos_arg_num = -1;
        return GET_NTH_ARG(num - 1);
      }

      function GET_ARG() {
        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);
      }

      function READ_NUM(label) {
        var num, str = '';
        for (;; i++) {
          if (i === len) {
            self.$raise($$($nesting, 'ArgumentError'), "malformed format string - %*[0-9]")
          }
          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {
            i--;
            num = parseInt(str, 10) || 0;
            if (num > 2147483647) {
              self.$raise($$($nesting, 'ArgumentError'), "" + (label) + " too big")
            }
            return num;
          }
          str += format_string.charAt(i);
        }
      }

      function READ_NUM_AFTER_ASTER(label) {
        var arg, num = READ_NUM(label);
        if (format_string.charAt(i + 1) === '$') {
          i++;
          arg = GET_POS_ARG(num);
        } else {
          arg = GET_NEXT_ARG();
        }
        return (arg).$to_int();
      }

      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {
        str = undefined;

        flags = FNONE;
        width = -1;
        precision = -1;
        next_arg = undefined;

        end_slice = i;

        i++;

        switch (format_string.charAt(i)) {
        case '%':
          begin_slice = i;
        case '':
        case '\n':
        case '\0':
          i++;
          continue;
        }

        format_sequence: for (; i < len; i++) {
          switch (format_string.charAt(i)) {

          case ' ':
            CHECK_FOR_FLAGS();
            flags |= FSPACE;
            continue format_sequence;

          case '#':
            CHECK_FOR_FLAGS();
            flags |= FSHARP;
            continue format_sequence;

          case '+':
            CHECK_FOR_FLAGS();
            flags |= FPLUS;
            continue format_sequence;

          case '-':
            CHECK_FOR_FLAGS();
            flags |= FMINUS;
            continue format_sequence;

          case '0':
            CHECK_FOR_FLAGS();
            flags |= FZERO;
            continue format_sequence;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            tmp_num = READ_NUM('width');
            if (format_string.charAt(i + 1) === '$') {
              if (i + 2 === len) {
                str = '%';
                i++;
                break format_sequence;
              }
              if (next_arg !== undefined) {
                self.$raise($$($nesting, 'ArgumentError'), "" + "value given twice - %" + (tmp_num) + "$")
              }
              next_arg = GET_POS_ARG(tmp_num);
              i++;
            } else {
              CHECK_FOR_WIDTH();
              flags |= FWIDTH;
              width = tmp_num;
            }
            continue format_sequence;

          case '<':
          case '\{':
            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\}');
            hash_parameter_key = '';

            i++;

            for (;; i++) {
              if (i === len) {
                self.$raise($$($nesting, 'ArgumentError'), "malformed name - unmatched parenthesis")
              }
              if (format_string.charAt(i) === closing_brace_char) {

                if (pos_arg_num > 0) {
                  self.$raise($$($nesting, 'ArgumentError'), "" + "named " + (hash_parameter_key) + " after unnumbered(" + (pos_arg_num) + ")")
                }
                if (pos_arg_num === -1) {
                  self.$raise($$($nesting, 'ArgumentError'), "" + "named " + (hash_parameter_key) + " after numbered")
                }
                pos_arg_num = -2;

                if (args[0] === undefined || !args[0].$$is_hash) {
                  self.$raise($$($nesting, 'ArgumentError'), "one hash required")
                }

                next_arg = (args[0]).$fetch(hash_parameter_key);

                if (closing_brace_char === '>') {
                  continue format_sequence;
                } else {
                  str = next_arg.toString();
                  if (precision !== -1) { str = str.slice(0, precision); }
                  if (flags&FMINUS) {
                    while (str.length < width) { str = str + ' '; }
                  } else {
                    while (str.length < width) { str = ' ' + str; }
                  }
                  break format_sequence;
                }
              }
              hash_parameter_key += format_string.charAt(i);
            }

          case '*':
            i++;
            CHECK_FOR_WIDTH();
            flags |= FWIDTH;
            width = READ_NUM_AFTER_ASTER('width');
            if (width < 0) {
              flags |= FMINUS;
              width = -width;
            }
            continue format_sequence;

          case '.':
            if (flags&FPREC0) {
              self.$raise($$($nesting, 'ArgumentError'), "precision given twice")
            }
            flags |= FPREC|FPREC0;
            precision = 0;
            i++;
            if (format_string.charAt(i) === '*') {
              i++;
              precision = READ_NUM_AFTER_ASTER('precision');
              if (precision < 0) {
                flags &= ~FPREC;
              }
              continue format_sequence;
            }
            precision = READ_NUM('precision');
            continue format_sequence;

          case 'd':
          case 'i':
          case 'u':
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              str = (-arg).toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            break format_sequence;

          case 'b':
          case 'B':
          case 'o':
          case 'x':
          case 'X':
            switch (format_string.charAt(i)) {
            case 'b':
            case 'B':
              base_number = 2;
              base_prefix = '0b';
              base_neg_zero_regex = /^1+/;
              base_neg_zero_digit = '1';
              break;
            case 'o':
              base_number = 8;
              base_prefix = '0';
              base_neg_zero_regex = /^3?7+/;
              base_neg_zero_digit = '7';
              break;
            case 'x':
            case 'X':
              base_number = 16;
              base_prefix = '0x';
              base_neg_zero_regex = /^f+/;
              base_neg_zero_digit = 'f';
              break;
            }
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString(base_number);
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (flags&FPLUS || flags&FSPACE) {
                str = (-arg).toString(base_number);
                while (str.length < precision) { str = '0' + str; }
                if (flags&FMINUS) {
                  if (flags&FSHARP) { str = base_prefix + str; }
                  str = '-' + str;
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                  } else {
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              } else {
                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);
                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }
                if (flags&FMINUS) {
                  str = '..' + str;
                  if (flags&FSHARP) { str = base_prefix + str; }
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                  } else {
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {
              str = str.toUpperCase();
            }
            break format_sequence;

          case 'f':
          case 'e':
          case 'E':
          case 'g':
          case 'G':
            arg = self.$Float(GET_ARG());
            if (arg >= 0 || isNaN(arg)) {
              if (arg === Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = arg.toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = arg.toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = arg.toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (arg === -Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = (-arg).toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = (-arg).toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = (-arg).toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== -Infinity) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {
              str = str.toUpperCase();
            }
            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');
            break format_sequence;

          case 'a':
          case 'A':
            // Not implemented because there are no specs for this field type.
            self.$raise($$($nesting, 'NotImplementedError'), "`A` and `a` format field types are not implemented in Opal yet")

          case 'c':
            arg = GET_ARG();
            if ((arg)['$respond_to?']("to_ary")) { arg = (arg).$to_ary()[0]; }
            if ((arg)['$respond_to?']("to_str")) {
              str = (arg).$to_str();
            } else {
              str = String.fromCharCode($$($nesting, 'Opal').$coerce_to(arg, $$($nesting, 'Integer'), "to_int"));
            }
            if (str.length !== 1) {
              self.$raise($$($nesting, 'ArgumentError'), "%c requires a character")
            }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 'p':
            str = (GET_ARG()).$inspect();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 's':
            str = (GET_ARG()).$to_s();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          default:
            self.$raise($$($nesting, 'ArgumentError'), "" + "malformed format string - %" + (format_string.charAt(i)))
          }
        }

        if (str === undefined) {
          self.$raise($$($nesting, 'ArgumentError'), "malformed format string - %")
        }

        result += format_string.slice(begin_slice, end_slice) + str;
        begin_slice = i + 1;
      }

      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {
        self.$raise($$($nesting, 'ArgumentError'), "too many arguments for format string")
      }

      return result + format_string.slice(begin_slice);
    ;
    }, TMP_Kernel_format_24.$$arity = -2);
    
    Opal.def(self, '$hash', TMP_Kernel_hash_25 = function $$hash() {
      var self = this;

      return self.$__id__()
    }, TMP_Kernel_hash_25.$$arity = 0);
    
    Opal.def(self, '$initialize_copy', TMP_Kernel_initialize_copy_26 = function $$initialize_copy(other) {
      var self = this;

      return nil
    }, TMP_Kernel_initialize_copy_26.$$arity = 1);
    
    Opal.def(self, '$inspect', TMP_Kernel_inspect_27 = function $$inspect() {
      var self = this;

      return self.$to_s()
    }, TMP_Kernel_inspect_27.$$arity = 0);
    
    Opal.def(self, '$instance_of?', TMP_Kernel_instance_of$q_28 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "class or module required");
      }

      return self.$$class === klass;
    
    }, TMP_Kernel_instance_of$q_28.$$arity = 1);
    
    Opal.def(self, '$instance_variable_defined?', TMP_Kernel_instance_variable_defined$q_29 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      return Opal.hasOwnProperty.call(self, name.substr(1));;
    }, TMP_Kernel_instance_variable_defined$q_29.$$arity = 1);
    
    Opal.def(self, '$instance_variable_get', TMP_Kernel_instance_variable_get_30 = function $$instance_variable_get(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      
      var ivar = self[Opal.ivar(name.substr(1))];

      return ivar == null ? nil : ivar;
    ;
    }, TMP_Kernel_instance_variable_get_30.$$arity = 1);
    
    Opal.def(self, '$instance_variable_set', TMP_Kernel_instance_variable_set_31 = function $$instance_variable_set(name, value) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      return self[Opal.ivar(name.substr(1))] = value;;
    }, TMP_Kernel_instance_variable_set_31.$$arity = 2);
    
    Opal.def(self, '$remove_instance_variable', TMP_Kernel_remove_instance_variable_32 = function $$remove_instance_variable(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      
      var key = Opal.ivar(name.substr(1)),
          val;
      if (self.hasOwnProperty(key)) {
        val = self[key];
        delete self[key];
        return val;
      }
    ;
      return self.$raise($$($nesting, 'NameError'), "" + "instance variable " + (name) + " not defined");
    }, TMP_Kernel_remove_instance_variable_32.$$arity = 1);
    
    Opal.def(self, '$instance_variables', TMP_Kernel_instance_variables_33 = function $$instance_variables() {
      var self = this;

      
      var result = [], ivar;

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {
          if (name.substr(-1) === '$') {
            ivar = name.slice(0, name.length - 1);
          } else {
            ivar = name;
          }
          result.push('@' + ivar);
        }
      }

      return result;
    
    }, TMP_Kernel_instance_variables_33.$$arity = 0);
    
    Opal.def(self, '$Integer', TMP_Kernel_Integer_34 = function $$Integer(value, base) {
      var self = this;

      
      ;
      
      var i, str, base_digits;

      if (!value.$$is_string) {
        if (base !== undefined) {
          self.$raise($$($nesting, 'ArgumentError'), "base specified for non string value")
        }
        if (value === nil) {
          self.$raise($$($nesting, 'TypeError'), "can't convert nil into Integer")
        }
        if (value.$$is_number) {
          if (value === Infinity || value === -Infinity || isNaN(value)) {
            self.$raise($$($nesting, 'FloatDomainError'), value)
          }
          return Math.floor(value);
        }
        if (value['$respond_to?']("to_int")) {
          i = value.$to_int();
          if (i !== nil) {
            return i;
          }
        }
        return $$($nesting, 'Opal')['$coerce_to!'](value, $$($nesting, 'Integer'), "to_i");
      }

      if (value === "0") {
        return 0;
      }

      if (base === undefined) {
        base = 0;
      } else {
        base = $$($nesting, 'Opal').$coerce_to(base, $$($nesting, 'Integer'), "to_int");
        if (base === 1 || base < 0 || base > 36) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (base))
        }
      }

      str = value.toLowerCase();

      str = str.replace(/(\d)_(?=\d)/g, '$1');

      str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {
        switch (flag) {
        case '0b':
          if (base === 0 || base === 2) {
            base = 2;
            return head;
          }
        case '0':
        case '0o':
          if (base === 0 || base === 8) {
            base = 8;
            return head;
          }
        case '0d':
          if (base === 0 || base === 10) {
            base = 10;
            return head;
          }
        case '0x':
          if (base === 0 || base === 16) {
            base = 16;
            return head;
          }
        }
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      });

      base = (base === 0 ? 10 : base);

      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));

      if (!(new RegExp('^\\s*[+-]?[' + base_digits + ']+\\s*$')).test(str)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      }

      i = parseInt(str, base);

      if (isNaN(i)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      }

      return i;
    ;
    }, TMP_Kernel_Integer_34.$$arity = -2);
    
    Opal.def(self, '$Float', TMP_Kernel_Float_35 = function $$Float(value) {
      var self = this;

      
      var str;

      if (value === nil) {
        self.$raise($$($nesting, 'TypeError'), "can't convert nil into Float")
      }

      if (value.$$is_string) {
        str = value.toString();

        str = str.replace(/(\d)_(?=\d)/g, '$1');

        //Special case for hex strings only:
        if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
          return self.$Integer(str);
        }

        if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Float(): \"" + (value) + "\"")
        }

        return parseFloat(str);
      }

      return $$($nesting, 'Opal')['$coerce_to!'](value, $$($nesting, 'Float'), "to_f");
    
    }, TMP_Kernel_Float_35.$$arity = 1);
    
    Opal.def(self, '$Hash', TMP_Kernel_Hash_36 = function $$Hash(arg) {
      var $a, self = this;

      
      if ($truthy(($truthy($a = arg['$nil?']()) ? $a : arg['$==']([])))) {
        return $hash2([], {})};
      if ($truthy($$($nesting, 'Hash')['$==='](arg))) {
        return arg};
      return $$($nesting, 'Opal')['$coerce_to!'](arg, $$($nesting, 'Hash'), "to_hash");
    }, TMP_Kernel_Hash_36.$$arity = 1);
    
    Opal.def(self, '$is_a?', TMP_Kernel_is_a$q_37 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "class or module required");
      }

      return Opal.is_a(self, klass);
    
    }, TMP_Kernel_is_a$q_37.$$arity = 1);
    
    Opal.def(self, '$itself', TMP_Kernel_itself_38 = function $$itself() {
      var self = this;

      return self
    }, TMP_Kernel_itself_38.$$arity = 0);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.def(self, '$lambda', TMP_Kernel_lambda_39 = function $$lambda() {
      var $iter = TMP_Kernel_lambda_39.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Kernel_lambda_39.$$p = null;
      
      
      if ($iter) TMP_Kernel_lambda_39.$$p = null;;
      return Opal.lambda(block);;
    }, TMP_Kernel_lambda_39.$$arity = 0);
    
    Opal.def(self, '$load', TMP_Kernel_load_40 = function $$load(file) {
      var self = this;

      
      file = $$($nesting, 'Opal')['$coerce_to!'](file, $$($nesting, 'String'), "to_str");
      return Opal.load(file);
    }, TMP_Kernel_load_40.$$arity = 1);
    
    Opal.def(self, '$loop', TMP_Kernel_loop_41 = function $$loop() {
      var TMP_42, $a, $iter = TMP_Kernel_loop_41.$$p, $yield = $iter || nil, self = this, e = nil;

      if ($iter) TMP_Kernel_loop_41.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["loop"], (TMP_42 = function(){var self = TMP_42.$$s || this;

        return $$$($$($nesting, 'Float'), 'INFINITY')}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42))
      };
      while ($truthy(true)) {
        
        try {
          Opal.yieldX($yield, [])
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StopIteration')])) {e = $err;
            try {
              return e.$result()
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      };
      return self;
    }, TMP_Kernel_loop_41.$$arity = 0);
    
    Opal.def(self, '$nil?', TMP_Kernel_nil$q_43 = function() {
      var self = this;

      return false
    }, TMP_Kernel_nil$q_43.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.def(self, '$printf', TMP_Kernel_printf_44 = function $$printf($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(args['$any?']())) {
        self.$print($send(self, 'format', Opal.to_a(args)))};
      return nil;
    }, TMP_Kernel_printf_44.$$arity = -1);
    
    Opal.def(self, '$proc', TMP_Kernel_proc_45 = function $$proc() {
      var $iter = TMP_Kernel_proc_45.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Kernel_proc_45.$$p = null;
      
      
      if ($iter) TMP_Kernel_proc_45.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    }, TMP_Kernel_proc_45.$$arity = 0);
    
    Opal.def(self, '$puts', TMP_Kernel_puts_46 = function $$puts($a) {
      var $post_args, strs, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      strs = $post_args;;
      return $send($gvars.stdout, 'puts', Opal.to_a(strs));
    }, TMP_Kernel_puts_46.$$arity = -1);
    
    Opal.def(self, '$p', TMP_Kernel_p_47 = function $$p($a) {
      var $post_args, args, TMP_48, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      $send(args, 'each', [], (TMP_48 = function(obj){var self = TMP_48.$$s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;

      
        
        if (obj == null) {
          obj = nil;
        };
        return $gvars.stdout.$puts(obj.$inspect());}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48));
      if ($truthy($rb_le(args.$length(), 1))) {
        return args['$[]'](0)
      } else {
        return args
      };
    }, TMP_Kernel_p_47.$$arity = -1);
    
    Opal.def(self, '$print', TMP_Kernel_print_49 = function $$print($a) {
      var $post_args, strs, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      strs = $post_args;;
      return $send($gvars.stdout, 'print', Opal.to_a(strs));
    }, TMP_Kernel_print_49.$$arity = -1);
    
    Opal.def(self, '$warn', TMP_Kernel_warn_50 = function $$warn($a) {
      var $post_args, strs, $b, self = this;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      strs = $post_args;;
      if ($truthy(($truthy($b = $gvars.VERBOSE['$nil?']()) ? $b : strs['$empty?']()))) {
        return nil
      } else {
        return $send($gvars.stderr, 'puts', Opal.to_a(strs))
      };
    }, TMP_Kernel_warn_50.$$arity = -1);
    
    Opal.def(self, '$raise', TMP_Kernel_raise_51 = function $$raise(exception, string, _backtrace) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      
      ;
      
      if (string == null) {
        string = nil;
      };
      
      if (_backtrace == null) {
        _backtrace = nil;
      };
      
      if (exception == null && $gvars["!"] !== nil) {
        throw $gvars["!"];
      }
      if (exception == null) {
        exception = $$($nesting, 'RuntimeError').$new();
      }
      else if (exception.$$is_string) {
        exception = $$($nesting, 'RuntimeError').$new(exception);
      }
      // using respond_to? and not an undefined check to avoid method_missing matching as true
      else if (exception.$$is_class && exception['$respond_to?']("exception")) {
        exception = exception.$exception(string);
      }
      else if (exception['$is_a?']($$($nesting, 'Exception'))) {
        // exception is fine
      }
      else {
        exception = $$($nesting, 'TypeError').$new("exception class/object expected");
      }

      if ($gvars["!"] !== nil) {
        Opal.exceptions.push($gvars["!"]);
      }

      $gvars["!"] = exception;

      throw exception;
    ;
    }, TMP_Kernel_raise_51.$$arity = -1);
    Opal.alias(self, "fail", "raise");
    
    Opal.def(self, '$rand', TMP_Kernel_rand_52 = function $$rand(max) {
      var self = this;

      
      ;
      
      if (max === undefined) {
        return $$$($$($nesting, 'Random'), 'DEFAULT').$rand();
      }

      if (max.$$is_number) {
        if (max < 0) {
          max = Math.abs(max);
        }

        if (max % 1 !== 0) {
          max = max.$to_i();
        }

        if (max === 0) {
          max = undefined;
        }
      }
    ;
      return $$$($$($nesting, 'Random'), 'DEFAULT').$rand(max);
    }, TMP_Kernel_rand_52.$$arity = -1);
    
    Opal.def(self, '$respond_to?', TMP_Kernel_respond_to$q_53 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      if ($truthy(self['$respond_to_missing?'](name, include_all))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }
    ;
      return false;
    }, TMP_Kernel_respond_to$q_53.$$arity = -2);
    
    Opal.def(self, '$respond_to_missing?', TMP_Kernel_respond_to_missing$q_54 = function(method_name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return false;
    }, TMP_Kernel_respond_to_missing$q_54.$$arity = -2);
    
    Opal.def(self, '$require', TMP_Kernel_require_55 = function $$require(file) {
      var self = this;

      
      file = $$($nesting, 'Opal')['$coerce_to!'](file, $$($nesting, 'String'), "to_str");
      return Opal.require(file);
    }, TMP_Kernel_require_55.$$arity = 1);
    
    Opal.def(self, '$require_relative', TMP_Kernel_require_relative_56 = function $$require_relative(file) {
      var self = this;

      
      $$($nesting, 'Opal')['$try_convert!'](file, $$($nesting, 'String'), "to_str");
      file = $$($nesting, 'File').$expand_path($$($nesting, 'File').$join(Opal.current_file, "..", file));
      return Opal.require(file);
    }, TMP_Kernel_require_relative_56.$$arity = 1);
    
    Opal.def(self, '$require_tree', TMP_Kernel_require_tree_57 = function $$require_tree(path) {
      var self = this;

      
      var result = [];

      path = $$($nesting, 'File').$expand_path(path)
      path = Opal.normalize(path);
      if (path === '.') path = '';
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          result.push([name, Opal.require(name)]);
        }
      }

      return result;
    
    }, TMP_Kernel_require_tree_57.$$arity = 1);
    Opal.alias(self, "send", "__send__");
    Opal.alias(self, "public_send", "__send__");
    
    Opal.def(self, '$singleton_class', TMP_Kernel_singleton_class_58 = function $$singleton_class() {
      var self = this;

      return Opal.get_singleton_class(self);
    }, TMP_Kernel_singleton_class_58.$$arity = 0);
    
    Opal.def(self, '$sleep', TMP_Kernel_sleep_59 = function $$sleep(seconds) {
      var self = this;

      
      
      if (seconds == null) {
        seconds = nil;
      };
      
      if (seconds === nil) {
        self.$raise($$($nesting, 'TypeError'), "can't convert NilClass into time interval")
      }
      if (!seconds.$$is_number) {
        self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (seconds.$class()) + " into time interval")
      }
      if (seconds < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "time interval must be positive")
      }
      var get_time = Opal.global.performance ?
        function() {return performance.now()} :
        function() {return new Date()}

      var t = get_time();
      while (get_time() - t <= seconds * 1000);
      return seconds;
    ;
    }, TMP_Kernel_sleep_59.$$arity = -1);
    Opal.alias(self, "sprintf", "format");
    
    Opal.def(self, '$srand', TMP_Kernel_srand_60 = function $$srand(seed) {
      var self = this;

      
      
      if (seed == null) {
        seed = $$($nesting, 'Random').$new_seed();
      };
      return $$($nesting, 'Random').$srand(seed);
    }, TMP_Kernel_srand_60.$$arity = -1);
    
    Opal.def(self, '$String', TMP_Kernel_String_61 = function $$String(str) {
      var $a, self = this;

      return ($truthy($a = $$($nesting, 'Opal')['$coerce_to?'](str, $$($nesting, 'String'), "to_str")) ? $a : $$($nesting, 'Opal')['$coerce_to!'](str, $$($nesting, 'String'), "to_s"))
    }, TMP_Kernel_String_61.$$arity = 1);
    
    Opal.def(self, '$tap', TMP_Kernel_tap_62 = function $$tap() {
      var $iter = TMP_Kernel_tap_62.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Kernel_tap_62.$$p = null;
      
      
      if ($iter) TMP_Kernel_tap_62.$$p = null;;
      Opal.yield1(block, self);
      return self;
    }, TMP_Kernel_tap_62.$$arity = 0);
    
    Opal.def(self, '$to_proc', TMP_Kernel_to_proc_63 = function $$to_proc() {
      var self = this;

      return self
    }, TMP_Kernel_to_proc_63.$$arity = 0);
    
    Opal.def(self, '$to_s', TMP_Kernel_to_s_64 = function $$to_s() {
      var self = this;

      return "" + "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">"
    }, TMP_Kernel_to_s_64.$$arity = 0);
    
    Opal.def(self, '$catch', TMP_Kernel_catch_65 = function(sym) {
      var $iter = TMP_Kernel_catch_65.$$p, $yield = $iter || nil, self = this, e = nil;

      if ($iter) TMP_Kernel_catch_65.$$p = null;
      try {
        return Opal.yieldX($yield, []);
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'UncaughtThrowError')])) {e = $err;
          try {
            
            if (e.$sym()['$=='](sym)) {
              return e.$arg()};
            return self.$raise();
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Kernel_catch_65.$$arity = 1);
    
    Opal.def(self, '$throw', TMP_Kernel_throw_66 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self.$raise($$($nesting, 'UncaughtThrowError'), args);
    }, TMP_Kernel_throw_66.$$arity = -1);
    
    Opal.def(self, '$open', TMP_Kernel_open_67 = function $$open($a) {
      var $iter = TMP_Kernel_open_67.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_Kernel_open_67.$$p = null;
      
      
      if ($iter) TMP_Kernel_open_67.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send($$($nesting, 'File'), 'open', Opal.to_a(args), block.$to_proc());
    }, TMP_Kernel_open_67.$$arity = -1);
    
    Opal.def(self, '$yield_self', TMP_Kernel_yield_self_68 = function $$yield_self() {
      var TMP_69, $iter = TMP_Kernel_yield_self_68.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Kernel_yield_self_68.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["yield_self"], (TMP_69 = function(){var self = TMP_69.$$s || this;

        return 1}, TMP_69.$$s = self, TMP_69.$$arity = 0, TMP_69))
      };
      return Opal.yield1($yield, self);;
    }, TMP_Kernel_yield_self_68.$$arity = 0);
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return self.$include($$($nesting, 'Kernel'))
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/error"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$raise', '$+', '$attr_reader', '$[]', '$>', '$length', '$inspect']);
  
  (function($base, $super, $parent_nesting) {
    function $Exception(){};
    var self = $Exception = $klass($base, $super, 'Exception', $Exception);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Exception_new_1, TMP_Exception_exception_2, TMP_Exception_initialize_3, TMP_Exception_backtrace_4, TMP_Exception_exception_5, TMP_Exception_message_6, TMP_Exception_inspect_7, TMP_Exception_set_backtrace_8, TMP_Exception_to_s_9;

    def.message = nil;
    
    var stack_trace_limit;
    Opal.defs(self, '$new', TMP_Exception_new_1 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var message   = (args.length > 0) ? args[0] : nil;
      var error     = new self(message);
      error.name    = self.$$name;
      error.message = message;
      Opal.send(error, error.$initialize, args);

      // Error.captureStackTrace() will use .name and .toString to build the
      // first line of the stack trace so it must be called after the error
      // has been initialized.
      // https://nodejs.org/dist/latest-v6.x/docs/api/errors.html
      if (Opal.config.enable_stack_trace && Error.captureStackTrace) {
        // Passing Kernel.raise will cut the stack trace from that point above
        Error.captureStackTrace(error, stack_trace_limit);
      }

      return error;
    ;
    }, TMP_Exception_new_1.$$arity = -1);
    stack_trace_limit = self.$new;
    Opal.defs(self, '$exception', TMP_Exception_exception_2 = function $$exception($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'new', Opal.to_a(args));
    }, TMP_Exception_exception_2.$$arity = -1);
    
    Opal.def(self, '$initialize', TMP_Exception_initialize_3 = function $$initialize($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self.message = (args.length > 0) ? args[0] : nil;;
    }, TMP_Exception_initialize_3.$$arity = -1);
    
    Opal.def(self, '$backtrace', TMP_Exception_backtrace_4 = function $$backtrace() {
      var self = this;

      
      if (self.backtrace) {
        // nil is a valid backtrace
        return self.backtrace;
      }

      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    }, TMP_Exception_backtrace_4.$$arity = 0);
    
    Opal.def(self, '$exception', TMP_Exception_exception_5 = function $$exception(str) {
      var self = this;

      
      
      if (str == null) {
        str = nil;
      };
      
      if (str === nil || self === str) {
        return self;
      }

      var cloned = self.$clone();
      cloned.message = str;
      return cloned;
    ;
    }, TMP_Exception_exception_5.$$arity = -1);
    
    Opal.def(self, '$message', TMP_Exception_message_6 = function $$message() {
      var self = this;

      return self.$to_s()
    }, TMP_Exception_message_6.$$arity = 0);
    
    Opal.def(self, '$inspect', TMP_Exception_inspect_7 = function $$inspect() {
      var self = this, as_str = nil;

      
      as_str = self.$to_s();
      if ($truthy(as_str['$empty?']())) {
        return self.$class().$to_s()
      } else {
        return "" + "#<" + (self.$class().$to_s()) + ": " + (self.$to_s()) + ">"
      };
    }, TMP_Exception_inspect_7.$$arity = 0);
    
    Opal.def(self, '$set_backtrace', TMP_Exception_set_backtrace_8 = function $$set_backtrace(backtrace) {
      var self = this;

      
      var valid = true, i, ii;

      if (backtrace === nil) {
        self.backtrace = nil;
      } else if (backtrace.$$is_string) {
        self.backtrace = [backtrace];
      } else {
        if (backtrace.$$is_array) {
          for (i = 0, ii = backtrace.length; i < ii; i++) {
            if (!backtrace[i].$$is_string) {
              valid = false;
              break;
            }
          }
        } else {
          valid = false;
        }

        if (valid === false) {
          self.$raise($$($nesting, 'TypeError'), "backtrace must be Array of String")
        }

        self.backtrace = backtrace;
      }

      return backtrace;
    
    }, TMP_Exception_set_backtrace_8.$$arity = 1);
    return (Opal.def(self, '$to_s', TMP_Exception_to_s_9 = function $$to_s() {
      var $a, $b, self = this;

      return ($truthy($a = ($truthy($b = self.message) ? self.message.$to_s() : $b)) ? $a : self.$class().$to_s())
    }, TMP_Exception_to_s_9.$$arity = 0), nil) && 'to_s';
  })($nesting[0], Error, $nesting);
  (function($base, $super, $parent_nesting) {
    function $ScriptError(){};
    var self = $ScriptError = $klass($base, $super, 'ScriptError', $ScriptError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SyntaxError(){};
    var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $LoadError(){};
    var self = $LoadError = $klass($base, $super, 'LoadError', $LoadError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NotImplementedError(){};
    var self = $NotImplementedError = $klass($base, $super, 'NotImplementedError', $NotImplementedError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SystemExit(){};
    var self = $SystemExit = $klass($base, $super, 'SystemExit', $SystemExit);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NoMemoryError(){};
    var self = $NoMemoryError = $klass($base, $super, 'NoMemoryError', $NoMemoryError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SignalException(){};
    var self = $SignalException = $klass($base, $super, 'SignalException', $SignalException);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Interrupt(){};
    var self = $Interrupt = $klass($base, $super, 'Interrupt', $Interrupt);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SecurityError(){};
    var self = $SecurityError = $klass($base, $super, 'SecurityError', $SecurityError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $StandardError(){};
    var self = $StandardError = $klass($base, $super, 'StandardError', $StandardError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $EncodingError(){};
    var self = $EncodingError = $klass($base, $super, 'EncodingError', $EncodingError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $ZeroDivisionError(){};
    var self = $ZeroDivisionError = $klass($base, $super, 'ZeroDivisionError', $ZeroDivisionError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'NameError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $RuntimeError(){};
    var self = $RuntimeError = $klass($base, $super, 'RuntimeError', $RuntimeError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $FrozenError(){};
    var self = $FrozenError = $klass($base, $super, 'FrozenError', $FrozenError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'RuntimeError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $LocalJumpError(){};
    var self = $LocalJumpError = $klass($base, $super, 'LocalJumpError', $LocalJumpError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $TypeError(){};
    var self = $TypeError = $klass($base, $super, 'TypeError', $TypeError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $ArgumentError(){};
    var self = $ArgumentError = $klass($base, $super, 'ArgumentError', $ArgumentError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $IndexError(){};
    var self = $IndexError = $klass($base, $super, 'IndexError', $IndexError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'IndexError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'IndexError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $RangeError(){};
    var self = $RangeError = $klass($base, $super, 'RangeError', $RangeError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $FloatDomainError(){};
    var self = $FloatDomainError = $klass($base, $super, 'FloatDomainError', $FloatDomainError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'RangeError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $IOError(){};
    var self = $IOError = $klass($base, $super, 'IOError', $IOError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SystemCallError(){};
    var self = $SystemCallError = $klass($base, $super, 'SystemCallError', $SystemCallError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $parent_nesting) {
    function $Errno() {};
    var self = $Errno = $module($base, 'Errno', $Errno);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $EINVAL(){};
      var self = $EINVAL = $klass($base, $super, 'EINVAL', $EINVAL);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_EINVAL_new_10;

      return (Opal.defs(self, '$new', TMP_EINVAL_new_10 = function(name) {
        var $iter = TMP_EINVAL_new_10.$$p, $yield = $iter || nil, self = this, message = nil;

        if ($iter) TMP_EINVAL_new_10.$$p = null;
        
        
        if (name == null) {
          name = nil;
        };
        message = "Invalid argument";
        if ($truthy(name)) {
          message = $rb_plus(message, "" + " - " + (name))};
        return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_EINVAL_new_10, false, $EINVAL), [message], null);
      }, TMP_EINVAL_new_10.$$arity = -1), nil) && 'new'
    })($nesting[0], $$($nesting, 'SystemCallError'), $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $UncaughtThrowError(){};
    var self = $UncaughtThrowError = $klass($base, $super, 'UncaughtThrowError', $UncaughtThrowError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_UncaughtThrowError_initialize_11;

    def.sym = nil;
    
    self.$attr_reader("sym", "arg");
    return (Opal.def(self, '$initialize', TMP_UncaughtThrowError_initialize_11 = function $$initialize(args) {
      var $iter = TMP_UncaughtThrowError_initialize_11.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_UncaughtThrowError_initialize_11.$$p = null;
      
      self.sym = args['$[]'](0);
      if ($truthy($rb_gt(args.$length(), 1))) {
        self.arg = args['$[]'](1)};
      return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_UncaughtThrowError_initialize_11, false), ["" + "uncaught throw " + (self.sym.$inspect())], null);
    }, TMP_UncaughtThrowError_initialize_11.$$arity = 1), nil) && 'initialize';
  })($nesting[0], $$($nesting, 'ArgumentError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_NameError_initialize_12;

    
    self.$attr_reader("name");
    return (Opal.def(self, '$initialize', TMP_NameError_initialize_12 = function $$initialize(message, name) {
      var $iter = TMP_NameError_initialize_12.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_NameError_initialize_12.$$p = null;
      
      
      if (name == null) {
        name = nil;
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_NameError_initialize_12, false), [message], null);
      return (self.name = name);
    }, TMP_NameError_initialize_12.$$arity = -2), nil) && 'initialize';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_NoMethodError_initialize_13;

    
    self.$attr_reader("args");
    return (Opal.def(self, '$initialize', TMP_NoMethodError_initialize_13 = function $$initialize(message, name, args) {
      var $iter = TMP_NoMethodError_initialize_13.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_NoMethodError_initialize_13.$$p = null;
      
      
      if (name == null) {
        name = nil;
      };
      
      if (args == null) {
        args = [];
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_NoMethodError_initialize_13, false), [message, name], null);
      return (self.args = args);
    }, TMP_NoMethodError_initialize_13.$$arity = -2), nil) && 'initialize';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return self.$attr_reader("result")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_KeyError_initialize_14, TMP_KeyError_receiver_15, TMP_KeyError_key_16;

    def.receiver = def.key = nil;
    
    
    Opal.def(self, '$initialize', TMP_KeyError_initialize_14 = function $$initialize(message, $kwargs) {
      var receiver, key, $iter = TMP_KeyError_initialize_14.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_KeyError_initialize_14.$$p = null;
      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      receiver = $kwargs.$$smap["receiver"];
      if (receiver == null) {
        receiver = nil
      };
      
      key = $kwargs.$$smap["key"];
      if (key == null) {
        key = nil
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_KeyError_initialize_14, false), [message], null);
      self.receiver = receiver;
      return (self.key = key);
    }, TMP_KeyError_initialize_14.$$arity = -2);
    
    Opal.def(self, '$receiver', TMP_KeyError_receiver_15 = function $$receiver() {
      var $a, self = this;

      return ($truthy($a = self.receiver) ? $a : self.$raise($$($nesting, 'ArgumentError'), "no receiver is available"))
    }, TMP_KeyError_receiver_15.$$arity = 0);
    return (Opal.def(self, '$key', TMP_KeyError_key_16 = function $$key() {
      var $a, self = this;

      return ($truthy($a = self.key) ? $a : self.$raise($$($nesting, 'ArgumentError'), "no key is available"))
    }, TMP_KeyError_key_16.$$arity = 0), nil) && 'key';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    function $JS() {};
    var self = $JS = $module($base, 'JS', $JS);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Error(){};
      var self = $Error = $klass($base, $super, 'Error', $Error);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/constants"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  
  Opal.const_set($nesting[0], 'RUBY_PLATFORM', "opal");
  Opal.const_set($nesting[0], 'RUBY_ENGINE', "opal");
  Opal.const_set($nesting[0], 'RUBY_VERSION', "2.5.1");
  Opal.const_set($nesting[0], 'RUBY_ENGINE_VERSION', "0.11.99.dev");
  Opal.const_set($nesting[0], 'RUBY_RELEASE_DATE', "2018-12-25");
  Opal.const_set($nesting[0], 'RUBY_PATCHLEVEL', 0);
  Opal.const_set($nesting[0], 'RUBY_REVISION', 0);
  Opal.const_set($nesting[0], 'RUBY_COPYRIGHT', "opal - Copyright (C) 2013-2018 Adam Beynon and the Opal contributors");
  return Opal.const_set($nesting[0], 'RUBY_DESCRIPTION', "" + "opal " + ($$($nesting, 'RUBY_ENGINE_VERSION')) + " (" + ($$($nesting, 'RUBY_RELEASE_DATE')) + " revision " + ($$($nesting, 'RUBY_REVISION')) + ")");
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/base"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("corelib/runtime");
  self.$require("corelib/helpers");
  self.$require("corelib/module");
  self.$require("corelib/class");
  self.$require("corelib/basic_object");
  self.$require("corelib/kernel");
  self.$require("corelib/error");
  return self.$require("corelib/constants");
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/nil"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$name', '$new', '$>', '$length', '$Rational']);
  
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_NilClass_$B_2, TMP_NilClass_$_3, TMP_NilClass_$_4, TMP_NilClass_$_5, TMP_NilClass_$eq$eq_6, TMP_NilClass_dup_7, TMP_NilClass_clone_8, TMP_NilClass_inspect_9, TMP_NilClass_nil$q_10, TMP_NilClass_singleton_class_11, TMP_NilClass_to_a_12, TMP_NilClass_to_h_13, TMP_NilClass_to_i_14, TMP_NilClass_to_s_15, TMP_NilClass_to_c_16, TMP_NilClass_rationalize_17, TMP_NilClass_to_r_18, TMP_NilClass_instance_variables_19;

    
    def.$$meta = self;
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_allocate_1;

      
      
      Opal.def(self, '$allocate', TMP_allocate_1 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, TMP_allocate_1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$!', TMP_NilClass_$B_2 = function() {
      var self = this;

      return true
    }, TMP_NilClass_$B_2.$$arity = 0);
    
    Opal.def(self, '$&', TMP_NilClass_$_3 = function(other) {
      var self = this;

      return false
    }, TMP_NilClass_$_3.$$arity = 1);
    
    Opal.def(self, '$|', TMP_NilClass_$_4 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, TMP_NilClass_$_4.$$arity = 1);
    
    Opal.def(self, '$^', TMP_NilClass_$_5 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, TMP_NilClass_$_5.$$arity = 1);
    
    Opal.def(self, '$==', TMP_NilClass_$eq$eq_6 = function(other) {
      var self = this;

      return other === nil;
    }, TMP_NilClass_$eq$eq_6.$$arity = 1);
    
    Opal.def(self, '$dup', TMP_NilClass_dup_7 = function $$dup() {
      var self = this;

      return nil
    }, TMP_NilClass_dup_7.$$arity = 0);
    
    Opal.def(self, '$clone', TMP_NilClass_clone_8 = function $$clone($kwargs) {
      var freeze, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      return nil;
    }, TMP_NilClass_clone_8.$$arity = -1);
    
    Opal.def(self, '$inspect', TMP_NilClass_inspect_9 = function $$inspect() {
      var self = this;

      return "nil"
    }, TMP_NilClass_inspect_9.$$arity = 0);
    
    Opal.def(self, '$nil?', TMP_NilClass_nil$q_10 = function() {
      var self = this;

      return true
    }, TMP_NilClass_nil$q_10.$$arity = 0);
    
    Opal.def(self, '$singleton_class', TMP_NilClass_singleton_class_11 = function $$singleton_class() {
      var self = this;

      return $$($nesting, 'NilClass')
    }, TMP_NilClass_singleton_class_11.$$arity = 0);
    
    Opal.def(self, '$to_a', TMP_NilClass_to_a_12 = function $$to_a() {
      var self = this;

      return []
    }, TMP_NilClass_to_a_12.$$arity = 0);
    
    Opal.def(self, '$to_h', TMP_NilClass_to_h_13 = function $$to_h() {
      var self = this;

      return Opal.hash();
    }, TMP_NilClass_to_h_13.$$arity = 0);
    
    Opal.def(self, '$to_i', TMP_NilClass_to_i_14 = function $$to_i() {
      var self = this;

      return 0
    }, TMP_NilClass_to_i_14.$$arity = 0);
    Opal.alias(self, "to_f", "to_i");
    
    Opal.def(self, '$to_s', TMP_NilClass_to_s_15 = function $$to_s() {
      var self = this;

      return ""
    }, TMP_NilClass_to_s_15.$$arity = 0);
    
    Opal.def(self, '$to_c', TMP_NilClass_to_c_16 = function $$to_c() {
      var self = this;

      return $$($nesting, 'Complex').$new(0, 0)
    }, TMP_NilClass_to_c_16.$$arity = 0);
    
    Opal.def(self, '$rationalize', TMP_NilClass_rationalize_17 = function $$rationalize($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy($rb_gt(args.$length(), 1))) {
        self.$raise($$($nesting, 'ArgumentError'))};
      return self.$Rational(0, 1);
    }, TMP_NilClass_rationalize_17.$$arity = -1);
    
    Opal.def(self, '$to_r', TMP_NilClass_to_r_18 = function $$to_r() {
      var self = this;

      return self.$Rational(0, 1)
    }, TMP_NilClass_to_r_18.$$arity = 0);
    return (Opal.def(self, '$instance_variables', TMP_NilClass_instance_variables_19 = function $$instance_variables() {
      var self = this;

      return []
    }, TMP_NilClass_instance_variables_19.$$arity = 0), nil) && 'instance_variables';
  })($nesting[0], null, $nesting);
  return Opal.const_set($nesting[0], 'NIL', nil);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/boolean"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$raise', '$name']);
  
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Boolean___id___2, TMP_Boolean_$B_3, TMP_Boolean_$_4, TMP_Boolean_$_5, TMP_Boolean_$_6, TMP_Boolean_$eq$eq_7, TMP_Boolean_singleton_class_8, TMP_Boolean_to_s_9, TMP_Boolean_dup_10, TMP_Boolean_clone_11;

    
    Opal.defineProperty(Boolean.prototype, '$$is_boolean', true);
    Opal.defineProperty(Boolean.prototype, '$$meta', self);
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_allocate_1;

      
      
      Opal.def(self, '$allocate', TMP_allocate_1 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, TMP_allocate_1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$__id__', TMP_Boolean___id___2 = function $$__id__() {
      var self = this;

      return self.valueOf() ? 2 : 0;
    }, TMP_Boolean___id___2.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.def(self, '$!', TMP_Boolean_$B_3 = function() {
      var self = this;

      return self != true;
    }, TMP_Boolean_$B_3.$$arity = 0);
    
    Opal.def(self, '$&', TMP_Boolean_$_4 = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    }, TMP_Boolean_$_4.$$arity = 1);
    
    Opal.def(self, '$|', TMP_Boolean_$_5 = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    }, TMP_Boolean_$_5.$$arity = 1);
    
    Opal.def(self, '$^', TMP_Boolean_$_6 = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    }, TMP_Boolean_$_6.$$arity = 1);
    
    Opal.def(self, '$==', TMP_Boolean_$eq$eq_7 = function(other) {
      var self = this;

      return (self == true) === other.valueOf();
    }, TMP_Boolean_$eq$eq_7.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$singleton_class', TMP_Boolean_singleton_class_8 = function $$singleton_class() {
      var self = this;

      return $$($nesting, 'Boolean')
    }, TMP_Boolean_singleton_class_8.$$arity = 0);
    
    Opal.def(self, '$to_s', TMP_Boolean_to_s_9 = function $$to_s() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, TMP_Boolean_to_s_9.$$arity = 0);
    
    Opal.def(self, '$dup', TMP_Boolean_dup_10 = function $$dup() {
      var self = this;

      return self
    }, TMP_Boolean_dup_10.$$arity = 0);
    return (Opal.def(self, '$clone', TMP_Boolean_clone_11 = function $$clone($kwargs) {
      var freeze, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      return self;
    }, TMP_Boolean_clone_11.$$arity = -1), nil) && 'clone';
  })($nesting[0], Boolean, $nesting);
  Opal.const_set($nesting[0], 'TrueClass', $$($nesting, 'Boolean'));
  Opal.const_set($nesting[0], 'FalseClass', $$($nesting, 'Boolean'));
  Opal.const_set($nesting[0], 'TRUE', true);
  return Opal.const_set($nesting[0], 'FALSE', false);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base, $parent_nesting) {
    function $Comparable() {};
    var self = $Comparable = $module($base, 'Comparable', $Comparable);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Comparable_normalize_1, TMP_Comparable_$eq$eq_2, TMP_Comparable_$gt_3, TMP_Comparable_$gt$eq_4, TMP_Comparable_$lt_5, TMP_Comparable_$lt$eq_6, TMP_Comparable_between$q_7, TMP_Comparable_clamp_8;

    
    Opal.defs(self, '$normalize', TMP_Comparable_normalize_1 = function $$normalize(what) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](what))) {
        return what};
      if ($truthy($rb_gt(what, 0))) {
        return 1};
      if ($truthy($rb_lt(what, 0))) {
        return -1};
      return 0;
    }, TMP_Comparable_normalize_1.$$arity = 1);
    
    Opal.def(self, '$==', TMP_Comparable_$eq$eq_2 = function(other) {
      var self = this, cmp = nil;

      try {
        
        if ($truthy(self['$equal?'](other))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    ;
        if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
          return false
        };
        return $$($nesting, 'Comparable').$normalize(cmp) == 0;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Comparable_$eq$eq_2.$$arity = 1);
    
    Opal.def(self, '$>', TMP_Comparable_$gt_3 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) > 0;
    }, TMP_Comparable_$gt_3.$$arity = 1);
    
    Opal.def(self, '$>=', TMP_Comparable_$gt$eq_4 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) >= 0;
    }, TMP_Comparable_$gt$eq_4.$$arity = 1);
    
    Opal.def(self, '$<', TMP_Comparable_$lt_5 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) < 0;
    }, TMP_Comparable_$lt_5.$$arity = 1);
    
    Opal.def(self, '$<=', TMP_Comparable_$lt$eq_6 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) <= 0;
    }, TMP_Comparable_$lt$eq_6.$$arity = 1);
    
    Opal.def(self, '$between?', TMP_Comparable_between$q_7 = function(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, TMP_Comparable_between$q_7.$$arity = 2);
    
    Opal.def(self, '$clamp', TMP_Comparable_clamp_8 = function $$clamp(min, max) {
      var self = this, cmp = nil;

      
      cmp = min['$<=>'](max);
      if ($truthy(cmp)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (min.$class()) + " with " + (max.$class()) + " failed")
      };
      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(cmp), 0))) {
        self.$raise($$($nesting, 'ArgumentError'), "min argument must be smaller than max argument")};
      if ($truthy($rb_lt($$($nesting, 'Comparable').$normalize(self['$<=>'](min)), 0))) {
        return min};
      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(self['$<=>'](max)), 0))) {
        return max};
      return self;
    }, TMP_Comparable_clamp_8.$$arity = 2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/regexp"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$coerce_to', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);
  
  (function($base, $super, $parent_nesting) {
    function $RegexpError(){};
    var self = $RegexpError = $klass($base, $super, 'RegexpError', $RegexpError);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Regexp_$eq$eq_6, TMP_Regexp_$eq$eq$eq_7, TMP_Regexp_$eq$_8, TMP_Regexp_inspect_9, TMP_Regexp_match_10, TMP_Regexp_match$q_11, TMP_Regexp_$_12, TMP_Regexp_source_13, TMP_Regexp_options_14, TMP_Regexp_casefold$q_15;

    
    Opal.const_set($nesting[0], 'IGNORECASE', 1);
    Opal.const_set($nesting[0], 'EXTENDED', 2);
    Opal.const_set($nesting[0], 'MULTILINE', 4);
    Opal.defineProperty(RegExp.prototype, '$$is_regexp', true);
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_allocate_1, TMP_escape_2, TMP_last_match_3, TMP_union_4, TMP_new_5;

      
      
      Opal.def(self, '$allocate', TMP_allocate_1 = function $$allocate() {
        var $iter = TMP_allocate_1.$$p, $yield = $iter || nil, self = this, allocated = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_allocate_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        allocated = $send(self, Opal.find_super_dispatcher(self, 'allocate', TMP_allocate_1, false), $zuper, $iter);
        allocated.uninitialized = true;
        return allocated;
      }, TMP_allocate_1.$$arity = 0);
      
      Opal.def(self, '$escape', TMP_escape_2 = function $$escape(string) {
        var self = this;

        return Opal.escape_regexp(string);
      }, TMP_escape_2.$$arity = 1);
      
      Opal.def(self, '$last_match', TMP_last_match_3 = function $$last_match(n) {
        var self = this;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        
        
        if (n == null) {
          n = nil;
        };
        if ($truthy(n['$nil?']())) {
          return $gvars["~"]
        } else {
          return $gvars["~"]['$[]'](n)
        };
      }, TMP_last_match_3.$$arity = -1);
      Opal.alias(self, "quote", "escape");
      
      Opal.def(self, '$union', TMP_union_4 = function $$union($a) {
        var $post_args, parts, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        parts = $post_args;;
        
        var is_first_part_array, quoted_validated, part, options, each_part_options;
        if (parts.length == 0) {
          return /(?!)/;
        }
        // return fast if there's only one element
        if (parts.length == 1 && parts[0].$$is_regexp) {
          return parts[0];
        }
        // cover the 2 arrays passed as arguments case
        is_first_part_array = parts[0].$$is_array;
        if (parts.length > 1 && is_first_part_array) {
          self.$raise($$($nesting, 'TypeError'), "no implicit conversion of Array into String")
        }
        // deal with splat issues (related to https://github.com/opal/opal/issues/858)
        if (is_first_part_array) {
          parts = parts[0];
        }
        options = undefined;
        quoted_validated = [];
        for (var i=0; i < parts.length; i++) {
          part = parts[i];
          if (part.$$is_string) {
            quoted_validated.push(self.$escape(part));
          }
          else if (part.$$is_regexp) {
            each_part_options = (part).$options();
            if (options != undefined && options != each_part_options) {
              self.$raise($$($nesting, 'TypeError'), "All expressions must use the same options")
            }
            options = each_part_options;
            quoted_validated.push('('+part.source+')');
          }
          else {
            quoted_validated.push(self.$escape((part).$to_str()));
          }
        }
      ;
        return self.$new((quoted_validated).$join("|"), options);
      }, TMP_union_4.$$arity = -1);
      return (Opal.def(self, '$new', TMP_new_5 = function(regexp, options) {
        var self = this;

        
        ;
        
        if (regexp.$$is_regexp) {
          return new RegExp(regexp);
        }

        regexp = $$($nesting, 'Opal')['$coerce_to!'](regexp, $$($nesting, 'String'), "to_str");

        if (regexp.charAt(regexp.length - 1) === '\\' && regexp.charAt(regexp.length - 2) !== '\\') {
          self.$raise($$($nesting, 'RegexpError'), "" + "too short escape sequence: /" + (regexp) + "/")
        }

        if (options === undefined || options['$!']()) {
          return new RegExp(regexp);
        }

        if (options.$$is_number) {
          var temp = '';
          if ($$($nesting, 'IGNORECASE') & options) { temp += 'i'; }
          if ($$($nesting, 'MULTILINE')  & options) { temp += 'm'; }
          options = temp;
        }
        else {
          options = 'i';
        }

        return new RegExp(regexp, options);
      ;
      }, TMP_new_5.$$arity = -2), nil) && 'new';
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$==', TMP_Regexp_$eq$eq_6 = function(other) {
      var self = this;

      return other instanceof RegExp && self.toString() === other.toString();
    }, TMP_Regexp_$eq$eq_6.$$arity = 1);
    
    Opal.def(self, '$===', TMP_Regexp_$eq$eq$eq_7 = function(string) {
      var self = this;

      return self.$match($$($nesting, 'Opal')['$coerce_to?'](string, $$($nesting, 'String'), "to_str")) !== nil
    }, TMP_Regexp_$eq$eq$eq_7.$$arity = 1);
    
    Opal.def(self, '$=~', TMP_Regexp_$eq$_8 = function(string) {
      var $a, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      return ($truthy($a = self.$match(string)) ? $gvars["~"].$begin(0) : $a)
    }, TMP_Regexp_$eq$_8.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$inspect', TMP_Regexp_inspect_9 = function $$inspect() {
      var self = this;

      
      var regexp_format = /^\/(.*)\/([^\/]*)$/;
      var value = self.toString();
      var matches = regexp_format.exec(value);
      if (matches) {
        var regexp_pattern = matches[1];
        var regexp_flags = matches[2];
        var chars = regexp_pattern.split('');
        var chars_length = chars.length;
        var char_escaped = false;
        var regexp_pattern_escaped = '';
        for (var i = 0; i < chars_length; i++) {
          var current_char = chars[i];
          if (!char_escaped && current_char == '/') {
            regexp_pattern_escaped = regexp_pattern_escaped.concat('\\');
          }
          regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);
          if (current_char == '\\') {
            if (char_escaped) {
              // does not over escape
              char_escaped = false;
            } else {
              char_escaped = true;
            }
          } else {
            char_escaped = false;
          }
        }
        return '/' + regexp_pattern_escaped + '/' + regexp_flags;
      } else {
        return value;
      }
    
    }, TMP_Regexp_inspect_9.$$arity = 0);
    
    Opal.def(self, '$match', TMP_Regexp_match_10 = function $$match(string, pos) {
      var $iter = TMP_Regexp_match_10.$$p, block = $iter || nil, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      if ($iter) TMP_Regexp_match_10.$$p = null;
      
      
      if ($iter) TMP_Regexp_match_10.$$p = null;;
      ;
      
      if (self.uninitialized) {
        self.$raise($$($nesting, 'TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        if (string === nil) return ($gvars["~"] = nil);
        var m = self.exec($$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), "to_str"));
        if (m) {
          ($gvars["~"] = $$($nesting, 'MatchData').$new(self, m));
          return block === nil ? $gvars["~"] : Opal.yield1(block, $gvars["~"]);
        } else {
          return ($gvars["~"] = nil);
        }
      }

      pos = $$($nesting, 'Opal').$coerce_to(pos, $$($nesting, 'Integer'), "to_int");

      if (string === nil) {
        return ($gvars["~"] = nil);
      }

      string = $$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return ($gvars["~"] = nil);
        }
      }

      // global RegExp maintains state, so not using self/this
      var md, re = Opal.global_regexp(self);

      while (true) {
        md = re.exec(string);
        if (md === null) {
          return ($gvars["~"] = nil);
        }
        if (md.index >= pos) {
          ($gvars["~"] = $$($nesting, 'MatchData').$new(re, md));
          return block === nil ? $gvars["~"] : Opal.yield1(block, $gvars["~"]);
        }
        re.lastIndex = md.index + 1;
      }
    ;
    }, TMP_Regexp_match_10.$$arity = -2);
    
    Opal.def(self, '$match?', TMP_Regexp_match$q_11 = function(string, pos) {
      var self = this;

      
      ;
      
      if (self.uninitialized) {
        self.$raise($$($nesting, 'TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        return string === nil ? false : self.test($$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), "to_str"));
      }

      pos = $$($nesting, 'Opal').$coerce_to(pos, $$($nesting, 'Integer'), "to_int");

      if (string === nil) {
        return false;
      }

      string = $$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return false;
        }
      }

      // global RegExp maintains state, so not using self/this
      var md, re = Opal.global_regexp(self);

      md = re.exec(string);
      if (md === null || md.index < pos) {
        return false;
      } else {
        return true;
      }
    ;
    }, TMP_Regexp_match$q_11.$$arity = -2);
    
    Opal.def(self, '$~', TMP_Regexp_$_12 = function() {
      var self = this;
      if ($gvars._ == null) $gvars._ = nil;

      return self['$=~']($gvars._)
    }, TMP_Regexp_$_12.$$arity = 0);
    
    Opal.def(self, '$source', TMP_Regexp_source_13 = function $$source() {
      var self = this;

      return self.source;
    }, TMP_Regexp_source_13.$$arity = 0);
    
    Opal.def(self, '$options', TMP_Regexp_options_14 = function $$options() {
      var self = this;

      
      if (self.uninitialized) {
        self.$raise($$($nesting, 'TypeError'), "uninitialized Regexp")
      }
      var result = 0;
      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx
      if (self.multiline) {
        result |= $$($nesting, 'MULTILINE');
      }
      if (self.ignoreCase) {
        result |= $$($nesting, 'IGNORECASE');
      }
      return result;
    
    }, TMP_Regexp_options_14.$$arity = 0);
    
    Opal.def(self, '$casefold?', TMP_Regexp_casefold$q_15 = function() {
      var self = this;

      return self.ignoreCase;
    }, TMP_Regexp_casefold$q_15.$$arity = 0);
    return Opal.alias(self, "to_s", "source");
  })($nesting[0], RegExp, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_MatchData_initialize_16, TMP_MatchData_$$_17, TMP_MatchData_offset_18, TMP_MatchData_$eq$eq_19, TMP_MatchData_begin_20, TMP_MatchData_end_21, TMP_MatchData_captures_22, TMP_MatchData_inspect_23, TMP_MatchData_length_24, TMP_MatchData_to_a_25, TMP_MatchData_to_s_26, TMP_MatchData_values_at_27;

    def.matches = nil;
    
    self.$attr_reader("post_match", "pre_match", "regexp", "string");
    
    Opal.def(self, '$initialize', TMP_MatchData_initialize_16 = function $$initialize(regexp, match_groups) {
      var self = this;

      
      $gvars["~"] = self;
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = match_groups.input.slice(0, match_groups.index);
      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    ;
    }, TMP_MatchData_initialize_16.$$arity = 2);
    
    Opal.def(self, '$[]', TMP_MatchData_$$_17 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self.matches, '[]', Opal.to_a(args));
    }, TMP_MatchData_$$_17.$$arity = -1);
    
    Opal.def(self, '$offset', TMP_MatchData_offset_18 = function $$offset(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "MatchData#offset only supports 0th element")
      }
      return [self.begin, self.begin + self.matches[n].length];
    
    }, TMP_MatchData_offset_18.$$arity = 1);
    
    Opal.def(self, '$==', TMP_MatchData_$eq$eq_19 = function(other) {
      var $a, $b, $c, $d, self = this;

      
      if ($truthy($$($nesting, 'MatchData')['$==='](other))) {
      } else {
        return false
      };
      return ($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = self.string == other.string) ? self.regexp.toString() == other.regexp.toString() : $d)) ? self.pre_match == other.pre_match : $c)) ? self.post_match == other.post_match : $b)) ? self.begin == other.begin : $a);
    }, TMP_MatchData_$eq$eq_19.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$begin', TMP_MatchData_begin_20 = function $$begin(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "MatchData#begin only supports 0th element")
      }
      return self.begin;
    
    }, TMP_MatchData_begin_20.$$arity = 1);
    
    Opal.def(self, '$end', TMP_MatchData_end_21 = function $$end(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "MatchData#end only supports 0th element")
      }
      return self.begin + self.matches[n].length;
    
    }, TMP_MatchData_end_21.$$arity = 1);
    
    Opal.def(self, '$captures', TMP_MatchData_captures_22 = function $$captures() {
      var self = this;

      return self.matches.slice(1)
    }, TMP_MatchData_captures_22.$$arity = 0);
    
    Opal.def(self, '$inspect', TMP_MatchData_inspect_23 = function $$inspect() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    
    }, TMP_MatchData_inspect_23.$$arity = 0);
    
    Opal.def(self, '$length', TMP_MatchData_length_24 = function $$length() {
      var self = this;

      return self.matches.length
    }, TMP_MatchData_length_24.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$to_a', TMP_MatchData_to_a_25 = function $$to_a() {
      var self = this;

      return self.matches
    }, TMP_MatchData_to_a_25.$$arity = 0);
    
    Opal.def(self, '$to_s', TMP_MatchData_to_s_26 = function $$to_s() {
      var self = this;

      return self.matches[0]
    }, TMP_MatchData_to_s_26.$$arity = 0);
    return (Opal.def(self, '$values_at', TMP_MatchData_values_at_27 = function $$values_at($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var i, a, index, values = [];

      for (i = 0; i < args.length; i++) {

        if (args[i].$$is_range) {
          a = (args[i]).$to_a();
          a.unshift(i, 1);
          Array.prototype.splice.apply(args, a);
        }

        index = $$($nesting, 'Opal')['$coerce_to!'](args[i], $$($nesting, 'Integer'), "to_int");

        if (index < 0) {
          index += self.matches.length;
          if (index < 0) {
            values.push(nil);
            continue;
          }
        }

        values.push(self.matches[index]);
      }

      return values;
    ;
    }, TMP_MatchData_values_at_27.$$arity = -1), nil) && 'values_at';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/string"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$coerce_to', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$force_encoding', '$casecmp', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$each_line', '$class', '$match', '$match?', '$captures', '$proc', '$succ', '$escape']);
  
  self.$require("corelib/comparable");
  self.$require("corelib/regexp");
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_String___id___1, TMP_String_try_convert_2, TMP_String_new_3, TMP_String_initialize_4, TMP_String_$_5, TMP_String_$_6, TMP_String_$_7, TMP_String_$lt$eq$gt_8, TMP_String_$eq$eq_9, TMP_String_$eq$_10, TMP_String_$$_11, TMP_String_b_12, TMP_String_capitalize_13, TMP_String_casecmp_14, TMP_String_casecmp$q_15, TMP_String_center_16, TMP_String_chars_17, TMP_String_chomp_18, TMP_String_chop_19, TMP_String_chr_20, TMP_String_clone_21, TMP_String_dup_22, TMP_String_count_23, TMP_String_delete_24, TMP_String_delete_prefix_25, TMP_String_delete_suffix_26, TMP_String_downcase_27, TMP_String_each_char_28, TMP_String_each_line_30, TMP_String_empty$q_31, TMP_String_end_with$q_32, TMP_String_gsub_33, TMP_String_hash_34, TMP_String_hex_35, TMP_String_include$q_36, TMP_String_index_37, TMP_String_inspect_38, TMP_String_intern_39, TMP_String_lines_40, TMP_String_length_41, TMP_String_ljust_42, TMP_String_lstrip_43, TMP_String_ascii_only$q_44, TMP_String_match_45, TMP_String_match$q_46, TMP_String_next_47, TMP_String_oct_48, TMP_String_ord_49, TMP_String_partition_50, TMP_String_reverse_51, TMP_String_rindex_52, TMP_String_rjust_53, TMP_String_rpartition_54, TMP_String_rstrip_55, TMP_String_scan_56, TMP_String_split_57, TMP_String_squeeze_58, TMP_String_start_with$q_59, TMP_String_strip_60, TMP_String_sub_61, TMP_String_sum_62, TMP_String_swapcase_63, TMP_String_to_f_64, TMP_String_to_i_65, TMP_String_to_proc_66, TMP_String_to_s_68, TMP_String_tr_69, TMP_String_tr_s_70, TMP_String_upcase_71, TMP_String_upto_72, TMP_String_instance_variables_73, TMP_String__load_74, TMP_String_unicode_normalize_75, TMP_String_unicode_normalized$q_76, TMP_String_unpack_77, TMP_String_unpack1_78;

    
    self.$include($$($nesting, 'Comparable'));
    
    Opal.defineProperty(String.prototype, '$$is_string', true);

    Opal.defineProperty(String.prototype, '$$cast', function(string) {
      var klass = this.$$class;
      if (klass === String) {
        return string;
      } else {
        return new klass(string);
      }
    });
  ;
    
    Opal.def(self, '$__id__', TMP_String___id___1 = function $$__id__() {
      var self = this;

      return self.toString();
    }, TMP_String___id___1.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    Opal.defs(self, '$try_convert', TMP_String_try_convert_2 = function $$try_convert(what) {
      var self = this;

      return $$($nesting, 'Opal')['$coerce_to?'](what, $$($nesting, 'String'), "to_str")
    }, TMP_String_try_convert_2.$$arity = 1);
    Opal.defs(self, '$new', TMP_String_new_3 = function(str) {
      var self = this;

      
      
      if (str == null) {
        str = "";
      };
      str = $$($nesting, 'Opal').$coerce_to(str, $$($nesting, 'String'), "to_str");
      return new self(str);;
    }, TMP_String_new_3.$$arity = -1);
    
    Opal.def(self, '$initialize', TMP_String_initialize_4 = function $$initialize(str) {
      var self = this;

      
      ;
      
      if (str === undefined) {
        return self;
      }
    ;
      return self.$raise($$($nesting, 'NotImplementedError'), "Mutable strings are not supported in Opal.");
    }, TMP_String_initialize_4.$$arity = -1);
    
    Opal.def(self, '$%', TMP_String_$_5 = function(data) {
      var self = this;

      if ($truthy($$($nesting, 'Array')['$==='](data))) {
        return $send(self, 'format', [self].concat(Opal.to_a(data)))
      } else {
        return self.$format(self, data)
      }
    }, TMP_String_$_5.$$arity = 1);
    
    Opal.def(self, '$*', TMP_String_$_6 = function(count) {
      var self = this;

      
      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative argument")
      }

      if (count === 0) {
        return self.$$cast('');
      }

      var result = '',
          string = self.toString();

      // All credit for the bit-twiddling magic code below goes to Mozilla
      // polyfill implementation of String.prototype.repeat() posted here:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

      if (string.length * count >= 1 << 28) {
        self.$raise($$($nesting, 'RangeError'), "multiply count must not overflow maximum string size")
      }

      for (;;) {
        if ((count & 1) === 1) {
          result += string;
        }
        count >>>= 1;
        if (count === 0) {
          break;
        }
        string += string;
      }

      return self.$$cast(result);
    
    }, TMP_String_$_6.$$arity = 1);
    
    Opal.def(self, '$+', TMP_String_$_7 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), "to_str");
      return self + other.$to_s();
    }, TMP_String_$_7.$$arity = 1);
    
    Opal.def(self, '$<=>', TMP_String_$lt$eq$gt_8 = function(other) {
      var self = this;

      if ($truthy(other['$respond_to?']("to_str"))) {
        
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);;
      } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      
      }
    }, TMP_String_$lt$eq$gt_8.$$arity = 1);
    
    Opal.def(self, '$==', TMP_String_$eq$eq_9 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        return self.toString() === other.toString();
      }
      if ($$($nesting, 'Opal')['$respond_to?'](other, "to_str")) {
        return other['$=='](self);
      }
      return false;
    
    }, TMP_String_$eq$eq_9.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    
    Opal.def(self, '$=~', TMP_String_$eq$_10 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        self.$raise($$($nesting, 'TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    
    }, TMP_String_$eq$_10.$$arity = 1);
    
    Opal.def(self, '$[]', TMP_String_$$_11 = function(index, length) {
      var self = this;

      
      ;
      
      var size = self.length, exclude;

      if (index.$$is_range) {
        exclude = index.excl;
        length  = $$($nesting, 'Opal').$coerce_to(index.end, $$($nesting, 'Integer'), "to_int");
        index   = $$($nesting, 'Opal').$coerce_to(index.begin, $$($nesting, 'Integer'), "to_int");

        if (Math.abs(index) > size) {
          return nil;
        }

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.$$cast(self.substr(index, length));
      }


      if (index.$$is_string) {
        if (length != null) {
          self.$raise($$($nesting, 'TypeError'))
        }
        return self.indexOf(index) !== -1 ? self.$$cast(index) : nil;
      }


      if (index.$$is_regexp) {
        var match = self.match(index);

        if (match === null) {
          ($gvars["~"] = nil)
          return nil;
        }

        ($gvars["~"] = $$($nesting, 'MatchData').$new(index, match))

        if (length == null) {
          return self.$$cast(match[0]);
        }

        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), "to_int");

        if (length < 0 && -length < match.length) {
          return self.$$cast(match[length += match.length]);
        }

        if (length >= 0 && length < match.length) {
          return self.$$cast(match[length]);
        }

        return nil;
      }


      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += size;
      }

      if (length == null) {
        if (index >= size || index < 0) {
          return nil;
        }
        return self.$$cast(self.substr(index, 1));
      }

      length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), "to_int");

      if (length < 0) {
        return nil;
      }

      if (index > size || index < 0) {
        return nil;
      }

      return self.$$cast(self.substr(index, length));
    ;
    }, TMP_String_$$_11.$$arity = -2);
    Opal.alias(self, "byteslice", "[]");
    
    Opal.def(self, '$b', TMP_String_b_12 = function $$b() {
      var self = this;

      return self.$force_encoding("binary")
    }, TMP_String_b_12.$$arity = 0);
    
    Opal.def(self, '$capitalize', TMP_String_capitalize_13 = function $$capitalize() {
      var self = this;

      return self.$$cast(self.charAt(0).toUpperCase() + self.substr(1).toLowerCase());
    }, TMP_String_capitalize_13.$$arity = 0);
    
    Opal.def(self, '$casecmp', TMP_String_casecmp_14 = function $$casecmp(other) {
      var self = this;

      
      if ($truthy(other['$respond_to?']("to_str"))) {
      } else {
        return nil
      };
      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), "to_str").$to_s();
      
      var ascii_only = /^[\x00-\x7F]*$/;
      if (ascii_only.test(self) && ascii_only.test(other)) {
        self = self.toLowerCase();
        other = other.toLowerCase();
      }
    ;
      return self['$<=>'](other);
    }, TMP_String_casecmp_14.$$arity = 1);
    
    Opal.def(self, '$casecmp?', TMP_String_casecmp$q_15 = function(other) {
      var self = this;

      
      var cmp = self.$casecmp(other);
      if (cmp === nil) {
        return nil;
      } else {
        return cmp === 0;
      }
    
    }, TMP_String_casecmp$q_15.$$arity = 1);
    
    Opal.def(self, '$center', TMP_String_center_16 = function $$center(width, padstr) {
      var self = this;

      
      
      if (padstr == null) {
        padstr = " ";
      };
      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), "to_int");
      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var ljustified = self.$ljust($rb_divide($rb_plus(width, self.length), 2).$ceil(), padstr),
          rjustified = self.$rjust($rb_divide($rb_plus(width, self.length), 2).$floor(), padstr);

      return self.$$cast(rjustified + ljustified.slice(self.length));
    ;
    }, TMP_String_center_16.$$arity = -2);
    
    Opal.def(self, '$chars', TMP_String_chars_17 = function $$chars() {
      var $iter = TMP_String_chars_17.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_String_chars_17.$$p = null;
      
      
      if ($iter) TMP_String_chars_17.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$each_char().$to_a()
      };
      return $send(self, 'each_char', [], block.$to_proc());
    }, TMP_String_chars_17.$$arity = 0);
    
    Opal.def(self, '$chomp', TMP_String_chomp_18 = function $$chomp(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      if ($truthy(separator === nil || self.length === 0)) {
        return self};
      separator = $$($nesting, 'Opal')['$coerce_to!'](separator, $$($nesting, 'String'), "to_str").$to_s();
      
      var result;

      if (separator === "\n") {
        result = self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        result = self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length > separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          result = self.substr(0, self.length - separator.length);
        }
      }

      if (result != null) {
        return self.$$cast(result);
      }
    ;
      return self;
    }, TMP_String_chomp_18.$$arity = -1);
    
    Opal.def(self, '$chop', TMP_String_chop_19 = function $$chop() {
      var self = this;

      
      var length = self.length, result;

      if (length <= 1) {
        result = "";
      } else if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        result = self.substr(0, length - 2);
      } else {
        result = self.substr(0, length - 1);
      }

      return self.$$cast(result);
    
    }, TMP_String_chop_19.$$arity = 0);
    
    Opal.def(self, '$chr', TMP_String_chr_20 = function $$chr() {
      var self = this;

      return self.charAt(0);
    }, TMP_String_chr_20.$$arity = 0);
    
    Opal.def(self, '$clone', TMP_String_clone_21 = function $$clone() {
      var self = this, copy = nil;

      
      copy = self.slice();
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_String_clone_21.$$arity = 0);
    
    Opal.def(self, '$dup', TMP_String_dup_22 = function $$dup() {
      var self = this, copy = nil;

      
      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    }, TMP_String_dup_22.$$arity = 0);
    
    Opal.def(self, '$count', TMP_String_count_23 = function $$count($a) {
      var $post_args, sets, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      sets = $post_args;;
      
      if (sets.length === 0) {
        self.$raise($$($nesting, 'ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return 0;
      }
      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;
    ;
    }, TMP_String_count_23.$$arity = -1);
    
    Opal.def(self, '$delete', TMP_String_delete_24 = function($a) {
      var $post_args, sets, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      sets = $post_args;;
      
      if (sets.length === 0) {
        self.$raise($$($nesting, 'ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.$$cast(self.replace(new RegExp(char_class, 'g'), ''));
    ;
    }, TMP_String_delete_24.$$arity = -1);
    
    Opal.def(self, '$delete_prefix', TMP_String_delete_prefix_25 = function $$delete_prefix(prefix) {
      var self = this;

      
      if (!prefix.$$is_string) {
        (prefix = $$($nesting, 'Opal').$coerce_to(prefix, $$($nesting, 'String'), "to_str"))
      }

      if (self.slice(0, prefix.length) === prefix) {
        return self.$$cast(self.slice(prefix.length));
      } else {
        return self;
      }
    
    }, TMP_String_delete_prefix_25.$$arity = 1);
    
    Opal.def(self, '$delete_suffix', TMP_String_delete_suffix_26 = function $$delete_suffix(suffix) {
      var self = this;

      
      if (!suffix.$$is_string) {
        (suffix = $$($nesting, 'Opal').$coerce_to(suffix, $$($nesting, 'String'), "to_str"))
      }

      if (self.slice(self.length - suffix.length) === suffix) {
        return self.$$cast(self.slice(0, self.length - suffix.length));
      } else {
        return self;
      }
    
    }, TMP_String_delete_suffix_26.$$arity = 1);
    
    Opal.def(self, '$downcase', TMP_String_downcase_27 = function $$downcase() {
      var self = this;

      return self.$$cast(self.toLowerCase());
    }, TMP_String_downcase_27.$$arity = 0);
    
    Opal.def(self, '$each_char', TMP_String_each_char_28 = function $$each_char() {
      var $iter = TMP_String_each_char_28.$$p, block = $iter || nil, TMP_29, self = this;

      if ($iter) TMP_String_each_char_28.$$p = null;
      
      
      if ($iter) TMP_String_each_char_28.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_char"], (TMP_29 = function(){var self = TMP_29.$$s || this;

        return self.$size()}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.charAt(i));
      }
    ;
      return self;
    }, TMP_String_each_char_28.$$arity = 0);
    
    Opal.def(self, '$each_line', TMP_String_each_line_30 = function $$each_line(separator) {
      var $iter = TMP_String_each_line_30.$$p, block = $iter || nil, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if ($iter) TMP_String_each_line_30.$$p = null;
      
      
      if ($iter) TMP_String_each_line_30.$$p = null;;
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each_line", separator)
      };
      
      if (separator === nil) {
        Opal.yield1(block, self);

        return self;
      }

      separator = $$($nesting, 'Opal').$coerce_to(separator, $$($nesting, 'String'), "to_str")

      var a, i, n, length, chomped, trailing, splitted;

      if (separator.length === 0) {
        for (a = self.split(/(\n{2,})/), i = 0, n = a.length; i < n; i += 2) {
          if (a[i] || a[i + 1]) {
            var value = (a[i] || "") + (a[i + 1] || "");
            Opal.yield1(block, self.$$cast(value));
          }
        }

        return self;
      }

      chomped  = self.$chomp(separator);
      trailing = self.length != chomped.length;
      splitted = chomped.split(separator);

      for (i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          Opal.yield1(block, self.$$cast(splitted[i] + separator));
        }
        else {
          Opal.yield1(block, self.$$cast(splitted[i]));
        }
      }
    ;
      return self;
    }, TMP_String_each_line_30.$$arity = -1);
    
    Opal.def(self, '$empty?', TMP_String_empty$q_31 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_String_empty$q_31.$$arity = 0);
    
    Opal.def(self, '$end_with?', TMP_String_end_with$q_32 = function($a) {
      var $post_args, suffixes, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      suffixes = $post_args;;
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = $$($nesting, 'Opal').$coerce_to(suffixes[i], $$($nesting, 'String'), "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    ;
      return false;
    }, TMP_String_end_with$q_32.$$arity = -1);
    Opal.alias(self, "equal?", "===");
    
    Opal.def(self, '$gsub', TMP_String_gsub_33 = function $$gsub(pattern, replacement) {
      var $iter = TMP_String_gsub_33.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_String_gsub_33.$$p = null;
      
      
      if ($iter) TMP_String_gsub_33.$$p = null;;
      ;
      
      if (replacement === undefined && block === nil) {
        return self.$enum_for("gsub", pattern);
      }

      var result = '', match_data = nil, index = 0, match, _replacement;

      if (pattern.$$is_regexp) {
        pattern = Opal.global_multiline_regexp(pattern);
      } else {
        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      var lastIndex;
      while (true) {
        match = pattern.exec(self);

        if (match === null) {
          ($gvars["~"] = nil)
          result += self.slice(index);
          break;
        }

        match_data = $$($nesting, 'MatchData').$new(pattern, match);

        if (replacement === undefined) {
          lastIndex = pattern.lastIndex;
          _replacement = block(match[0]);
          pattern.lastIndex = lastIndex; // save and restore lastIndex
        }
        else if (replacement.$$is_hash) {
          _replacement = (replacement)['$[]'](match[0]).$to_s();
        }
        else {
          if (!replacement.$$is_string) {
            replacement = $$($nesting, 'Opal').$coerce_to(replacement, $$($nesting, 'String'), "to_str");
          }
          _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');
        }

        if (pattern.lastIndex === match.index) {
          result += (_replacement + self.slice(index, match.index + 1))
          pattern.lastIndex += 1;
        }
        else {
          result += (self.slice(index, match.index) + _replacement)
        }
        index = pattern.lastIndex;
      }

      ($gvars["~"] = match_data)
      return self.$$cast(result);
    ;
    }, TMP_String_gsub_33.$$arity = -2);
    
    Opal.def(self, '$hash', TMP_String_hash_34 = function $$hash() {
      var self = this;

      return self.toString();
    }, TMP_String_hash_34.$$arity = 0);
    
    Opal.def(self, '$hex', TMP_String_hex_35 = function $$hex() {
      var self = this;

      return self.$to_i(16)
    }, TMP_String_hex_35.$$arity = 0);
    
    Opal.def(self, '$include?', TMP_String_include$q_36 = function(other) {
      var self = this;

      
      if (!other.$$is_string) {
        (other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), "to_str"))
      }
      return self.indexOf(other) !== -1;
    
    }, TMP_String_include$q_36.$$arity = 1);
    
    Opal.def(self, '$index', TMP_String_index_37 = function $$index(search, offset) {
      var self = this;

      
      ;
      
      var index,
          match,
          regex;

      if (offset === undefined) {
        offset = 0;
      } else {
        offset = $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        regex = Opal.global_multiline_regexp(search);
        while (true) {
          match = regex.exec(self);
          if (match === null) {
            ($gvars["~"] = nil);
            index = -1;
            break;
          }
          if (match.index >= offset) {
            ($gvars["~"] = $$($nesting, 'MatchData').$new(regex, match))
            index = match.index;
            break;
          }
          regex.lastIndex = match.index + 1;
        }
      } else {
        search = $$($nesting, 'Opal').$coerce_to(search, $$($nesting, 'String'), "to_str");
        if (search.length === 0 && offset > self.length) {
          index = -1;
        } else {
          index = self.indexOf(search, offset);
        }
      }

      return index === -1 ? nil : index;
    ;
    }, TMP_String_index_37.$$arity = -2);
    
    Opal.def(self, '$inspect', TMP_String_inspect_38 = function $$inspect() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\u007F-\u009F\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            '\u0007': '\\a',
            '\u001b': '\\e',
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '\v': '\\v',
            '"' : '\\"',
            '\\': '\\\\'
          },
          escaped = self.replace(escapable, function (chr) {
            return meta[chr] || '\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
          });
      return '"' + escaped.replace(/\#[\$\@\{]/g, '\\$&') + '"';
    
    }, TMP_String_inspect_38.$$arity = 0);
    
    Opal.def(self, '$intern', TMP_String_intern_39 = function $$intern() {
      var self = this;

      return self.toString();
    }, TMP_String_intern_39.$$arity = 0);
    
    Opal.def(self, '$lines', TMP_String_lines_40 = function $$lines(separator) {
      var $iter = TMP_String_lines_40.$$p, block = $iter || nil, self = this, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if ($iter) TMP_String_lines_40.$$p = null;
      
      
      if ($iter) TMP_String_lines_40.$$p = null;;
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      e = $send(self, 'each_line', [separator], block.$to_proc());
      if ($truthy(block)) {
        return self
      } else {
        return e.$to_a()
      };
    }, TMP_String_lines_40.$$arity = -1);
    
    Opal.def(self, '$length', TMP_String_length_41 = function $$length() {
      var self = this;

      return self.length;
    }, TMP_String_length_41.$$arity = 0);
    
    Opal.def(self, '$ljust', TMP_String_ljust_42 = function $$ljust(width, padstr) {
      var self = this;

      
      
      if (padstr == null) {
        padstr = " ";
      };
      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), "to_int");
      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self.$$cast(self + result.slice(0, width));
    ;
    }, TMP_String_ljust_42.$$arity = -2);
    
    Opal.def(self, '$lstrip', TMP_String_lstrip_43 = function $$lstrip() {
      var self = this;

      return self.replace(/^\s*/, '');
    }, TMP_String_lstrip_43.$$arity = 0);
    
    Opal.def(self, '$ascii_only?', TMP_String_ascii_only$q_44 = function() {
      var self = this;

      return self.match(/[ -~\n]*/)[0] === self;
    }, TMP_String_ascii_only$q_44.$$arity = 0);
    
    Opal.def(self, '$match', TMP_String_match_45 = function $$match(pattern, pos) {
      var $iter = TMP_String_match_45.$$p, block = $iter || nil, $a, self = this;

      if ($iter) TMP_String_match_45.$$p = null;
      
      
      if ($iter) TMP_String_match_45.$$p = null;;
      ;
      if ($truthy(($truthy($a = $$($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?']("to_str")))) {
        pattern = $$($nesting, 'Regexp').$new(pattern.$to_str())};
      if ($truthy($$($nesting, 'Regexp')['$==='](pattern))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return $send(pattern, 'match', [self, pos], block.$to_proc());
    }, TMP_String_match_45.$$arity = -2);
    
    Opal.def(self, '$match?', TMP_String_match$q_46 = function(pattern, pos) {
      var $a, self = this;

      
      ;
      if ($truthy(($truthy($a = $$($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?']("to_str")))) {
        pattern = $$($nesting, 'Regexp').$new(pattern.$to_str())};
      if ($truthy($$($nesting, 'Regexp')['$==='](pattern))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return pattern['$match?'](self, pos);
    }, TMP_String_match$q_46.$$arity = -2);
    
    Opal.def(self, '$next', TMP_String_next_47 = function $$next() {
      var self = this;

      
      var i = self.length;
      if (i === 0) {
        return self.$$cast('');
      }
      var result = self;
      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);
      var carry = false;
      var code;
      while (i--) {
        code = self.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)) {
          switch (code) {
          case 57:
            carry = true;
            code = 48;
            break;
          case 90:
            carry = true;
            code = 65;
            break;
          case 122:
            carry = true;
            code = 97;
            break;
          default:
            carry = false;
            code += 1;
          }
        } else {
          if (first_alphanum_char_index === -1) {
            if (code === 255) {
              carry = true;
              code = 0;
            } else {
              carry = false;
              code += 1;
            }
          } else {
            carry = true;
          }
        }
        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);
        if (carry && (i === 0 || i === first_alphanum_char_index)) {
          switch (code) {
          case 65:
            break;
          case 97:
            break;
          default:
            code += 1;
          }
          if (i === 0) {
            result = String.fromCharCode(code) + result;
          } else {
            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);
          }
          carry = false;
        }
        if (!carry) {
          break;
        }
      }
      return self.$$cast(result);
    
    }, TMP_String_next_47.$$arity = 0);
    
    Opal.def(self, '$oct', TMP_String_oct_48 = function $$oct() {
      var self = this;

      
      var result,
          string = self,
          radix = 8;

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x') {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          radix = 2;
          break;
        case '0':
        case '0o':
          radix = 8;
          break;
        case '0d':
          radix = 10;
          break;
        case '0x':
          radix = 16;
          break;
        }
        return head + tail;
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, TMP_String_oct_48.$$arity = 0);
    
    Opal.def(self, '$ord', TMP_String_ord_49 = function $$ord() {
      var self = this;

      return self.charCodeAt(0);
    }, TMP_String_ord_49.$$arity = 0);
    
    Opal.def(self, '$partition', TMP_String_partition_50 = function $$partition(sep) {
      var self = this;

      
      var i, m;

      if (sep.$$is_regexp) {
        m = sep.exec(self);
        if (m === null) {
          i = -1;
        } else {
          $$($nesting, 'MatchData').$new(sep, m);
          sep = m[0];
          i = m.index;
        }
      } else {
        sep = $$($nesting, 'Opal').$coerce_to(sep, $$($nesting, 'String'), "to_str");
        i = self.indexOf(sep);
      }

      if (i === -1) {
        return [self, '', ''];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_String_partition_50.$$arity = 1);
    
    Opal.def(self, '$reverse', TMP_String_reverse_51 = function $$reverse() {
      var self = this;

      return self.split('').reverse().join('');
    }, TMP_String_reverse_51.$$arity = 0);
    
    Opal.def(self, '$rindex', TMP_String_rindex_52 = function $$rindex(search, offset) {
      var self = this;

      
      ;
      
      var i, m, r, _m;

      if (offset === undefined) {
        offset = self.length;
      } else {
        offset = $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        m = null;
        r = Opal.global_multiline_regexp(search);
        while (true) {
          _m = r.exec(self);
          if (_m === null || _m.index > offset) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }
        if (m === null) {
          ($gvars["~"] = nil)
          i = -1;
        } else {
          $$($nesting, 'MatchData').$new(r, m);
          i = m.index;
        }
      } else {
        search = $$($nesting, 'Opal').$coerce_to(search, $$($nesting, 'String'), "to_str");
        i = self.lastIndexOf(search, offset);
      }

      return i === -1 ? nil : i;
    ;
    }, TMP_String_rindex_52.$$arity = -2);
    
    Opal.def(self, '$rjust', TMP_String_rjust_53 = function $$rjust(width, padstr) {
      var self = this;

      
      
      if (padstr == null) {
        padstr = " ";
      };
      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), "to_int");
      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return self.$$cast(result + padstr.slice(0, remaining) + self);
    ;
    }, TMP_String_rjust_53.$$arity = -2);
    
    Opal.def(self, '$rpartition', TMP_String_rpartition_54 = function $$rpartition(sep) {
      var self = this;

      
      var i, m, r, _m;

      if (sep.$$is_regexp) {
        m = null;
        r = Opal.global_multiline_regexp(sep);

        while (true) {
          _m = r.exec(self);
          if (_m === null) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }

        if (m === null) {
          i = -1;
        } else {
          $$($nesting, 'MatchData').$new(r, m);
          sep = m[0];
          i = m.index;
        }

      } else {
        sep = $$($nesting, 'Opal').$coerce_to(sep, $$($nesting, 'String'), "to_str");
        i = self.lastIndexOf(sep);
      }

      if (i === -1) {
        return ['', '', self];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_String_rpartition_54.$$arity = 1);
    
    Opal.def(self, '$rstrip', TMP_String_rstrip_55 = function $$rstrip() {
      var self = this;

      return self.replace(/[\s\u0000]*$/, '');
    }, TMP_String_rstrip_55.$$arity = 0);
    
    Opal.def(self, '$scan', TMP_String_scan_56 = function $$scan(pattern) {
      var $iter = TMP_String_scan_56.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_String_scan_56.$$p = null;
      
      
      if ($iter) TMP_String_scan_56.$$p = null;;
      
      var result = [],
          match_data = nil,
          match;

      if (pattern.$$is_regexp) {
        pattern = Opal.global_multiline_regexp(pattern);
      } else {
        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while ((match = pattern.exec(self)) != null) {
        match_data = $$($nesting, 'MatchData').$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());
        } else {
          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());
        }
        if (pattern.lastIndex === match.index) {
          pattern.lastIndex += 1;
        }
      }

      ($gvars["~"] = match_data)

      return (block !== nil ? self : result);
    ;
    }, TMP_String_scan_56.$$arity = 1);
    Opal.alias(self, "size", "length");
    Opal.alias(self, "slice", "[]");
    
    Opal.def(self, '$split', TMP_String_split_57 = function $$split(pattern, limit) {
      var $a, self = this;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      
      ;
      ;
      
      if (self.length === 0) {
        return [];
      }

      if (limit === undefined) {
        limit = 0;
      } else {
        limit = $$($nesting, 'Opal')['$coerce_to!'](limit, $$($nesting, 'Integer'), "to_int");
        if (limit === 1) {
          return [self];
        }
      }

      if (pattern === undefined || pattern === nil) {
        pattern = ($truthy($a = $gvars[";"]) ? $a : " ");
      }

      var result = [],
          string = self.toString(),
          index = 0,
          match,
          i, ii;

      if (pattern.$$is_regexp) {
        pattern = Opal.global_multiline_regexp(pattern);
      } else {
        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), "to_str").$to_s();
        if (pattern === ' ') {
          pattern = /\s+/gm;
          string = string.replace(/^\s+/, '');
        } else {
          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
        }
      }

      result = string.split(pattern);

      if (result.length === 1 && result[0] === string) {
        return [self.$$cast(result[0])];
      }

      while ((i = result.indexOf(undefined)) !== -1) {
        result.splice(i, 1);
      }

      function castResult() {
        for (i = 0; i < result.length; i++) {
          result[i] = self.$$cast(result[i]);
        }
      }

      if (limit === 0) {
        while (result[result.length - 1] === '') {
          result.length -= 1;
        }
        castResult();
        return result;
      }

      match = pattern.exec(string);

      if (limit < 0) {
        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {
          for (i = 0, ii = match.length; i < ii; i++) {
            result.push('');
          }
        }
        castResult();
        return result;
      }

      if (match !== null && match[0] === '') {
        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));
        castResult();
        return result;
      }

      if (limit >= result.length) {
        castResult();
        return result;
      }

      i = 0;
      while (match !== null) {
        i++;
        index = pattern.lastIndex;
        if (i + 1 === limit) {
          break;
        }
        match = pattern.exec(string);
      }
      result.splice(limit - 1, result.length - 1, string.slice(index));
      castResult();
      return result;
    ;
    }, TMP_String_split_57.$$arity = -1);
    
    Opal.def(self, '$squeeze', TMP_String_squeeze_58 = function $$squeeze($a) {
      var $post_args, sets, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      sets = $post_args;;
      
      if (sets.length === 0) {
        return self.$$cast(self.replace(/(.)\1+/g, '$1'));
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.$$cast(self.replace(new RegExp('(' + char_class + ')\\1+', 'g'), '$1'));
    ;
    }, TMP_String_squeeze_58.$$arity = -1);
    
    Opal.def(self, '$start_with?', TMP_String_start_with$q_59 = function($a) {
      var $post_args, prefixes, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      prefixes = $post_args;;
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = $$($nesting, 'Opal').$coerce_to(prefixes[i], $$($nesting, 'String'), "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    ;
    }, TMP_String_start_with$q_59.$$arity = -1);
    
    Opal.def(self, '$strip', TMP_String_strip_60 = function $$strip() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/[\s\u0000]*$/, '');
    }, TMP_String_strip_60.$$arity = 0);
    
    Opal.def(self, '$sub', TMP_String_sub_61 = function $$sub(pattern, replacement) {
      var $iter = TMP_String_sub_61.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_String_sub_61.$$p = null;
      
      
      if ($iter) TMP_String_sub_61.$$p = null;;
      ;
      
      if (!pattern.$$is_regexp) {
        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      }

      var result, match = pattern.exec(self);

      if (match === null) {
        ($gvars["~"] = nil)
        result = self.toString();
      } else {
        $$($nesting, 'MatchData').$new(pattern, match)

        if (replacement === undefined) {

          if (block === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (1 for 2)")
          }
          result = self.slice(0, match.index) + block(match[0]) + self.slice(match.index + match[0].length);

        } else if (replacement.$$is_hash) {

          result = self.slice(0, match.index) + (replacement)['$[]'](match[0]).$to_s() + self.slice(match.index + match[0].length);

        } else {

          replacement = $$($nesting, 'Opal').$coerce_to(replacement, $$($nesting, 'String'), "to_str");

          replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');

          result = self.slice(0, match.index) + replacement + self.slice(match.index + match[0].length);
        }
      }

      return self.$$cast(result);
    ;
    }, TMP_String_sub_61.$$arity = -2);
    Opal.alias(self, "succ", "next");
    
    Opal.def(self, '$sum', TMP_String_sum_62 = function $$sum(n) {
      var self = this;

      
      
      if (n == null) {
        n = 16;
      };
      
      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");

      var result = 0,
          length = self.length,
          i = 0;

      for (; i < length; i++) {
        result += self.charCodeAt(i);
      }

      if (n <= 0) {
        return result;
      }

      return result & (Math.pow(2, n) - 1);
    ;
    }, TMP_String_sum_62.$$arity = -1);
    
    Opal.def(self, '$swapcase', TMP_String_swapcase_63 = function $$swapcase() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    }, TMP_String_swapcase_63.$$arity = 0);
    
    Opal.def(self, '$to_f', TMP_String_to_f_64 = function $$to_f() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    }, TMP_String_to_f_64.$$arity = 0);
    
    Opal.def(self, '$to_i', TMP_String_to_i_65 = function $$to_i(base) {
      var self = this;

      
      
      if (base == null) {
        base = 10;
      };
      
      var result,
          string = self.toLowerCase(),
          radix = $$($nesting, 'Opal').$coerce_to(base, $$($nesting, 'Integer'), "to_int");

      if (radix === 1 || radix < 0 || radix > 36) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (radix))
      }

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          if (radix === 0 || radix === 2) {
            radix = 2;
            return head + tail;
          }
          break;
        case '0':
        case '0o':
          if (radix === 0 || radix === 8) {
            radix = 8;
            return head + tail;
          }
          break;
        case '0d':
          if (radix === 0 || radix === 10) {
            radix = 10;
            return head + tail;
          }
          break;
        case '0x':
          if (radix === 0 || radix === 16) {
            radix = 16;
            return head + tail;
          }
          break;
        }
        return original
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    ;
    }, TMP_String_to_i_65.$$arity = -1);
    
    Opal.def(self, '$to_proc', TMP_String_to_proc_66 = function $$to_proc() {
      var TMP_67, $iter = TMP_String_to_proc_66.$$p, $yield = $iter || nil, self = this, method_name = nil;

      if ($iter) TMP_String_to_proc_66.$$p = null;
      
      method_name = $rb_plus("$", self.valueOf());
      return $send(self, 'proc', [], (TMP_67 = function($a){var self = TMP_67.$$s || this, $iter = TMP_67.$$p, block = $iter || nil, $post_args, args;

      
        
        if ($iter) TMP_67.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        
        if (args.length === 0) {
          self.$raise($$($nesting, 'ArgumentError'), "no receiver given")
        }

        var recv = args[0];

        if (recv == null) recv = nil;

        var body = recv[method_name];

        if (!body) {
          return recv.$method_missing.apply(recv, args);
        }

        if (typeof block === 'function') {
          body.$$p = block;
        }

        if (args.length === 1) {
          return body.call(recv);
        } else {
          return body.apply(recv, args.slice(1));
        }
      ;}, TMP_67.$$s = self, TMP_67.$$arity = -1, TMP_67));
    }, TMP_String_to_proc_66.$$arity = 0);
    
    Opal.def(self, '$to_s', TMP_String_to_s_68 = function $$to_s() {
      var self = this;

      return self.toString();
    }, TMP_String_to_s_68.$$arity = 0);
    Opal.alias(self, "to_str", "to_s");
    Opal.alias(self, "to_sym", "intern");
    
    Opal.def(self, '$tr', TMP_String_tr_69 = function $$tr(from, to) {
      var self = this;

      
      from = $$($nesting, 'Opal').$coerce_to(from, $$($nesting, 'String'), "to_str").$to_s();
      to = $$($nesting, 'Opal').$coerce_to(to, $$($nesting, 'String'), "to_str").$to_s();
      
      if (from.length == 0 || from === to) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_to == null) {
              last_to = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_to.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_to = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return self.$$cast(new_str);
    ;
    }, TMP_String_tr_69.$$arity = 2);
    
    Opal.def(self, '$tr_s', TMP_String_tr_s_70 = function $$tr_s(from, to) {
      var self = this;

      
      from = $$($nesting, 'Opal').$coerce_to(from, $$($nesting, 'String'), "to_str").$to_s();
      to = $$($nesting, 'Opal').$coerce_to(to, $$($nesting, 'String'), "to_str").$to_s();
      
      if (from.length == 0) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return self.$$cast(new_str);
    ;
    }, TMP_String_tr_s_70.$$arity = 2);
    
    Opal.def(self, '$upcase', TMP_String_upcase_71 = function $$upcase() {
      var self = this;

      return self.$$cast(self.toUpperCase());
    }, TMP_String_upcase_71.$$arity = 0);
    
    Opal.def(self, '$upto', TMP_String_upto_72 = function $$upto(stop, excl) {
      var $iter = TMP_String_upto_72.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_String_upto_72.$$p = null;
      
      
      if ($iter) TMP_String_upto_72.$$p = null;;
      
      if (excl == null) {
        excl = false;
      };
      if ((block !== nil)) {
      } else {
        return self.$enum_for("upto", stop, excl)
      };
      stop = $$($nesting, 'Opal').$coerce_to(stop, $$($nesting, 'String'), "to_str");
      
      var a, b, s = self.toString();

      if (s.length === 1 && stop.length === 1) {

        a = s.charCodeAt(0);
        b = stop.charCodeAt(0);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(String.fromCharCode(a));

          a += 1;
        }

      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {

        a = parseInt(s, 10);
        b = parseInt(stop, 10);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(a.toString());

          a += 1;
        }

      } else {

        while (s.length <= stop.length && s <= stop) {
          if (excl && s === stop) {
            break;
          }

          block(s);

          s = (s).$succ();
        }

      }
      return self;
    ;
    }, TMP_String_upto_72.$$arity = -2);
    
    function char_class_from_char_sets(sets) {
      function explode_sequences_in_character_set(set) {
        var result = '',
            i, len = set.length,
            curr_char,
            skip_next_dash,
            char_code_from,
            char_code_upto,
            char_code;
        for (i = 0; i < len; i++) {
          curr_char = set.charAt(i);
          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {
            char_code_from = set.charCodeAt(i - 1);
            char_code_upto = set.charCodeAt(i + 1);
            if (char_code_from > char_code_upto) {
              self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (char_code_from) + "-" + (char_code_upto) + "\" in string transliteration")
            }
            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
              result += String.fromCharCode(char_code);
            }
            skip_next_dash = true;
            i++;
          } else {
            skip_next_dash = (curr_char === '\\');
            result += curr_char;
          }
        }
        return result;
      }

      function intersection(setA, setB) {
        if (setA.length === 0) {
          return setB;
        }
        var result = '',
            i, len = setA.length,
            chr;
        for (i = 0; i < len; i++) {
          chr = setA.charAt(i);
          if (setB.indexOf(chr) !== -1) {
            result += chr;
          }
        }
        return result;
      }

      var i, len, set, neg, chr, tmp,
          pos_intersection = '',
          neg_intersection = '';

      for (i = 0, len = sets.length; i < len; i++) {
        set = $$($nesting, 'Opal').$coerce_to(sets[i], $$($nesting, 'String'), "to_str");
        neg = (set.charAt(0) === '^' && set.length > 1);
        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
        if (neg) {
          neg_intersection = intersection(neg_intersection, set);
        } else {
          pos_intersection = intersection(pos_intersection, set);
        }
      }

      if (pos_intersection.length > 0 && neg_intersection.length > 0) {
        tmp = '';
        for (i = 0, len = pos_intersection.length; i < len; i++) {
          chr = pos_intersection.charAt(i);
          if (neg_intersection.indexOf(chr) === -1) {
            tmp += chr;
          }
        }
        pos_intersection = tmp;
        neg_intersection = '';
      }

      if (pos_intersection.length > 0) {
        return '[' + $$($nesting, 'Regexp').$escape(pos_intersection) + ']';
      }

      if (neg_intersection.length > 0) {
        return '[^' + $$($nesting, 'Regexp').$escape(neg_intersection) + ']';
      }

      return null;
    }
  ;
    
    Opal.def(self, '$instance_variables', TMP_String_instance_variables_73 = function $$instance_variables() {
      var self = this;

      return []
    }, TMP_String_instance_variables_73.$$arity = 0);
    Opal.defs(self, '$_load', TMP_String__load_74 = function $$_load($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'new', Opal.to_a(args));
    }, TMP_String__load_74.$$arity = -1);
    
    Opal.def(self, '$unicode_normalize', TMP_String_unicode_normalize_75 = function $$unicode_normalize(form) {
      var self = this;

      
      ;
      return self.toString();;
    }, TMP_String_unicode_normalize_75.$$arity = -1);
    
    Opal.def(self, '$unicode_normalized?', TMP_String_unicode_normalized$q_76 = function(form) {
      var self = this;

      
      ;
      return true;
    }, TMP_String_unicode_normalized$q_76.$$arity = -1);
    
    Opal.def(self, '$unpack', TMP_String_unpack_77 = function $$unpack(format) {
      var self = this;

      return self.$raise("To use String#unpack, you must first require 'corelib/string/unpack'.")
    }, TMP_String_unpack_77.$$arity = 1);
    return (Opal.def(self, '$unpack1', TMP_String_unpack1_78 = function $$unpack1(format) {
      var self = this;

      return self.$raise("To use String#unpack1, you must first require 'corelib/string/unpack'.")
    }, TMP_String_unpack1_78.$$arity = 1), nil) && 'unpack1';
  })($nesting[0], String, $nesting);
  return Opal.const_set($nesting[0], 'Symbol', $$($nesting, 'String'));
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/enumerable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $falsy = Opal.falsy, $hash2 = Opal.hash2, $lambda = Opal.lambda;

  Opal.add_stubs(['$each', '$public_send', '$destructure', '$to_enum', '$enumerator_size', '$new', '$yield', '$raise', '$slice_when', '$!', '$enum_for', '$flatten', '$map', '$warn', '$proc', '$==', '$nil?', '$respond_to?', '$coerce_to!', '$>', '$*', '$coerce_to', '$try_convert', '$<', '$+', '$-', '$ceil', '$/', '$size', '$__send__', '$length', '$<=', '$[]', '$push', '$<<', '$[]=', '$===', '$inspect', '$<=>', '$first', '$reverse', '$sort', '$to_proc', '$compare', '$call', '$dup', '$to_a', '$sort!', '$map!', '$key?', '$values', '$zip']);
  return (function($base, $parent_nesting) {
    function $Enumerable() {};
    var self = $Enumerable = $module($base, 'Enumerable', $Enumerable);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Enumerable_all$q_1, TMP_Enumerable_any$q_5, TMP_Enumerable_chunk_9, TMP_Enumerable_chunk_while_12, TMP_Enumerable_collect_14, TMP_Enumerable_collect_concat_16, TMP_Enumerable_count_19, TMP_Enumerable_cycle_23, TMP_Enumerable_detect_25, TMP_Enumerable_drop_27, TMP_Enumerable_drop_while_28, TMP_Enumerable_each_cons_29, TMP_Enumerable_each_entry_31, TMP_Enumerable_each_slice_33, TMP_Enumerable_each_with_index_35, TMP_Enumerable_each_with_object_37, TMP_Enumerable_entries_39, TMP_Enumerable_find_all_40, TMP_Enumerable_find_index_42, TMP_Enumerable_first_45, TMP_Enumerable_grep_48, TMP_Enumerable_grep_v_50, TMP_Enumerable_group_by_52, TMP_Enumerable_include$q_54, TMP_Enumerable_inject_56, TMP_Enumerable_lazy_57, TMP_Enumerable_enumerator_size_59, TMP_Enumerable_max_60, TMP_Enumerable_max_by_61, TMP_Enumerable_min_63, TMP_Enumerable_min_by_64, TMP_Enumerable_minmax_66, TMP_Enumerable_minmax_by_68, TMP_Enumerable_none$q_69, TMP_Enumerable_one$q_73, TMP_Enumerable_partition_77, TMP_Enumerable_reject_79, TMP_Enumerable_reverse_each_81, TMP_Enumerable_slice_before_83, TMP_Enumerable_slice_after_85, TMP_Enumerable_slice_when_88, TMP_Enumerable_sort_90, TMP_Enumerable_sort_by_92, TMP_Enumerable_sum_97, TMP_Enumerable_take_99, TMP_Enumerable_take_while_100, TMP_Enumerable_uniq_102, TMP_Enumerable_zip_104;

    
    
    function comparableForPattern(value) {
      if (value.length === 0) {
        value = [nil];
      }

      if (value.length > 1) {
        value = [value];
      }

      return value;
    }
  ;
    
    Opal.def(self, '$all?', TMP_Enumerable_all$q_1 = function(pattern) {try {

      var $iter = TMP_Enumerable_all$q_1.$$p, block = $iter || nil, TMP_2, TMP_3, TMP_4, self = this;

      if ($iter) TMP_Enumerable_all$q_1.$$p = null;
      
      
      if ($iter) TMP_Enumerable_all$q_1.$$p = null;;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], (TMP_2 = function($a){var self = TMP_2.$$s || this, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            return nil
          } else {
            Opal.ret(false)
          };}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2))
      } else if ((block !== nil)) {
        $send(self, 'each', [], (TMP_3 = function($a){var self = TMP_3.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            return nil
          } else {
            Opal.ret(false)
          };}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3))
      } else {
        $send(self, 'each', [], (TMP_4 = function($a){var self = TMP_4.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy($$($nesting, 'Opal').$destructure(value))) {
            return nil
          } else {
            Opal.ret(false)
          };}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4))
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_all$q_1.$$arity = -1);
    
    Opal.def(self, '$any?', TMP_Enumerable_any$q_5 = function(pattern) {try {

      var $iter = TMP_Enumerable_any$q_5.$$p, block = $iter || nil, TMP_6, TMP_7, TMP_8, self = this;

      if ($iter) TMP_Enumerable_any$q_5.$$p = null;
      
      
      if ($iter) TMP_Enumerable_any$q_5.$$p = null;;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], (TMP_6 = function($a){var self = TMP_6.$$s || this, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            Opal.ret(true)
          } else {
            return nil
          };}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6))
      } else if ((block !== nil)) {
        $send(self, 'each', [], (TMP_7 = function($a){var self = TMP_7.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(true)
          } else {
            return nil
          };}, TMP_7.$$s = self, TMP_7.$$arity = -1, TMP_7))
      } else {
        $send(self, 'each', [], (TMP_8 = function($a){var self = TMP_8.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy($$($nesting, 'Opal').$destructure(value))) {
            Opal.ret(true)
          } else {
            return nil
          };}, TMP_8.$$s = self, TMP_8.$$arity = -1, TMP_8))
      };
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_any$q_5.$$arity = -1);
    
    Opal.def(self, '$chunk', TMP_Enumerable_chunk_9 = function $$chunk() {
      var $iter = TMP_Enumerable_chunk_9.$$p, block = $iter || nil, TMP_10, TMP_11, self = this;

      if ($iter) TMP_Enumerable_chunk_9.$$p = null;
      
      
      if ($iter) TMP_Enumerable_chunk_9.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'to_enum', ["chunk"], (TMP_10 = function(){var self = TMP_10.$$s || this;

        return self.$enumerator_size()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10))
      };
      return $send($$$('::', 'Enumerator'), 'new', [], (TMP_11 = function(yielder){var self = TMP_11.$$s || this;

      
        
        if (yielder == null) {
          yielder = nil;
        };
        
        var previous = nil, accumulate = [];

        function releaseAccumulate() {
          if (accumulate.length > 0) {
            yielder.$yield(previous, accumulate)
          }
        }

        self.$each.$$p = function(value) {
          var key = Opal.yield1(block, value);

          if (key === nil) {
            releaseAccumulate();
            accumulate = [];
            previous = nil;
          } else {
            if (previous === nil || previous === key) {
              accumulate.push(value);
            } else {
              releaseAccumulate();
              accumulate = [value];
            }

            previous = key;
          }
        }

        self.$each();

        releaseAccumulate();
      ;}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
    }, TMP_Enumerable_chunk_9.$$arity = 0);
    
    Opal.def(self, '$chunk_while', TMP_Enumerable_chunk_while_12 = function $$chunk_while() {
      var $iter = TMP_Enumerable_chunk_while_12.$$p, block = $iter || nil, TMP_13, self = this;

      if ($iter) TMP_Enumerable_chunk_while_12.$$p = null;
      
      
      if ($iter) TMP_Enumerable_chunk_while_12.$$p = null;;
      if ((block !== nil)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "no block given")
      };
      return $send(self, 'slice_when', [], (TMP_13 = function(before, after){var self = TMP_13.$$s || this;

      
        
        if (before == null) {
          before = nil;
        };
        
        if (after == null) {
          after = nil;
        };
        return Opal.yieldX(block, [before, after])['$!']();}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13));
    }, TMP_Enumerable_chunk_while_12.$$arity = 0);
    
    Opal.def(self, '$collect', TMP_Enumerable_collect_14 = function $$collect() {
      var $iter = TMP_Enumerable_collect_14.$$p, block = $iter || nil, TMP_15, self = this;

      if ($iter) TMP_Enumerable_collect_14.$$p = null;
      
      
      if ($iter) TMP_Enumerable_collect_14.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect"], (TMP_15 = function(){var self = TMP_15.$$s || this;

        return self.$enumerator_size()}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        result.push(value);
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_collect_14.$$arity = 0);
    
    Opal.def(self, '$collect_concat', TMP_Enumerable_collect_concat_16 = function $$collect_concat() {
      var $iter = TMP_Enumerable_collect_concat_16.$$p, block = $iter || nil, TMP_17, TMP_18, self = this;

      if ($iter) TMP_Enumerable_collect_concat_16.$$p = null;
      
      
      if ($iter) TMP_Enumerable_collect_concat_16.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect_concat"], (TMP_17 = function(){var self = TMP_17.$$s || this;

        return self.$enumerator_size()}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17))
      };
      return $send(self, 'map', [], (TMP_18 = function(item){var self = TMP_18.$$s || this;

      
        
        if (item == null) {
          item = nil;
        };
        return Opal.yield1(block, item);;}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18)).$flatten(1);
    }, TMP_Enumerable_collect_concat_16.$$arity = 0);
    
    Opal.def(self, '$count', TMP_Enumerable_count_19 = function $$count(object) {
      var $iter = TMP_Enumerable_count_19.$$p, block = $iter || nil, TMP_20, TMP_21, TMP_22, self = this, result = nil;

      if ($iter) TMP_Enumerable_count_19.$$p = null;
      
      
      if ($iter) TMP_Enumerable_count_19.$$p = null;;
      ;
      result = 0;
      
      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }
    ;
      if ($truthy(object != null)) {
        block = $send(self, 'proc', [], (TMP_20 = function($a){var self = TMP_20.$$s || this, $post_args, args;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $$($nesting, 'Opal').$destructure(args)['$=='](object);}, TMP_20.$$s = self, TMP_20.$$arity = -1, TMP_20))
      } else if ($truthy(block['$nil?']())) {
        block = $send(self, 'proc', [], (TMP_21 = function(){var self = TMP_21.$$s || this;

        return true}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))};
      $send(self, 'each', [], (TMP_22 = function($a){var self = TMP_22.$$s || this, $post_args, args;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        if ($truthy(Opal.yieldX(block, args))) {
          return result++;
        } else {
          return nil
        };}, TMP_22.$$s = self, TMP_22.$$arity = -1, TMP_22));
      return result;
    }, TMP_Enumerable_count_19.$$arity = -1);
    
    Opal.def(self, '$cycle', TMP_Enumerable_cycle_23 = function $$cycle(n) {
      var $iter = TMP_Enumerable_cycle_23.$$p, block = $iter || nil, TMP_24, self = this;

      if ($iter) TMP_Enumerable_cycle_23.$$p = null;
      
      
      if ($iter) TMP_Enumerable_cycle_23.$$p = null;;
      
      if (n == null) {
        n = nil;
      };
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["cycle", n], (TMP_24 = function(){var self = TMP_24.$$s || this;

        if ($truthy(n['$nil?']())) {
            if ($truthy(self['$respond_to?']("size"))) {
              return $$$($$($nesting, 'Float'), 'INFINITY')
            } else {
              return nil
            }
          } else {
            
            n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
            } else {
              return 0
            };
          }}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24))
      };
      if ($truthy(n['$nil?']())) {
      } else {
        
        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
        if ($truthy(n <= 0)) {
          return nil};
      };
      
      var result,
          all = [], i, length, value;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }

      if (n === nil) {
        while (true) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }
        }
      }
      else {
        while (n > 1) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }

          n--;
        }
      }
    ;
    }, TMP_Enumerable_cycle_23.$$arity = -1);
    
    Opal.def(self, '$detect', TMP_Enumerable_detect_25 = function $$detect(ifnone) {try {

      var $iter = TMP_Enumerable_detect_25.$$p, block = $iter || nil, TMP_26, self = this;

      if ($iter) TMP_Enumerable_detect_25.$$p = null;
      
      
      if ($iter) TMP_Enumerable_detect_25.$$p = null;;
      ;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("detect", ifnone)
      };
      $send(self, 'each', [], (TMP_26 = function($a){var self = TMP_26.$$s || this, $post_args, args, value = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        value = $$($nesting, 'Opal').$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
          Opal.ret(value)
        } else {
          return nil
        };}, TMP_26.$$s = self, TMP_26.$$arity = -1, TMP_26));
      
      if (ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          return ifnone();
        } else {
          return ifnone;
        }
      }
    ;
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_detect_25.$$arity = -1);
    
    Opal.def(self, '$drop', TMP_Enumerable_drop_27 = function $$drop(number) {
      var self = this;

      
      number = $$($nesting, 'Opal').$coerce_to(number, $$($nesting, 'Integer'), "to_int");
      if ($truthy(number < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push($$($nesting, 'Opal').$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    ;
    }, TMP_Enumerable_drop_27.$$arity = 1);
    
    Opal.def(self, '$drop_while', TMP_Enumerable_drop_while_28 = function $$drop_while() {
      var $iter = TMP_Enumerable_drop_while_28.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Enumerable_drop_while_28.$$p = null;
      
      
      if ($iter) TMP_Enumerable_drop_while_28.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        if (dropping) {
          var value = Opal.yield1(block, param);

          if ($falsy(value)) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_drop_while_28.$$arity = 0);
    
    Opal.def(self, '$each_cons', TMP_Enumerable_each_cons_29 = function $$each_cons(n) {
      var $iter = TMP_Enumerable_each_cons_29.$$p, block = $iter || nil, TMP_30, self = this;

      if ($iter) TMP_Enumerable_each_cons_29.$$p = null;
      
      
      if ($iter) TMP_Enumerable_each_cons_29.$$p = null;;
      if ($truthy(arguments.length != 1)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 1)")};
      n = $$($nesting, 'Opal').$try_convert(n, $$($nesting, 'Integer'), "to_int");
      if ($truthy(n <= 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "invalid size")};
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_cons", n], (TMP_30 = function(){var self = TMP_30.$$s || this, $a, enum_size = nil;

        
          enum_size = self.$enumerator_size();
          if ($truthy(enum_size['$nil?']())) {
            return nil
          } else if ($truthy(($truthy($a = enum_size['$=='](0)) ? $a : $rb_lt(enum_size, n)))) {
            return 0
          } else {
            return $rb_plus($rb_minus(enum_size, n), 1)
          };}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30))
      };
      
      var buffer = [], result = nil;

      self.$each.$$p = function() {
        var element = $$($nesting, 'Opal').$destructure(arguments);
        buffer.push(element);
        if (buffer.length > n) {
          buffer.shift();
        }
        if (buffer.length == n) {
          Opal.yield1(block, buffer.slice(0, n));
        }
      }

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_each_cons_29.$$arity = 1);
    
    Opal.def(self, '$each_entry', TMP_Enumerable_each_entry_31 = function $$each_entry($a) {
      var $iter = TMP_Enumerable_each_entry_31.$$p, block = $iter || nil, $post_args, data, TMP_32, self = this;

      if ($iter) TMP_Enumerable_each_entry_31.$$p = null;
      
      
      if ($iter) TMP_Enumerable_each_entry_31.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      data = $post_args;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'to_enum', ["each_entry"].concat(Opal.to_a(data)), (TMP_32 = function(){var self = TMP_32.$$s || this;

        return self.$enumerator_size()}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32))
      };
      
      self.$each.$$p = function() {
        var item = $$($nesting, 'Opal').$destructure(arguments);

        Opal.yield1(block, item);
      }

      self.$each.apply(self, data);

      return self;
    ;
    }, TMP_Enumerable_each_entry_31.$$arity = -1);
    
    Opal.def(self, '$each_slice', TMP_Enumerable_each_slice_33 = function $$each_slice(n) {
      var $iter = TMP_Enumerable_each_slice_33.$$p, block = $iter || nil, TMP_34, self = this;

      if ($iter) TMP_Enumerable_each_slice_33.$$p = null;
      
      
      if ($iter) TMP_Enumerable_each_slice_33.$$p = null;;
      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");
      if ($truthy(n <= 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "invalid slice size")};
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_slice", n], (TMP_34 = function(){var self = TMP_34.$$s || this;

        if ($truthy(self['$respond_to?']("size"))) {
            return $rb_divide(self.$size(), n).$ceil()
          } else {
            return nil
          }}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34))
      };
      
      var result,
          slice = []

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          Opal.yield1(block, slice);
          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        Opal.yield1(block, slice);
      }
    ;
      return nil;
    }, TMP_Enumerable_each_slice_33.$$arity = 1);
    
    Opal.def(self, '$each_with_index', TMP_Enumerable_each_with_index_35 = function $$each_with_index($a) {
      var $iter = TMP_Enumerable_each_with_index_35.$$p, block = $iter || nil, $post_args, args, TMP_36, self = this;

      if ($iter) TMP_Enumerable_each_with_index_35.$$p = null;
      
      
      if ($iter) TMP_Enumerable_each_with_index_35.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_with_index"].concat(Opal.to_a(args)), (TMP_36 = function(){var self = TMP_36.$$s || this;

        return self.$enumerator_size()}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36))
      };
      
      var result,
          index = 0;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        block(param, index);

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    ;
      return self;
    }, TMP_Enumerable_each_with_index_35.$$arity = -1);
    
    Opal.def(self, '$each_with_object', TMP_Enumerable_each_with_object_37 = function $$each_with_object(object) {
      var $iter = TMP_Enumerable_each_with_object_37.$$p, block = $iter || nil, TMP_38, self = this;

      if ($iter) TMP_Enumerable_each_with_object_37.$$p = null;
      
      
      if ($iter) TMP_Enumerable_each_with_object_37.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_with_object", object], (TMP_38 = function(){var self = TMP_38.$$s || this;

        return self.$enumerator_size()}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38))
      };
      
      var result;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        block(param, object);
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return object;
    }, TMP_Enumerable_each_with_object_37.$$arity = 1);
    
    Opal.def(self, '$entries', TMP_Enumerable_entries_39 = function $$entries($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var result = [];

      self.$each.$$p = function() {
        result.push($$($nesting, 'Opal').$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    ;
    }, TMP_Enumerable_entries_39.$$arity = -1);
    Opal.alias(self, "find", "detect");
    
    Opal.def(self, '$find_all', TMP_Enumerable_find_all_40 = function $$find_all() {
      var $iter = TMP_Enumerable_find_all_40.$$p, block = $iter || nil, TMP_41, self = this;

      if ($iter) TMP_Enumerable_find_all_40.$$p = null;
      
      
      if ($iter) TMP_Enumerable_find_all_40.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["find_all"], (TMP_41 = function(){var self = TMP_41.$$s || this;

        return self.$enumerator_size()}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($truthy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_find_all_40.$$arity = 0);
    
    Opal.def(self, '$find_index', TMP_Enumerable_find_index_42 = function $$find_index(object) {try {

      var $iter = TMP_Enumerable_find_index_42.$$p, block = $iter || nil, TMP_43, TMP_44, self = this, index = nil;

      if ($iter) TMP_Enumerable_find_index_42.$$p = null;
      
      
      if ($iter) TMP_Enumerable_find_index_42.$$p = null;;
      ;
      if ($truthy(object === undefined && block === nil)) {
        return self.$enum_for("find_index")};
      
      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }
    ;
      index = 0;
      if ($truthy(object != null)) {
        $send(self, 'each', [], (TMP_43 = function($a){var self = TMP_43.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($$($nesting, 'Opal').$destructure(value)['$=='](object)) {
            Opal.ret(index)};
          return index += 1;;}, TMP_43.$$s = self, TMP_43.$$arity = -1, TMP_43))
      } else {
        $send(self, 'each', [], (TMP_44 = function($a){var self = TMP_44.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(index)};
          return index += 1;;}, TMP_44.$$s = self, TMP_44.$$arity = -1, TMP_44))
      };
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_find_index_42.$$arity = -1);
    
    Opal.def(self, '$first', TMP_Enumerable_first_45 = function $$first(number) {try {

      var TMP_46, TMP_47, self = this, result = nil, current = nil;

      
      ;
      if ($truthy(number === undefined)) {
        return $send(self, 'each', [], (TMP_46 = function(value){var self = TMP_46.$$s || this;

        
          
          if (value == null) {
            value = nil;
          };
          Opal.ret(value);}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46))
      } else {
        
        result = [];
        number = $$($nesting, 'Opal').$coerce_to(number, $$($nesting, 'Integer'), "to_int");
        if ($truthy(number < 0)) {
          self.$raise($$($nesting, 'ArgumentError'), "attempt to take negative size")};
        if ($truthy(number == 0)) {
          return []};
        current = 0;
        $send(self, 'each', [], (TMP_47 = function($a){var self = TMP_47.$$s || this, $post_args, args;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          result.push($$($nesting, 'Opal').$destructure(args));
          if ($truthy(number <= ++current)) {
            Opal.ret(result)
          } else {
            return nil
          };}, TMP_47.$$s = self, TMP_47.$$arity = -1, TMP_47));
        return result;
      };
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_first_45.$$arity = -1);
    Opal.alias(self, "flat_map", "collect_concat");
    
    Opal.def(self, '$grep', TMP_Enumerable_grep_48 = function $$grep(pattern) {
      var $iter = TMP_Enumerable_grep_48.$$p, block = $iter || nil, TMP_49, self = this, result = nil;

      if ($iter) TMP_Enumerable_grep_48.$$p = null;
      
      
      if ($iter) TMP_Enumerable_grep_48.$$p = null;;
      result = [];
      $send(self, 'each', [], (TMP_49 = function($a){var self = TMP_49.$$s || this, $post_args, value, cmp = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        value = $post_args;;
        cmp = comparableForPattern(value);
        if ($truthy($send(pattern, '__send__', ["==="].concat(Opal.to_a(cmp))))) {
        } else {
          return nil;
        };
        if ((block !== nil)) {
          
          if ($truthy($rb_gt(value.$length(), 1))) {
            value = [value]};
          value = Opal.yieldX(block, Opal.to_a(value));
        } else if ($truthy($rb_le(value.$length(), 1))) {
          value = value['$[]'](0)};
        return result.$push(value);}, TMP_49.$$s = self, TMP_49.$$arity = -1, TMP_49));
      return result;
    }, TMP_Enumerable_grep_48.$$arity = 1);
    
    Opal.def(self, '$grep_v', TMP_Enumerable_grep_v_50 = function $$grep_v(pattern) {
      var $iter = TMP_Enumerable_grep_v_50.$$p, block = $iter || nil, TMP_51, self = this, result = nil;

      if ($iter) TMP_Enumerable_grep_v_50.$$p = null;
      
      
      if ($iter) TMP_Enumerable_grep_v_50.$$p = null;;
      result = [];
      $send(self, 'each', [], (TMP_51 = function($a){var self = TMP_51.$$s || this, $post_args, value, cmp = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        value = $post_args;;
        cmp = comparableForPattern(value);
        if ($truthy($send(pattern, '__send__', ["==="].concat(Opal.to_a(cmp))))) {
          return nil;};
        if ((block !== nil)) {
          
          if ($truthy($rb_gt(value.$length(), 1))) {
            value = [value]};
          value = Opal.yieldX(block, Opal.to_a(value));
        } else if ($truthy($rb_le(value.$length(), 1))) {
          value = value['$[]'](0)};
        return result.$push(value);}, TMP_51.$$s = self, TMP_51.$$arity = -1, TMP_51));
      return result;
    }, TMP_Enumerable_grep_v_50.$$arity = 1);
    
    Opal.def(self, '$group_by', TMP_Enumerable_group_by_52 = function $$group_by() {
      var $iter = TMP_Enumerable_group_by_52.$$p, block = $iter || nil, TMP_53, $a, self = this, hash = nil, $writer = nil;

      if ($iter) TMP_Enumerable_group_by_52.$$p = null;
      
      
      if ($iter) TMP_Enumerable_group_by_52.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["group_by"], (TMP_53 = function(){var self = TMP_53.$$s || this;

        return self.$enumerator_size()}, TMP_53.$$s = self, TMP_53.$$arity = 0, TMP_53))
      };
      hash = $hash2([], {});
      
      var result;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        ($truthy($a = hash['$[]'](value)) ? $a : (($writer = [value, []]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return hash;
    }, TMP_Enumerable_group_by_52.$$arity = 0);
    
    Opal.def(self, '$include?', TMP_Enumerable_include$q_54 = function(obj) {try {

      var TMP_55, self = this;

      
      $send(self, 'each', [], (TMP_55 = function($a){var self = TMP_55.$$s || this, $post_args, args;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        if ($$($nesting, 'Opal').$destructure(args)['$=='](obj)) {
          Opal.ret(true)
        } else {
          return nil
        };}, TMP_55.$$s = self, TMP_55.$$arity = -1, TMP_55));
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_include$q_54.$$arity = 1);
    
    Opal.def(self, '$inject', TMP_Enumerable_inject_56 = function $$inject(object, sym) {
      var $iter = TMP_Enumerable_inject_56.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Enumerable_inject_56.$$p = null;
      
      
      if ($iter) TMP_Enumerable_inject_56.$$p = null;;
      ;
      ;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = Opal.yieldX(block, [result, value]);

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!$$($nesting, 'Symbol')['$==='](object)) {
            self.$raise($$($nesting, 'TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    }, TMP_Enumerable_inject_56.$$arity = -1);
    
    Opal.def(self, '$lazy', TMP_Enumerable_lazy_57 = function $$lazy() {
      var TMP_58, self = this;

      return $send($$$($$($nesting, 'Enumerator'), 'Lazy'), 'new', [self, self.$enumerator_size()], (TMP_58 = function(enum$, $a){var self = TMP_58.$$s || this, $post_args, args;

      
        
        if (enum$ == null) {
          enum$ = nil;
        };
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        return $send(enum$, 'yield', Opal.to_a(args));}, TMP_58.$$s = self, TMP_58.$$arity = -2, TMP_58))
    }, TMP_Enumerable_lazy_57.$$arity = 0);
    
    Opal.def(self, '$enumerator_size', TMP_Enumerable_enumerator_size_59 = function $$enumerator_size() {
      var self = this;

      if ($truthy(self['$respond_to?']("size"))) {
        return self.$size()
      } else {
        return nil
      }
    }, TMP_Enumerable_enumerator_size_59.$$arity = 0);
    Opal.alias(self, "map", "collect");
    
    Opal.def(self, '$max', TMP_Enumerable_max_60 = function $$max(n) {
      var $iter = TMP_Enumerable_max_60.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Enumerable_max_60.$$p = null;
      
      
      if ($iter) TMP_Enumerable_max_60.$$p = null;;
      ;
      
      if (n === undefined || n === nil) {
        var result, value;

        self.$each.$$p = function() {
          var item = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = item;
            return;
          }

          if (block !== nil) {
            value = Opal.yieldX(block, [item, result]);
          } else {
            value = (item)['$<=>'](result);
          }

          if (value === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = item;
          }
        }

        self.$each();

        if (result === undefined) {
          return nil;
        } else {
          return result;
        }
      }
    ;
      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");
      return $send(self, 'sort', [], block.$to_proc()).$reverse().$first(n);
    }, TMP_Enumerable_max_60.$$arity = -1);
    
    Opal.def(self, '$max_by', TMP_Enumerable_max_by_61 = function $$max_by() {
      var $iter = TMP_Enumerable_max_by_61.$$p, block = $iter || nil, TMP_62, self = this;

      if ($iter) TMP_Enumerable_max_by_61.$$p = null;
      
      
      if ($iter) TMP_Enumerable_max_by_61.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["max_by"], (TMP_62 = function(){var self = TMP_62.$$s || this;

        return self.$enumerator_size()}, TMP_62.$$s = self, TMP_62.$$arity = 0, TMP_62))
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, TMP_Enumerable_max_by_61.$$arity = 0);
    Opal.alias(self, "member?", "include?");
    
    Opal.def(self, '$min', TMP_Enumerable_min_63 = function $$min() {
      var $iter = TMP_Enumerable_min_63.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Enumerable_min_63.$$p = null;
      
      
      if ($iter) TMP_Enumerable_min_63.$$p = null;;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($$($nesting, 'Opal').$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, TMP_Enumerable_min_63.$$arity = 0);
    
    Opal.def(self, '$min_by', TMP_Enumerable_min_by_64 = function $$min_by() {
      var $iter = TMP_Enumerable_min_by_64.$$p, block = $iter || nil, TMP_65, self = this;

      if ($iter) TMP_Enumerable_min_by_64.$$p = null;
      
      
      if ($iter) TMP_Enumerable_min_by_64.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["min_by"], (TMP_65 = function(){var self = TMP_65.$$s || this;

        return self.$enumerator_size()}, TMP_65.$$s = self, TMP_65.$$arity = 0, TMP_65))
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, TMP_Enumerable_min_by_64.$$arity = 0);
    
    Opal.def(self, '$minmax', TMP_Enumerable_minmax_66 = function $$minmax() {
      var $iter = TMP_Enumerable_minmax_66.$$p, block = $iter || nil, $a, TMP_67, self = this;

      if ($iter) TMP_Enumerable_minmax_66.$$p = null;
      
      
      if ($iter) TMP_Enumerable_minmax_66.$$p = null;;
      block = ($truthy($a = block) ? $a : $send(self, 'proc', [], (TMP_67 = function(a, b){var self = TMP_67.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a['$<=>'](b);}, TMP_67.$$s = self, TMP_67.$$arity = 2, TMP_67)));
      
      var min = nil, max = nil, first_time = true;

      self.$each.$$p = function() {
        var element = $$($nesting, 'Opal').$destructure(arguments);
        if (first_time) {
          min = max = element;
          first_time = false;
        } else {
          var min_cmp = block.$call(min, element);

          if (min_cmp === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed")
          } else if (min_cmp > 0) {
            min = element;
          }

          var max_cmp = block.$call(max, element);

          if (max_cmp === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed")
          } else if (max_cmp < 0) {
            max = element;
          }
        }
      }

      self.$each();

      return [min, max];
    ;
    }, TMP_Enumerable_minmax_66.$$arity = 0);
    
    Opal.def(self, '$minmax_by', TMP_Enumerable_minmax_by_68 = function $$minmax_by() {
      var $iter = TMP_Enumerable_minmax_by_68.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Enumerable_minmax_by_68.$$p = null;
      
      
      if ($iter) TMP_Enumerable_minmax_by_68.$$p = null;;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, TMP_Enumerable_minmax_by_68.$$arity = 0);
    
    Opal.def(self, '$none?', TMP_Enumerable_none$q_69 = function(pattern) {try {

      var $iter = TMP_Enumerable_none$q_69.$$p, block = $iter || nil, TMP_70, TMP_71, TMP_72, self = this;

      if ($iter) TMP_Enumerable_none$q_69.$$p = null;
      
      
      if ($iter) TMP_Enumerable_none$q_69.$$p = null;;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], (TMP_70 = function($a){var self = TMP_70.$$s || this, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            Opal.ret(false)
          } else {
            return nil
          };}, TMP_70.$$s = self, TMP_70.$$arity = -1, TMP_70))
      } else if ((block !== nil)) {
        $send(self, 'each', [], (TMP_71 = function($a){var self = TMP_71.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(false)
          } else {
            return nil
          };}, TMP_71.$$s = self, TMP_71.$$arity = -1, TMP_71))
      } else {
        $send(self, 'each', [], (TMP_72 = function($a){var self = TMP_72.$$s || this, $post_args, value, item = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          item = $$($nesting, 'Opal').$destructure(value);
          if ($truthy(item)) {
            Opal.ret(false)
          } else {
            return nil
          };}, TMP_72.$$s = self, TMP_72.$$arity = -1, TMP_72))
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_none$q_69.$$arity = -1);
    
    Opal.def(self, '$one?', TMP_Enumerable_one$q_73 = function(pattern) {try {

      var $iter = TMP_Enumerable_one$q_73.$$p, block = $iter || nil, TMP_74, TMP_75, TMP_76, self = this, count = nil;

      if ($iter) TMP_Enumerable_one$q_73.$$p = null;
      
      
      if ($iter) TMP_Enumerable_one$q_73.$$p = null;;
      ;
      count = 0;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], (TMP_74 = function($a){var self = TMP_74.$$s || this, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            
            count = $rb_plus(count, 1);
            if ($truthy($rb_gt(count, 1))) {
              Opal.ret(false)
            } else {
              return nil
            };
          } else {
            return nil
          };}, TMP_74.$$s = self, TMP_74.$$arity = -1, TMP_74))
      } else if ((block !== nil)) {
        $send(self, 'each', [], (TMP_75 = function($a){var self = TMP_75.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
          } else {
            return nil;
          };
          count = $rb_plus(count, 1);
          if ($truthy($rb_gt(count, 1))) {
            Opal.ret(false)
          } else {
            return nil
          };}, TMP_75.$$s = self, TMP_75.$$arity = -1, TMP_75))
      } else {
        $send(self, 'each', [], (TMP_76 = function($a){var self = TMP_76.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy($$($nesting, 'Opal').$destructure(value))) {
          } else {
            return nil;
          };
          count = $rb_plus(count, 1);
          if ($truthy($rb_gt(count, 1))) {
            Opal.ret(false)
          } else {
            return nil
          };}, TMP_76.$$s = self, TMP_76.$$arity = -1, TMP_76))
      };
      return count['$=='](1);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_one$q_73.$$arity = -1);
    
    Opal.def(self, '$partition', TMP_Enumerable_partition_77 = function $$partition() {
      var $iter = TMP_Enumerable_partition_77.$$p, block = $iter || nil, TMP_78, self = this;

      if ($iter) TMP_Enumerable_partition_77.$$p = null;
      
      
      if ($iter) TMP_Enumerable_partition_77.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["partition"], (TMP_78 = function(){var self = TMP_78.$$s || this;

        return self.$enumerator_size()}, TMP_78.$$s = self, TMP_78.$$arity = 0, TMP_78))
      };
      
      var truthy = [], falsy = [], result;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($truthy(value)) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    ;
    }, TMP_Enumerable_partition_77.$$arity = 0);
    Opal.alias(self, "reduce", "inject");
    
    Opal.def(self, '$reject', TMP_Enumerable_reject_79 = function $$reject() {
      var $iter = TMP_Enumerable_reject_79.$$p, block = $iter || nil, TMP_80, self = this;

      if ($iter) TMP_Enumerable_reject_79.$$p = null;
      
      
      if ($iter) TMP_Enumerable_reject_79.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reject"], (TMP_80 = function(){var self = TMP_80.$$s || this;

        return self.$enumerator_size()}, TMP_80.$$s = self, TMP_80.$$arity = 0, TMP_80))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($falsy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_reject_79.$$arity = 0);
    
    Opal.def(self, '$reverse_each', TMP_Enumerable_reverse_each_81 = function $$reverse_each() {
      var $iter = TMP_Enumerable_reverse_each_81.$$p, block = $iter || nil, TMP_82, self = this;

      if ($iter) TMP_Enumerable_reverse_each_81.$$p = null;
      
      
      if ($iter) TMP_Enumerable_reverse_each_81.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reverse_each"], (TMP_82 = function(){var self = TMP_82.$$s || this;

        return self.$enumerator_size()}, TMP_82.$$s = self, TMP_82.$$arity = 0, TMP_82))
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        Opal.yieldX(block, result[i]);
      }

      return result;
    ;
    }, TMP_Enumerable_reverse_each_81.$$arity = 0);
    Opal.alias(self, "select", "find_all");
    
    Opal.def(self, '$slice_before', TMP_Enumerable_slice_before_83 = function $$slice_before(pattern) {
      var $iter = TMP_Enumerable_slice_before_83.$$p, block = $iter || nil, TMP_84, self = this;

      if ($iter) TMP_Enumerable_slice_before_83.$$p = null;
      
      
      if ($iter) TMP_Enumerable_slice_before_83.$$p = null;;
      ;
      if ($truthy(pattern === undefined && block === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "both pattern and block are given")};
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " expected 1)")};
      return $send($$($nesting, 'Enumerator'), 'new', [], (TMP_84 = function(e){var self = TMP_84.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = $$($nesting, 'Opal').$destructure(arguments),
                  value = Opal.yield1(block, param);

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = $$($nesting, 'Opal').$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = $$($nesting, 'Opal').$destructure(arguments),
                value = pattern['$==='](param);

            if ($truthy(value) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, TMP_84.$$s = self, TMP_84.$$arity = 1, TMP_84));
    }, TMP_Enumerable_slice_before_83.$$arity = -1);
    
    Opal.def(self, '$slice_after', TMP_Enumerable_slice_after_85 = function $$slice_after(pattern) {
      var $iter = TMP_Enumerable_slice_after_85.$$p, block = $iter || nil, TMP_86, TMP_87, self = this;

      if ($iter) TMP_Enumerable_slice_after_85.$$p = null;
      
      
      if ($iter) TMP_Enumerable_slice_after_85.$$p = null;;
      ;
      if ($truthy(pattern === undefined && block === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "both pattern and block are given")};
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " expected 1)")};
      if ($truthy(pattern !== undefined)) {
        block = $send(self, 'proc', [], (TMP_86 = function(e){var self = TMP_86.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return pattern['$==='](e);}, TMP_86.$$s = self, TMP_86.$$arity = 1, TMP_86))};
      return $send($$($nesting, 'Enumerator'), 'new', [], (TMP_87 = function(yielder){var self = TMP_87.$$s || this;

      
        
        if (yielder == null) {
          yielder = nil;
        };
        
        var accumulate;

        self.$each.$$p = function() {
          var element = $$($nesting, 'Opal').$destructure(arguments),
              end_chunk = Opal.yield1(block, element);

          if (accumulate == null) {
            accumulate = [];
          }

          if ($truthy(end_chunk)) {
            accumulate.push(element);
            yielder.$yield(accumulate);
            accumulate = null;
          } else {
            accumulate.push(element)
          }
        }

        self.$each();

        if (accumulate != null) {
          yielder.$yield(accumulate);
        }
      ;}, TMP_87.$$s = self, TMP_87.$$arity = 1, TMP_87));
    }, TMP_Enumerable_slice_after_85.$$arity = -1);
    
    Opal.def(self, '$slice_when', TMP_Enumerable_slice_when_88 = function $$slice_when() {
      var $iter = TMP_Enumerable_slice_when_88.$$p, block = $iter || nil, TMP_89, self = this;

      if ($iter) TMP_Enumerable_slice_when_88.$$p = null;
      
      
      if ($iter) TMP_Enumerable_slice_when_88.$$p = null;;
      if ((block !== nil)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1)")
      };
      return $send($$($nesting, 'Enumerator'), 'new', [], (TMP_89 = function(yielder){var self = TMP_89.$$s || this;

      
        
        if (yielder == null) {
          yielder = nil;
        };
        
        var slice = nil, last_after = nil;

        self.$each_cons.$$p = function() {
          var params = $$($nesting, 'Opal').$destructure(arguments),
              before = params[0],
              after = params[1],
              match = Opal.yieldX(block, [before, after]);

          last_after = after;

          if (slice === nil) {
            slice = [];
          }

          if ($truthy(match)) {
            slice.push(before);
            yielder.$yield(slice);
            slice = [];
          } else {
            slice.push(before);
          }
        }

        self.$each_cons(2);

        if (slice !== nil) {
          slice.push(last_after);
          yielder.$yield(slice);
        }
      ;}, TMP_89.$$s = self, TMP_89.$$arity = 1, TMP_89));
    }, TMP_Enumerable_slice_when_88.$$arity = 0);
    
    Opal.def(self, '$sort', TMP_Enumerable_sort_90 = function $$sort() {
      var $iter = TMP_Enumerable_sort_90.$$p, block = $iter || nil, TMP_91, self = this, ary = nil;

      if ($iter) TMP_Enumerable_sort_90.$$p = null;
      
      
      if ($iter) TMP_Enumerable_sort_90.$$p = null;;
      ary = self.$to_a();
      if ((block !== nil)) {
      } else {
        block = $lambda((TMP_91 = function(a, b){var self = TMP_91.$$s || this;

        
          
          if (a == null) {
            a = nil;
          };
          
          if (b == null) {
            b = nil;
          };
          return a['$<=>'](b);}, TMP_91.$$s = self, TMP_91.$$arity = 2, TMP_91))
      };
      return $send(ary, 'sort', [], block.$to_proc());
    }, TMP_Enumerable_sort_90.$$arity = 0);
    
    Opal.def(self, '$sort_by', TMP_Enumerable_sort_by_92 = function $$sort_by() {
      var $iter = TMP_Enumerable_sort_by_92.$$p, block = $iter || nil, TMP_93, TMP_94, TMP_95, TMP_96, self = this, dup = nil;

      if ($iter) TMP_Enumerable_sort_by_92.$$p = null;
      
      
      if ($iter) TMP_Enumerable_sort_by_92.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["sort_by"], (TMP_93 = function(){var self = TMP_93.$$s || this;

        return self.$enumerator_size()}, TMP_93.$$s = self, TMP_93.$$arity = 0, TMP_93))
      };
      dup = $send(self, 'map', [], (TMP_94 = function(){var self = TMP_94.$$s || this, arg = nil;

      
        arg = $$($nesting, 'Opal').$destructure(arguments);
        return [Opal.yield1(block, arg), arg];}, TMP_94.$$s = self, TMP_94.$$arity = 0, TMP_94));
      $send(dup, 'sort!', [], (TMP_95 = function(a, b){var self = TMP_95.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return (a[0])['$<=>'](b[0]);}, TMP_95.$$s = self, TMP_95.$$arity = 2, TMP_95));
      return $send(dup, 'map!', [], (TMP_96 = function(i){var self = TMP_96.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i[1];;}, TMP_96.$$s = self, TMP_96.$$arity = 1, TMP_96));
    }, TMP_Enumerable_sort_by_92.$$arity = 0);
    
    Opal.def(self, '$sum', TMP_Enumerable_sum_97 = function $$sum(initial) {
      var TMP_98, $iter = TMP_Enumerable_sum_97.$$p, $yield = $iter || nil, self = this, result = nil;

      if ($iter) TMP_Enumerable_sum_97.$$p = null;
      
      
      if (initial == null) {
        initial = 0;
      };
      result = initial;
      $send(self, 'each', [], (TMP_98 = function($a){var self = TMP_98.$$s || this, $post_args, args, item = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        item = (function() {if (($yield !== nil)) {
          return Opal.yieldX($yield, Opal.to_a(args));
        } else {
          return $$($nesting, 'Opal').$destructure(args)
        }; return nil; })();
        return (result = $rb_plus(result, item));}, TMP_98.$$s = self, TMP_98.$$arity = -1, TMP_98));
      return result;
    }, TMP_Enumerable_sum_97.$$arity = -1);
    
    Opal.def(self, '$take', TMP_Enumerable_take_99 = function $$take(num) {
      var self = this;

      return self.$first(num)
    }, TMP_Enumerable_take_99.$$arity = 1);
    
    Opal.def(self, '$take_while', TMP_Enumerable_take_while_100 = function $$take_while() {try {

      var $iter = TMP_Enumerable_take_while_100.$$p, block = $iter || nil, TMP_101, self = this, result = nil;

      if ($iter) TMP_Enumerable_take_while_100.$$p = null;
      
      
      if ($iter) TMP_Enumerable_take_while_100.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("take_while")
      };
      result = [];
      return $send(self, 'each', [], (TMP_101 = function($a){var self = TMP_101.$$s || this, $post_args, args, value = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        value = $$($nesting, 'Opal').$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
        } else {
          Opal.ret(result)
        };
        return result.push(value);;}, TMP_101.$$s = self, TMP_101.$$arity = -1, TMP_101));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_take_while_100.$$arity = 0);
    
    Opal.def(self, '$uniq', TMP_Enumerable_uniq_102 = function $$uniq() {
      var $iter = TMP_Enumerable_uniq_102.$$p, block = $iter || nil, TMP_103, self = this, hash = nil;

      if ($iter) TMP_Enumerable_uniq_102.$$p = null;
      
      
      if ($iter) TMP_Enumerable_uniq_102.$$p = null;;
      hash = $hash2([], {});
      $send(self, 'each', [], (TMP_103 = function($a){var self = TMP_103.$$s || this, $post_args, args, value = nil, produced = nil, $writer = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        value = $$($nesting, 'Opal').$destructure(args);
        produced = (function() {if ((block !== nil)) {
          return Opal.yield1(block, value);
        } else {
          return value
        }; return nil; })();
        if ($truthy(hash['$key?'](produced))) {
          return nil
        } else {
          
          $writer = [produced, value];
          $send(hash, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };}, TMP_103.$$s = self, TMP_103.$$arity = -1, TMP_103));
      return hash.$values();
    }, TMP_Enumerable_uniq_102.$$arity = 0);
    Opal.alias(self, "to_a", "entries");
    
    Opal.def(self, '$zip', TMP_Enumerable_zip_104 = function $$zip($a) {
      var $iter = TMP_Enumerable_zip_104.$$p, block = $iter || nil, $post_args, others, self = this;

      if ($iter) TMP_Enumerable_zip_104.$$p = null;
      
      
      if ($iter) TMP_Enumerable_zip_104.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      others = $post_args;;
      return $send(self.$to_a(), 'zip', Opal.to_a(others));
    }, TMP_Enumerable_zip_104.$$arity = -1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/enumerator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $falsy = Opal.falsy;

  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$any?', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Enumerator(){};
    var self = $Enumerator = $klass($base, $super, 'Enumerator', $Enumerator);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Enumerator_for_1, TMP_Enumerator_initialize_2, TMP_Enumerator_each_3, TMP_Enumerator_size_4, TMP_Enumerator_with_index_5, TMP_Enumerator_inspect_7;

    def.size = def.args = def.object = def.method = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    def.$$is_enumerator = true;
    Opal.defs(self, '$for', TMP_Enumerator_for_1 = function(object, $a, $b) {
      var $iter = TMP_Enumerator_for_1.$$p, block = $iter || nil, $post_args, method, args, self = this;

      if ($iter) TMP_Enumerator_for_1.$$p = null;
      
      
      if ($iter) TMP_Enumerator_for_1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      if ($post_args.length > 0) {
        method = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (method == null) {
        method = "each";
      };
      
      args = $post_args;;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    ;
    }, TMP_Enumerator_for_1.$$arity = -2);
    
    Opal.def(self, '$initialize', TMP_Enumerator_initialize_2 = function $$initialize($a) {
      var $iter = TMP_Enumerator_initialize_2.$$p, block = $iter || nil, $post_args, self = this;

      if ($iter) TMP_Enumerator_initialize_2.$$p = null;
      
      
      if ($iter) TMP_Enumerator_initialize_2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      if ($truthy(block)) {
        
        self.object = $send($$($nesting, 'Generator'), 'new', [], block.$to_proc());
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ($truthy(self.size)) {
          return (self.size = $$($nesting, 'Opal').$coerce_to(self.size, $$($nesting, 'Integer'), "to_int"))
        } else {
          return nil
        };
      } else {
        
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return (self.size = nil);
      };
    }, TMP_Enumerator_initialize_2.$$arity = -1);
    
    Opal.def(self, '$each', TMP_Enumerator_each_3 = function $$each($a) {
      var $iter = TMP_Enumerator_each_3.$$p, block = $iter || nil, $post_args, args, $b, self = this;

      if ($iter) TMP_Enumerator_each_3.$$p = null;
      
      
      if ($iter) TMP_Enumerator_each_3.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(($truthy($b = block['$nil?']()) ? args['$empty?']() : $b))) {
        return self};
      args = $rb_plus(self.args, args);
      if ($truthy(block['$nil?']())) {
        return $send(self.$class(), 'new', [self.object, self.method].concat(Opal.to_a(args)))};
      return $send(self.object, '__send__', [self.method].concat(Opal.to_a(args)), block.$to_proc());
    }, TMP_Enumerator_each_3.$$arity = -1);
    
    Opal.def(self, '$size', TMP_Enumerator_size_4 = function $$size() {
      var self = this;

      if ($truthy($$($nesting, 'Proc')['$==='](self.size))) {
        return $send(self.size, 'call', Opal.to_a(self.args))
      } else {
        return self.size
      }
    }, TMP_Enumerator_size_4.$$arity = 0);
    
    Opal.def(self, '$with_index', TMP_Enumerator_with_index_5 = function $$with_index(offset) {
      var $iter = TMP_Enumerator_with_index_5.$$p, block = $iter || nil, TMP_6, self = this;

      if ($iter) TMP_Enumerator_with_index_5.$$p = null;
      
      
      if ($iter) TMP_Enumerator_with_index_5.$$p = null;;
      
      if (offset == null) {
        offset = 0;
      };
      offset = (function() {if ($truthy(offset)) {
        return $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), "to_int")
      } else {
        return 0
      }; return nil; })();
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["with_index", offset], (TMP_6 = function(){var self = TMP_6.$$s || this;

        return self.$size()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
      };
      
      var result, index = offset;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = block(param, index);

        index++;

        return value;
      }

      return self.$each();
    ;
    }, TMP_Enumerator_with_index_5.$$arity = -1);
    Opal.alias(self, "with_object", "each_with_object");
    
    Opal.def(self, '$inspect', TMP_Enumerator_inspect_7 = function $$inspect() {
      var self = this, result = nil;

      
      result = "" + "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ($truthy(self.args['$any?']())) {
        result = $rb_plus(result, "" + "(" + (self.args.$inspect()['$[]']($$($nesting, 'Range').$new(1, -2))) + ")")};
      return $rb_plus(result, ">");
    }, TMP_Enumerator_inspect_7.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      function $Generator(){};
      var self = $Generator = $klass($base, $super, 'Generator', $Generator);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Generator_initialize_8, TMP_Generator_each_9;

      def.block = nil;
      
      self.$include($$($nesting, 'Enumerable'));
      
      Opal.def(self, '$initialize', TMP_Generator_initialize_8 = function $$initialize() {
        var $iter = TMP_Generator_initialize_8.$$p, block = $iter || nil, self = this;

        if ($iter) TMP_Generator_initialize_8.$$p = null;
        
        
        if ($iter) TMP_Generator_initialize_8.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'LocalJumpError'), "no block given")
        };
        return (self.block = block);
      }, TMP_Generator_initialize_8.$$arity = 0);
      return (Opal.def(self, '$each', TMP_Generator_each_9 = function $$each($a) {
        var $iter = TMP_Generator_each_9.$$p, block = $iter || nil, $post_args, args, self = this, yielder = nil;

        if ($iter) TMP_Generator_each_9.$$p = null;
        
        
        if ($iter) TMP_Generator_each_9.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        yielder = $send($$($nesting, 'Yielder'), 'new', [], block.$to_proc());
        
        try {
          args.unshift(yielder);

          Opal.yieldX(self.block, args);
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, TMP_Generator_each_9.$$arity = -1), nil) && 'each';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Yielder(){};
      var self = $Yielder = $klass($base, $super, 'Yielder', $Yielder);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Yielder_initialize_10, TMP_Yielder_yield_11, TMP_Yielder_$lt$lt_12;

      def.block = nil;
      
      
      Opal.def(self, '$initialize', TMP_Yielder_initialize_10 = function $$initialize() {
        var $iter = TMP_Yielder_initialize_10.$$p, block = $iter || nil, self = this;

        if ($iter) TMP_Yielder_initialize_10.$$p = null;
        
        
        if ($iter) TMP_Yielder_initialize_10.$$p = null;;
        return (self.block = block);
      }, TMP_Yielder_initialize_10.$$arity = 0);
      
      Opal.def(self, '$yield', TMP_Yielder_yield_11 = function($a) {
        var $post_args, values, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        values = $post_args;;
        
        var value = Opal.yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      ;
      }, TMP_Yielder_yield_11.$$arity = -1);
      return (Opal.def(self, '$<<', TMP_Yielder_$lt$lt_12 = function($a) {
        var $post_args, values, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        values = $post_args;;
        $send(self, 'yield', Opal.to_a(values));
        return self;
      }, TMP_Yielder_$lt$lt_12.$$arity = -1), nil) && '<<';
    })($nesting[0], null, $nesting);
    return (function($base, $super, $parent_nesting) {
      function $Lazy(){};
      var self = $Lazy = $klass($base, $super, 'Lazy', $Lazy);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Lazy_initialize_13, TMP_Lazy_lazy_16, TMP_Lazy_collect_17, TMP_Lazy_collect_concat_19, TMP_Lazy_drop_23, TMP_Lazy_drop_while_25, TMP_Lazy_enum_for_27, TMP_Lazy_find_all_28, TMP_Lazy_grep_30, TMP_Lazy_reject_33, TMP_Lazy_take_35, TMP_Lazy_take_while_37, TMP_Lazy_inspect_39;

      def.enumerator = nil;
      
      (function($base, $super, $parent_nesting) {
        function $StopLazyError(){};
        var self = $StopLazyError = $klass($base, $super, 'StopLazyError', $StopLazyError);

        var def = self.prototype, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], $$($nesting, 'Exception'), $nesting);
      
      Opal.def(self, '$initialize', TMP_Lazy_initialize_13 = function $$initialize(object, size) {
        var $iter = TMP_Lazy_initialize_13.$$p, block = $iter || nil, TMP_14, self = this;

        if ($iter) TMP_Lazy_initialize_13.$$p = null;
        
        
        if ($iter) TMP_Lazy_initialize_13.$$p = null;;
        
        if (size == null) {
          size = nil;
        };
        if ((block !== nil)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Lazy_initialize_13, false), [size], (TMP_14 = function(yielder, $a){var self = TMP_14.$$s || this, $post_args, each_args, TMP_15;

        
          
          if (yielder == null) {
            yielder = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          each_args = $post_args;;
          try {
            return $send(object, 'each', Opal.to_a(each_args), (TMP_15 = function($b){var self = TMP_15.$$s || this, $post_args, args;

            
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              
            args.unshift(yielder);

            Opal.yieldX(block, args);
          ;}, TMP_15.$$s = self, TMP_15.$$arity = -1, TMP_15))
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };}, TMP_14.$$s = self, TMP_14.$$arity = -2, TMP_14));
      }, TMP_Lazy_initialize_13.$$arity = -2);
      Opal.alias(self, "force", "to_a");
      
      Opal.def(self, '$lazy', TMP_Lazy_lazy_16 = function $$lazy() {
        var self = this;

        return self
      }, TMP_Lazy_lazy_16.$$arity = 0);
      
      Opal.def(self, '$collect', TMP_Lazy_collect_17 = function $$collect() {
        var $iter = TMP_Lazy_collect_17.$$p, block = $iter || nil, TMP_18, self = this;

        if ($iter) TMP_Lazy_collect_17.$$p = null;
        
        
        if ($iter) TMP_Lazy_collect_17.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy map without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, self.$enumerator_size()], (TMP_18 = function(enum$, $a){var self = TMP_18.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          enum$.$yield(value);
        ;}, TMP_18.$$s = self, TMP_18.$$arity = -2, TMP_18));
      }, TMP_Lazy_collect_17.$$arity = 0);
      
      Opal.def(self, '$collect_concat', TMP_Lazy_collect_concat_19 = function $$collect_concat() {
        var $iter = TMP_Lazy_collect_concat_19.$$p, block = $iter || nil, TMP_20, self = this;

        if ($iter) TMP_Lazy_collect_concat_19.$$p = null;
        
        
        if ($iter) TMP_Lazy_collect_concat_19.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy map without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], (TMP_20 = function(enum$, $a){var self = TMP_20.$$s || this, $post_args, args, TMP_21, TMP_22;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            $send((value), 'each', [], (TMP_21 = function(v){var self = TMP_21.$$s || this;

          
            
            if (v == null) {
              v = nil;
            };
            return enum$.$yield(v);}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21))
          }
          else {
            var array = $$($nesting, 'Opal').$try_convert(value, $$($nesting, 'Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              $send((value), 'each', [], (TMP_22 = function(v){var self = TMP_22.$$s || this;

          
            
            if (v == null) {
              v = nil;
            };
            return enum$.$yield(v);}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22));
            }
          }
        ;}, TMP_20.$$s = self, TMP_20.$$arity = -2, TMP_20));
      }, TMP_Lazy_collect_concat_19.$$arity = 0);
      
      Opal.def(self, '$drop', TMP_Lazy_drop_23 = function $$drop(n) {
        var TMP_24, self = this, current_size = nil, set_size = nil, dropped = nil;

        
        n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(n, 0))) {
          self.$raise($$($nesting, 'ArgumentError'), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ($truthy($$($nesting, 'Integer')['$==='](current_size))) {
          if ($truthy($rb_lt(n, current_size))) {
            return n
          } else {
            return current_size
          }
        } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return $send($$($nesting, 'Lazy'), 'new', [self, set_size], (TMP_24 = function(enum$, $a){var self = TMP_24.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy($rb_lt(dropped, n))) {
            return (dropped = $rb_plus(dropped, 1))
          } else {
            return $send(enum$, 'yield', Opal.to_a(args))
          };}, TMP_24.$$s = self, TMP_24.$$arity = -2, TMP_24));
      }, TMP_Lazy_drop_23.$$arity = 1);
      
      Opal.def(self, '$drop_while', TMP_Lazy_drop_while_25 = function $$drop_while() {
        var $iter = TMP_Lazy_drop_while_25.$$p, block = $iter || nil, TMP_26, self = this, succeeding = nil;

        if ($iter) TMP_Lazy_drop_while_25.$$p = null;
        
        
        if ($iter) TMP_Lazy_drop_while_25.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], (TMP_26 = function(enum$, $a){var self = TMP_26.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy(succeeding)) {
            
            var value = Opal.yieldX(block, args);

            if ($falsy(value)) {
              succeeding = false;

              $send(enum$, 'yield', Opal.to_a(args));
            }
          
          } else {
            return $send(enum$, 'yield', Opal.to_a(args))
          };}, TMP_26.$$s = self, TMP_26.$$arity = -2, TMP_26));
      }, TMP_Lazy_drop_while_25.$$arity = 0);
      
      Opal.def(self, '$enum_for', TMP_Lazy_enum_for_27 = function $$enum_for($a, $b) {
        var $iter = TMP_Lazy_enum_for_27.$$p, block = $iter || nil, $post_args, method, args, self = this;

        if ($iter) TMP_Lazy_enum_for_27.$$p = null;
        
        
        if ($iter) TMP_Lazy_enum_for_27.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        if ($post_args.length > 0) {
          method = $post_args[0];
          $post_args.splice(0, 1);
        }
        if (method == null) {
          method = "each";
        };
        
        args = $post_args;;
        return $send(self.$class(), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc());
      }, TMP_Lazy_enum_for_27.$$arity = -1);
      
      Opal.def(self, '$find_all', TMP_Lazy_find_all_28 = function $$find_all() {
        var $iter = TMP_Lazy_find_all_28.$$p, block = $iter || nil, TMP_29, self = this;

        if ($iter) TMP_Lazy_find_all_28.$$p = null;
        
        
        if ($iter) TMP_Lazy_find_all_28.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy select without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], (TMP_29 = function(enum$, $a){var self = TMP_29.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
        ;}, TMP_29.$$s = self, TMP_29.$$arity = -2, TMP_29));
      }, TMP_Lazy_find_all_28.$$arity = 0);
      Opal.alias(self, "flat_map", "collect_concat");
      
      Opal.def(self, '$grep', TMP_Lazy_grep_30 = function $$grep(pattern) {
        var $iter = TMP_Lazy_grep_30.$$p, block = $iter || nil, TMP_31, TMP_32, self = this;

        if ($iter) TMP_Lazy_grep_30.$$p = null;
        
        
        if ($iter) TMP_Lazy_grep_30.$$p = null;;
        if ($truthy(block)) {
          return $send($$($nesting, 'Lazy'), 'new', [self, nil], (TMP_31 = function(enum$, $a){var self = TMP_31.$$s || this, $post_args, args;

          
            
            if (enum$ == null) {
              enum$ = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            
            var param = $$($nesting, 'Opal').$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              value = Opal.yield1(block, param);

              enum$.$yield(Opal.yield1(block, param));
            }
          ;}, TMP_31.$$s = self, TMP_31.$$arity = -2, TMP_31))
        } else {
          return $send($$($nesting, 'Lazy'), 'new', [self, nil], (TMP_32 = function(enum$, $a){var self = TMP_32.$$s || this, $post_args, args;

          
            
            if (enum$ == null) {
              enum$ = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            
            var param = $$($nesting, 'Opal').$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              enum$.$yield(param);
            }
          ;}, TMP_32.$$s = self, TMP_32.$$arity = -2, TMP_32))
        };
      }, TMP_Lazy_grep_30.$$arity = 1);
      Opal.alias(self, "map", "collect");
      Opal.alias(self, "select", "find_all");
      
      Opal.def(self, '$reject', TMP_Lazy_reject_33 = function $$reject() {
        var $iter = TMP_Lazy_reject_33.$$p, block = $iter || nil, TMP_34, self = this;

        if ($iter) TMP_Lazy_reject_33.$$p = null;
        
        
        if ($iter) TMP_Lazy_reject_33.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy reject without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], (TMP_34 = function(enum$, $a){var self = TMP_34.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ($falsy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
        ;}, TMP_34.$$s = self, TMP_34.$$arity = -2, TMP_34));
      }, TMP_Lazy_reject_33.$$arity = 0);
      
      Opal.def(self, '$take', TMP_Lazy_take_35 = function $$take(n) {
        var TMP_36, self = this, current_size = nil, set_size = nil, taken = nil;

        
        n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(n, 0))) {
          self.$raise($$($nesting, 'ArgumentError'), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ($truthy($$($nesting, 'Integer')['$==='](current_size))) {
          if ($truthy($rb_lt(n, current_size))) {
            return n
          } else {
            return current_size
          }
        } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return $send($$($nesting, 'Lazy'), 'new', [self, set_size], (TMP_36 = function(enum$, $a){var self = TMP_36.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy($rb_lt(taken, n))) {
            
            $send(enum$, 'yield', Opal.to_a(args));
            return (taken = $rb_plus(taken, 1));
          } else {
            return self.$raise($$($nesting, 'StopLazyError'))
          };}, TMP_36.$$s = self, TMP_36.$$arity = -2, TMP_36));
      }, TMP_Lazy_take_35.$$arity = 1);
      
      Opal.def(self, '$take_while', TMP_Lazy_take_while_37 = function $$take_while() {
        var $iter = TMP_Lazy_take_while_37.$$p, block = $iter || nil, TMP_38, self = this;

        if ($iter) TMP_Lazy_take_while_37.$$p = null;
        
        
        if ($iter) TMP_Lazy_take_while_37.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy take_while without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], (TMP_38 = function(enum$, $a){var self = TMP_38.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
          else {
            self.$raise($$($nesting, 'StopLazyError'));
          }
        ;}, TMP_38.$$s = self, TMP_38.$$arity = -2, TMP_38));
      }, TMP_Lazy_take_while_37.$$arity = 0);
      Opal.alias(self, "to_enum", "enum_for");
      return (Opal.def(self, '$inspect', TMP_Lazy_inspect_39 = function $$inspect() {
        var self = this;

        return "" + "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">"
      }, TMP_Lazy_inspect_39.$$arity = 0), nil) && 'inspect';
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/numeric"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$respond_to?', '$coerce', '$__send__', '$===', '$raise', '$equal?', '$-', '$*', '$div', '$<', '$-@', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$coerce_to!', '$round', '$to_i', '$truncate', '$>']);
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Numeric_coerce_1, TMP_Numeric___coerced___2, TMP_Numeric_$lt$eq$gt_3, TMP_Numeric_$$_4, TMP_Numeric_$$_5, TMP_Numeric_$_6, TMP_Numeric_abs_7, TMP_Numeric_abs2_8, TMP_Numeric_angle_9, TMP_Numeric_ceil_10, TMP_Numeric_conj_11, TMP_Numeric_denominator_12, TMP_Numeric_div_13, TMP_Numeric_divmod_14, TMP_Numeric_fdiv_15, TMP_Numeric_floor_16, TMP_Numeric_i_17, TMP_Numeric_imag_18, TMP_Numeric_integer$q_19, TMP_Numeric_nonzero$q_20, TMP_Numeric_numerator_21, TMP_Numeric_polar_22, TMP_Numeric_quo_23, TMP_Numeric_real_24, TMP_Numeric_real$q_25, TMP_Numeric_rect_26, TMP_Numeric_round_27, TMP_Numeric_to_c_28, TMP_Numeric_to_int_29, TMP_Numeric_truncate_30, TMP_Numeric_zero$q_31, TMP_Numeric_positive$q_32, TMP_Numeric_negative$q_33, TMP_Numeric_dup_34, TMP_Numeric_clone_35, TMP_Numeric_finite$q_36, TMP_Numeric_infinite$q_37;

    
    self.$include($$($nesting, 'Comparable'));
    
    Opal.def(self, '$coerce', TMP_Numeric_coerce_1 = function $$coerce(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
        return [other, self]};
      return [self.$Float(other), self.$Float(self)];
    }, TMP_Numeric_coerce_1.$$arity = 1);
    
    Opal.def(self, '$__coerced__', TMP_Numeric___coerced___2 = function $$__coerced__(method, other) {
      var $a, $b, self = this, a = nil, b = nil, $case = nil;

      if ($truthy(other['$respond_to?']("coerce"))) {
        
        $b = other.$coerce(self), $a = Opal.to_ary($b), (a = ($a[0] == null ? nil : $a[0])), (b = ($a[1] == null ? nil : $a[1])), $b;
        return a.$__send__(method, b);
      } else {
        return (function() {$case = method;
        if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {return self.$raise($$($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Numeric")}
        else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {return self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}
        else { return nil }})()
      }
    }, TMP_Numeric___coerced___2.$$arity = 2);
    
    Opal.def(self, '$<=>', TMP_Numeric_$lt$eq$gt_3 = function(other) {
      var self = this;

      
      if ($truthy(self['$equal?'](other))) {
        return 0};
      return nil;
    }, TMP_Numeric_$lt$eq$gt_3.$$arity = 1);
    
    Opal.def(self, '$+@', TMP_Numeric_$$_4 = function() {
      var self = this;

      return self
    }, TMP_Numeric_$$_4.$$arity = 0);
    
    Opal.def(self, '$-@', TMP_Numeric_$$_5 = function() {
      var self = this;

      return $rb_minus(0, self)
    }, TMP_Numeric_$$_5.$$arity = 0);
    
    Opal.def(self, '$%', TMP_Numeric_$_6 = function(other) {
      var self = this;

      return $rb_minus(self, $rb_times(other, self.$div(other)))
    }, TMP_Numeric_$_6.$$arity = 1);
    
    Opal.def(self, '$abs', TMP_Numeric_abs_7 = function $$abs() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return self['$-@']()
      } else {
        return self
      }
    }, TMP_Numeric_abs_7.$$arity = 0);
    
    Opal.def(self, '$abs2', TMP_Numeric_abs2_8 = function $$abs2() {
      var self = this;

      return $rb_times(self, self)
    }, TMP_Numeric_abs2_8.$$arity = 0);
    
    Opal.def(self, '$angle', TMP_Numeric_angle_9 = function $$angle() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return $$$($$($nesting, 'Math'), 'PI')
      } else {
        return 0
      }
    }, TMP_Numeric_angle_9.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    
    Opal.def(self, '$ceil', TMP_Numeric_ceil_10 = function $$ceil(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return self.$to_f().$ceil(ndigits);
    }, TMP_Numeric_ceil_10.$$arity = -1);
    
    Opal.def(self, '$conj', TMP_Numeric_conj_11 = function $$conj() {
      var self = this;

      return self
    }, TMP_Numeric_conj_11.$$arity = 0);
    Opal.alias(self, "conjugate", "conj");
    
    Opal.def(self, '$denominator', TMP_Numeric_denominator_12 = function $$denominator() {
      var self = this;

      return self.$to_r().$denominator()
    }, TMP_Numeric_denominator_12.$$arity = 0);
    
    Opal.def(self, '$div', TMP_Numeric_div_13 = function $$div(other) {
      var self = this;

      
      if (other['$=='](0)) {
        self.$raise($$($nesting, 'ZeroDivisionError'), "divided by o")};
      return $rb_divide(self, other).$floor();
    }, TMP_Numeric_div_13.$$arity = 1);
    
    Opal.def(self, '$divmod', TMP_Numeric_divmod_14 = function $$divmod(other) {
      var self = this;

      return [self.$div(other), self['$%'](other)]
    }, TMP_Numeric_divmod_14.$$arity = 1);
    
    Opal.def(self, '$fdiv', TMP_Numeric_fdiv_15 = function $$fdiv(other) {
      var self = this;

      return $rb_divide(self.$to_f(), other)
    }, TMP_Numeric_fdiv_15.$$arity = 1);
    
    Opal.def(self, '$floor', TMP_Numeric_floor_16 = function $$floor(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return self.$to_f().$floor(ndigits);
    }, TMP_Numeric_floor_16.$$arity = -1);
    
    Opal.def(self, '$i', TMP_Numeric_i_17 = function $$i() {
      var self = this;

      return self.$Complex(0, self)
    }, TMP_Numeric_i_17.$$arity = 0);
    
    Opal.def(self, '$imag', TMP_Numeric_imag_18 = function $$imag() {
      var self = this;

      return 0
    }, TMP_Numeric_imag_18.$$arity = 0);
    Opal.alias(self, "imaginary", "imag");
    
    Opal.def(self, '$integer?', TMP_Numeric_integer$q_19 = function() {
      var self = this;

      return false
    }, TMP_Numeric_integer$q_19.$$arity = 0);
    Opal.alias(self, "magnitude", "abs");
    Opal.alias(self, "modulo", "%");
    
    Opal.def(self, '$nonzero?', TMP_Numeric_nonzero$q_20 = function() {
      var self = this;

      if ($truthy(self['$zero?']())) {
        return nil
      } else {
        return self
      }
    }, TMP_Numeric_nonzero$q_20.$$arity = 0);
    
    Opal.def(self, '$numerator', TMP_Numeric_numerator_21 = function $$numerator() {
      var self = this;

      return self.$to_r().$numerator()
    }, TMP_Numeric_numerator_21.$$arity = 0);
    Opal.alias(self, "phase", "arg");
    
    Opal.def(self, '$polar', TMP_Numeric_polar_22 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, TMP_Numeric_polar_22.$$arity = 0);
    
    Opal.def(self, '$quo', TMP_Numeric_quo_23 = function $$quo(other) {
      var self = this;

      return $rb_divide($$($nesting, 'Opal')['$coerce_to!'](self, $$($nesting, 'Rational'), "to_r"), other)
    }, TMP_Numeric_quo_23.$$arity = 1);
    
    Opal.def(self, '$real', TMP_Numeric_real_24 = function $$real() {
      var self = this;

      return self
    }, TMP_Numeric_real_24.$$arity = 0);
    
    Opal.def(self, '$real?', TMP_Numeric_real$q_25 = function() {
      var self = this;

      return true
    }, TMP_Numeric_real$q_25.$$arity = 0);
    
    Opal.def(self, '$rect', TMP_Numeric_rect_26 = function $$rect() {
      var self = this;

      return [self, 0]
    }, TMP_Numeric_rect_26.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.def(self, '$round', TMP_Numeric_round_27 = function $$round(digits) {
      var self = this;

      
      ;
      return self.$to_f().$round(digits);
    }, TMP_Numeric_round_27.$$arity = -1);
    
    Opal.def(self, '$to_c', TMP_Numeric_to_c_28 = function $$to_c() {
      var self = this;

      return self.$Complex(self, 0)
    }, TMP_Numeric_to_c_28.$$arity = 0);
    
    Opal.def(self, '$to_int', TMP_Numeric_to_int_29 = function $$to_int() {
      var self = this;

      return self.$to_i()
    }, TMP_Numeric_to_int_29.$$arity = 0);
    
    Opal.def(self, '$truncate', TMP_Numeric_truncate_30 = function $$truncate(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return self.$to_f().$truncate(ndigits);
    }, TMP_Numeric_truncate_30.$$arity = -1);
    
    Opal.def(self, '$zero?', TMP_Numeric_zero$q_31 = function() {
      var self = this;

      return self['$=='](0)
    }, TMP_Numeric_zero$q_31.$$arity = 0);
    
    Opal.def(self, '$positive?', TMP_Numeric_positive$q_32 = function() {
      var self = this;

      return $rb_gt(self, 0)
    }, TMP_Numeric_positive$q_32.$$arity = 0);
    
    Opal.def(self, '$negative?', TMP_Numeric_negative$q_33 = function() {
      var self = this;

      return $rb_lt(self, 0)
    }, TMP_Numeric_negative$q_33.$$arity = 0);
    
    Opal.def(self, '$dup', TMP_Numeric_dup_34 = function $$dup() {
      var self = this;

      return self
    }, TMP_Numeric_dup_34.$$arity = 0);
    
    Opal.def(self, '$clone', TMP_Numeric_clone_35 = function $$clone($kwargs) {
      var freeze, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      return self;
    }, TMP_Numeric_clone_35.$$arity = -1);
    
    Opal.def(self, '$finite?', TMP_Numeric_finite$q_36 = function() {
      var self = this;

      return true
    }, TMP_Numeric_finite$q_36.$$arity = 0);
    return (Opal.def(self, '$infinite?', TMP_Numeric_infinite$q_37 = function() {
      var self = this;

      return nil
    }, TMP_Numeric_infinite$q_37.$$arity = 0), nil) && 'infinite?';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/array"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$to_a', '$warn', '$raise', '$replace', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$===', '$join', '$to_str', '$class', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$bsearch_index', '$to_proc', '$nil?', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$size', '$map', '$equal?', '$dup', '$each', '$[]', '$dig', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$to_s', '$new', '$max', '$min', '$!', '$>=', '$**', '$delete_if', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$<', '$sort', '$sort_by', '$!=', '$times', '$[]=', '$-', '$<<', '$values', '$is_a?', '$last', '$first', '$upto', '$reject', '$pristine', '$singleton_class']);
  
  self.$require("corelib/enumerable");
  self.$require("corelib/numeric");
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Array_$$_1, TMP_Array_initialize_2, TMP_Array_try_convert_3, TMP_Array_$_4, TMP_Array_$_5, TMP_Array_$_6, TMP_Array_$_7, TMP_Array_$_8, TMP_Array_$lt$lt_9, TMP_Array_$lt$eq$gt_10, TMP_Array_$eq$eq_11, TMP_Array_$$_12, TMP_Array_$$$eq_13, TMP_Array_any$q_14, TMP_Array_assoc_15, TMP_Array_at_16, TMP_Array_bsearch_index_17, TMP_Array_bsearch_18, TMP_Array_cycle_19, TMP_Array_clear_21, TMP_Array_count_22, TMP_Array_initialize_copy_23, TMP_Array_collect_24, TMP_Array_collect$B_26, TMP_Array_combination_28, TMP_Array_repeated_combination_30, TMP_Array_compact_32, TMP_Array_compact$B_33, TMP_Array_concat_34, TMP_Array_delete_37, TMP_Array_delete_at_38, TMP_Array_delete_if_39, TMP_Array_dig_41, TMP_Array_drop_42, TMP_Array_dup_43, TMP_Array_each_44, TMP_Array_each_index_46, TMP_Array_empty$q_48, TMP_Array_eql$q_49, TMP_Array_fetch_50, TMP_Array_fill_51, TMP_Array_first_52, TMP_Array_flatten_53, TMP_Array_flatten$B_54, TMP_Array_hash_55, TMP_Array_include$q_56, TMP_Array_index_57, TMP_Array_insert_58, TMP_Array_inspect_59, TMP_Array_join_60, TMP_Array_keep_if_61, TMP_Array_last_63, TMP_Array_length_64, TMP_Array_max_65, TMP_Array_min_66, TMP_Array_permutation_67, TMP_Array_repeated_permutation_69, TMP_Array_pop_71, TMP_Array_product_72, TMP_Array_push_73, TMP_Array_rassoc_74, TMP_Array_reject_75, TMP_Array_reject$B_77, TMP_Array_replace_79, TMP_Array_reverse_80, TMP_Array_reverse$B_81, TMP_Array_reverse_each_82, TMP_Array_rindex_84, TMP_Array_rotate_85, TMP_Array_rotate$B_86, TMP_Array_sample_89, TMP_Array_select_90, TMP_Array_select$B_92, TMP_Array_shift_94, TMP_Array_shuffle_95, TMP_Array_shuffle$B_96, TMP_Array_slice$B_97, TMP_Array_sort_98, TMP_Array_sort$B_99, TMP_Array_sort_by$B_100, TMP_Array_take_102, TMP_Array_take_while_103, TMP_Array_to_a_104, TMP_Array_to_h_105, TMP_Array_transpose_106, TMP_Array_uniq_109, TMP_Array_uniq$B_110, TMP_Array_unshift_111, TMP_Array_values_at_112, TMP_Array_zip_115, TMP_Array_inherited_116, TMP_Array_instance_variables_117, TMP_Array_pack_119;

    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defineProperty(Array.prototype, '$$is_array', true);
    
    function toArraySubclass(obj, klass) {
      if (klass.$$name === Opal.Array) {
        return obj;
      } else {
        return klass.$allocate().$replace((obj).$to_a());
      }
    }
  ;
    Opal.defs(self, '$[]', TMP_Array_$$_1 = function($a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      objects = $post_args;;
      return toArraySubclass(objects, self);;
    }, TMP_Array_$$_1.$$arity = -1);
    
    Opal.def(self, '$initialize', TMP_Array_initialize_2 = function $$initialize(size, obj) {
      var $iter = TMP_Array_initialize_2.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_initialize_2.$$p = null;
      
      
      if ($iter) TMP_Array_initialize_2.$$p = null;;
      
      if (size == null) {
        size = nil;
      };
      
      if (obj == null) {
        obj = nil;
      };
      
      if (obj !== nil && block !== nil) {
        self.$warn("warning: block supersedes default value argument")
      }

      if (size > $$$($$($nesting, 'Integer'), 'MAX')) {
        self.$raise($$($nesting, 'ArgumentError'), "array size too big")
      }

      if (arguments.length > 2) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..2)")
      }

      if (arguments.length === 0) {
        self.splice(0, self.length);
        return self;
      }

      if (arguments.length === 1) {
        if (size.$$is_array) {
          self.$replace(size.$to_a())
          return self;
        } else if (size['$respond_to?']("to_ary")) {
          self.$replace(size.$to_ary())
          return self;
        }
      }

      size = $$($nesting, 'Opal').$coerce_to(size, $$($nesting, 'Integer'), "to_int")

      if (size < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size")
      }

      self.splice(0, self.length);
      var i, value;

      if (block === nil) {
        for (i = 0; i < size; i++) {
          self.push(obj);
        }
      }
      else {
        for (i = 0, value; i < size; i++) {
          value = block(i);
          self[i] = value;
        }
      }

      return self;
    ;
    }, TMP_Array_initialize_2.$$arity = -1);
    Opal.defs(self, '$try_convert', TMP_Array_try_convert_3 = function $$try_convert(obj) {
      var self = this;

      return $$($nesting, 'Opal')['$coerce_to?'](obj, $$($nesting, 'Array'), "to_ary")
    }, TMP_Array_try_convert_3.$$arity = 1);
    
    Opal.def(self, '$&', TMP_Array_$_4 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
      }; return nil; })();
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_delete(hash, item) !== undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_Array_$_4.$$arity = 1);
    
    Opal.def(self, '$|', TMP_Array_$_5 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
      }; return nil; })();
      
      var hash = $hash2([], {}), i, length, item;

      for (i = 0, length = self.length; i < length; i++) {
        Opal.hash_put(hash, self[i], true);
      }

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      return hash.$keys();
    ;
    }, TMP_Array_$_5.$$arity = 1);
    
    Opal.def(self, '$*', TMP_Array_$_6 = function(other) {
      var self = this;

      
      if ($truthy(other['$respond_to?']("to_str"))) {
        return self.$join(other.$to_str())};
      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Integer'), "to_int");
      if ($truthy(other < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "negative argument")};
      
      var result = [],
          converted = self.$to_a();

      for (var i = 0; i < other; i++) {
        result = result.concat(converted);
      }

      return toArraySubclass(result, self.$class());
    ;
    }, TMP_Array_$_6.$$arity = 1);
    
    Opal.def(self, '$+', TMP_Array_$_7 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
      }; return nil; })();
      return self.concat(other);;
    }, TMP_Array_$_7.$$arity = 1);
    
    Opal.def(self, '$-', TMP_Array_$_8 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
      }; return nil; })();
      if ($truthy(self.length === 0)) {
        return []};
      if ($truthy(other.length === 0)) {
        return self.slice()};
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_get(hash, item) === undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_Array_$_8.$$arity = 1);
    
    Opal.def(self, '$<<', TMP_Array_$lt$lt_9 = function(object) {
      var self = this;

      
      self.push(object);
      return self;
    }, TMP_Array_$lt$lt_9.$$arity = 1);
    
    Opal.def(self, '$<=>', TMP_Array_$lt$eq$gt_10 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
      } else if ($truthy(other['$respond_to?']("to_ary"))) {
        other = other.$to_ary().$to_a()
      } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      var count = Math.min(self.length, other.length);

      for (var i = 0; i < count; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return (self.length)['$<=>'](other.length);
    ;
    }, TMP_Array_$lt$eq$gt_10.$$arity = 1);
    
    Opal.def(self, '$==', TMP_Array_$eq$eq_11 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eqeq(array, other) {
        var i, length, a, b;

        if (array === other)
          return true;

        if (!other.$$is_array) {
          if ($$($nesting, 'Opal')['$respond_to?'](other, "to_ary")) {
            return (other)['$=='](array);
          } else {
            return false;
          }
        }

        if (array.constructor !== Array)
          array = (array).$to_a();
        if (other.constructor !== Array)
          other = (other).$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    
    }, TMP_Array_$eq$eq_11.$$arity = 1);
    
    function $array_slice_range(self, index) {
      var size = self.length,
          exclude, from, to, result;

      exclude = index.excl;
      from    = Opal.Opal.$coerce_to(index.begin, Opal.Integer, 'to_int');
      to      = Opal.Opal.$coerce_to(index.end, Opal.Integer, 'to_int');

      if (from < 0) {
        from += size;

        if (from < 0) {
          return nil;
        }
      }

      if (from > size) {
        return nil;
      }

      if (to < 0) {
        to += size;

        if (to < 0) {
          return [];
        }
      }

      if (!exclude) {
        to += 1;
      }

      result = self.slice(from, to);
      return toArraySubclass(result, self.$class());
    }

    function $array_slice_index_length(self, index, length) {
      var size = self.length,
          exclude, from, to, result;

      index = Opal.Opal.$coerce_to(index, Opal.Integer, 'to_int');

      if (index < 0) {
        index += size;

        if (index < 0) {
          return nil;
        }
      }

      if (length === undefined) {
        if (index >= size || index < 0) {
          return nil;
        }

        return self[index];
      }
      else {
        length = Opal.Opal.$coerce_to(length, Opal.Integer, 'to_int');

        if (length < 0 || index > size || index < 0) {
          return nil;
        }

        result = self.slice(index, index + length);
      }
      return toArraySubclass(result, self.$class());
    }
  ;
    
    Opal.def(self, '$[]', TMP_Array_$$_12 = function(index, length) {
      var self = this;

      
      ;
      
      if (index.$$is_range) {
        return $array_slice_range(self, index);
      }
      else {
        return $array_slice_index_length(self, index, length);
      }
    ;
    }, TMP_Array_$$_12.$$arity = -2);
    
    Opal.def(self, '$[]=', TMP_Array_$$$eq_13 = function(index, value, extra) {
      var self = this, data = nil, length = nil;

      
      ;
            var i, size = self.length;;
      if ($truthy($$($nesting, 'Range')['$==='](index))) {
        
        data = (function() {if ($truthy($$($nesting, 'Array')['$==='](value))) {
          return value.$to_a()
        } else if ($truthy(value['$respond_to?']("to_ary"))) {
          return value.$to_ary().$to_a()
        } else {
          return [value]
        }; return nil; })();
        
        var exclude = index.excl,
            from    = $$($nesting, 'Opal').$coerce_to(index.begin, $$($nesting, 'Integer'), "to_int"),
            to      = $$($nesting, 'Opal').$coerce_to(index.end, $$($nesting, 'Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise($$($nesting, 'RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
      } else {
        
        if ($truthy(extra === undefined)) {
          length = 1
        } else {
          
          length = value;
          value = extra;
          data = (function() {if ($truthy($$($nesting, 'Array')['$==='](value))) {
            return value.$to_a()
          } else if ($truthy(value['$respond_to?']("to_ary"))) {
            return value.$to_ary().$to_a()
          } else {
            return [value]
          }; return nil; })();
        };
        
        var old;

        index  = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");
        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), "to_int");

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise($$($nesting, 'IndexError'), "" + "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise($$($nesting, 'IndexError'), "" + "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      ;
      };
    }, TMP_Array_$$$eq_13.$$arity = -3);
    
    Opal.def(self, '$any?', TMP_Array_any$q_14 = function(pattern) {
      var $iter = TMP_Array_any$q_14.$$p, block = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Array_any$q_14.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if ($iter) TMP_Array_any$q_14.$$p = null;;
      ;
      if (self.length === 0) return false;
      return $send(self, Opal.find_super_dispatcher(self, 'any?', TMP_Array_any$q_14, false), $zuper, $iter);
    }, TMP_Array_any$q_14.$$arity = -1);
    
    Opal.def(self, '$assoc', TMP_Array_assoc_15 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    }, TMP_Array_assoc_15.$$arity = 1);
    
    Opal.def(self, '$at', TMP_Array_at_16 = function $$at(index) {
      var self = this;

      
      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    ;
    }, TMP_Array_at_16.$$arity = 1);
    
    Opal.def(self, '$bsearch_index', TMP_Array_bsearch_index_17 = function $$bsearch_index() {
      var $iter = TMP_Array_bsearch_index_17.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_bsearch_index_17.$$p = null;
      
      
      if ($iter) TMP_Array_bsearch_index_17.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("bsearch_index")
      };
      
      var min = 0,
          max = self.length,
          mid,
          val,
          ret,
          smaller = false,
          satisfied = nil;

      while (min < max) {
        mid = min + Math.floor((max - min) / 2);
        val = self[mid];
        ret = Opal.yield1(block, val);

        if (ret === true) {
          satisfied = mid;
          smaller = true;
        }
        else if (ret === false || ret === nil) {
          smaller = false;
        }
        else if (ret.$$is_number) {
          if (ret === 0) { return mid; }
          smaller = (ret < 0);
        }
        else {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((ret).$class()) + " (must be numeric, true, false or nil)")
        }

        if (smaller) { max = mid; } else { min = mid + 1; }
      }

      return satisfied;
    ;
    }, TMP_Array_bsearch_index_17.$$arity = 0);
    
    Opal.def(self, '$bsearch', TMP_Array_bsearch_18 = function $$bsearch() {
      var $iter = TMP_Array_bsearch_18.$$p, block = $iter || nil, self = this, index = nil;

      if ($iter) TMP_Array_bsearch_18.$$p = null;
      
      
      if ($iter) TMP_Array_bsearch_18.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("bsearch")
      };
      index = $send(self, 'bsearch_index', [], block.$to_proc());
      
      if (index != null && index.$$is_number) {
        return self[index];
      } else {
        return index;
      }
    ;
    }, TMP_Array_bsearch_18.$$arity = 0);
    
    Opal.def(self, '$cycle', TMP_Array_cycle_19 = function $$cycle(n) {
      var $iter = TMP_Array_cycle_19.$$p, block = $iter || nil, TMP_20, $a, self = this;

      if ($iter) TMP_Array_cycle_19.$$p = null;
      
      
      if ($iter) TMP_Array_cycle_19.$$p = null;;
      
      if (n == null) {
        n = nil;
      };
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["cycle", n], (TMP_20 = function(){var self = TMP_20.$$s || this;

        if ($truthy(n['$nil?']())) {
            return $$$($$($nesting, 'Float'), 'INFINITY')
          } else {
            
            n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
            } else {
              return 0
            };
          }}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20))
      };
      if ($truthy(($truthy($a = self['$empty?']()) ? $a : n['$=='](0)))) {
        return nil};
      
      var i, length, value;

      if (n === nil) {
        while (true) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }
        }
      }
      else {
        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }

          n--;
        }
      }
    ;
      return self;
    }, TMP_Array_cycle_19.$$arity = -1);
    
    Opal.def(self, '$clear', TMP_Array_clear_21 = function $$clear() {
      var self = this;

      
      self.splice(0, self.length);
      return self;
    }, TMP_Array_clear_21.$$arity = 0);
    
    Opal.def(self, '$count', TMP_Array_count_22 = function $$count(object) {
      var $iter = TMP_Array_count_22.$$p, block = $iter || nil, $a, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Array_count_22.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if ($iter) TMP_Array_count_22.$$p = null;;
      
      if (object == null) {
        object = nil;
      };
      if ($truthy(($truthy($a = object) ? $a : block))) {
        return $send(self, Opal.find_super_dispatcher(self, 'count', TMP_Array_count_22, false), $zuper, $iter)
      } else {
        return self.$size()
      };
    }, TMP_Array_count_22.$$arity = -1);
    
    Opal.def(self, '$initialize_copy', TMP_Array_initialize_copy_23 = function $$initialize_copy(other) {
      var self = this;

      return self.$replace(other)
    }, TMP_Array_initialize_copy_23.$$arity = 1);
    
    Opal.def(self, '$collect', TMP_Array_collect_24 = function $$collect() {
      var $iter = TMP_Array_collect_24.$$p, block = $iter || nil, TMP_25, self = this;

      if ($iter) TMP_Array_collect_24.$$p = null;
      
      
      if ($iter) TMP_Array_collect_24.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect"], (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25))
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        result.push(value);
      }

      return result;
    ;
    }, TMP_Array_collect_24.$$arity = 0);
    
    Opal.def(self, '$collect!', TMP_Array_collect$B_26 = function() {
      var $iter = TMP_Array_collect$B_26.$$p, block = $iter || nil, TMP_27, self = this;

      if ($iter) TMP_Array_collect$B_26.$$p = null;
      
      
      if ($iter) TMP_Array_collect$B_26.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect!"], (TMP_27 = function(){var self = TMP_27.$$s || this;

        return self.$size()}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        self[i] = value;
      }
    ;
      return self;
    }, TMP_Array_collect$B_26.$$arity = 0);
    
    function binomial_coefficient(n, k) {
      if (n === k || k === 0) {
        return 1;
      }

      if (k > 0 && n > k) {
        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
      }

      return 0;
    }
  ;
    
    Opal.def(self, '$combination', TMP_Array_combination_28 = function $$combination(n) {
      var TMP_29, $iter = TMP_Array_combination_28.$$p, $yield = $iter || nil, self = this, num = nil;

      if ($iter) TMP_Array_combination_28.$$p = null;
      
      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["combination", num], (TMP_29 = function(){var self = TMP_29.$$s || this;

        return binomial_coefficient(self.length, num)}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29))
      };
      
      var i, length, stack, chosen, lev, done, next;

      if (num === 0) {
        Opal.yield1($yield, [])
      } else if (num === 1) {
        for (i = 0, length = self.length; i < length; i++) {
          Opal.yield1($yield, [self[i]])
        }
      }
      else if (num === self.length) {
        Opal.yield1($yield, self.slice())
      }
      else if (num >= 0 && num < self.length) {
        stack = [];
        for (i = 0; i <= num + 1; i++) {
          stack.push(0);
        }

        chosen = [];
        lev = 0;
        done = false;
        stack[0] = -1;

        while (!done) {
          chosen[lev] = self[stack[lev+1]];
          while (lev < num - 1) {
            lev++;
            next = stack[lev+1] = stack[lev] + 1;
            chosen[lev] = self[next];
          }
          Opal.yield1($yield, chosen.slice())
          lev++;
          do {
            done = (lev === 0);
            stack[lev]++;
            lev--;
          } while ( stack[lev+1] + num === self.length + lev + 1 );
        }
      }
    ;
      return self;
    }, TMP_Array_combination_28.$$arity = 1);
    
    Opal.def(self, '$repeated_combination', TMP_Array_repeated_combination_30 = function $$repeated_combination(n) {
      var TMP_31, $iter = TMP_Array_repeated_combination_30.$$p, $yield = $iter || nil, self = this, num = nil;

      if ($iter) TMP_Array_repeated_combination_30.$$p = null;
      
      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["repeated_combination", num], (TMP_31 = function(){var self = TMP_31.$$s || this;

        return binomial_coefficient(self.length + num - 1, num);}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))
      };
      
      function iterate(max, from, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = from; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, i, buffer, self);
          buffer.pop();
        }
      }

      if (num >= 0) {
        iterate(num, 0, [], self);
      }
    ;
      return self;
    }, TMP_Array_repeated_combination_30.$$arity = 1);
    
    Opal.def(self, '$compact', TMP_Array_compact_32 = function $$compact() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, TMP_Array_compact_32.$$arity = 0);
    
    Opal.def(self, '$compact!', TMP_Array_compact$B_33 = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    }, TMP_Array_compact$B_33.$$arity = 0);
    
    Opal.def(self, '$concat', TMP_Array_concat_34 = function $$concat($a) {
      var $post_args, others, TMP_35, TMP_36, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      others = $post_args;;
      others = $send(others, 'map', [], (TMP_35 = function(other){var self = TMP_35.$$s || this;

      
        
        if (other == null) {
          other = nil;
        };
        other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
          return other.$to_a()
        } else {
          return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
        }; return nil; })();
        if ($truthy(other['$equal?'](self))) {
          other = other.$dup()};
        return other;}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35));
      $send(others, 'each', [], (TMP_36 = function(other){var self = TMP_36.$$s || this;

      
        
        if (other == null) {
          other = nil;
        };
        
        for (var i = 0, length = other.length; i < length; i++) {
          self.push(other[i]);
        }
      ;}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
      return self;
    }, TMP_Array_concat_34.$$arity = -1);
    
    Opal.def(self, '$delete', TMP_Array_delete_37 = function(object) {
      var $iter = TMP_Array_delete_37.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Array_delete_37.$$p = null;
      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      if (self.length === original) {
        if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
        }
        return nil;
      }
      return object;
    
    }, TMP_Array_delete_37.$$arity = 1);
    
    Opal.def(self, '$delete_at', TMP_Array_delete_at_38 = function $$delete_at(index) {
      var self = this;

      
      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    
    }, TMP_Array_delete_at_38.$$arity = 1);
    
    Opal.def(self, '$delete_if', TMP_Array_delete_if_39 = function $$delete_if() {
      var $iter = TMP_Array_delete_if_39.$$p, block = $iter || nil, TMP_40, self = this;

      if ($iter) TMP_Array_delete_if_39.$$p = null;
      
      
      if ($iter) TMP_Array_delete_if_39.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["delete_if"], (TMP_40 = function(){var self = TMP_40.$$s || this;

        return self.$size()}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40))
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    ;
      return self;
    }, TMP_Array_delete_if_39.$$arity = 0);
    
    Opal.def(self, '$dig', TMP_Array_dig_41 = function $$dig(idx, $a) {
      var $post_args, idxs, self = this, item = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      idxs = $post_args;;
      item = self['$[]'](idx);
      
      if (item === nil || idxs.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(idxs));
    }, TMP_Array_dig_41.$$arity = -2);
    
    Opal.def(self, '$drop', TMP_Array_drop_42 = function $$drop(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise($$($nesting, 'ArgumentError'))
      }

      return self.slice(number);
    
    }, TMP_Array_drop_42.$$arity = 1);
    
    Opal.def(self, '$dup', TMP_Array_dup_43 = function $$dup() {
      var $iter = TMP_Array_dup_43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Array_dup_43.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if (self.$$class === Opal.Array &&
          self.$$class.$allocate.$$pristine &&
          self.$copy_instance_variables.$$pristine &&
          self.$initialize_dup.$$pristine) {
        return self.slice(0);
      }
    ;
      return $send(self, Opal.find_super_dispatcher(self, 'dup', TMP_Array_dup_43, false), $zuper, $iter);
    }, TMP_Array_dup_43.$$arity = 0);
    
    Opal.def(self, '$each', TMP_Array_each_44 = function $$each() {
      var $iter = TMP_Array_each_44.$$p, block = $iter || nil, TMP_45, self = this;

      if ($iter) TMP_Array_each_44.$$p = null;
      
      
      if ($iter) TMP_Array_each_44.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each"], (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$size()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
      }
    ;
      return self;
    }, TMP_Array_each_44.$$arity = 0);
    
    Opal.def(self, '$each_index', TMP_Array_each_index_46 = function $$each_index() {
      var $iter = TMP_Array_each_index_46.$$p, block = $iter || nil, TMP_47, self = this;

      if ($iter) TMP_Array_each_index_46.$$p = null;
      
      
      if ($iter) TMP_Array_each_index_46.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_index"], (TMP_47 = function(){var self = TMP_47.$$s || this;

        return self.$size()}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, i);
      }
    ;
      return self;
    }, TMP_Array_each_index_46.$$arity = 0);
    
    Opal.def(self, '$empty?', TMP_Array_empty$q_48 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_Array_empty$q_48.$$arity = 0);
    
    Opal.def(self, '$eql?', TMP_Array_eql$q_49 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eql(array, other) {
        var i, length, a, b;

        if (!other.$$is_array) {
          return false;
        }

        other = other.$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eql(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eql(self, other);
    
    }, TMP_Array_eql$q_49.$$arity = 1);
    
    Opal.def(self, '$fetch', TMP_Array_fetch_50 = function $$fetch(index, defaults) {
      var $iter = TMP_Array_fetch_50.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_fetch_50.$$p = null;
      
      
      if ($iter) TMP_Array_fetch_50.$$p = null;;
      ;
      
      var original = index;

      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil && defaults != null) {
        self.$warn("warning: block supersedes default value argument")
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise($$($nesting, 'IndexError'), "" + "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise($$($nesting, 'IndexError'), "" + "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    }, TMP_Array_fetch_50.$$arity = -2);
    
    Opal.def(self, '$fill', TMP_Array_fill_51 = function $$fill($a) {
      var $iter = TMP_Array_fill_51.$$p, block = $iter || nil, $post_args, args, $b, $c, self = this, one = nil, two = nil, obj = nil, left = nil, right = nil;

      if ($iter) TMP_Array_fill_51.$$p = null;
      
      
      if ($iter) TMP_Array_fill_51.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
            var i, length, value;;
      if ($truthy(block)) {
        
        if ($truthy(args.length > 2)) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $c = args, $b = Opal.to_ary($c), (one = ($b[0] == null ? nil : $b[0])), (two = ($b[1] == null ? nil : $b[1])), $c;
      } else {
        
        if ($truthy(args.length == 0)) {
          self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ($truthy(args.length > 3)) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $c = args, $b = Opal.to_ary($c), (obj = ($b[0] == null ? nil : $b[0])), (one = ($b[1] == null ? nil : $b[1])), (two = ($b[2] == null ? nil : $b[2])), $c;
      };
      if ($truthy($$($nesting, 'Range')['$==='](one))) {
        
        if ($truthy(two)) {
          self.$raise($$($nesting, 'TypeError'), "length invalid with range")};
        left = $$($nesting, 'Opal').$coerce_to(one.$begin(), $$($nesting, 'Integer'), "to_int");
        if ($truthy(left < 0)) {
          left += this.length};
        if ($truthy(left < 0)) {
          self.$raise($$($nesting, 'RangeError'), "" + (one.$inspect()) + " out of range")};
        right = $$($nesting, 'Opal').$coerce_to(one.$end(), $$($nesting, 'Integer'), "to_int");
        if ($truthy(right < 0)) {
          right += this.length};
        if ($truthy(one['$exclude_end?']())) {
        } else {
          right += 1
        };
        if ($truthy(right <= left)) {
          return self};
      } else if ($truthy(one)) {
        
        left = $$($nesting, 'Opal').$coerce_to(one, $$($nesting, 'Integer'), "to_int");
        if ($truthy(left < 0)) {
          left += this.length};
        if ($truthy(left < 0)) {
          left = 0};
        if ($truthy(two)) {
          
          right = $$($nesting, 'Opal').$coerce_to(two, $$($nesting, 'Integer'), "to_int");
          if ($truthy(right == 0)) {
            return self};
          right += left;
        } else {
          right = this.length
        };
      } else {
        
        left = 0;
        right = this.length;
      };
      if ($truthy(left > this.length)) {
        
        for (i = this.length; i < right; i++) {
          self[i] = nil;
        }
      };
      if ($truthy(right > this.length)) {
        this.length = right};
      if ($truthy(block)) {
        
        for (length = this.length; left < right; left++) {
          value = block(left);
          self[left] = value;
        }
      
      } else {
        
        for (length = this.length; left < right; left++) {
          self[left] = obj;
        }
      
      };
      return self;
    }, TMP_Array_fill_51.$$arity = -1);
    
    Opal.def(self, '$first', TMP_Array_first_52 = function $$first(count) {
      var self = this;

      
      ;
      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    ;
    }, TMP_Array_first_52.$$arity = -1);
    
    Opal.def(self, '$flatten', TMP_Array_flatten_53 = function $$flatten(level) {
      var self = this;

      
      ;
      
      function _flatten(array, level) {
        var result = [],
            i, length,
            item, ary;

        array = (array).$to_a();

        for (i = 0, length = array.length; i < length; i++) {
          item = array[i];

          if (!$$($nesting, 'Opal')['$respond_to?'](item, "to_ary", true)) {
            result.push(item);
            continue;
          }

          ary = (item).$to_ary();

          if (ary === nil) {
            result.push(item);
            continue;
          }

          if (!ary.$$is_array) {
            self.$raise($$($nesting, 'TypeError'));
          }

          if (ary === self) {
            self.$raise($$($nesting, 'ArgumentError'));
          }

          switch (level) {
          case undefined:
            result = result.concat(_flatten(ary));
            break;
          case 0:
            result.push(ary);
            break;
          default:
            result.push.apply(result, _flatten(ary, level - 1));
          }
        }
        return result;
      }

      if (level !== undefined) {
        level = $$($nesting, 'Opal').$coerce_to(level, $$($nesting, 'Integer'), "to_int");
      }

      return toArraySubclass(_flatten(self, level), self.$class());
    ;
    }, TMP_Array_flatten_53.$$arity = -1);
    
    Opal.def(self, '$flatten!', TMP_Array_flatten$B_54 = function(level) {
      var self = this;

      
      ;
      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    }, TMP_Array_flatten$B_54.$$arity = -1);
    
    Opal.def(self, '$hash', TMP_Array_hash_55 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          result = ['A'],
          hash_id = self.$object_id(),
          item, i, key;

      try {
        if (top) {
          Opal.hash_ids = Object.create(null);
        }

        // return early for recursive structures
        if (Opal.hash_ids[hash_id]) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          item = Opal.hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (i = 0; i < self.length; i++) {
          item = self[i];
          result.push(item.$hash());
        }

        return result.join(',');
      } finally {
        if (top) {
          Opal.hash_ids = undefined;
        }
      }
    
    }, TMP_Array_hash_55.$$arity = 0);
    
    Opal.def(self, '$include?', TMP_Array_include$q_56 = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    }, TMP_Array_include$q_56.$$arity = 1);
    
    Opal.def(self, '$index', TMP_Array_index_57 = function $$index(object) {
      var $iter = TMP_Array_index_57.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_index_57.$$p = null;
      
      
      if ($iter) TMP_Array_index_57.$$p = null;;
      ;
      
      var i, length, value;

      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }

      if (object != null) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = 0, length = self.length; i < length; i++) {
          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    ;
    }, TMP_Array_index_57.$$arity = -1);
    
    Opal.def(self, '$insert', TMP_Array_insert_58 = function $$insert(index, $a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      objects = $post_args;;
      
      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise($$($nesting, 'IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    }, TMP_Array_insert_58.$$arity = -2);
    
    Opal.def(self, '$inspect', TMP_Array_inspect_59 = function $$inspect() {
      var self = this;

      
      var result = [],
          id     = self.$__id__();

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self['$[]'](i);

        if ((item).$__id__() === id) {
          result.push('[...]');
        }
        else {
          result.push((item).$inspect());
        }
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_Array_inspect_59.$$arity = 0);
    
    Opal.def(self, '$join', TMP_Array_join_60 = function $$join(sep) {
      var self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      
      
      if (sep == null) {
        sep = nil;
      };
      if ($truthy(self.length === 0)) {
        return ""};
      if ($truthy(sep === nil)) {
        sep = $gvars[","]};
      
      var result = [];
      var i, length, item, tmp;

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];

        if ($$($nesting, 'Opal')['$respond_to?'](item, "to_str")) {
          tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ($$($nesting, 'Opal')['$respond_to?'](item, "to_ary")) {
          tmp = (item).$to_ary();

          if (tmp === self) {
            self.$raise($$($nesting, 'ArgumentError'));
          }

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ($$($nesting, 'Opal')['$respond_to?'](item, "to_s")) {
          tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise($$($nesting, 'NoMethodError').$new("" + (Opal.inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join($$($nesting, 'Opal')['$coerce_to!'](sep, $$($nesting, 'String'), "to_str").$to_s());
      }
    ;
    }, TMP_Array_join_60.$$arity = -1);
    
    Opal.def(self, '$keep_if', TMP_Array_keep_if_61 = function $$keep_if() {
      var $iter = TMP_Array_keep_if_61.$$p, block = $iter || nil, TMP_62, self = this;

      if ($iter) TMP_Array_keep_if_61.$$p = null;
      
      
      if ($iter) TMP_Array_keep_if_61.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["keep_if"], (TMP_62 = function(){var self = TMP_62.$$s || this;

        return self.$size()}, TMP_62.$$s = self, TMP_62.$$arity = 0, TMP_62))
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    ;
      return self;
    }, TMP_Array_keep_if_61.$$arity = 0);
    
    Opal.def(self, '$last', TMP_Array_last_63 = function $$last(count) {
      var self = this;

      
      ;
      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    ;
    }, TMP_Array_last_63.$$arity = -1);
    
    Opal.def(self, '$length', TMP_Array_length_64 = function $$length() {
      var self = this;

      return self.length;
    }, TMP_Array_length_64.$$arity = 0);
    Opal.alias(self, "map", "collect");
    Opal.alias(self, "map!", "collect!");
    
    Opal.def(self, '$max', TMP_Array_max_65 = function $$max(n) {
      var $iter = TMP_Array_max_65.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_max_65.$$p = null;
      
      
      if ($iter) TMP_Array_max_65.$$p = null;;
      ;
      return $send(self.$each(), 'max', [n], block.$to_proc());
    }, TMP_Array_max_65.$$arity = -1);
    
    Opal.def(self, '$min', TMP_Array_min_66 = function $$min() {
      var $iter = TMP_Array_min_66.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_min_66.$$p = null;
      
      
      if ($iter) TMP_Array_min_66.$$p = null;;
      return $send(self.$each(), 'min', [], block.$to_proc());
    }, TMP_Array_min_66.$$arity = 0);
    
    // Returns the product of from, from-1, ..., from - how_many + 1.
    function descending_factorial(from, how_many) {
      var count = how_many >= 0 ? 1 : 0;
      while (how_many) {
        count *= from;
        from--;
        how_many--;
      }
      return count;
    }
  ;
    
    Opal.def(self, '$permutation', TMP_Array_permutation_67 = function $$permutation(num) {
      var $iter = TMP_Array_permutation_67.$$p, block = $iter || nil, TMP_68, self = this, perm = nil, used = nil;

      if ($iter) TMP_Array_permutation_67.$$p = null;
      
      
      if ($iter) TMP_Array_permutation_67.$$p = null;;
      ;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["permutation", num], (TMP_68 = function(){var self = TMP_68.$$s || this;

        return descending_factorial(self.length, num === undefined ? self.length : num);}, TMP_68.$$s = self, TMP_68.$$arity = 0, TMP_68))
      };
      
      var permute, offensive, output;

      if (num === undefined) {
        num = self.length;
      }
      else {
        num = $$($nesting, 'Opal').$coerce_to(num, $$($nesting, 'Integer'), "to_int")
      }

      if (num < 0 || self.length < num) {
        // no permutations, yield nothing
      }
      else if (num === 0) {
        // exactly one permutation: the zero-length array
        Opal.yield1(block, [])
      }
      else if (num === 1) {
        // this is a special, easy case
        for (var i = 0; i < self.length; i++) {
          Opal.yield1(block, [self[i]])
        }
      }
      else {
        // this is the general case
        (perm = $$($nesting, 'Array').$new(num));
        (used = $$($nesting, 'Array').$new(self.length, false));

        permute = function(num, perm, index, used, blk) {
          self = this;
          for(var i = 0; i < self.length; i++){
            if(used['$[]'](i)['$!']()) {
              perm[index] = i;
              if(index < num - 1) {
                used[i] = true;
                permute.call(self, num, perm, index + 1, used, blk);
                used[i] = false;
              }
              else {
                output = [];
                for (var j = 0; j < perm.length; j++) {
                  output.push(self[perm[j]]);
                }
                Opal.yield1(blk, output);
              }
            }
          }
        }

        if ((block !== nil)) {
          // offensive (both definitions) copy.
          offensive = self.slice();
          permute.call(offensive, num, perm, 0, used, block);
        }
        else {
          permute.call(self, num, perm, 0, used, block);
        }
      }
    ;
      return self;
    }, TMP_Array_permutation_67.$$arity = -1);
    
    Opal.def(self, '$repeated_permutation', TMP_Array_repeated_permutation_69 = function $$repeated_permutation(n) {
      var TMP_70, $iter = TMP_Array_repeated_permutation_69.$$p, $yield = $iter || nil, self = this, num = nil;

      if ($iter) TMP_Array_repeated_permutation_69.$$p = null;
      
      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["repeated_permutation", num], (TMP_70 = function(){var self = TMP_70.$$s || this;

        if ($truthy($rb_ge(num, 0))) {
            return self.$size()['$**'](num)
          } else {
            return 0
          }}, TMP_70.$$s = self, TMP_70.$$arity = 0, TMP_70))
      };
      
      function iterate(max, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = 0; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, buffer, self);
          buffer.pop();
        }
      }

      iterate(num, [], self.slice());
    ;
      return self;
    }, TMP_Array_repeated_permutation_69.$$arity = 1);
    
    Opal.def(self, '$pop', TMP_Array_pop_71 = function $$pop(count) {
      var self = this;

      
      ;
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil};
        return self.pop();};
      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");
      if ($truthy(count < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size")};
      if ($truthy(self.length === 0)) {
        return []};
      if ($truthy(count > self.length)) {
        return self.splice(0, self.length);
      } else {
        return self.splice(self.length - count, self.length);
      };
    }, TMP_Array_pop_71.$$arity = -1);
    
    Opal.def(self, '$product', TMP_Array_product_72 = function $$product($a) {
      var $iter = TMP_Array_product_72.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_Array_product_72.$$p = null;
      
      
      if ($iter) TMP_Array_product_72.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var result = (block !== nil) ? null : [],
          n = args.length + 1,
          counters = new Array(n),
          lengths  = new Array(n),
          arrays   = new Array(n),
          i, m, subarray, len, resultlen = 1;

      arrays[0] = self;
      for (i = 1; i < n; i++) {
        arrays[i] = $$($nesting, 'Opal').$coerce_to(args[i - 1], $$($nesting, 'Array'), "to_ary");
      }

      for (i = 0; i < n; i++) {
        len = arrays[i].length;
        if (len === 0) {
          return result || self;
        }
        resultlen *= len;
        if (resultlen > 2147483647) {
          self.$raise($$($nesting, 'RangeError'), "too big to product")
        }
        lengths[i] = len;
        counters[i] = 0;
      }

      outer_loop: for (;;) {
        subarray = [];
        for (i = 0; i < n; i++) {
          subarray.push(arrays[i][counters[i]]);
        }
        if (result) {
          result.push(subarray);
        } else {
          Opal.yield1(block, subarray)
        }
        m = n - 1;
        counters[m]++;
        while (counters[m] === lengths[m]) {
          counters[m] = 0;
          if (--m < 0) break outer_loop;
          counters[m]++;
        }
      }

      return result || self;
    ;
    }, TMP_Array_product_72.$$arity = -1);
    
    Opal.def(self, '$push', TMP_Array_push_73 = function $$push($a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      objects = $post_args;;
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    ;
      return self;
    }, TMP_Array_push_73.$$arity = -1);
    Opal.alias(self, "append", "push");
    
    Opal.def(self, '$rassoc', TMP_Array_rassoc_74 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    }, TMP_Array_rassoc_74.$$arity = 1);
    
    Opal.def(self, '$reject', TMP_Array_reject_75 = function $$reject() {
      var $iter = TMP_Array_reject_75.$$p, block = $iter || nil, TMP_76, self = this;

      if ($iter) TMP_Array_reject_75.$$p = null;
      
      
      if ($iter) TMP_Array_reject_75.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reject"], (TMP_76 = function(){var self = TMP_76.$$s || this;

        return self.$size()}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76))
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    ;
    }, TMP_Array_reject_75.$$arity = 0);
    
    Opal.def(self, '$reject!', TMP_Array_reject$B_77 = function() {
      var $iter = TMP_Array_reject$B_77.$$p, block = $iter || nil, TMP_78, self = this, original = nil;

      if ($iter) TMP_Array_reject$B_77.$$p = null;
      
      
      if ($iter) TMP_Array_reject$B_77.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reject!"], (TMP_78 = function(){var self = TMP_78.$$s || this;

        return self.$size()}, TMP_78.$$s = self, TMP_78.$$arity = 0, TMP_78))
      };
      original = self.$length();
      $send(self, 'delete_if', [], block.$to_proc());
      if (self.$length()['$=='](original)) {
        return nil
      } else {
        return self
      };
    }, TMP_Array_reject$B_77.$$arity = 0);
    
    Opal.def(self, '$replace', TMP_Array_replace_79 = function $$replace(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
      }; return nil; })();
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    ;
      return self;
    }, TMP_Array_replace_79.$$arity = 1);
    
    Opal.def(self, '$reverse', TMP_Array_reverse_80 = function $$reverse() {
      var self = this;

      return self.slice(0).reverse();
    }, TMP_Array_reverse_80.$$arity = 0);
    
    Opal.def(self, '$reverse!', TMP_Array_reverse$B_81 = function() {
      var self = this;

      return self.reverse();
    }, TMP_Array_reverse$B_81.$$arity = 0);
    
    Opal.def(self, '$reverse_each', TMP_Array_reverse_each_82 = function $$reverse_each() {
      var $iter = TMP_Array_reverse_each_82.$$p, block = $iter || nil, TMP_83, self = this;

      if ($iter) TMP_Array_reverse_each_82.$$p = null;
      
      
      if ($iter) TMP_Array_reverse_each_82.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reverse_each"], (TMP_83 = function(){var self = TMP_83.$$s || this;

        return self.$size()}, TMP_83.$$s = self, TMP_83.$$arity = 0, TMP_83))
      };
      $send(self.$reverse(), 'each', [], block.$to_proc());
      return self;
    }, TMP_Array_reverse_each_82.$$arity = 0);
    
    Opal.def(self, '$rindex', TMP_Array_rindex_84 = function $$rindex(object) {
      var $iter = TMP_Array_rindex_84.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_rindex_84.$$p = null;
      
      
      if ($iter) TMP_Array_rindex_84.$$p = null;;
      ;
      
      var i, value;

      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }

      if (object != null) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }

          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    ;
    }, TMP_Array_rindex_84.$$arity = -1);
    
    Opal.def(self, '$rotate', TMP_Array_rotate_85 = function $$rotate(n) {
      var self = this;

      
      
      if (n == null) {
        n = 1;
      };
      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");
      
      var ary, idx, firstPart, lastPart;

      if (self.length === 1) {
        return self.slice();
      }
      if (self.length === 0) {
        return [];
      }

      ary = self.slice();
      idx = n % ary.length;

      firstPart = ary.slice(idx);
      lastPart = ary.slice(0, idx);
      return firstPart.concat(lastPart);
    ;
    }, TMP_Array_rotate_85.$$arity = -1);
    
    Opal.def(self, '$rotate!', TMP_Array_rotate$B_86 = function(cnt) {
      var self = this, ary = nil;

      
      
      if (cnt == null) {
        cnt = 1;
      };
      
      if (self.length === 0 || self.length === 1) {
        return self;
      }
    ;
      cnt = $$($nesting, 'Opal').$coerce_to(cnt, $$($nesting, 'Integer'), "to_int");
      ary = self.$rotate(cnt);
      return self.$replace(ary);
    }, TMP_Array_rotate$B_86.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      function $SampleRandom(){};
      var self = $SampleRandom = $klass($base, $super, 'SampleRandom', $SampleRandom);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_SampleRandom_initialize_87, TMP_SampleRandom_rand_88;

      def.rng = nil;
      
      
      Opal.def(self, '$initialize', TMP_SampleRandom_initialize_87 = function $$initialize(rng) {
        var self = this;

        return (self.rng = rng)
      }, TMP_SampleRandom_initialize_87.$$arity = 1);
      return (Opal.def(self, '$rand', TMP_SampleRandom_rand_88 = function $$rand(size) {
        var self = this, random = nil;

        
        random = $$($nesting, 'Opal').$coerce_to(self.rng.$rand(size), $$($nesting, 'Integer'), "to_int");
        if ($truthy(random < 0)) {
          self.$raise($$($nesting, 'RangeError'), "random value must be >= 0")};
        if ($truthy(random < size)) {
        } else {
          self.$raise($$($nesting, 'RangeError'), "random value must be less than Array size")
        };
        return random;
      }, TMP_SampleRandom_rand_88.$$arity = 1), nil) && 'rand';
    })($nesting[0], null, $nesting);
    
    Opal.def(self, '$sample', TMP_Array_sample_89 = function $$sample(count, options) {
      var $a, self = this, o = nil, rng = nil;

      
      ;
      ;
      if ($truthy(count === undefined)) {
        return self.$at($$($nesting, 'Kernel').$rand(self.length))};
      if ($truthy(options === undefined)) {
        if ($truthy((o = $$($nesting, 'Opal')['$coerce_to?'](count, $$($nesting, 'Hash'), "to_hash")))) {
          
          options = o;
          count = nil;
        } else {
          
          options = nil;
          count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");
        }
      } else {
        
        count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");
        options = $$($nesting, 'Opal').$coerce_to(options, $$($nesting, 'Hash'), "to_hash");
      };
      if ($truthy(($truthy($a = count) ? count < 0 : $a))) {
        self.$raise($$($nesting, 'ArgumentError'), "count must be greater than 0")};
      if ($truthy(options)) {
        rng = options['$[]']("random")};
      rng = (function() {if ($truthy(($truthy($a = rng) ? rng['$respond_to?']("rand") : $a))) {
        return $$($nesting, 'SampleRandom').$new(rng)
      } else {
        return $$($nesting, 'Kernel')
      }; return nil; })();
      if ($truthy(count)) {
      } else {
        return self[rng.$rand(self.length)]
      };
      

      var abandon, spin, result, i, j, k, targetIndex, oldValue;

      if (count > self.length) {
        count = self.length;
      }

      switch (count) {
        case 0:
          return [];
          break;
        case 1:
          return [self[rng.$rand(self.length)]];
          break;
        case 2:
          i = rng.$rand(self.length);
          j = rng.$rand(self.length);
          if (i === j) {
            j = i === 0 ? i + 1 : i - 1;
          }
          return [self[i], self[j]];
          break;
        default:
          if (self.length / count > 3) {
            abandon = false;
            spin = 0;

            result = $$($nesting, 'Array').$new(count);
            i = 1;

            result[0] = rng.$rand(self.length);
            while (i < count) {
              k = rng.$rand(self.length);
              j = 0;

              while (j < i) {
                while (k === result[j]) {
                  spin++;
                  if (spin > 100) {
                    abandon = true;
                    break;
                  }
                  k = rng.$rand(self.length);
                }
                if (abandon) { break; }

                j++;
              }

              if (abandon) { break; }

              result[i] = k;

              i++;
            }

            if (!abandon) {
              i = 0;
              while (i < count) {
                result[i] = self[result[i]];
                i++;
              }

              return result;
            }
          }

          result = self.slice();

          for (var c = 0; c < count; c++) {
            targetIndex = rng.$rand(self.length);
            oldValue = result[c];
            result[c] = result[targetIndex];
            result[targetIndex] = oldValue;
          }

          return count === self.length ? result : (result)['$[]'](0, count);
      }
    ;
    }, TMP_Array_sample_89.$$arity = -1);
    
    Opal.def(self, '$select', TMP_Array_select_90 = function $$select() {
      var $iter = TMP_Array_select_90.$$p, block = $iter || nil, TMP_91, self = this;

      if ($iter) TMP_Array_select_90.$$p = null;
      
      
      if ($iter) TMP_Array_select_90.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["select"], (TMP_91 = function(){var self = TMP_91.$$s || this;

        return self.$size()}, TMP_91.$$s = self, TMP_91.$$arity = 0, TMP_91))
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = Opal.yield1(block, item);

        if (Opal.truthy(value)) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_Array_select_90.$$arity = 0);
    
    Opal.def(self, '$select!', TMP_Array_select$B_92 = function() {
      var $iter = TMP_Array_select$B_92.$$p, block = $iter || nil, TMP_93, self = this;

      if ($iter) TMP_Array_select$B_92.$$p = null;
      
      
      if ($iter) TMP_Array_select$B_92.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["select!"], (TMP_93 = function(){var self = TMP_93.$$s || this;

        return self.$size()}, TMP_93.$$s = self, TMP_93.$$arity = 0, TMP_93))
      };
      
      var original = self.length;
      $send(self, 'keep_if', [], block.$to_proc());
      return self.length === original ? nil : self;
    ;
    }, TMP_Array_select$B_92.$$arity = 0);
    
    Opal.def(self, '$shift', TMP_Array_shift_94 = function $$shift(count) {
      var self = this;

      
      ;
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil};
        return self.shift();};
      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");
      if ($truthy(count < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size")};
      if ($truthy(self.length === 0)) {
        return []};
      return self.splice(0, count);;
    }, TMP_Array_shift_94.$$arity = -1);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$shuffle', TMP_Array_shuffle_95 = function $$shuffle(rng) {
      var self = this;

      
      ;
      return self.$dup().$to_a()['$shuffle!'](rng);
    }, TMP_Array_shuffle_95.$$arity = -1);
    
    Opal.def(self, '$shuffle!', TMP_Array_shuffle$B_96 = function(rng) {
      var self = this;

      
      ;
      
      var randgen, i = self.length, j, tmp;

      if (rng !== undefined) {
        rng = $$($nesting, 'Opal')['$coerce_to?'](rng, $$($nesting, 'Hash'), "to_hash");

        if (rng !== nil) {
          rng = rng['$[]']("random");

          if (rng !== nil && rng['$respond_to?']("rand")) {
            randgen = rng;
          }
        }
      }

      while (i) {
        if (randgen) {
          j = randgen.$rand(i).$to_int();

          if (j < 0) {
            self.$raise($$($nesting, 'RangeError'), "" + "random number too small " + (j))
          }

          if (j >= i) {
            self.$raise($$($nesting, 'RangeError'), "" + "random number too big " + (j))
          }
        }
        else {
          j = self.$rand(i);
        }

        tmp = self[--i];
        self[i] = self[j];
        self[j] = tmp;
      }

      return self;
    ;
    }, TMP_Array_shuffle$B_96.$$arity = -1);
    Opal.alias(self, "slice", "[]");
    
    Opal.def(self, '$slice!', TMP_Array_slice$B_97 = function(index, length) {
      var self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;

      
      ;
      result = nil;
      if ($truthy(length === undefined)) {
        if ($truthy($$($nesting, 'Range')['$==='](index))) {
          
          range = index;
          result = self['$[]'](range);
          range_start = $$($nesting, 'Opal').$coerce_to(range.$begin(), $$($nesting, 'Integer'), "to_int");
          range_end = $$($nesting, 'Opal').$coerce_to(range.$end(), $$($nesting, 'Integer'), "to_int");
          
          if (range_start < 0) {
            range_start += self.length;
          }

          if (range_end < 0) {
            range_end += self.length;
          } else if (range_end >= self.length) {
            range_end = self.length - 1;
            if (range.excl) {
              range_end += 1;
            }
          }

          var range_length = range_end - range_start;
          if (range.excl) {
            range_end -= 1;
          } else {
            range_length += 1;
          }

          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {
            self.splice(range_start, range_length);
          }
        ;
        } else {
          
          start = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");
          
          if (start < 0) {
            start += self.length;
          }

          if (start < 0 || start >= self.length) {
            return nil;
          }

          result = self[start];

          if (start === 0) {
            self.shift();
          } else {
            self.splice(start, 1);
          }
        ;
        }
      } else {
        
        start = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");
        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), "to_int");
        
        if (length < 0) {
          return nil;
        }

        var end = start + length;

        result = self['$[]'](start, length);

        if (start < 0) {
          start += self.length;
        }

        if (start + length > self.length) {
          length = self.length - start;
        }

        if (start < self.length && start >= 0) {
          self.splice(start, length);
        }
      ;
      };
      return result;
    }, TMP_Array_slice$B_97.$$arity = -2);
    
    Opal.def(self, '$sort', TMP_Array_sort_98 = function $$sort() {
      var $iter = TMP_Array_sort_98.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_sort_98.$$p = null;
      
      
      if ($iter) TMP_Array_sort_98.$$p = null;;
      if ($truthy(self.length > 1)) {
      } else {
        return self
      };
      
      if (block === nil) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      return self.slice().sort(function(x, y) {
        var ret = block(x, y);

        if (ret === nil) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
        }

        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);
      });
    ;
    }, TMP_Array_sort_98.$$arity = 0);
    
    Opal.def(self, '$sort!', TMP_Array_sort$B_99 = function() {
      var $iter = TMP_Array_sort$B_99.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_sort$B_99.$$p = null;
      
      
      if ($iter) TMP_Array_sort$B_99.$$p = null;;
      
      var result;

      if ((block !== nil)) {
        result = $send((self.slice()), 'sort', [], block.$to_proc());
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    }, TMP_Array_sort$B_99.$$arity = 0);
    
    Opal.def(self, '$sort_by!', TMP_Array_sort_by$B_100 = function() {
      var $iter = TMP_Array_sort_by$B_100.$$p, block = $iter || nil, TMP_101, self = this;

      if ($iter) TMP_Array_sort_by$B_100.$$p = null;
      
      
      if ($iter) TMP_Array_sort_by$B_100.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["sort_by!"], (TMP_101 = function(){var self = TMP_101.$$s || this;

        return self.$size()}, TMP_101.$$s = self, TMP_101.$$arity = 0, TMP_101))
      };
      return self.$replace($send(self, 'sort_by', [], block.$to_proc()));
    }, TMP_Array_sort_by$B_100.$$arity = 0);
    
    Opal.def(self, '$take', TMP_Array_take_102 = function $$take(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'));
      }

      return self.slice(0, count);
    
    }, TMP_Array_take_102.$$arity = 1);
    
    Opal.def(self, '$take_while', TMP_Array_take_while_103 = function $$take_while() {
      var $iter = TMP_Array_take_while_103.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_take_while_103.$$p = null;
      
      
      if ($iter) TMP_Array_take_while_103.$$p = null;;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = block(item);

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    ;
    }, TMP_Array_take_while_103.$$arity = 0);
    
    Opal.def(self, '$to_a', TMP_Array_to_a_104 = function $$to_a() {
      var self = this;

      return self
    }, TMP_Array_to_a_104.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    
    Opal.def(self, '$to_h', TMP_Array_to_h_105 = function $$to_h() {
      var self = this;

      
      var i, len = self.length, ary, key, val, hash = $hash2([], {});

      for (i = 0; i < len; i++) {
        ary = $$($nesting, 'Opal')['$coerce_to?'](self[i], $$($nesting, 'Array'), "to_ary");
        if (!ary.$$is_array) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong element type " + ((ary).$class()) + " at " + (i) + " (expected array)")
        }
        if (ary.length !== 2) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong array length at " + (i) + " (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];
        Opal.hash_put(hash, key, val);
      }

      return hash;
    
    }, TMP_Array_to_h_105.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$transpose', TMP_Array_transpose_106 = function $$transpose() {
      var TMP_107, self = this, result = nil, max = nil;

      
      if ($truthy(self['$empty?']())) {
        return []};
      result = [];
      max = nil;
      $send(self, 'each', [], (TMP_107 = function(row){var self = TMP_107.$$s || this, $a, TMP_108;

      
        
        if (row == null) {
          row = nil;
        };
        row = (function() {if ($truthy($$($nesting, 'Array')['$==='](row))) {
          return row.$to_a()
        } else {
          return $$($nesting, 'Opal').$coerce_to(row, $$($nesting, 'Array'), "to_ary").$to_a()
        }; return nil; })();
        max = ($truthy($a = max) ? $a : row.length);
        if ($truthy((row.length)['$!='](max))) {
          self.$raise($$($nesting, 'IndexError'), "" + "element size differs (" + (row.length) + " should be " + (max) + ")")};
        return $send((row.length), 'times', [], (TMP_108 = function(i){var self = TMP_108.$$s || this, $b, entry = nil, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          entry = ($truthy($b = result['$[]'](i)) ? $b : (($writer = [i, []]), $send(result, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          return entry['$<<'](row.$at(i));}, TMP_108.$$s = self, TMP_108.$$arity = 1, TMP_108));}, TMP_107.$$s = self, TMP_107.$$arity = 1, TMP_107));
      return result;
    }, TMP_Array_transpose_106.$$arity = 0);
    
    Opal.def(self, '$uniq', TMP_Array_uniq_109 = function $$uniq() {
      var $iter = TMP_Array_uniq_109.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_uniq_109.$$p = null;
      
      
      if ($iter) TMP_Array_uniq_109.$$p = null;;
      
      var hash = $hash2([], {}), i, length, item, key;

      if (block === nil) {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          if (Opal.hash_get(hash, item) === undefined) {
            Opal.hash_put(hash, item, item);
          }
        }
      }
      else {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          key = Opal.yield1(block, item);
          if (Opal.hash_get(hash, key) === undefined) {
            Opal.hash_put(hash, key, item);
          }
        }
      }

      return toArraySubclass((hash).$values(), self.$class());
    ;
    }, TMP_Array_uniq_109.$$arity = 0);
    
    Opal.def(self, '$uniq!', TMP_Array_uniq$B_110 = function() {
      var $iter = TMP_Array_uniq$B_110.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_uniq$B_110.$$p = null;
      
      
      if ($iter) TMP_Array_uniq$B_110.$$p = null;;
      
      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;

      for (i = 0, length = original_length; i < length; i++) {
        item = self[i];
        key = (block === nil ? item : Opal.yield1(block, item));

        if (Opal.hash_get(hash, key) === undefined) {
          Opal.hash_put(hash, key, item);
          continue;
        }

        self.splice(i, 1);
        length--;
        i--;
      }

      return self.length === original_length ? nil : self;
    ;
    }, TMP_Array_uniq$B_110.$$arity = 0);
    
    Opal.def(self, '$unshift', TMP_Array_unshift_111 = function $$unshift($a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      objects = $post_args;;
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    ;
      return self;
    }, TMP_Array_unshift_111.$$arity = -1);
    Opal.alias(self, "prepend", "unshift");
    
    Opal.def(self, '$values_at', TMP_Array_values_at_112 = function $$values_at($a) {
      var $post_args, args, TMP_113, self = this, out = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      out = [];
      $send(args, 'each', [], (TMP_113 = function(elem){var self = TMP_113.$$s || this, TMP_114, finish = nil, start = nil, i = nil;

      
        
        if (elem == null) {
          elem = nil;
        };
        if ($truthy(elem['$is_a?']($$($nesting, 'Range')))) {
          
          finish = $$($nesting, 'Opal').$coerce_to(elem.$last(), $$($nesting, 'Integer'), "to_int");
          start = $$($nesting, 'Opal').$coerce_to(elem.$first(), $$($nesting, 'Integer'), "to_int");
          
          if (start < 0) {
            start = start + self.length;
            return nil;;
          }
        ;
          
          if (finish < 0) {
            finish = finish + self.length;
          }
          if (elem['$exclude_end?']()) {
            finish--;
          }
          if (finish < start) {
            return nil;;
          }
        ;
          return $send(start, 'upto', [finish], (TMP_114 = function(i){var self = TMP_114.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return out['$<<'](self.$at(i));}, TMP_114.$$s = self, TMP_114.$$arity = 1, TMP_114));
        } else {
          
          i = $$($nesting, 'Opal').$coerce_to(elem, $$($nesting, 'Integer'), "to_int");
          return out['$<<'](self.$at(i));
        };}, TMP_113.$$s = self, TMP_113.$$arity = 1, TMP_113));
      return out;
    }, TMP_Array_values_at_112.$$arity = -1);
    
    Opal.def(self, '$zip', TMP_Array_zip_115 = function $$zip($a) {
      var $iter = TMP_Array_zip_115.$$p, block = $iter || nil, $post_args, others, $b, self = this;

      if ($iter) TMP_Array_zip_115.$$p = null;
      
      
      if ($iter) TMP_Array_zip_115.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      others = $post_args;;
      
      var result = [], size = self.length, part, o, i, j, jj;

      for (j = 0, jj = others.length; j < jj; j++) {
        o = others[j];
        if (o.$$is_array) {
          continue;
        }
        if (o.$$is_enumerator) {
          if (o.$size() === Infinity) {
            others[j] = o.$take(size);
          } else {
            others[j] = o.$to_a();
          }
          continue;
        }
        others[j] = ($truthy($b = $$($nesting, 'Opal')['$coerce_to?'](o, $$($nesting, 'Array'), "to_ary")) ? $b : $$($nesting, 'Opal')['$coerce_to!'](o, $$($nesting, 'Enumerator'), "each")).$to_a();
      }

      for (i = 0; i < size; i++) {
        part = [self[i]];

        for (j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    ;
    }, TMP_Array_zip_115.$$arity = -1);
    Opal.defs(self, '$inherited', TMP_Array_inherited_116 = function $$inherited(klass) {
      var self = this;

      
      klass.prototype.$to_a = function() {
        return this.slice(0, this.length);
      }
    
    }, TMP_Array_inherited_116.$$arity = 1);
    
    Opal.def(self, '$instance_variables', TMP_Array_instance_variables_117 = function $$instance_variables() {
      var TMP_118, $iter = TMP_Array_instance_variables_117.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Array_instance_variables_117.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $send($send(self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_Array_instance_variables_117, false), $zuper, $iter), 'reject', [], (TMP_118 = function(ivar){var self = TMP_118.$$s || this, $a;

      
        
        if (ivar == null) {
          ivar = nil;
        };
        return ($truthy($a = /^@\d+$/.test(ivar)) ? $a : ivar['$==']("@length"));}, TMP_118.$$s = self, TMP_118.$$arity = 1, TMP_118))
    }, TMP_Array_instance_variables_117.$$arity = 0);
    $$($nesting, 'Opal').$pristine(self.$singleton_class(), "allocate");
    $$($nesting, 'Opal').$pristine(self, "copy_instance_variables", "initialize_dup");
    return (Opal.def(self, '$pack', TMP_Array_pack_119 = function $$pack($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self.$raise("To use Array#pack, you must first require 'corelib/array/pack'.");
    }, TMP_Array_pack_119.$$arity = -1), nil) && 'pack';
  })($nesting[0], Array, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/hash"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$coerce_to!', '$each', '$fetch', '$>=', '$>', '$==', '$compare_by_identity', '$lambda?', '$abs', '$arity', '$enum_for', '$size', '$respond_to?', '$class', '$dig', '$new', '$inspect', '$map', '$to_proc', '$flatten', '$eql?', '$default', '$dup', '$default_proc', '$default_proc=', '$-', '$default=', '$proc']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Hash_$$_1, TMP_Hash_allocate_2, TMP_Hash_try_convert_3, TMP_Hash_initialize_4, TMP_Hash_$eq$eq_5, TMP_Hash_$gt$eq_6, TMP_Hash_$gt_8, TMP_Hash_$lt_9, TMP_Hash_$lt$eq_10, TMP_Hash_$$_11, TMP_Hash_$$$eq_12, TMP_Hash_assoc_13, TMP_Hash_clear_14, TMP_Hash_clone_15, TMP_Hash_compact_16, TMP_Hash_compact$B_17, TMP_Hash_compare_by_identity_18, TMP_Hash_compare_by_identity$q_19, TMP_Hash_default_20, TMP_Hash_default$eq_21, TMP_Hash_default_proc_22, TMP_Hash_default_proc$eq_23, TMP_Hash_delete_24, TMP_Hash_delete_if_25, TMP_Hash_dig_27, TMP_Hash_each_28, TMP_Hash_each_key_30, TMP_Hash_each_value_32, TMP_Hash_empty$q_34, TMP_Hash_fetch_35, TMP_Hash_fetch_values_36, TMP_Hash_flatten_38, TMP_Hash_has_key$q_39, TMP_Hash_has_value$q_40, TMP_Hash_hash_41, TMP_Hash_index_42, TMP_Hash_indexes_43, TMP_Hash_inspect_44, TMP_Hash_invert_45, TMP_Hash_keep_if_46, TMP_Hash_keys_48, TMP_Hash_length_49, TMP_Hash_merge_50, TMP_Hash_merge$B_51, TMP_Hash_rassoc_52, TMP_Hash_rehash_53, TMP_Hash_reject_54, TMP_Hash_reject$B_56, TMP_Hash_replace_58, TMP_Hash_select_59, TMP_Hash_select$B_61, TMP_Hash_shift_63, TMP_Hash_slice_64, TMP_Hash_to_a_65, TMP_Hash_to_h_66, TMP_Hash_to_hash_67, TMP_Hash_to_proc_68, TMP_Hash_transform_keys_70, TMP_Hash_transform_keys$B_72, TMP_Hash_transform_values_74, TMP_Hash_transform_values$B_76, TMP_Hash_values_78;

    
    self.$include($$($nesting, 'Enumerable'));
    def.$$is_hash = true;
    Opal.defs(self, '$[]', TMP_Hash_$$_1 = function($a) {
      var $post_args, argv, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      argv = $post_args;;
      
      var hash, argc = argv.length, i;

      if (argc === 1) {
        hash = $$($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), $$($nesting, 'Hash'), "to_hash");
        if (hash !== nil) {
          return self.$allocate()['$merge!'](hash);
        }

        argv = $$($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), $$($nesting, 'Array'), "to_ary");
        if (argv === nil) {
          self.$raise($$($nesting, 'ArgumentError'), "odd number of arguments for Hash")
        }

        argc = argv.length;
        hash = self.$allocate();

        for (i = 0; i < argc; i++) {
          if (!argv[i].$$is_array) continue;
          switch(argv[i].length) {
          case 1:
            hash.$store(argv[i][0], nil);
            break;
          case 2:
            hash.$store(argv[i][0], argv[i][1]);
            break;
          default:
            self.$raise($$($nesting, 'ArgumentError'), "" + "invalid number of elements (" + (argv[i].length) + " for 1..2)")
          }
        }

        return hash;
      }

      if (argc % 2 !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "odd number of arguments for Hash")
      }

      hash = self.$allocate();

      for (i = 0; i < argc; i += 2) {
        hash.$store(argv[i], argv[i + 1]);
      }

      return hash;
    ;
    }, TMP_Hash_$$_1.$$arity = -1);
    Opal.defs(self, '$allocate', TMP_Hash_allocate_2 = function $$allocate() {
      var self = this;

      
      var hash = new self();

      Opal.hash_init(hash);

      hash.$$none = nil;
      hash.$$proc = nil;

      return hash;
    
    }, TMP_Hash_allocate_2.$$arity = 0);
    Opal.defs(self, '$try_convert', TMP_Hash_try_convert_3 = function $$try_convert(obj) {
      var self = this;

      return $$($nesting, 'Opal')['$coerce_to?'](obj, $$($nesting, 'Hash'), "to_hash")
    }, TMP_Hash_try_convert_3.$$arity = 1);
    
    Opal.def(self, '$initialize', TMP_Hash_initialize_4 = function $$initialize(defaults) {
      var $iter = TMP_Hash_initialize_4.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Hash_initialize_4.$$p = null;
      
      
      if ($iter) TMP_Hash_initialize_4.$$p = null;;
      ;
      
      if (defaults !== undefined && block !== nil) {
        self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (1 for 0)")
      }
      self.$$none = (defaults === undefined ? nil : defaults);
      self.$$proc = block;

      return self;
    ;
    }, TMP_Hash_initialize_4.$$arity = -1);
    
    Opal.def(self, '$==', TMP_Hash_$eq$eq_5 = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.$$is_hash) {
        return false;
      }

      if (self.$$keys.length !== other.$$keys.length) {
        return false;
      }

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
          other_value = other.$$smap[key];
        } else {
          value = key.value;
          other_value = Opal.hash_get(other, key.key);
        }

        if (other_value === undefined || !value['$eql?'](other_value)) {
          return false;
        }
      }

      return true;
    
    }, TMP_Hash_$eq$eq_5.$$arity = 1);
    
    Opal.def(self, '$>=', TMP_Hash_$gt$eq_6 = function(other) {
      var TMP_7, self = this, result = nil;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      
      if (self.$$keys.length < other.$$keys.length) {
        return false
      }
    ;
      result = true;
      $send(other, 'each', [], (TMP_7 = function(other_key, other_val){var self = TMP_7.$$s || this, val = nil;

      
        
        if (other_key == null) {
          other_key = nil;
        };
        
        if (other_val == null) {
          other_val = nil;
        };
        val = self.$fetch(other_key, null);
        
        if (val == null || val !== other_val) {
          result = false;
          return;
        }
      ;}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7));
      return result;
    }, TMP_Hash_$gt$eq_6.$$arity = 1);
    
    Opal.def(self, '$>', TMP_Hash_$gt_8 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      
      if (self.$$keys.length <= other.$$keys.length) {
        return false
      }
    ;
      return $rb_ge(self, other);
    }, TMP_Hash_$gt_8.$$arity = 1);
    
    Opal.def(self, '$<', TMP_Hash_$lt_9 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      return $rb_gt(other, self);
    }, TMP_Hash_$lt_9.$$arity = 1);
    
    Opal.def(self, '$<=', TMP_Hash_$lt$eq_10 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      return $rb_ge(other, self);
    }, TMP_Hash_$lt$eq_10.$$arity = 1);
    
    Opal.def(self, '$[]', TMP_Hash_$$_11 = function(key) {
      var self = this;

      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      return self.$default(key);
    
    }, TMP_Hash_$$_11.$$arity = 1);
    
    Opal.def(self, '$[]=', TMP_Hash_$$$eq_12 = function(key, value) {
      var self = this;

      
      Opal.hash_put(self, key, value);
      return value;
    
    }, TMP_Hash_$$$eq_12.$$arity = 2);
    
    Opal.def(self, '$assoc', TMP_Hash_assoc_13 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          if ((key)['$=='](object)) {
            return [key, self.$$smap[key]];
          }
        } else {
          if ((key.key)['$=='](object)) {
            return [key.key, key.value];
          }
        }
      }

      return nil;
    
    }, TMP_Hash_assoc_13.$$arity = 1);
    
    Opal.def(self, '$clear', TMP_Hash_clear_14 = function $$clear() {
      var self = this;

      
      Opal.hash_init(self);
      return self;
    
    }, TMP_Hash_clear_14.$$arity = 0);
    
    Opal.def(self, '$clone', TMP_Hash_clone_15 = function $$clone() {
      var self = this;

      
      var hash = new self.$$class();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_Hash_clone_15.$$arity = 0);
    
    Opal.def(self, '$compact', TMP_Hash_compact_16 = function $$compact() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if (value !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, TMP_Hash_compact_16.$$arity = 0);
    
    Opal.def(self, '$compact!', TMP_Hash_compact$B_17 = function() {
      var self = this;

      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if (value === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    
    }, TMP_Hash_compact$B_17.$$arity = 0);
    
    Opal.def(self, '$compare_by_identity', TMP_Hash_compare_by_identity_18 = function $$compare_by_identity() {
      var self = this;

      
      var i, ii, key, keys = self.$$keys, identity_hash;

      if (self.$$by_identity) return self;
      if (self.$$keys.length === 0) {
        self.$$by_identity = true
        return self;
      }

      identity_hash = $hash2([], {}).$compare_by_identity();
      for(i = 0, ii = keys.length; i < ii; i++) {
        key = keys[i];
        if (!key.$$is_string) key = key.key;
        Opal.hash_put(identity_hash, key, Opal.hash_get(self, key));
      }

      self.$$by_identity = true;
      self.$$map = identity_hash.$$map;
      self.$$smap = identity_hash.$$smap;
      return self;
    
    }, TMP_Hash_compare_by_identity_18.$$arity = 0);
    
    Opal.def(self, '$compare_by_identity?', TMP_Hash_compare_by_identity$q_19 = function() {
      var self = this;

      return self.$$by_identity === true;
    }, TMP_Hash_compare_by_identity$q_19.$$arity = 0);
    
    Opal.def(self, '$default', TMP_Hash_default_20 = function(key) {
      var self = this;

      
      ;
      
      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {
        return self.$$proc.$call(self, key);
      }
      if (self.$$none === undefined) {
        return nil;
      }
      return self.$$none;
    ;
    }, TMP_Hash_default_20.$$arity = -1);
    
    Opal.def(self, '$default=', TMP_Hash_default$eq_21 = function(object) {
      var self = this;

      
      self.$$proc = nil;
      self.$$none = object;

      return object;
    
    }, TMP_Hash_default$eq_21.$$arity = 1);
    
    Opal.def(self, '$default_proc', TMP_Hash_default_proc_22 = function $$default_proc() {
      var self = this;

      
      if (self.$$proc !== undefined) {
        return self.$$proc;
      }
      return nil;
    
    }, TMP_Hash_default_proc_22.$$arity = 0);
    
    Opal.def(self, '$default_proc=', TMP_Hash_default_proc$eq_23 = function(default_proc) {
      var self = this;

      
      var proc = default_proc;

      if (proc !== nil) {
        proc = $$($nesting, 'Opal')['$coerce_to!'](proc, $$($nesting, 'Proc'), "to_proc");

        if ((proc)['$lambda?']() && (proc).$arity().$abs() !== 2) {
          self.$raise($$($nesting, 'TypeError'), "default_proc takes two arguments");
        }
      }

      self.$$none = nil;
      self.$$proc = proc;

      return default_proc;
    
    }, TMP_Hash_default_proc$eq_23.$$arity = 1);
    
    Opal.def(self, '$delete', TMP_Hash_delete_24 = function(key) {
      var $iter = TMP_Hash_delete_24.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Hash_delete_24.$$p = null;
      
      
      if ($iter) TMP_Hash_delete_24.$$p = null;;
      
      var value = Opal.hash_delete(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return Opal.yield1(block, key);
      }

      return nil;
    ;
    }, TMP_Hash_delete_24.$$arity = 1);
    
    Opal.def(self, '$delete_if', TMP_Hash_delete_if_25 = function $$delete_if() {
      var $iter = TMP_Hash_delete_if_25.$$p, block = $iter || nil, TMP_26, self = this;

      if ($iter) TMP_Hash_delete_if_25.$$p = null;
      
      
      if ($iter) TMP_Hash_delete_if_25.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["delete_if"], (TMP_26 = function(){var self = TMP_26.$$s || this;

        return self.$size()}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, TMP_Hash_delete_if_25.$$arity = 0);
    Opal.alias(self, "dup", "clone");
    
    Opal.def(self, '$dig', TMP_Hash_dig_27 = function $$dig(key, $a) {
      var $post_args, keys, self = this, item = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      keys = $post_args;;
      item = self['$[]'](key);
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(keys));
    }, TMP_Hash_dig_27.$$arity = -2);
    
    Opal.def(self, '$each', TMP_Hash_each_28 = function $$each() {
      var $iter = TMP_Hash_each_28.$$p, block = $iter || nil, TMP_29, self = this;

      if ($iter) TMP_Hash_each_28.$$p = null;
      
      
      if ($iter) TMP_Hash_each_28.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["each"], (TMP_29 = function(){var self = TMP_29.$$s || this;

        return self.$size()}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.yield1(block, [key, value]);
      }

      return self;
    ;
    }, TMP_Hash_each_28.$$arity = 0);
    
    Opal.def(self, '$each_key', TMP_Hash_each_key_30 = function $$each_key() {
      var $iter = TMP_Hash_each_key_30.$$p, block = $iter || nil, TMP_31, self = this;

      if ($iter) TMP_Hash_each_key_30.$$p = null;
      
      
      if ($iter) TMP_Hash_each_key_30.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["each_key"], (TMP_31 = function(){var self = TMP_31.$$s || this;

        return self.$size()}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? key : key.key);
      }

      return self;
    ;
    }, TMP_Hash_each_key_30.$$arity = 0);
    Opal.alias(self, "each_pair", "each");
    
    Opal.def(self, '$each_value', TMP_Hash_each_value_32 = function $$each_value() {
      var $iter = TMP_Hash_each_value_32.$$p, block = $iter || nil, TMP_33, self = this;

      if ($iter) TMP_Hash_each_value_32.$$p = null;
      
      
      if ($iter) TMP_Hash_each_value_32.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["each_value"], (TMP_33 = function(){var self = TMP_33.$$s || this;

        return self.$size()}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? self.$$smap[key] : key.value);
      }

      return self;
    ;
    }, TMP_Hash_each_value_32.$$arity = 0);
    
    Opal.def(self, '$empty?', TMP_Hash_empty$q_34 = function() {
      var self = this;

      return self.$$keys.length === 0;
    }, TMP_Hash_empty$q_34.$$arity = 0);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$fetch', TMP_Hash_fetch_35 = function $$fetch(key, defaults) {
      var $iter = TMP_Hash_fetch_35.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Hash_fetch_35.$$p = null;
      
      
      if ($iter) TMP_Hash_fetch_35.$$p = null;;
      ;
      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block(key);
      }

      if (defaults !== undefined) {
        return defaults;
      }
    ;
      return self.$raise($$($nesting, 'KeyError').$new("" + "key not found: " + (key.$inspect()), $hash2(["key", "receiver"], {"key": key, "receiver": self})));
    }, TMP_Hash_fetch_35.$$arity = -2);
    
    Opal.def(self, '$fetch_values', TMP_Hash_fetch_values_36 = function $$fetch_values($a) {
      var $iter = TMP_Hash_fetch_values_36.$$p, block = $iter || nil, $post_args, keys, TMP_37, self = this;

      if ($iter) TMP_Hash_fetch_values_36.$$p = null;
      
      
      if ($iter) TMP_Hash_fetch_values_36.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      keys = $post_args;;
      return $send(keys, 'map', [], (TMP_37 = function(key){var self = TMP_37.$$s || this;

      
        
        if (key == null) {
          key = nil;
        };
        return $send(self, 'fetch', [key], block.$to_proc());}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37));
    }, TMP_Hash_fetch_values_36.$$arity = -1);
    
    Opal.def(self, '$flatten', TMP_Hash_flatten_38 = function $$flatten(level) {
      var self = this;

      
      
      if (level == null) {
        level = 1;
      };
      level = $$($nesting, 'Opal')['$coerce_to!'](level, $$($nesting, 'Integer'), "to_int");
      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push(key);

        if (value.$$is_array) {
          if (level === 1) {
            result.push(value);
            continue;
          }

          result = result.concat((value).$flatten(level - 2));
          continue;
        }

        result.push(value);
      }

      return result;
    ;
    }, TMP_Hash_flatten_38.$$arity = -1);
    
    Opal.def(self, '$has_key?', TMP_Hash_has_key$q_39 = function(key) {
      var self = this;

      return Opal.hash_get(self, key) !== undefined;
    }, TMP_Hash_has_key$q_39.$$arity = 1);
    
    Opal.def(self, '$has_value?', TMP_Hash_has_value$q_40 = function(value) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {
          return true;
        }
      }

      return false;
    
    }, TMP_Hash_has_value$q_40.$$arity = 1);
    
    Opal.def(self, '$hash', TMP_Hash_hash_41 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          hash_id = self.$object_id(),
          result = ['Hash'],
          key, item;

      try {
        if (top) {
          Opal.hash_ids = Object.create(null);
        }

        if (Opal[hash_id]) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          item = Opal.hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            result.push([key, self.$$smap[key].$hash()]);
          } else {
            result.push([key.key_hash, key.value.$hash()]);
          }
        }

        return result.sort().join();

      } finally {
        if (top) {
          Opal.hash_ids = undefined;
        }
      }
    
    }, TMP_Hash_hash_41.$$arity = 0);
    Opal.alias(self, "include?", "has_key?");
    
    Opal.def(self, '$index', TMP_Hash_index_42 = function $$index(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    }, TMP_Hash_index_42.$$arity = 1);
    
    Opal.def(self, '$indexes', TMP_Hash_indexes_43 = function $$indexes($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var result = [];

      for (var i = 0, length = args.length, key, value; i < length; i++) {
        key = args[i];
        value = Opal.hash_get(self, key);

        if (value === undefined) {
          result.push(self.$default());
          continue;
        }

        result.push(value);
      }

      return result;
    ;
    }, TMP_Hash_indexes_43.$$arity = -1);
    Opal.alias(self, "indices", "indexes");
    var inspect_ids;
    
    Opal.def(self, '$inspect', TMP_Hash_inspect_44 = function $$inspect() {
      var self = this;

      
      var top = (inspect_ids === undefined),
          hash_id = self.$object_id(),
          result = [];

      try {
        if (top) {
          inspect_ids = {};
        }

        if (inspect_ids.hasOwnProperty(hash_id)) {
          return '{...}';
        }

        inspect_ids[hash_id] = true;

        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = self.$$smap[key];
          } else {
            value = key.value;
            key = key.key;
          }

          result.push(key.$inspect() + '=>' + value.$inspect());
        }

        return '{' + result.join(', ') + '}';

      } finally {
        if (top) {
          inspect_ids = undefined;
        }
      }
    
    }, TMP_Hash_inspect_44.$$arity = 0);
    
    Opal.def(self, '$invert', TMP_Hash_invert_45 = function $$invert() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.hash_put(hash, value, key);
      }

      return hash;
    
    }, TMP_Hash_invert_45.$$arity = 0);
    
    Opal.def(self, '$keep_if', TMP_Hash_keep_if_46 = function $$keep_if() {
      var $iter = TMP_Hash_keep_if_46.$$p, block = $iter || nil, TMP_47, self = this;

      if ($iter) TMP_Hash_keep_if_46.$$p = null;
      
      
      if ($iter) TMP_Hash_keep_if_46.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["keep_if"], (TMP_47 = function(){var self = TMP_47.$$s || this;

        return self.$size()}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, TMP_Hash_keep_if_46.$$arity = 0);
    Opal.alias(self, "key", "index");
    Opal.alias(self, "key?", "has_key?");
    
    Opal.def(self, '$keys', TMP_Hash_keys_48 = function $$keys() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(key);
        } else {
          result.push(key.key);
        }
      }

      return result;
    
    }, TMP_Hash_keys_48.$$arity = 0);
    
    Opal.def(self, '$length', TMP_Hash_length_49 = function $$length() {
      var self = this;

      return self.$$keys.length;
    }, TMP_Hash_length_49.$$arity = 0);
    Opal.alias(self, "member?", "has_key?");
    
    Opal.def(self, '$merge', TMP_Hash_merge_50 = function $$merge(other) {
      var $iter = TMP_Hash_merge_50.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Hash_merge_50.$$p = null;
      
      
      if ($iter) TMP_Hash_merge_50.$$p = null;;
      return $send(self.$dup(), 'merge!', [other], block.$to_proc());
    }, TMP_Hash_merge_50.$$arity = 1);
    
    Opal.def(self, '$merge!', TMP_Hash_merge$B_51 = function(other) {
      var $iter = TMP_Hash_merge$B_51.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Hash_merge$B_51.$$p = null;
      
      
      if ($iter) TMP_Hash_merge$B_51.$$p = null;;
      
      if (!other.$$is_hash) {
        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      }

      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;

      if (block === nil) {
        for (i = 0; i < length; i++) {
          key = other_keys[i];

          if (key.$$is_string) {
            other_value = other.$$smap[key];
          } else {
            other_value = key.value;
            key = key.key;
          }

          Opal.hash_put(self, key, other_value);
        }

        return self;
      }

      for (i = 0; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        value = Opal.hash_get(self, key);

        if (value === undefined) {
          Opal.hash_put(self, key, other_value);
          continue;
        }

        Opal.hash_put(self, key, block(key, value, other_value));
      }

      return self;
    ;
    }, TMP_Hash_merge$B_51.$$arity = 1);
    
    Opal.def(self, '$rassoc', TMP_Hash_rassoc_52 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    }, TMP_Hash_rassoc_52.$$arity = 1);
    
    Opal.def(self, '$rehash', TMP_Hash_rehash_53 = function $$rehash() {
      var self = this;

      
      Opal.hash_rehash(self);
      return self;
    
    }, TMP_Hash_rehash_53.$$arity = 0);
    
    Opal.def(self, '$reject', TMP_Hash_reject_54 = function $$reject() {
      var $iter = TMP_Hash_reject_54.$$p, block = $iter || nil, TMP_55, self = this;

      if ($iter) TMP_Hash_reject_54.$$p = null;
      
      
      if ($iter) TMP_Hash_reject_54.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["reject"], (TMP_55 = function(){var self = TMP_55.$$s || this;

        return self.$size()}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55))
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, TMP_Hash_reject_54.$$arity = 0);
    
    Opal.def(self, '$reject!', TMP_Hash_reject$B_56 = function() {
      var $iter = TMP_Hash_reject$B_56.$$p, block = $iter || nil, TMP_57, self = this;

      if ($iter) TMP_Hash_reject$B_56.$$p = null;
      
      
      if ($iter) TMP_Hash_reject$B_56.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["reject!"], (TMP_57 = function(){var self = TMP_57.$$s || this;

        return self.$size()}, TMP_57.$$s = self, TMP_57.$$arity = 0, TMP_57))
      };
      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    ;
    }, TMP_Hash_reject$B_56.$$arity = 0);
    
    Opal.def(self, '$replace', TMP_Hash_replace_58 = function $$replace(other) {
      var self = this, $writer = nil;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      
      Opal.hash_init(self);

      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        Opal.hash_put(self, key, other_value);
      }
    ;
      if ($truthy(other.$default_proc())) {
        
        $writer = [other.$default_proc()];
        $send(self, 'default_proc=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      } else {
        
        $writer = [other.$default()];
        $send(self, 'default=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return self;
    }, TMP_Hash_replace_58.$$arity = 1);
    
    Opal.def(self, '$select', TMP_Hash_select_59 = function $$select() {
      var $iter = TMP_Hash_select_59.$$p, block = $iter || nil, TMP_60, self = this;

      if ($iter) TMP_Hash_select_59.$$p = null;
      
      
      if ($iter) TMP_Hash_select_59.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["select"], (TMP_60 = function(){var self = TMP_60.$$s || this;

        return self.$size()}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60))
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, TMP_Hash_select_59.$$arity = 0);
    
    Opal.def(self, '$select!', TMP_Hash_select$B_61 = function() {
      var $iter = TMP_Hash_select$B_61.$$p, block = $iter || nil, TMP_62, self = this;

      if ($iter) TMP_Hash_select$B_61.$$p = null;
      
      
      if ($iter) TMP_Hash_select$B_61.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["select!"], (TMP_62 = function(){var self = TMP_62.$$s || this;

        return self.$size()}, TMP_62.$$s = self, TMP_62.$$arity = 0, TMP_62))
      };
      
      var result = nil;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
          result = self;
        }
      }

      return result;
    ;
    }, TMP_Hash_select$B_61.$$arity = 0);
    
    Opal.def(self, '$shift', TMP_Hash_shift_63 = function $$shift() {
      var self = this;

      
      var keys = self.$$keys,
          key;

      if (keys.length > 0) {
        key = keys[0];

        key = key.$$is_string ? key : key.key;

        return [key, Opal.hash_delete(self, key)];
      }

      return self.$default(nil);
    
    }, TMP_Hash_shift_63.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$slice', TMP_Hash_slice_64 = function $$slice($a) {
      var $post_args, keys, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      keys = $post_args;;
      
      var result = Opal.hash();

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], value = Opal.hash_get(self, key);

        if (value !== undefined) {
          Opal.hash_put(result, key, value);
        }
      }

      return result;
    ;
    }, TMP_Hash_slice_64.$$arity = -1);
    Opal.alias(self, "store", "[]=");
    
    Opal.def(self, '$to_a', TMP_Hash_to_a_65 = function $$to_a() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push([key, value]);
      }

      return result;
    
    }, TMP_Hash_to_a_65.$$arity = 0);
    
    Opal.def(self, '$to_h', TMP_Hash_to_h_66 = function $$to_h() {
      var self = this;

      
      if (self.$$class === Opal.Hash) {
        return self;
      }

      var hash = new Opal.Hash();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_Hash_to_h_66.$$arity = 0);
    
    Opal.def(self, '$to_hash', TMP_Hash_to_hash_67 = function $$to_hash() {
      var self = this;

      return self
    }, TMP_Hash_to_hash_67.$$arity = 0);
    
    Opal.def(self, '$to_proc', TMP_Hash_to_proc_68 = function $$to_proc() {
      var TMP_69, self = this;

      return $send(self, 'proc', [], (TMP_69 = function(key){var self = TMP_69.$$s || this;

      
        ;
        
        if (key == null) {
          self.$raise($$($nesting, 'ArgumentError'), "no key given")
        }
      ;
        return self['$[]'](key);}, TMP_69.$$s = self, TMP_69.$$arity = -1, TMP_69))
    }, TMP_Hash_to_proc_68.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$transform_keys', TMP_Hash_transform_keys_70 = function $$transform_keys() {
      var $iter = TMP_Hash_transform_keys_70.$$p, block = $iter || nil, TMP_71, self = this;

      if ($iter) TMP_Hash_transform_keys_70.$$p = null;
      
      
      if ($iter) TMP_Hash_transform_keys_70.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_keys"], (TMP_71 = function(){var self = TMP_71.$$s || this;

        return self.$size()}, TMP_71.$$s = self, TMP_71.$$arity = 0, TMP_71))
      };
      
      var result = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        key = Opal.yield1(block, key);

        Opal.hash_put(result, key, value);
      }

      return result;
    ;
    }, TMP_Hash_transform_keys_70.$$arity = 0);
    
    Opal.def(self, '$transform_keys!', TMP_Hash_transform_keys$B_72 = function() {
      var $iter = TMP_Hash_transform_keys$B_72.$$p, block = $iter || nil, TMP_73, self = this;

      if ($iter) TMP_Hash_transform_keys$B_72.$$p = null;
      
      
      if ($iter) TMP_Hash_transform_keys$B_72.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_keys!"], (TMP_73 = function(){var self = TMP_73.$$s || this;

        return self.$size()}, TMP_73.$$s = self, TMP_73.$$arity = 0, TMP_73))
      };
      
      var keys = Opal.slice.call(self.$$keys),
          i, length = keys.length, key, value, new_key;

      for (i = 0; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        new_key = Opal.yield1(block, key);

        Opal.hash_delete(self, key);
        Opal.hash_put(self, new_key, value);
      }

      return self;
    ;
    }, TMP_Hash_transform_keys$B_72.$$arity = 0);
    
    Opal.def(self, '$transform_values', TMP_Hash_transform_values_74 = function $$transform_values() {
      var $iter = TMP_Hash_transform_values_74.$$p, block = $iter || nil, TMP_75, self = this;

      if ($iter) TMP_Hash_transform_values_74.$$p = null;
      
      
      if ($iter) TMP_Hash_transform_values_74.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_values"], (TMP_75 = function(){var self = TMP_75.$$s || this;

        return self.$size()}, TMP_75.$$s = self, TMP_75.$$arity = 0, TMP_75))
      };
      
      var result = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        value = Opal.yield1(block, value);

        Opal.hash_put(result, key, value);
      }

      return result;
    ;
    }, TMP_Hash_transform_values_74.$$arity = 0);
    
    Opal.def(self, '$transform_values!', TMP_Hash_transform_values$B_76 = function() {
      var $iter = TMP_Hash_transform_values$B_76.$$p, block = $iter || nil, TMP_77, self = this;

      if ($iter) TMP_Hash_transform_values$B_76.$$p = null;
      
      
      if ($iter) TMP_Hash_transform_values$B_76.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_values!"], (TMP_77 = function(){var self = TMP_77.$$s || this;

        return self.$size()}, TMP_77.$$s = self, TMP_77.$$arity = 0, TMP_77))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        value = Opal.yield1(block, value);

        Opal.hash_put(self, key, value);
      }

      return self;
    ;
    }, TMP_Hash_transform_values$B_76.$$arity = 0);
    Opal.alias(self, "update", "merge!");
    Opal.alias(self, "value?", "has_value?");
    Opal.alias(self, "values_at", "indexes");
    return (Opal.def(self, '$values', TMP_Hash_values_78 = function $$values() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(self.$$smap[key]);
        } else {
          result.push(key.value);
        }
      }

      return result;
    
    }, TMP_Hash_values_78.$$arity = 0), nil) && 'values';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/number"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$bridge', '$raise', '$name', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$%', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$truncate', '$-@', '$size', '$<=', '$>=', '$<=>', '$compare', '$any?']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    function $Number(){};
    var self = $Number = $klass($base, $super, 'Number', $Number);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Number_coerce_2, TMP_Number___id___3, TMP_Number_$_4, TMP_Number_$_5, TMP_Number_$_6, TMP_Number_$_7, TMP_Number_$_8, TMP_Number_$_9, TMP_Number_$_10, TMP_Number_$_11, TMP_Number_$lt_12, TMP_Number_$lt$eq_13, TMP_Number_$gt_14, TMP_Number_$gt$eq_15, TMP_Number_$lt$eq$gt_16, TMP_Number_$lt$lt_17, TMP_Number_$gt$gt_18, TMP_Number_$$_19, TMP_Number_$$_20, TMP_Number_$$_21, TMP_Number_$_22, TMP_Number_$$_23, TMP_Number_$eq$eq$eq_24, TMP_Number_$eq$eq_25, TMP_Number_abs_26, TMP_Number_abs2_27, TMP_Number_allbits$q_28, TMP_Number_anybits$q_29, TMP_Number_angle_30, TMP_Number_bit_length_31, TMP_Number_ceil_32, TMP_Number_chr_33, TMP_Number_denominator_34, TMP_Number_downto_35, TMP_Number_equal$q_37, TMP_Number_even$q_38, TMP_Number_floor_39, TMP_Number_gcd_40, TMP_Number_gcdlcm_41, TMP_Number_integer$q_42, TMP_Number_is_a$q_43, TMP_Number_instance_of$q_44, TMP_Number_lcm_45, TMP_Number_next_46, TMP_Number_nobits$q_47, TMP_Number_nonzero$q_48, TMP_Number_numerator_49, TMP_Number_odd$q_50, TMP_Number_ord_51, TMP_Number_pow_52, TMP_Number_pred_53, TMP_Number_quo_54, TMP_Number_rationalize_55, TMP_Number_remainder_56, TMP_Number_round_57, TMP_Number_step_58, TMP_Number_times_60, TMP_Number_to_f_62, TMP_Number_to_i_63, TMP_Number_to_r_64, TMP_Number_to_s_65, TMP_Number_truncate_66, TMP_Number_digits_67, TMP_Number_divmod_68, TMP_Number_upto_69, TMP_Number_zero$q_71, TMP_Number_size_72, TMP_Number_nan$q_73, TMP_Number_finite$q_74, TMP_Number_infinite$q_75, TMP_Number_positive$q_76, TMP_Number_negative$q_77;

    
    $$($nesting, 'Opal').$bridge(Number, self);
    Opal.defineProperty(Number.prototype, '$$is_number', true);
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_allocate_1;

      
      
      Opal.def(self, '$allocate', TMP_allocate_1 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, TMP_allocate_1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$coerce', TMP_Number_coerce_2 = function $$coerce(other) {
      var self = this;

      
      if (other === nil) {
        self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (other.$class()) + " into Float");
      }
      else if (other.$$is_string) {
        return [self.$Float(other), self];
      }
      else if (other['$respond_to?']("to_f")) {
        return [$$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Float'), "to_f"), self];
      }
      else if (other.$$is_number) {
        return [other, self];
      }
      else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (other.$class()) + " into Float");
      }
    
    }, TMP_Number_coerce_2.$$arity = 1);
    
    Opal.def(self, '$__id__', TMP_Number___id___3 = function $$__id__() {
      var self = this;

      return (self * 2) + 1;
    }, TMP_Number___id___3.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.def(self, '$+', TMP_Number_$_4 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$__coerced__("+", other);
      }
    
    }, TMP_Number_$_4.$$arity = 1);
    
    Opal.def(self, '$-', TMP_Number_$_5 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$__coerced__("-", other);
      }
    
    }, TMP_Number_$_5.$$arity = 1);
    
    Opal.def(self, '$*', TMP_Number_$_6 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$__coerced__("*", other);
      }
    
    }, TMP_Number_$_6.$$arity = 1);
    
    Opal.def(self, '$/', TMP_Number_$_7 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$__coerced__("/", other);
      }
    
    }, TMP_Number_$_7.$$arity = 1);
    Opal.alias(self, "fdiv", "/");
    
    Opal.def(self, '$%', TMP_Number_$_8 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other == -Infinity) {
          return other;
        }
        else if (other == 0) {
          self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0");
        }
        else if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$__coerced__("%", other);
      }
    
    }, TMP_Number_$_8.$$arity = 1);
    
    Opal.def(self, '$&', TMP_Number_$_9 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$__coerced__("&", other);
      }
    
    }, TMP_Number_$_9.$$arity = 1);
    
    Opal.def(self, '$|', TMP_Number_$_10 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$__coerced__("|", other);
      }
    
    }, TMP_Number_$_10.$$arity = 1);
    
    Opal.def(self, '$^', TMP_Number_$_11 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$__coerced__("^", other);
      }
    
    }, TMP_Number_$_11.$$arity = 1);
    
    Opal.def(self, '$<', TMP_Number_$lt_12 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$__coerced__("<", other);
      }
    
    }, TMP_Number_$lt_12.$$arity = 1);
    
    Opal.def(self, '$<=', TMP_Number_$lt$eq_13 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$__coerced__("<=", other);
      }
    
    }, TMP_Number_$lt$eq_13.$$arity = 1);
    
    Opal.def(self, '$>', TMP_Number_$gt_14 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$__coerced__(">", other);
      }
    
    }, TMP_Number_$gt_14.$$arity = 1);
    
    Opal.def(self, '$>=', TMP_Number_$gt$eq_15 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$__coerced__(">=", other);
      }
    
    }, TMP_Number_$gt$eq_15.$$arity = 1);
    
    var spaceship_operator = function(self, other) {
      if (other.$$is_number) {
        if (isNaN(self) || isNaN(other)) {
          return nil;
        }

        if (self > other) {
          return 1;
        } else if (self < other) {
          return -1;
        } else {
          return 0;
        }
      }
      else {
        return self.$__coerced__("<=>", other);
      }
    }
  ;
    
    Opal.def(self, '$<=>', TMP_Number_$lt$eq$gt_16 = function(other) {
      var self = this;

      try {
        return spaceship_operator(self, other);
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
          try {
            return nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Number_$lt$eq$gt_16.$$arity = 1);
    
    Opal.def(self, '$<<', TMP_Number_$lt$lt_17 = function(count) {
      var self = this;

      
      count = $$($nesting, 'Opal')['$coerce_to!'](count, $$($nesting, 'Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    }, TMP_Number_$lt$lt_17.$$arity = 1);
    
    Opal.def(self, '$>>', TMP_Number_$gt$gt_18 = function(count) {
      var self = this;

      
      count = $$($nesting, 'Opal')['$coerce_to!'](count, $$($nesting, 'Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    }, TMP_Number_$gt$gt_18.$$arity = 1);
    
    Opal.def(self, '$[]', TMP_Number_$$_19 = function(bit) {
      var self = this;

      
      bit = $$($nesting, 'Opal')['$coerce_to!'](bit, $$($nesting, 'Integer'), "to_int");
      
      if (bit < 0) {
        return 0;
      }
      if (bit >= 32) {
        return self < 0 ? 1 : 0;
      }
      return (self >> bit) & 1;
    ;
    }, TMP_Number_$$_19.$$arity = 1);
    
    Opal.def(self, '$+@', TMP_Number_$$_20 = function() {
      var self = this;

      return +self;
    }, TMP_Number_$$_20.$$arity = 0);
    
    Opal.def(self, '$-@', TMP_Number_$$_21 = function() {
      var self = this;

      return -self;
    }, TMP_Number_$$_21.$$arity = 0);
    
    Opal.def(self, '$~', TMP_Number_$_22 = function() {
      var self = this;

      return ~self;
    }, TMP_Number_$_22.$$arity = 0);
    
    Opal.def(self, '$**', TMP_Number_$$_23 = function(other) {
      var $a, $b, self = this;

      if ($truthy($$($nesting, 'Integer')['$==='](other))) {
        if ($truthy(($truthy($a = $$($nesting, 'Integer')['$==='](self)['$!']()) ? $a : $rb_gt(other, 0)))) {
          return Math.pow(self, other);
        } else {
          return $$($nesting, 'Rational').$new(self, 1)['$**'](other)
        }
      } else if ($truthy((($a = $rb_lt(self, 0)) ? ($truthy($b = $$($nesting, 'Float')['$==='](other)) ? $b : $$($nesting, 'Rational')['$==='](other)) : $rb_lt(self, 0)))) {
        return $$($nesting, 'Complex').$new(self, 0)['$**'](other.$to_f())
      } else if ($truthy(other.$$is_number != null)) {
        return Math.pow(self, other);
      } else {
        return self.$__coerced__("**", other)
      }
    }, TMP_Number_$$_23.$$arity = 1);
    
    Opal.def(self, '$===', TMP_Number_$eq$eq$eq_24 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, TMP_Number_$eq$eq$eq_24.$$arity = 1);
    
    Opal.def(self, '$==', TMP_Number_$eq$eq_25 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, TMP_Number_$eq$eq_25.$$arity = 1);
    
    Opal.def(self, '$abs', TMP_Number_abs_26 = function $$abs() {
      var self = this;

      return Math.abs(self);
    }, TMP_Number_abs_26.$$arity = 0);
    
    Opal.def(self, '$abs2', TMP_Number_abs2_27 = function $$abs2() {
      var self = this;

      return Math.abs(self * self);
    }, TMP_Number_abs2_27.$$arity = 0);
    
    Opal.def(self, '$allbits?', TMP_Number_allbits$q_28 = function(mask) {
      var self = this;

      
      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), "to_int");
      return (self & mask) == mask;;
    }, TMP_Number_allbits$q_28.$$arity = 1);
    
    Opal.def(self, '$anybits?', TMP_Number_anybits$q_29 = function(mask) {
      var self = this;

      
      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), "to_int");
      return (self & mask) !== 0;;
    }, TMP_Number_anybits$q_29.$$arity = 1);
    
    Opal.def(self, '$angle', TMP_Number_angle_30 = function $$angle() {
      var self = this;

      
      if ($truthy(self['$nan?']())) {
        return self};
      
      if (self == 0) {
        if (1 / self > 0) {
          return 0;
        }
        else {
          return Math.PI;
        }
      }
      else if (self < 0) {
        return Math.PI;
      }
      else {
        return 0;
      }
    ;
    }, TMP_Number_angle_30.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    Opal.alias(self, "phase", "angle");
    
    Opal.def(self, '$bit_length', TMP_Number_bit_length_31 = function $$bit_length() {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
      } else {
        self.$raise($$($nesting, 'NoMethodError').$new("" + "undefined method `bit_length` for " + (self) + ":Float", "bit_length"))
      };
      
      if (self === 0 || self === -1) {
        return 0;
      }

      var result = 0,
          value  = self < 0 ? ~self : self;

      while (value != 0) {
        result   += 1;
        value  >>>= 1;
      }

      return result;
    ;
    }, TMP_Number_bit_length_31.$$arity = 0);
    
    Opal.def(self, '$ceil', TMP_Number_ceil_32 = function $$ceil(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = Math.ceil(f * factor) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, TMP_Number_ceil_32.$$arity = -1);
    
    Opal.def(self, '$chr', TMP_Number_chr_33 = function $$chr(encoding) {
      var self = this;

      
      ;
      return String.fromCharCode(self);;
    }, TMP_Number_chr_33.$$arity = -1);
    
    Opal.def(self, '$denominator', TMP_Number_denominator_34 = function $$denominator() {
      var $a, $iter = TMP_Number_denominator_34.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_denominator_34.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
        return 1
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'denominator', TMP_Number_denominator_34, false), $zuper, $iter)
      }
    }, TMP_Number_denominator_34.$$arity = 0);
    
    Opal.def(self, '$downto', TMP_Number_downto_35 = function $$downto(stop) {
      var $iter = TMP_Number_downto_35.$$p, block = $iter || nil, TMP_36, self = this;

      if ($iter) TMP_Number_downto_35.$$p = null;
      
      
      if ($iter) TMP_Number_downto_35.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["downto", stop], (TMP_36 = function(){var self = TMP_36.$$s || this;

        
          if ($truthy($$($nesting, 'Numeric')['$==='](stop))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_gt(stop, self))) {
            return 0
          } else {
            return $rb_plus($rb_minus(self, stop), 1)
          };}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36))
      };
      
      if (!stop.$$is_number) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i >= stop; i--) {
        block(i);
      }
    ;
      return self;
    }, TMP_Number_downto_35.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$equal?', TMP_Number_equal$q_37 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$=='](other)) ? $a : isNaN(self) && isNaN(other))
    }, TMP_Number_equal$q_37.$$arity = 1);
    
    Opal.def(self, '$even?', TMP_Number_even$q_38 = function() {
      var self = this;

      return self % 2 === 0;
    }, TMP_Number_even$q_38.$$arity = 0);
    
    Opal.def(self, '$floor', TMP_Number_floor_39 = function $$floor(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = Math.floor(f * factor) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, TMP_Number_floor_39.$$arity = -1);
    
    Opal.def(self, '$gcd', TMP_Number_gcd_40 = function $$gcd(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    ;
    }, TMP_Number_gcd_40.$$arity = 1);
    
    Opal.def(self, '$gcdlcm', TMP_Number_gcdlcm_41 = function $$gcdlcm(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()]
    }, TMP_Number_gcdlcm_41.$$arity = 1);
    
    Opal.def(self, '$integer?', TMP_Number_integer$q_42 = function() {
      var self = this;

      return self % 1 === 0;
    }, TMP_Number_integer$q_42.$$arity = 0);
    
    Opal.def(self, '$is_a?', TMP_Number_is_a$q_43 = function(klass) {
      var $a, $iter = TMP_Number_is_a$q_43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_is_a$q_43.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Float'))) ? $$($nesting, 'Float')['$==='](self) : klass['$==']($$($nesting, 'Float'))))) {
        return true};
      return $send(self, Opal.find_super_dispatcher(self, 'is_a?', TMP_Number_is_a$q_43, false), $zuper, $iter);
    }, TMP_Number_is_a$q_43.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.def(self, '$instance_of?', TMP_Number_instance_of$q_44 = function(klass) {
      var $a, $iter = TMP_Number_instance_of$q_44.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_instance_of$q_44.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Float'))) ? $$($nesting, 'Float')['$==='](self) : klass['$==']($$($nesting, 'Float'))))) {
        return true};
      return $send(self, Opal.find_super_dispatcher(self, 'instance_of?', TMP_Number_instance_of$q_44, false), $zuper, $iter);
    }, TMP_Number_instance_of$q_44.$$arity = 1);
    
    Opal.def(self, '$lcm', TMP_Number_lcm_45 = function $$lcm(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    ;
    }, TMP_Number_lcm_45.$$arity = 1);
    Opal.alias(self, "magnitude", "abs");
    Opal.alias(self, "modulo", "%");
    
    Opal.def(self, '$next', TMP_Number_next_46 = function $$next() {
      var self = this;

      return self + 1;
    }, TMP_Number_next_46.$$arity = 0);
    
    Opal.def(self, '$nobits?', TMP_Number_nobits$q_47 = function(mask) {
      var self = this;

      
      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), "to_int");
      return (self & mask) == 0;;
    }, TMP_Number_nobits$q_47.$$arity = 1);
    
    Opal.def(self, '$nonzero?', TMP_Number_nonzero$q_48 = function() {
      var self = this;

      return self == 0 ? nil : self;
    }, TMP_Number_nonzero$q_48.$$arity = 0);
    
    Opal.def(self, '$numerator', TMP_Number_numerator_49 = function $$numerator() {
      var $a, $iter = TMP_Number_numerator_49.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_numerator_49.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
        return self
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'numerator', TMP_Number_numerator_49, false), $zuper, $iter)
      }
    }, TMP_Number_numerator_49.$$arity = 0);
    
    Opal.def(self, '$odd?', TMP_Number_odd$q_50 = function() {
      var self = this;

      return self % 2 !== 0;
    }, TMP_Number_odd$q_50.$$arity = 0);
    
    Opal.def(self, '$ord', TMP_Number_ord_51 = function $$ord() {
      var self = this;

      return self
    }, TMP_Number_ord_51.$$arity = 0);
    
    Opal.def(self, '$pow', TMP_Number_pow_52 = function $$pow(b, m) {
      var self = this;

      
      ;
      
      if (self == 0) {
        self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
      }

      if (m === undefined) {
        return self['$**'](b);
      } else {
        if (!($$($nesting, 'Integer')['$==='](b))) {
          self.$raise($$($nesting, 'TypeError'), "Integer#pow() 2nd argument not allowed unless a 1st argument is integer")
        }

        if (b < 0) {
          self.$raise($$($nesting, 'TypeError'), "Integer#pow() 1st argument cannot be negative when 2nd argument specified")
        }

        if (!($$($nesting, 'Integer')['$==='](m))) {
          self.$raise($$($nesting, 'TypeError'), "Integer#pow() 2nd argument not allowed unless all arguments are integers")
        }

        if (m === 0) {
          self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
        }

        return self['$**'](b)['$%'](m)
      }
    ;
    }, TMP_Number_pow_52.$$arity = -2);
    
    Opal.def(self, '$pred', TMP_Number_pred_53 = function $$pred() {
      var self = this;

      return self - 1;
    }, TMP_Number_pred_53.$$arity = 0);
    
    Opal.def(self, '$quo', TMP_Number_quo_54 = function $$quo(other) {
      var $iter = TMP_Number_quo_54.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_quo_54.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        return $send(self, Opal.find_super_dispatcher(self, 'quo', TMP_Number_quo_54, false), $zuper, $iter)
      } else {
        return $rb_divide(self, other)
      }
    }, TMP_Number_quo_54.$$arity = 1);
    
    Opal.def(self, '$rationalize', TMP_Number_rationalize_55 = function $$rationalize(eps) {
      var $a, $b, self = this, f = nil, n = nil;

      
      ;
      
      if (arguments.length > 1) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        return $$($nesting, 'Rational').$new(self, 1)
      } else if ($truthy(self['$infinite?']())) {
        return self.$raise($$($nesting, 'FloatDomainError'), "Infinity")
      } else if ($truthy(self['$nan?']())) {
        return self.$raise($$($nesting, 'FloatDomainError'), "NaN")
      } else if ($truthy(eps == null)) {
        
        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (n = ($a[1] == null ? nil : $a[1])), $b;
        f = $$($nesting, 'Math').$ldexp(f, $$$($$($nesting, 'Float'), 'MANT_DIG')).$to_i();
        n = $rb_minus(n, $$$($$($nesting, 'Float'), 'MANT_DIG'));
        return $$($nesting, 'Rational').$new($rb_times(2, f), (1)['$<<']($rb_minus(1, n))).$rationalize($$($nesting, 'Rational').$new(1, (1)['$<<']($rb_minus(1, n))));
      } else {
        return self.$to_r().$rationalize(eps)
      };
    }, TMP_Number_rationalize_55.$$arity = -1);
    
    Opal.def(self, '$remainder', TMP_Number_remainder_56 = function $$remainder(y) {
      var self = this;

      return $rb_minus(self, $rb_times(y, $rb_divide(self, y).$truncate()))
    }, TMP_Number_remainder_56.$$arity = 1);
    
    Opal.def(self, '$round', TMP_Number_round_57 = function $$round(ndigits) {
      var $a, $b, self = this, _ = nil, exp = nil;

      
      ;
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        
        if ($truthy(ndigits == null)) {
          return self};
        if ($truthy(($truthy($a = $$($nesting, 'Float')['$==='](ndigits)) ? ndigits['$infinite?']() : $a))) {
          self.$raise($$($nesting, 'RangeError'), "Infinity")};
        ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits, $$($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(ndigits, $$$($$($nesting, 'Integer'), 'MIN')))) {
          self.$raise($$($nesting, 'RangeError'), "out of bounds")};
        if ($truthy(ndigits >= 0)) {
          return self};
        ndigits = ndigits['$-@']();
        
        if (0.415241 * ndigits - 0.125 > self.$size()) {
          return 0;
        }

        var f = Math.pow(10, ndigits),
            x = Math.floor((Math.abs(x) + f / 2) / f) * f;

        return self < 0 ? -x : x;
      ;
      } else {
        
        if ($truthy(($truthy($a = self['$nan?']()) ? ndigits == null : $a))) {
          self.$raise($$($nesting, 'FloatDomainError'), "NaN")};
        ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits || 0, $$($nesting, 'Integer'), "to_int");
        if ($truthy($rb_le(ndigits, 0))) {
          if ($truthy(self['$nan?']())) {
            self.$raise($$($nesting, 'RangeError'), "NaN")
          } else if ($truthy(self['$infinite?']())) {
            self.$raise($$($nesting, 'FloatDomainError'), "Infinity")}
        } else if (ndigits['$=='](0)) {
          return Math.round(self)
        } else if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
          return self};
        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (exp = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy($rb_ge(ndigits, $rb_minus($rb_plus($$$($$($nesting, 'Float'), 'DIG'), 2), (function() {if ($truthy($rb_gt(exp, 0))) {
          return $rb_divide(exp, 4)
        } else {
          return $rb_minus($rb_divide(exp, 3), 1)
        }; return nil; })())))) {
          return self};
        if ($truthy($rb_lt(ndigits, (function() {if ($truthy($rb_gt(exp, 0))) {
          return $rb_plus($rb_divide(exp, 3), 1)
        } else {
          return $rb_divide(exp, 4)
        }; return nil; })()['$-@']()))) {
          return 0};
        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);;
      };
    }, TMP_Number_round_57.$$arity = -1);
    
    Opal.def(self, '$step', TMP_Number_step_58 = function $$step($a, $b, $c) {
      var $iter = TMP_Number_step_58.$$p, block = $iter || nil, $post_args, $kwargs, limit, step, to, by, TMP_59, self = this, positional_args = nil, keyword_args = nil;

      if ($iter) TMP_Number_step_58.$$p = null;
      
      
      if ($iter) TMP_Number_step_58.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      $kwargs = Opal.extract_kwargs($post_args);
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      if ($post_args.length > 0) {
        limit = $post_args[0];
        $post_args.splice(0, 1);
      };
      
      if ($post_args.length > 0) {
        step = $post_args[0];
        $post_args.splice(0, 1);
      };
      
      to = $kwargs.$$smap["to"];;
      
      by = $kwargs.$$smap["by"];;
      
      if (limit !== undefined && to !== undefined) {
        self.$raise($$($nesting, 'ArgumentError'), "to is given twice")
      }

      if (step !== undefined && by !== undefined) {
        self.$raise($$($nesting, 'ArgumentError'), "step is given twice")
      }

      function validateParameters() {
        if (to !== undefined) {
          limit = to;
        }

        if (limit === undefined) {
          limit = nil;
        }

        if (step === nil) {
          self.$raise($$($nesting, 'TypeError'), "step must be numeric")
        }

        if (step === 0) {
          self.$raise($$($nesting, 'ArgumentError'), "step can't be 0")
        }

        if (by !== undefined) {
          step = by;
        }

        if (step === nil || step == null) {
          step = 1;
        }

        var sign = step['$<=>'](0);

        if (sign === nil) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "0 can't be coerced into " + (step.$class()))
        }

        if (limit === nil || limit == null) {
          limit = sign > 0 ? $$$($$($nesting, 'Float'), 'INFINITY') : $$$($$($nesting, 'Float'), 'INFINITY')['$-@']();
        }

        $$($nesting, 'Opal').$compare(self, limit)
      }

      function stepFloatSize() {
        if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else if (step === Infinity || step === -Infinity) {
          return 1;
        } else {
          var abs = Math.abs, floor = Math.floor,
              err = (abs(self) + abs(limit) + abs(limit - self)) / abs(step) * $$$($$($nesting, 'Float'), 'EPSILON');

          if (err === Infinity || err === -Infinity) {
            return 0;
          } else {
            if (err > 0.5) {
              err = 0.5;
            }

            return floor((limit - self) / step + err) + 1
          }
        }
      }

      function stepSize() {
        validateParameters();

        if (step === 0) {
          return Infinity;
        }

        if (step % 1 !== 0) {
          return stepFloatSize();
        } else if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else {
          var ceil = Math.ceil, abs = Math.abs,
              lhs = abs(self - limit) + 1,
              rhs = abs(step);

          return ceil(lhs / rhs);
        }
      }
    ;
      if ((block !== nil)) {
      } else {
        
        positional_args = [];
        keyword_args = $hash2([], {});
        
        if (limit !== undefined) {
          positional_args.push(limit);
        }

        if (step !== undefined) {
          positional_args.push(step);
        }

        if (to !== undefined) {
          Opal.hash_put(keyword_args, "to", to);
        }

        if (by !== undefined) {
          Opal.hash_put(keyword_args, "by", by);
        }

        if (keyword_args['$any?']()) {
          positional_args.push(keyword_args);
        }
      ;
        return $send(self, 'enum_for', ["step"].concat(Opal.to_a(positional_args)), (TMP_59 = function(){var self = TMP_59.$$s || this;

        return stepSize();}, TMP_59.$$s = self, TMP_59.$$arity = 0, TMP_59));
      };
      
      validateParameters();

      if (step === 0) {
        while (true) {
          block(self);
        }
      }

      if (self % 1 !== 0 || limit % 1 !== 0 || step % 1 !== 0) {
        var n = stepFloatSize();

        if (n > 0) {
          if (step === Infinity || step === -Infinity) {
            block(self);
          } else {
            var i = 0, d;

            if (step > 0) {
              while (i < n) {
                d = i * step + self;
                if (limit < d) {
                  d = limit;
                }
                block(d);
                i += 1;
              }
            } else {
              while (i < n) {
                d = i * step + self;
                if (limit > d) {
                  d = limit;
                }
                block(d);
                i += 1
              }
            }
          }
        }
      } else {
        var value = self;

        if (step > 0) {
          while (value <= limit) {
            block(value);
            value += step;
          }
        } else {
          while (value >= limit) {
            block(value);
            value += step
          }
        }
      }

      return self;
    ;
    }, TMP_Number_step_58.$$arity = -1);
    Opal.alias(self, "succ", "next");
    
    Opal.def(self, '$times', TMP_Number_times_60 = function $$times() {
      var $iter = TMP_Number_times_60.$$p, block = $iter || nil, TMP_61, self = this;

      if ($iter) TMP_Number_times_60.$$p = null;
      
      
      if ($iter) TMP_Number_times_60.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["times"], (TMP_61 = function(){var self = TMP_61.$$s || this;

        return self}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61))
      };
      
      for (var i = 0; i < self; i++) {
        block(i);
      }
    ;
      return self;
    }, TMP_Number_times_60.$$arity = 0);
    
    Opal.def(self, '$to_f', TMP_Number_to_f_62 = function $$to_f() {
      var self = this;

      return self
    }, TMP_Number_to_f_62.$$arity = 0);
    
    Opal.def(self, '$to_i', TMP_Number_to_i_63 = function $$to_i() {
      var self = this;

      return parseInt(self, 10);
    }, TMP_Number_to_i_63.$$arity = 0);
    Opal.alias(self, "to_int", "to_i");
    
    Opal.def(self, '$to_r', TMP_Number_to_r_64 = function $$to_r() {
      var $a, $b, self = this, f = nil, e = nil;

      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        return $$($nesting, 'Rational').$new(self, 1)
      } else {
        
        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (e = ($a[1] == null ? nil : $a[1])), $b;
        f = $$($nesting, 'Math').$ldexp(f, $$$($$($nesting, 'Float'), 'MANT_DIG')).$to_i();
        e = $rb_minus(e, $$$($$($nesting, 'Float'), 'MANT_DIG'));
        return $rb_times(f, $$$($$($nesting, 'Float'), 'RADIX')['$**'](e)).$to_r();
      }
    }, TMP_Number_to_r_64.$$arity = 0);
    
    Opal.def(self, '$to_s', TMP_Number_to_s_65 = function $$to_s(base) {
      var $a, self = this;

      
      
      if (base == null) {
        base = 10;
      };
      base = $$($nesting, 'Opal')['$coerce_to!'](base, $$($nesting, 'Integer'), "to_int");
      if ($truthy(($truthy($a = $rb_lt(base, 2)) ? $a : $rb_gt(base, 36)))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (base))};
      return self.toString(base);;
    }, TMP_Number_to_s_65.$$arity = -1);
    
    Opal.def(self, '$truncate', TMP_Number_truncate_66 = function $$truncate(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = parseInt(f * factor, 10) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, TMP_Number_truncate_66.$$arity = -1);
    Opal.alias(self, "inspect", "to_s");
    
    Opal.def(self, '$digits', TMP_Number_digits_67 = function $$digits(base) {
      var self = this;

      
      
      if (base == null) {
        base = 10;
      };
      if ($rb_lt(self, 0)) {
        self.$raise($$$($$($nesting, 'Math'), 'DomainError'), "out of domain")};
      base = $$($nesting, 'Opal')['$coerce_to!'](base, $$($nesting, 'Integer'), "to_int");
      if ($truthy($rb_lt(base, 2))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (base))};
      
      var value = self, result = [];

      while (value !== 0) {
        result.push(value % base);
        value = parseInt(value / base, 10);
      }

      return result;
    ;
    }, TMP_Number_digits_67.$$arity = -1);
    
    Opal.def(self, '$divmod', TMP_Number_divmod_68 = function $$divmod(other) {
      var $a, $iter = TMP_Number_divmod_68.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_divmod_68.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : other['$nan?']()))) {
        return self.$raise($$($nesting, 'FloatDomainError'), "NaN")
      } else if ($truthy(self['$infinite?']())) {
        return self.$raise($$($nesting, 'FloatDomainError'), "Infinity")
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'divmod', TMP_Number_divmod_68, false), $zuper, $iter)
      }
    }, TMP_Number_divmod_68.$$arity = 1);
    
    Opal.def(self, '$upto', TMP_Number_upto_69 = function $$upto(stop) {
      var $iter = TMP_Number_upto_69.$$p, block = $iter || nil, TMP_70, self = this;

      if ($iter) TMP_Number_upto_69.$$p = null;
      
      
      if ($iter) TMP_Number_upto_69.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["upto", stop], (TMP_70 = function(){var self = TMP_70.$$s || this;

        
          if ($truthy($$($nesting, 'Numeric')['$==='](stop))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_lt(stop, self))) {
            return 0
          } else {
            return $rb_plus($rb_minus(stop, self), 1)
          };}, TMP_70.$$s = self, TMP_70.$$arity = 0, TMP_70))
      };
      
      if (!stop.$$is_number) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i <= stop; i++) {
        block(i);
      }
    ;
      return self;
    }, TMP_Number_upto_69.$$arity = 1);
    
    Opal.def(self, '$zero?', TMP_Number_zero$q_71 = function() {
      var self = this;

      return self == 0;
    }, TMP_Number_zero$q_71.$$arity = 0);
    
    Opal.def(self, '$size', TMP_Number_size_72 = function $$size() {
      var self = this;

      return 4
    }, TMP_Number_size_72.$$arity = 0);
    
    Opal.def(self, '$nan?', TMP_Number_nan$q_73 = function() {
      var self = this;

      return isNaN(self);
    }, TMP_Number_nan$q_73.$$arity = 0);
    
    Opal.def(self, '$finite?', TMP_Number_finite$q_74 = function() {
      var self = this;

      return self != Infinity && self != -Infinity && !isNaN(self);
    }, TMP_Number_finite$q_74.$$arity = 0);
    
    Opal.def(self, '$infinite?', TMP_Number_infinite$q_75 = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    }, TMP_Number_infinite$q_75.$$arity = 0);
    
    Opal.def(self, '$positive?', TMP_Number_positive$q_76 = function() {
      var self = this;

      return self != 0 && (self == Infinity || 1 / self > 0);
    }, TMP_Number_positive$q_76.$$arity = 0);
    return (Opal.def(self, '$negative?', TMP_Number_negative$q_77 = function() {
      var self = this;

      return self == -Infinity || 1 / self < 0;
    }, TMP_Number_negative$q_77.$$arity = 0), nil) && 'negative?';
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  Opal.const_set($nesting[0], 'Fixnum', $$($nesting, 'Number'));
  (function($base, $super, $parent_nesting) {
    function $Integer(){};
    var self = $Integer = $klass($base, $super, 'Integer', $Integer);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_allocate_78, TMP_$eq$eq$eq_79, TMP_sqrt_80;

      
      
      Opal.def(self, '$allocate', TMP_allocate_78 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, TMP_allocate_78.$$arity = 0);
      
      Opal.udef(self, '$' + "new");;
      
      Opal.def(self, '$===', TMP_$eq$eq$eq_79 = function(other) {
        var self = this;

        
        if (!other.$$is_number) {
          return false;
        }

        return (other % 1) === 0;
      
      }, TMP_$eq$eq$eq_79.$$arity = 1);
      return (Opal.def(self, '$sqrt', TMP_sqrt_80 = function $$sqrt(n) {
        var self = this;

        
        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
        
        if (n < 0) {
          self.$raise($$$($$($nesting, 'Math'), 'DomainError'), "Numerical argument is out of domain - \"isqrt\"")
        }

        return parseInt(Math.sqrt(n), 10);
      ;
      }, TMP_sqrt_80.$$arity = 1), nil) && 'sqrt';
    })(Opal.get_singleton_class(self), $nesting);
    Opal.const_set($nesting[0], 'MAX', Math.pow(2, 30) - 1);
    return Opal.const_set($nesting[0], 'MIN', -Math.pow(2, 30));
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Float(){};
    var self = $Float = $klass($base, $super, 'Float', $Float);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_allocate_81, TMP_$eq$eq$eq_82;

      
      
      Opal.def(self, '$allocate', TMP_allocate_81 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, TMP_allocate_81.$$arity = 0);
      
      Opal.udef(self, '$' + "new");;
      return (Opal.def(self, '$===', TMP_$eq$eq$eq_82 = function(other) {
        var self = this;

        return !!other.$$is_number;
      }, TMP_$eq$eq$eq_82.$$arity = 1), nil) && '===';
    })(Opal.get_singleton_class(self), $nesting);
    Opal.const_set($nesting[0], 'INFINITY', Infinity);
    Opal.const_set($nesting[0], 'MAX', Number.MAX_VALUE);
    Opal.const_set($nesting[0], 'MIN', Number.MIN_VALUE);
    Opal.const_set($nesting[0], 'NAN', NaN);
    Opal.const_set($nesting[0], 'DIG', 15);
    Opal.const_set($nesting[0], 'MANT_DIG', 53);
    Opal.const_set($nesting[0], 'RADIX', 2);
    return Opal.const_set($nesting[0], 'EPSILON', Number.EPSILON || 2.2204460492503130808472633361816E-16);
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/range"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$raise', '$<=>', '$include?', '$<=', '$<', '$enum_for', '$upto', '$to_proc', '$respond_to?', '$class', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$last', '$to_a', '$>', '$-', '$abs', '$to_i', '$coerce_to!', '$ceil', '$/', '$size', '$loop', '$+', '$*', '$>=', '$each_with_index', '$%', '$bsearch', '$inspect', '$[]', '$hash']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Range(){};
    var self = $Range = $klass($base, $super, 'Range', $Range);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Range_initialize_1, TMP_Range_$eq$eq_2, TMP_Range_$eq$eq$eq_3, TMP_Range_cover$q_4, TMP_Range_each_5, TMP_Range_eql$q_6, TMP_Range_exclude_end$q_7, TMP_Range_first_8, TMP_Range_last_9, TMP_Range_max_10, TMP_Range_min_11, TMP_Range_size_12, TMP_Range_step_13, TMP_Range_bsearch_17, TMP_Range_to_s_18, TMP_Range_inspect_19, TMP_Range_marshal_load_20, TMP_Range_hash_21;

    def.begin = def.end = def.excl = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    def.$$is_range = true;
    self.$attr_reader("begin", "end");
    
    Opal.def(self, '$initialize', TMP_Range_initialize_1 = function $$initialize(first, last, exclude) {
      var self = this;

      
      
      if (exclude == null) {
        exclude = false;
      };
      if ($truthy(self.begin)) {
        self.$raise($$($nesting, 'NameError'), "'initialize' called twice")};
      if ($truthy(first['$<=>'](last))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "bad value for range")
      };
      self.begin = first;
      self.end = last;
      return (self.excl = exclude);
    }, TMP_Range_initialize_1.$$arity = -3);
    
    Opal.def(self, '$==', TMP_Range_$eq$eq_2 = function(other) {
      var self = this;

      
      if (!other.$$is_range) {
        return false;
      }

      return self.excl  === other.excl &&
             self.begin ==  other.begin &&
             self.end   ==  other.end;
    
    }, TMP_Range_$eq$eq_2.$$arity = 1);
    
    Opal.def(self, '$===', TMP_Range_$eq$eq$eq_3 = function(value) {
      var self = this;

      return self['$include?'](value)
    }, TMP_Range_$eq$eq$eq_3.$$arity = 1);
    
    Opal.def(self, '$cover?', TMP_Range_cover$q_4 = function(value) {
      var $a, self = this, beg_cmp = nil, end_cmp = nil;

      
      beg_cmp = self.begin['$<=>'](value);
      if ($truthy(($truthy($a = beg_cmp) ? $rb_le(beg_cmp, 0) : $a))) {
      } else {
        return false
      };
      end_cmp = value['$<=>'](self.end);
      if ($truthy(self.excl)) {
        return ($truthy($a = end_cmp) ? $rb_lt(end_cmp, 0) : $a)
      } else {
        return ($truthy($a = end_cmp) ? $rb_le(end_cmp, 0) : $a)
      };
    }, TMP_Range_cover$q_4.$$arity = 1);
    
    Opal.def(self, '$each', TMP_Range_each_5 = function $$each() {
      var $iter = TMP_Range_each_5.$$p, block = $iter || nil, $a, self = this, current = nil, last = nil;

      if ($iter) TMP_Range_each_5.$$p = null;
      
      
      if ($iter) TMP_Range_each_5.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each")
      };
      
      var i, limit;

      if (self.begin.$$is_number && self.end.$$is_number) {
        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {
          self.$raise($$($nesting, 'TypeError'), "can't iterate from Float")
        }

        for (i = self.begin, limit = self.end + (function() {if ($truthy(self.excl)) {
        return 0
      } else {
        return 1
      }; return nil; })(); i < limit; i++) {
          block(i);
        }

        return self;
      }

      if (self.begin.$$is_string && self.end.$$is_string) {
        $send(self.begin, 'upto', [self.end, self.excl], block.$to_proc())
        return self;
      }
    ;
      current = self.begin;
      last = self.end;
      if ($truthy(current['$respond_to?']("succ"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't iterate from " + (current.$class()))
      };
      while ($truthy($rb_lt(current['$<=>'](last), 0))) {
        
        Opal.yield1(block, current);
        current = current.$succ();
      };
      if ($truthy(($truthy($a = self.excl['$!']()) ? current['$=='](last) : $a))) {
        Opal.yield1(block, current)};
      return self;
    }, TMP_Range_each_5.$$arity = 0);
    
    Opal.def(self, '$eql?', TMP_Range_eql$q_6 = function(other) {
      var $a, $b, self = this;

      
      if ($truthy($$($nesting, 'Range')['$==='](other))) {
      } else {
        return false
      };
      return ($truthy($a = ($truthy($b = self.excl['$==='](other['$exclude_end?']())) ? self.begin['$eql?'](other.$begin()) : $b)) ? self.end['$eql?'](other.$end()) : $a);
    }, TMP_Range_eql$q_6.$$arity = 1);
    
    Opal.def(self, '$exclude_end?', TMP_Range_exclude_end$q_7 = function() {
      var self = this;

      return self.excl
    }, TMP_Range_exclude_end$q_7.$$arity = 0);
    
    Opal.def(self, '$first', TMP_Range_first_8 = function $$first(n) {
      var $iter = TMP_Range_first_8.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Range_first_8.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      ;
      if ($truthy(n == null)) {
        return self.begin};
      return $send(self, Opal.find_super_dispatcher(self, 'first', TMP_Range_first_8, false), $zuper, $iter);
    }, TMP_Range_first_8.$$arity = -1);
    Opal.alias(self, "include?", "cover?");
    
    Opal.def(self, '$last', TMP_Range_last_9 = function $$last(n) {
      var self = this;

      
      ;
      if ($truthy(n == null)) {
        return self.end};
      return self.$to_a().$last(n);
    }, TMP_Range_last_9.$$arity = -1);
    
    Opal.def(self, '$max', TMP_Range_max_10 = function $$max() {
      var $a, $iter = TMP_Range_max_10.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Range_max_10.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if (($yield !== nil)) {
        return $send(self, Opal.find_super_dispatcher(self, 'max', TMP_Range_max_10, false), $zuper, $iter)
      } else if ($truthy($rb_gt(self.begin, self.end))) {
        return nil
      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {
        return nil
      } else {
        return self.excl ? self.end - 1 : self.end
      }
    }, TMP_Range_max_10.$$arity = 0);
    Opal.alias(self, "member?", "cover?");
    
    Opal.def(self, '$min', TMP_Range_min_11 = function $$min() {
      var $a, $iter = TMP_Range_min_11.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Range_min_11.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if (($yield !== nil)) {
        return $send(self, Opal.find_super_dispatcher(self, 'min', TMP_Range_min_11, false), $zuper, $iter)
      } else if ($truthy($rb_gt(self.begin, self.end))) {
        return nil
      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {
        return nil
      } else {
        return self.begin
      }
    }, TMP_Range_min_11.$$arity = 0);
    
    Opal.def(self, '$size', TMP_Range_size_12 = function $$size() {
      var $a, self = this, range_begin = nil, range_end = nil, infinity = nil;

      
      range_begin = self.begin;
      range_end = self.end;
      if ($truthy(self.excl)) {
        range_end = $rb_minus(range_end, 1)};
      if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](range_begin)) ? $$($nesting, 'Numeric')['$==='](range_end) : $a))) {
      } else {
        return nil
      };
      if ($truthy($rb_lt(range_end, range_begin))) {
        return 0};
      infinity = $$$($$($nesting, 'Float'), 'INFINITY');
      if ($truthy([range_begin.$abs(), range_end.$abs()]['$include?'](infinity))) {
        return infinity};
      return (Math.abs(range_end - range_begin) + 1).$to_i();
    }, TMP_Range_size_12.$$arity = 0);
    
    Opal.def(self, '$step', TMP_Range_step_13 = function $$step(n) {
      var TMP_14, TMP_15, TMP_16, $iter = TMP_Range_step_13.$$p, $yield = $iter || nil, self = this, i = nil;

      if ($iter) TMP_Range_step_13.$$p = null;
      
      
      if (n == null) {
        n = 1;
      };
      
      function coerceStepSize() {
        if (!n.$$is_number) {
          n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int")
        }

        if (n < 0) {
          self.$raise($$($nesting, 'ArgumentError'), "step can't be negative")
        } else if (n === 0) {
          self.$raise($$($nesting, 'ArgumentError'), "step can't be 0")
        }
      }

      function enumeratorSize() {
        if (!self.begin['$respond_to?']("succ")) {
          return nil;
        }

        if (self.begin.$$is_string && self.end.$$is_string) {
          return nil;
        }

        if (n % 1 === 0) {
          return $rb_divide(self.$size(), n).$ceil();
        } else {
          // n is a float
          var begin = self.begin, end = self.end,
              abs = Math.abs, floor = Math.floor,
              err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * $$$($$($nesting, 'Float'), 'EPSILON'),
              size;

          if (err > 0.5) {
            err = 0.5;
          }

          if (self.excl) {
            size = floor((end - begin) / n - err);
            if (size * n + begin < end) {
              size++;
            }
          } else {
            size = floor((end - begin) / n + err) + 1
          }

          return size;
        }
      }
    ;
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["step", n], (TMP_14 = function(){var self = TMP_14.$$s || this;

        
          coerceStepSize();
          return enumeratorSize();
        }, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14))
      };
      coerceStepSize();
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
        
        i = 0;
        (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], (TMP_15 = function(){var self = TMP_15.$$s || this, current = nil;
          if (self.begin == null) self.begin = nil;
          if (self.excl == null) self.excl = nil;
          if (self.end == null) self.end = nil;

        
          current = $rb_plus(self.begin, $rb_times(i, n));
          if ($truthy(self.excl)) {
            if ($truthy($rb_ge(current, self.end))) {
              
              Opal.brk(nil, $brk)}
          } else if ($truthy($rb_gt(current, self.end))) {
            
            Opal.brk(nil, $brk)};
          Opal.yield1($yield, current);
          return (i = $rb_plus(i, 1));}, TMP_15.$$s = self, TMP_15.$$brk = $brk, TMP_15.$$arity = 0, TMP_15))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      } else {
        
        
        if (self.begin.$$is_string && self.end.$$is_string && n % 1 !== 0) {
          self.$raise($$($nesting, 'TypeError'), "no implicit conversion to float from string")
        }
      ;
        $send(self, 'each_with_index', [], (TMP_16 = function(value, idx){var self = TMP_16.$$s || this;

        
          
          if (value == null) {
            value = nil;
          };
          
          if (idx == null) {
            idx = nil;
          };
          if (idx['$%'](n)['$=='](0)) {
            return Opal.yield1($yield, value);
          } else {
            return nil
          };}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16));
      };
      return self;
    }, TMP_Range_step_13.$$arity = -1);
    
    Opal.def(self, '$bsearch', TMP_Range_bsearch_17 = function $$bsearch() {
      var $iter = TMP_Range_bsearch_17.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Range_bsearch_17.$$p = null;
      
      
      if ($iter) TMP_Range_bsearch_17.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("bsearch")
      };
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't do binary search for " + (self.begin.$class()))
      };
      return $send(self.$to_a(), 'bsearch', [], block.$to_proc());
    }, TMP_Range_bsearch_17.$$arity = 0);
    
    Opal.def(self, '$to_s', TMP_Range_to_s_18 = function $$to_s() {
      var self = this;

      return "" + (self.begin) + ((function() {if ($truthy(self.excl)) {
        return "..."
      } else {
        return ".."
      }; return nil; })()) + (self.end)
    }, TMP_Range_to_s_18.$$arity = 0);
    
    Opal.def(self, '$inspect', TMP_Range_inspect_19 = function $$inspect() {
      var self = this;

      return "" + (self.begin.$inspect()) + ((function() {if ($truthy(self.excl)) {
        return "..."
      } else {
        return ".."
      }; return nil; })()) + (self.end.$inspect())
    }, TMP_Range_inspect_19.$$arity = 0);
    
    Opal.def(self, '$marshal_load', TMP_Range_marshal_load_20 = function $$marshal_load(args) {
      var self = this;

      
      self.begin = args['$[]']("begin");
      self.end = args['$[]']("end");
      return (self.excl = args['$[]']("excl"));
    }, TMP_Range_marshal_load_20.$$arity = 1);
    return (Opal.def(self, '$hash', TMP_Range_hash_21 = function $$hash() {
      var self = this;

      return [self.begin, self.end, self.excl].$hash()
    }, TMP_Range_hash_21.$$arity = 0), nil) && 'hash';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/proc"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$coerce_to!']);
  return (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Proc_new_1, TMP_Proc_call_2, TMP_Proc_to_proc_3, TMP_Proc_lambda$q_4, TMP_Proc_arity_5, TMP_Proc_source_location_6, TMP_Proc_binding_7, TMP_Proc_parameters_8, TMP_Proc_curry_9, TMP_Proc_dup_10;

    
    Opal.defineProperty(Function.prototype, '$$is_proc', true);
    Opal.defineProperty(Function.prototype, '$$is_lambda', false);
    Opal.defs(self, '$new', TMP_Proc_new_1 = function() {
      var $iter = TMP_Proc_new_1.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Proc_new_1.$$p = null;
      
      
      if ($iter) TMP_Proc_new_1.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    }, TMP_Proc_new_1.$$arity = 0);
    
    Opal.def(self, '$call', TMP_Proc_call_2 = function $$call($a) {
      var $iter = TMP_Proc_call_2.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_Proc_call_2.$$p = null;
      
      
      if ($iter) TMP_Proc_call_2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result, $brk = self.$$brk;

      if ($brk) {
        try {
          if (self.$$is_lambda) {
            result = self.apply(null, args);
          }
          else {
            result = Opal.yieldX(self, args);
          }
        } catch (err) {
          if (err === $brk) {
            return $brk.$v
          }
          else {
            throw err
          }
        }
      }
      else {
        if (self.$$is_lambda) {
          result = self.apply(null, args);
        }
        else {
          result = Opal.yieldX(self, args);
        }
      }

      return result;
    ;
    }, TMP_Proc_call_2.$$arity = -1);
    Opal.alias(self, "[]", "call");
    Opal.alias(self, "===", "call");
    Opal.alias(self, "yield", "call");
    
    Opal.def(self, '$to_proc', TMP_Proc_to_proc_3 = function $$to_proc() {
      var self = this;

      return self
    }, TMP_Proc_to_proc_3.$$arity = 0);
    
    Opal.def(self, '$lambda?', TMP_Proc_lambda$q_4 = function() {
      var self = this;

      return !!self.$$is_lambda;
    }, TMP_Proc_lambda$q_4.$$arity = 0);
    
    Opal.def(self, '$arity', TMP_Proc_arity_5 = function $$arity() {
      var self = this;

      
      if (self.$$is_curried) {
        return -1;
      } else {
        return self.$$arity;
      }
    
    }, TMP_Proc_arity_5.$$arity = 0);
    
    Opal.def(self, '$source_location', TMP_Proc_source_location_6 = function $$source_location() {
      var self = this;

      
      if (self.$$is_curried) { return nil; };
      return nil;
    }, TMP_Proc_source_location_6.$$arity = 0);
    
    Opal.def(self, '$binding', TMP_Proc_binding_7 = function $$binding() {
      var self = this;

      
      if (self.$$is_curried) { self.$raise($$($nesting, 'ArgumentError'), "Can't create Binding") };
      return nil;
    }, TMP_Proc_binding_7.$$arity = 0);
    
    Opal.def(self, '$parameters', TMP_Proc_parameters_8 = function $$parameters() {
      var self = this;

      
      if (self.$$is_curried) {
        return [["rest"]];
      } else if (self.$$parameters) {
        if (self.$$is_lambda) {
          return self.$$parameters;
        } else {
          var result = [], i, length;

          for (i = 0, length = self.$$parameters.length; i < length; i++) {
            var parameter = self.$$parameters[i];

            if (parameter[0] === 'req') {
              // required arguments always have name
              parameter = ['opt', parameter[1]];
            }

            result.push(parameter);
          }

          return result;
        }
      } else {
        return [];
      }
    
    }, TMP_Proc_parameters_8.$$arity = 0);
    
    Opal.def(self, '$curry', TMP_Proc_curry_9 = function $$curry(arity) {
      var self = this;

      
      ;
      
      if (arity === undefined) {
        arity = self.length;
      }
      else {
        arity = $$($nesting, 'Opal')['$coerce_to!'](arity, $$($nesting, 'Integer'), "to_int");
        if (self.$$is_lambda && arity !== self.length) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arity) + " for " + (self.length) + ")")
        }
      }

      function curried () {
        var args = $slice.call(arguments),
            length = args.length,
            result;

        if (length > arity && self.$$is_lambda && !self.$$is_curried) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (length) + " for " + (arity) + ")")
        }

        if (length >= arity) {
          return self.$call.apply(self, args);
        }

        result = function () {
          return curried.apply(null,
            args.concat($slice.call(arguments)));
        }
        result.$$is_lambda = self.$$is_lambda;
        result.$$is_curried = true;

        return result;
      };

      curried.$$is_lambda = self.$$is_lambda;
      curried.$$is_curried = true;
      return curried;
    ;
    }, TMP_Proc_curry_9.$$arity = -1);
    
    Opal.def(self, '$dup', TMP_Proc_dup_10 = function $$dup() {
      var self = this;

      
      var original_proc = self.$$original_proc || self,
          proc = function () {
            return original_proc.apply(this, arguments);
          };

      for (var prop in self) {
        if (self.hasOwnProperty(prop)) {
          proc[prop] = self[prop];
        }
      }

      return proc;
    
    }, TMP_Proc_dup_10.$$arity = 0);
    return Opal.alias(self, "clone", "dup");
  })($nesting[0], Function, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/method"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$arity', '$new', '$class', '$join', '$source_location', '$raise']);
  
  (function($base, $super, $parent_nesting) {
    function $Method(){};
    var self = $Method = $klass($base, $super, 'Method', $Method);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Method_initialize_1, TMP_Method_arity_2, TMP_Method_parameters_3, TMP_Method_source_location_4, TMP_Method_comments_5, TMP_Method_call_6, TMP_Method_unbind_7, TMP_Method_to_proc_8, TMP_Method_inspect_9;

    def.method = def.receiver = def.owner = def.name = nil;
    
    self.$attr_reader("owner", "receiver", "name");
    
    Opal.def(self, '$initialize', TMP_Method_initialize_1 = function $$initialize(receiver, owner, method, name) {
      var self = this;

      
      self.receiver = receiver;
      self.owner = owner;
      self.name = name;
      return (self.method = method);
    }, TMP_Method_initialize_1.$$arity = 4);
    
    Opal.def(self, '$arity', TMP_Method_arity_2 = function $$arity() {
      var self = this;

      return self.method.$arity()
    }, TMP_Method_arity_2.$$arity = 0);
    
    Opal.def(self, '$parameters', TMP_Method_parameters_3 = function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, TMP_Method_parameters_3.$$arity = 0);
    
    Opal.def(self, '$source_location', TMP_Method_source_location_4 = function $$source_location() {
      var $a, self = this;

      return ($truthy($a = self.method.$$source_location) ? $a : ["(eval)", 0])
    }, TMP_Method_source_location_4.$$arity = 0);
    
    Opal.def(self, '$comments', TMP_Method_comments_5 = function $$comments() {
      var $a, self = this;

      return ($truthy($a = self.method.$$comments) ? $a : [])
    }, TMP_Method_comments_5.$$arity = 0);
    
    Opal.def(self, '$call', TMP_Method_call_6 = function $$call($a) {
      var $iter = TMP_Method_call_6.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_Method_call_6.$$p = null;
      
      
      if ($iter) TMP_Method_call_6.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    ;
    }, TMP_Method_call_6.$$arity = -1);
    Opal.alias(self, "[]", "call");
    
    Opal.def(self, '$unbind', TMP_Method_unbind_7 = function $$unbind() {
      var self = this;

      return $$($nesting, 'UnboundMethod').$new(self.receiver.$class(), self.owner, self.method, self.name)
    }, TMP_Method_unbind_7.$$arity = 0);
    
    Opal.def(self, '$to_proc', TMP_Method_to_proc_8 = function $$to_proc() {
      var self = this;

      
      var proc = self.$call.bind(self);
      proc.$$unbound = self.method;
      proc.$$is_lambda = true;
      return proc;
    
    }, TMP_Method_to_proc_8.$$arity = 0);
    return (Opal.def(self, '$inspect', TMP_Method_inspect_9 = function $$inspect() {
      var self = this;

      return "" + "#<" + (self.$class()) + ": " + (self.receiver.$class()) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, TMP_Method_inspect_9.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $UnboundMethod(){};
    var self = $UnboundMethod = $klass($base, $super, 'UnboundMethod', $UnboundMethod);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_UnboundMethod_initialize_10, TMP_UnboundMethod_arity_11, TMP_UnboundMethod_parameters_12, TMP_UnboundMethod_source_location_13, TMP_UnboundMethod_comments_14, TMP_UnboundMethod_bind_15, TMP_UnboundMethod_inspect_16;

    def.method = def.owner = def.name = def.source = nil;
    
    self.$attr_reader("source", "owner", "name");
    
    Opal.def(self, '$initialize', TMP_UnboundMethod_initialize_10 = function $$initialize(source, owner, method, name) {
      var self = this;

      
      self.source = source;
      self.owner = owner;
      self.method = method;
      return (self.name = name);
    }, TMP_UnboundMethod_initialize_10.$$arity = 4);
    
    Opal.def(self, '$arity', TMP_UnboundMethod_arity_11 = function $$arity() {
      var self = this;

      return self.method.$arity()
    }, TMP_UnboundMethod_arity_11.$$arity = 0);
    
    Opal.def(self, '$parameters', TMP_UnboundMethod_parameters_12 = function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, TMP_UnboundMethod_parameters_12.$$arity = 0);
    
    Opal.def(self, '$source_location', TMP_UnboundMethod_source_location_13 = function $$source_location() {
      var $a, self = this;

      return ($truthy($a = self.method.$$source_location) ? $a : ["(eval)", 0])
    }, TMP_UnboundMethod_source_location_13.$$arity = 0);
    
    Opal.def(self, '$comments', TMP_UnboundMethod_comments_14 = function $$comments() {
      var $a, self = this;

      return ($truthy($a = self.method.$$comments) ? $a : [])
    }, TMP_UnboundMethod_comments_14.$$arity = 0);
    
    Opal.def(self, '$bind', TMP_UnboundMethod_bind_15 = function $$bind(object) {
      var self = this;

      
      if (self.owner.$$is_module || Opal.is_a(object, self.owner)) {
        return $$($nesting, 'Method').$new(object, self.owner, self.method, self.name);
      }
      else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't bind singleton method to a different class (expected " + (object) + ".kind_of?(" + (self.owner) + " to be true)");
      }
    
    }, TMP_UnboundMethod_bind_15.$$arity = 1);
    return (Opal.def(self, '$inspect', TMP_UnboundMethod_inspect_16 = function $$inspect() {
      var self = this;

      return "" + "#<" + (self.$class()) + ": " + (self.source) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, TMP_UnboundMethod_inspect_16.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/variables"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new']);
  
  $gvars['&'] = $gvars['~'] = $gvars['`'] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = ($gvars["\""] = Opal.loaded_features);
  $gvars.LOAD_PATH = ($gvars[":"] = []);
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  Opal.const_set($nesting[0], 'ARGV', []);
  Opal.const_set($nesting[0], 'ARGF', $$($nesting, 'Object').$new());
  Opal.const_set($nesting[0], 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  return ($gvars.SAFE = 0);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$new']);
  return (function($base, $parent_nesting) {
    function $Opal() {};
    var self = $Opal = $module($base, 'Opal', $Opal);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'REGEXP_START', (function() {if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "^"
    } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'REGEXP_END', (function() {if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "$"
    } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'INLINE_IDENTIFIER_REGEXP', $$($nesting, 'Regexp').$new("" + "[^" + ($$($nesting, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($$($nesting, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));
    Opal.const_set($nesting[0], 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'CONST_NAME_REGEXP', $$($nesting, 'Regexp').$new("" + ($$($nesting, 'REGEXP_START')) + "(::)?[A-Z][^" + ($$($nesting, 'FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($$($nesting, 'REGEXP_END'))));
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/mini"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/base");
  self.$require("corelib/nil");
  self.$require("corelib/boolean");
  self.$require("corelib/string");
  self.$require("corelib/comparable");
  self.$require("corelib/enumerable");
  self.$require("corelib/enumerator");
  self.$require("corelib/array");
  self.$require("corelib/hash");
  self.$require("corelib/number");
  self.$require("corelib/range");
  self.$require("corelib/proc");
  self.$require("corelib/method");
  self.$require("corelib/regexp");
  self.$require("corelib/variables");
  return self.$require("opal/regexp_anchors");
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/string/encoding"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var TMP_12, TMP_15, TMP_18, TMP_21, TMP_24, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$to_proc', '$each', '$const_set', '$sub', '$==', '$default_external', '$upcase', '$raise', '$attr_accessor', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$bytesize', '$enum_for', '$force_encoding', '$dup', '$coerce_to!', '$find', '$getbyte']);
  
  self.$require("corelib/string");
  (function($base, $super, $parent_nesting) {
    function $Encoding(){};
    var self = $Encoding = $klass($base, $super, 'Encoding', $Encoding);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Encoding_register_1, TMP_Encoding_find_3, TMP_Encoding_initialize_4, TMP_Encoding_ascii_compatible$q_5, TMP_Encoding_dummy$q_6, TMP_Encoding_to_s_7, TMP_Encoding_inspect_8, TMP_Encoding_each_byte_9, TMP_Encoding_getbyte_10, TMP_Encoding_bytesize_11;

    def.ascii = def.dummy = def.name = nil;
    
    Opal.defineProperty(self, '$$register', {});
    Opal.defs(self, '$register', TMP_Encoding_register_1 = function $$register(name, options) {
      var $iter = TMP_Encoding_register_1.$$p, block = $iter || nil, $a, TMP_2, self = this, names = nil, encoding = nil, register = nil;

      if ($iter) TMP_Encoding_register_1.$$p = null;
      
      
      if ($iter) TMP_Encoding_register_1.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      names = $rb_plus([name], ($truthy($a = options['$[]']("aliases")) ? $a : []));
      encoding = $send($$($nesting, 'Class'), 'new', [self], block.$to_proc()).$new(name, names, ($truthy($a = options['$[]']("ascii")) ? $a : false), ($truthy($a = options['$[]']("dummy")) ? $a : false));
      register = self["$$register"];
      return $send(names, 'each', [], (TMP_2 = function(encoding_name){var self = TMP_2.$$s || this;

      
        
        if (encoding_name == null) {
          encoding_name = nil;
        };
        self.$const_set(encoding_name.$sub("-", "_"), encoding);
        return register["" + "$$" + (encoding_name)] = encoding;}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
    }, TMP_Encoding_register_1.$$arity = -2);
    Opal.defs(self, '$find', TMP_Encoding_find_3 = function $$find(name) {
      var $a, self = this, register = nil, encoding = nil;

      
      if (name['$==']("default_external")) {
        return self.$default_external()};
      register = self["$$register"];
      encoding = ($truthy($a = register["" + "$$" + (name)]) ? $a : register["" + "$$" + (name.$upcase())]);
      if ($truthy(encoding)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "unknown encoding name - " + (name))
      };
      return encoding;
    }, TMP_Encoding_find_3.$$arity = 1);
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("default_external")
    })(Opal.get_singleton_class(self), $nesting);
    self.$attr_reader("name", "names");
    
    Opal.def(self, '$initialize', TMP_Encoding_initialize_4 = function $$initialize(name, names, ascii, dummy) {
      var self = this;

      
      self.name = name;
      self.names = names;
      self.ascii = ascii;
      return (self.dummy = dummy);
    }, TMP_Encoding_initialize_4.$$arity = 4);
    
    Opal.def(self, '$ascii_compatible?', TMP_Encoding_ascii_compatible$q_5 = function() {
      var self = this;

      return self.ascii
    }, TMP_Encoding_ascii_compatible$q_5.$$arity = 0);
    
    Opal.def(self, '$dummy?', TMP_Encoding_dummy$q_6 = function() {
      var self = this;

      return self.dummy
    }, TMP_Encoding_dummy$q_6.$$arity = 0);
    
    Opal.def(self, '$to_s', TMP_Encoding_to_s_7 = function $$to_s() {
      var self = this;

      return self.name
    }, TMP_Encoding_to_s_7.$$arity = 0);
    
    Opal.def(self, '$inspect', TMP_Encoding_inspect_8 = function $$inspect() {
      var self = this;

      return "" + "#<Encoding:" + (self.name) + ((function() {if ($truthy(self.dummy)) {
        return " (dummy)"
      } else {
        return nil
      }; return nil; })()) + ">"
    }, TMP_Encoding_inspect_8.$$arity = 0);
    
    Opal.def(self, '$each_byte', TMP_Encoding_each_byte_9 = function $$each_byte($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, TMP_Encoding_each_byte_9.$$arity = -1);
    
    Opal.def(self, '$getbyte', TMP_Encoding_getbyte_10 = function $$getbyte($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, TMP_Encoding_getbyte_10.$$arity = -1);
    
    Opal.def(self, '$bytesize', TMP_Encoding_bytesize_11 = function $$bytesize($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, TMP_Encoding_bytesize_11.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      function $EncodingError(){};
      var self = $EncodingError = $klass($base, $super, 'EncodingError', $EncodingError);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    return (function($base, $super, $parent_nesting) {
      function $CompatibilityError(){};
      var self = $CompatibilityError = $klass($base, $super, 'CompatibilityError', $CompatibilityError);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'EncodingError'), $nesting);
  })($nesting[0], null, $nesting);
  $send($$($nesting, 'Encoding'), 'register', ["UTF-8", $hash2(["aliases", "ascii"], {"aliases": ["CP65001"], "ascii": true})], (TMP_12 = function(){var self = TMP_12.$$s || this, TMP_each_byte_13, TMP_bytesize_14;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_13 = function $$each_byte(string) {
      var $iter = TMP_each_byte_13.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_each_byte_13.$$p = null;
      
      
      if ($iter) TMP_each_byte_13.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        if (code <= 0x7f) {
          Opal.yield1(block, code);
        }
        else {
          var encoded = encodeURIComponent(string.charAt(i)).substr(1).split('%');

          for (var j = 0, encoded_length = encoded.length; j < encoded_length; j++) {
            Opal.yield1(block, parseInt(encoded[j], 16));
          }
        }
      }
    ;
    }, TMP_each_byte_13.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_14 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_14.$$arity = 1), nil) && 'bytesize';}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12));
  $send($$($nesting, 'Encoding'), 'register', ["UTF-16LE"], (TMP_15 = function(){var self = TMP_15.$$s || this, TMP_each_byte_16, TMP_bytesize_17;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_16 = function $$each_byte(string) {
      var $iter = TMP_each_byte_16.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_each_byte_16.$$p = null;
      
      
      if ($iter) TMP_each_byte_16.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    ;
    }, TMP_each_byte_16.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_17 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_17.$$arity = 1), nil) && 'bytesize';}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
  $send($$($nesting, 'Encoding'), 'register', ["UTF-16BE"], (TMP_18 = function(){var self = TMP_18.$$s || this, TMP_each_byte_19, TMP_bytesize_20;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_19 = function $$each_byte(string) {
      var $iter = TMP_each_byte_19.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_each_byte_19.$$p = null;
      
      
      if ($iter) TMP_each_byte_19.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code >> 8);
        Opal.yield1(block, code & 0xff);
      }
    ;
    }, TMP_each_byte_19.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_20 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_20.$$arity = 1), nil) && 'bytesize';}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18));
  $send($$($nesting, 'Encoding'), 'register', ["UTF-32LE"], (TMP_21 = function(){var self = TMP_21.$$s || this, TMP_each_byte_22, TMP_bytesize_23;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_22 = function $$each_byte(string) {
      var $iter = TMP_each_byte_22.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_each_byte_22.$$p = null;
      
      
      if ($iter) TMP_each_byte_22.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    ;
    }, TMP_each_byte_22.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_23 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_23.$$arity = 1), nil) && 'bytesize';}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21));
  $send($$($nesting, 'Encoding'), 'register', ["ASCII-8BIT", $hash2(["aliases", "ascii", "dummy"], {"aliases": ["BINARY", "US-ASCII", "ASCII"], "ascii": true, "dummy": true})], (TMP_24 = function(){var self = TMP_24.$$s || this, TMP_each_byte_25, TMP_bytesize_26;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_25 = function $$each_byte(string) {
      var $iter = TMP_each_byte_25.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_each_byte_25.$$p = null;
      
      
      if ($iter) TMP_each_byte_25.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);
        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    ;
    }, TMP_each_byte_25.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_26 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_26.$$arity = 1), nil) && 'bytesize';}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24));
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_String_bytes_27, TMP_String_bytesize_28, TMP_String_each_byte_29, TMP_String_encode_30, TMP_String_force_encoding_31, TMP_String_getbyte_32, TMP_String_valid_encoding$q_33;

    def.encoding = nil;
    
    self.$attr_reader("encoding");
    Opal.defineProperty(String.prototype, 'encoding', $$$($$($nesting, 'Encoding'), 'UTF_16LE'));
    
    Opal.def(self, '$bytes', TMP_String_bytes_27 = function $$bytes() {
      var self = this;

      return self.$each_byte().$to_a()
    }, TMP_String_bytes_27.$$arity = 0);
    
    Opal.def(self, '$bytesize', TMP_String_bytesize_28 = function $$bytesize() {
      var self = this;

      return self.encoding.$bytesize(self)
    }, TMP_String_bytesize_28.$$arity = 0);
    
    Opal.def(self, '$each_byte', TMP_String_each_byte_29 = function $$each_byte() {
      var $iter = TMP_String_each_byte_29.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_String_each_byte_29.$$p = null;
      
      
      if ($iter) TMP_String_each_byte_29.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each_byte")
      };
      $send(self.encoding, 'each_byte', [self], block.$to_proc());
      return self;
    }, TMP_String_each_byte_29.$$arity = 0);
    
    Opal.def(self, '$encode', TMP_String_encode_30 = function $$encode(encoding) {
      var self = this;

      return self.$dup().$force_encoding(encoding)
    }, TMP_String_encode_30.$$arity = 1);
    
    Opal.def(self, '$force_encoding', TMP_String_force_encoding_31 = function $$force_encoding(encoding) {
      var self = this;

      
      if (encoding === self.encoding) { return self; }

      encoding = $$($nesting, 'Opal')['$coerce_to!'](encoding, $$($nesting, 'String'), "to_s");
      encoding = $$($nesting, 'Encoding').$find(encoding);

      if (encoding === self.encoding) { return self; }

      self.encoding = encoding;
      return self;
    
    }, TMP_String_force_encoding_31.$$arity = 1);
    
    Opal.def(self, '$getbyte', TMP_String_getbyte_32 = function $$getbyte(idx) {
      var self = this;

      return self.encoding.$getbyte(self, idx)
    }, TMP_String_getbyte_32.$$arity = 1);
    return (Opal.def(self, '$valid_encoding?', TMP_String_valid_encoding$q_33 = function() {
      var self = this;

      return true
    }, TMP_String_valid_encoding$q_33.$$arity = 0), nil) && 'valid_encoding?';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/math"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$raise', '$Float', '$type_error', '$Integer', '$module_function', '$checked', '$float!', '$===', '$gamma', '$-', '$integer!', '$/', '$infinite?']);
  return (function($base, $parent_nesting) {
    function $Math() {};
    var self = $Math = $module($base, 'Math', $Math);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Math_checked_1, TMP_Math_float$B_2, TMP_Math_integer$B_3, TMP_Math_acos_4, TMP_Math_acosh_5, TMP_Math_asin_6, TMP_Math_asinh_7, TMP_Math_atan_8, TMP_Math_atan2_9, TMP_Math_atanh_10, TMP_Math_cbrt_11, TMP_Math_cos_12, TMP_Math_cosh_13, TMP_Math_erf_14, TMP_Math_erfc_15, TMP_Math_exp_16, TMP_Math_frexp_17, TMP_Math_gamma_18, TMP_Math_hypot_19, TMP_Math_ldexp_20, TMP_Math_lgamma_21, TMP_Math_log_22, TMP_Math_log10_23, TMP_Math_log2_24, TMP_Math_sin_25, TMP_Math_sinh_26, TMP_Math_sqrt_27, TMP_Math_tan_28, TMP_Math_tanh_29;

    
    Opal.const_set($nesting[0], 'E', Math.E);
    Opal.const_set($nesting[0], 'PI', Math.PI);
    Opal.const_set($nesting[0], 'DomainError', $$($nesting, 'Class').$new($$($nesting, 'StandardError')));
    Opal.defs(self, '$checked', TMP_Math_checked_1 = function $$checked(method, $a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      
      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {
        return NaN;
      }

      var result = Math[method].apply(null, args);

      if (isNaN(result)) {
        self.$raise($$($nesting, 'DomainError'), "" + "Numerical argument is out of domain - \"" + (method) + "\"");
      }

      return result;
    ;
    }, TMP_Math_checked_1.$$arity = -2);
    Opal.defs(self, '$float!', TMP_Math_float$B_2 = function(value) {
      var self = this;

      try {
        return self.$Float(value)
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
          try {
            return self.$raise($$($nesting, 'Opal').$type_error(value, $$($nesting, 'Float')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Math_float$B_2.$$arity = 1);
    Opal.defs(self, '$integer!', TMP_Math_integer$B_3 = function(value) {
      var self = this;

      try {
        return self.$Integer(value)
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
          try {
            return self.$raise($$($nesting, 'Opal').$type_error(value, $$($nesting, 'Integer')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Math_integer$B_3.$$arity = 1);
    self.$module_function();
    
    Opal.def(self, '$acos', TMP_Math_acos_4 = function $$acos(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("acos", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_acos_4.$$arity = 1);
    if ($truthy((typeof(Math.acosh) !== "undefined"))) {
    } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };
    
    Opal.def(self, '$acosh', TMP_Math_acosh_5 = function $$acosh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("acosh", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_acosh_5.$$arity = 1);
    
    Opal.def(self, '$asin', TMP_Math_asin_6 = function $$asin(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("asin", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_asin_6.$$arity = 1);
    if ($truthy((typeof(Math.asinh) !== "undefined"))) {
    } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    
    };
    
    Opal.def(self, '$asinh', TMP_Math_asinh_7 = function $$asinh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("asinh", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_asinh_7.$$arity = 1);
    
    Opal.def(self, '$atan', TMP_Math_atan_8 = function $$atan(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("atan", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_atan_8.$$arity = 1);
    
    Opal.def(self, '$atan2', TMP_Math_atan2_9 = function $$atan2(y, x) {
      var self = this;

      return $$($nesting, 'Math').$checked("atan2", $$($nesting, 'Math')['$float!'](y), $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_atan2_9.$$arity = 2);
    if ($truthy((typeof(Math.atanh) !== "undefined"))) {
    } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };
    
    Opal.def(self, '$atanh', TMP_Math_atanh_10 = function $$atanh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("atanh", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_atanh_10.$$arity = 1);
    if ($truthy((typeof(Math.cbrt) !== "undefined"))) {
    } else {
      
      Math.cbrt = function(x) {
        if (x == 0) {
          return 0;
        }

        if (x < 0) {
          return -Math.cbrt(-x);
        }

        var r  = x,
            ex = 0;

        while (r < 0.125) {
          r *= 8;
          ex--;
        }

        while (r > 1.0) {
          r *= 0.125;
          ex++;
        }

        r = (-0.46946116 * r + 1.072302) * r + 0.3812513;

        while (ex < 0) {
          r *= 0.5;
          ex++;
        }

        while (ex > 0) {
          r *= 2;
          ex--;
        }

        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);

        return r;
      }
    
    };
    
    Opal.def(self, '$cbrt', TMP_Math_cbrt_11 = function $$cbrt(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("cbrt", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_cbrt_11.$$arity = 1);
    
    Opal.def(self, '$cos', TMP_Math_cos_12 = function $$cos(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("cos", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_cos_12.$$arity = 1);
    if ($truthy((typeof(Math.cosh) !== "undefined"))) {
    } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };
    
    Opal.def(self, '$cosh', TMP_Math_cosh_13 = function $$cosh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("cosh", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_cosh_13.$$arity = 1);
    if ($truthy((typeof(Math.erf) !== "undefined"))) {
    } else {
      
      Opal.defineProperty(Math, 'erf', function(x) {
        var A1 =  0.254829592,
            A2 = -0.284496736,
            A3 =  1.421413741,
            A4 = -1.453152027,
            A5 =  1.061405429,
            P  =  0.3275911;

        var sign = 1;

        if (x < 0) {
            sign = -1;
        }

        x = Math.abs(x);

        var t = 1.0 / (1.0 + P * x);
        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);

        return sign * y;
      });
    
    };
    
    Opal.def(self, '$erf', TMP_Math_erf_14 = function $$erf(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("erf", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_erf_14.$$arity = 1);
    if ($truthy((typeof(Math.erfc) !== "undefined"))) {
    } else {
      
      Opal.defineProperty(Math, 'erfc', function(x) {
        var z = Math.abs(x),
            t = 1.0 / (0.5 * z + 1.0);

        var A1 = t * 0.17087277 + -0.82215223,
            A2 = t * A1 + 1.48851587,
            A3 = t * A2 + -1.13520398,
            A4 = t * A3 + 0.27886807,
            A5 = t * A4 + -0.18628806,
            A6 = t * A5 + 0.09678418,
            A7 = t * A6 + 0.37409196,
            A8 = t * A7 + 1.00002368,
            A9 = t * A8,
            A10 = -z * z - 1.26551223 + A9;

        var a = t * Math.exp(A10);

        if (x < 0.0) {
          return 2.0 - a;
        }
        else {
          return a;
        }
      });
    
    };
    
    Opal.def(self, '$erfc', TMP_Math_erfc_15 = function $$erfc(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("erfc", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_erfc_15.$$arity = 1);
    
    Opal.def(self, '$exp', TMP_Math_exp_16 = function $$exp(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("exp", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_exp_16.$$arity = 1);
    
    Opal.def(self, '$frexp', TMP_Math_frexp_17 = function $$frexp(x) {
      var self = this;

      
      x = $$($nesting, 'Math')['$float!'](x);
      
      if (isNaN(x)) {
        return [NaN, 0];
      }

      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,
          frac = x / Math.pow(2, ex);

      return [frac, ex];
    ;
    }, TMP_Math_frexp_17.$$arity = 1);
    
    Opal.def(self, '$gamma', TMP_Math_gamma_18 = function $$gamma(n) {
      var self = this;

      
      n = $$($nesting, 'Math')['$float!'](n);
      
      var i, t, x, value, result, twoN, threeN, fourN, fiveN;

      var G = 4.7421875;

      var P = [
         0.99999999999999709182,
         57.156235665862923517,
        -59.597960355475491248,
         14.136097974741747174,
        -0.49191381609762019978,
         0.33994649984811888699e-4,
         0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
         0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
         0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
         0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
         0.36899182659531622704e-5
      ];


      if (isNaN(n)) {
        return NaN;
      }

      if (n === 0 && 1 / n < 0) {
        return -Infinity;
      }

      if (n === -1 || n === -Infinity) {
        self.$raise($$($nesting, 'DomainError'), "Numerical argument is out of domain - \"gamma\"");
      }

      if ($$($nesting, 'Integer')['$==='](n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;
        }

        value  = n - 2;
        result = n - 1;

        while (value > 1) {
          result *= value;
          value--;
        }

        if (result == 0) {
          result = 1;
        }

        return result;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * $$($nesting, 'Math').$gamma($rb_minus(1, n)));
      }

      if (n >= 171.35) {
        return Infinity;
      }

      if (n > 85.0) {
        twoN   = n * n;
        threeN = twoN * n;
        fourN  = threeN * n;
        fiveN  = fourN * n;

        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
          5246819 / (75246796800 * fiveN * n));
      }

      n -= 1;
      x  = P[0];

      for (i = 1; i < P.length; ++i) {
        x += P[i] / (n + i);
      }

      t = n + G + 0.5;

      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    ;
    }, TMP_Math_gamma_18.$$arity = 1);
    if ($truthy((typeof(Math.hypot) !== "undefined"))) {
    } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    
    };
    
    Opal.def(self, '$hypot', TMP_Math_hypot_19 = function $$hypot(x, y) {
      var self = this;

      return $$($nesting, 'Math').$checked("hypot", $$($nesting, 'Math')['$float!'](x), $$($nesting, 'Math')['$float!'](y))
    }, TMP_Math_hypot_19.$$arity = 2);
    
    Opal.def(self, '$ldexp', TMP_Math_ldexp_20 = function $$ldexp(mantissa, exponent) {
      var self = this;

      
      mantissa = $$($nesting, 'Math')['$float!'](mantissa);
      exponent = $$($nesting, 'Math')['$integer!'](exponent);
      
      if (isNaN(exponent)) {
        self.$raise($$($nesting, 'RangeError'), "float NaN out of range of integer");
      }

      return mantissa * Math.pow(2, exponent);
    ;
    }, TMP_Math_ldexp_20.$$arity = 2);
    
    Opal.def(self, '$lgamma', TMP_Math_lgamma_21 = function $$lgamma(n) {
      var self = this;

      
      if (n == -1) {
        return [Infinity, 1];
      }
      else {
        return [Math.log(Math.abs($$($nesting, 'Math').$gamma(n))), $$($nesting, 'Math').$gamma(n) < 0 ? -1 : 1];
      }
    
    }, TMP_Math_lgamma_21.$$arity = 1);
    
    Opal.def(self, '$log', TMP_Math_log_22 = function $$log(x, base) {
      var self = this;

      
      ;
      if ($truthy($$($nesting, 'String')['$==='](x))) {
        self.$raise($$($nesting, 'Opal').$type_error(x, $$($nesting, 'Float')))};
      if ($truthy(base == null)) {
        return $$($nesting, 'Math').$checked("log", $$($nesting, 'Math')['$float!'](x))
      } else {
        
        if ($truthy($$($nesting, 'String')['$==='](base))) {
          self.$raise($$($nesting, 'Opal').$type_error(base, $$($nesting, 'Float')))};
        return $rb_divide($$($nesting, 'Math').$checked("log", $$($nesting, 'Math')['$float!'](x)), $$($nesting, 'Math').$checked("log", $$($nesting, 'Math')['$float!'](base)));
      };
    }, TMP_Math_log_22.$$arity = -2);
    if ($truthy((typeof(Math.log10) !== "undefined"))) {
    } else {
      
      Math.log10 = function(x) {
        return Math.log(x) / Math.LN10;
      }
    
    };
    
    Opal.def(self, '$log10', TMP_Math_log10_23 = function $$log10(x) {
      var self = this;

      
      if ($truthy($$($nesting, 'String')['$==='](x))) {
        self.$raise($$($nesting, 'Opal').$type_error(x, $$($nesting, 'Float')))};
      return $$($nesting, 'Math').$checked("log10", $$($nesting, 'Math')['$float!'](x));
    }, TMP_Math_log10_23.$$arity = 1);
    if ($truthy((typeof(Math.log2) !== "undefined"))) {
    } else {
      
      Math.log2 = function(x) {
        return Math.log(x) / Math.LN2;
      }
    
    };
    
    Opal.def(self, '$log2', TMP_Math_log2_24 = function $$log2(x) {
      var self = this;

      
      if ($truthy($$($nesting, 'String')['$==='](x))) {
        self.$raise($$($nesting, 'Opal').$type_error(x, $$($nesting, 'Float')))};
      return $$($nesting, 'Math').$checked("log2", $$($nesting, 'Math')['$float!'](x));
    }, TMP_Math_log2_24.$$arity = 1);
    
    Opal.def(self, '$sin', TMP_Math_sin_25 = function $$sin(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("sin", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_sin_25.$$arity = 1);
    if ($truthy((typeof(Math.sinh) !== "undefined"))) {
    } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };
    
    Opal.def(self, '$sinh', TMP_Math_sinh_26 = function $$sinh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("sinh", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_sinh_26.$$arity = 1);
    
    Opal.def(self, '$sqrt', TMP_Math_sqrt_27 = function $$sqrt(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("sqrt", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_sqrt_27.$$arity = 1);
    
    Opal.def(self, '$tan', TMP_Math_tan_28 = function $$tan(x) {
      var self = this;

      
      x = $$($nesting, 'Math')['$float!'](x);
      if ($truthy(x['$infinite?']())) {
        return $$$($$($nesting, 'Float'), 'NAN')};
      return $$($nesting, 'Math').$checked("tan", $$($nesting, 'Math')['$float!'](x));
    }, TMP_Math_tan_28.$$arity = 1);
    if ($truthy((typeof(Math.tanh) !== "undefined"))) {
    } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };
    
    Opal.def(self, '$tanh', TMP_Math_tanh_29 = function $$tanh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("tanh", $$($nesting, 'Math')['$float!'](x))
    }, TMP_Math_tanh_29.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/complex"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$require', '$===', '$real?', '$raise', '$new', '$*', '$cos', '$sin', '$attr_reader', '$class', '$==', '$real', '$imag', '$Complex', '$-@', '$+', '$__coerced__', '$-', '$nan?', '$/', '$conj', '$abs2', '$quo', '$polar', '$exp', '$log', '$>', '$!=', '$divmod', '$**', '$hypot', '$atan2', '$lcm', '$denominator', '$finite?', '$infinite?', '$numerator', '$abs', '$arg', '$rationalize', '$to_f', '$to_i', '$to_r', '$inspect', '$positive?', '$zero?', '$Rational']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    function $Complex(){};
    var self = $Complex = $klass($base, $super, 'Complex', $Complex);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Complex_rect_1, TMP_Complex_polar_2, TMP_Complex_initialize_3, TMP_Complex_coerce_4, TMP_Complex_$eq$eq_5, TMP_Complex_$$_6, TMP_Complex_$_7, TMP_Complex_$_8, TMP_Complex_$_9, TMP_Complex_$_10, TMP_Complex_$$_11, TMP_Complex_abs_12, TMP_Complex_abs2_13, TMP_Complex_angle_14, TMP_Complex_conj_15, TMP_Complex_denominator_16, TMP_Complex_eql$q_17, TMP_Complex_fdiv_18, TMP_Complex_finite$q_19, TMP_Complex_hash_20, TMP_Complex_infinite$q_21, TMP_Complex_inspect_22, TMP_Complex_numerator_23, TMP_Complex_polar_24, TMP_Complex_rationalize_25, TMP_Complex_real$q_26, TMP_Complex_rect_27, TMP_Complex_to_f_28, TMP_Complex_to_i_29, TMP_Complex_to_r_30, TMP_Complex_to_s_31;

    def.real = def.imag = nil;
    
    Opal.defs(self, '$rect', TMP_Complex_rect_1 = function $$rect(real, imag) {
      var $a, $b, $c, self = this;

      
      
      if (imag == null) {
        imag = 0;
      };
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = $$($nesting, 'Numeric')['$==='](real)) ? real['$real?']() : $c)) ? $$($nesting, 'Numeric')['$==='](imag) : $b)) ? imag['$real?']() : $a))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not a real")
      };
      return self.$new(real, imag);
    }, TMP_Complex_rect_1.$$arity = -2);
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      return Opal.alias(self, "rectangular", "rect")
    })(Opal.get_singleton_class(self), $nesting);
    Opal.defs(self, '$polar', TMP_Complex_polar_2 = function $$polar(r, theta) {
      var $a, $b, $c, self = this;

      
      
      if (theta == null) {
        theta = 0;
      };
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = $$($nesting, 'Numeric')['$==='](r)) ? r['$real?']() : $c)) ? $$($nesting, 'Numeric')['$==='](theta) : $b)) ? theta['$real?']() : $a))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not a real")
      };
      return self.$new($rb_times(r, $$($nesting, 'Math').$cos(theta)), $rb_times(r, $$($nesting, 'Math').$sin(theta)));
    }, TMP_Complex_polar_2.$$arity = -2);
    self.$attr_reader("real", "imag");
    
    Opal.def(self, '$initialize', TMP_Complex_initialize_3 = function $$initialize(real, imag) {
      var self = this;

      
      
      if (imag == null) {
        imag = 0;
      };
      self.real = real;
      return (self.imag = imag);
    }, TMP_Complex_initialize_3.$$arity = -2);
    
    Opal.def(self, '$coerce', TMP_Complex_coerce_4 = function $$coerce(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return [other, self]
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return [$$($nesting, 'Complex').$new(other, 0), self]
      } else {
        return self.$raise($$($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      }
    }, TMP_Complex_coerce_4.$$arity = 1);
    
    Opal.def(self, '$==', TMP_Complex_$eq$eq_5 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return (($a = self.real['$=='](other.$real())) ? self.imag['$=='](other.$imag()) : self.real['$=='](other.$real()))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return (($a = self.real['$=='](other)) ? self.imag['$=='](0) : self.real['$=='](other))
      } else {
        return other['$=='](self)
      }
    }, TMP_Complex_$eq$eq_5.$$arity = 1);
    
    Opal.def(self, '$-@', TMP_Complex_$$_6 = function() {
      var self = this;

      return self.$Complex(self.real['$-@'](), self.imag['$-@']())
    }, TMP_Complex_$$_6.$$arity = 0);
    
    Opal.def(self, '$+', TMP_Complex_$_7 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_plus(self.real, other), self.imag)
      } else {
        return self.$__coerced__("+", other)
      }
    }, TMP_Complex_$_7.$$arity = 1);
    
    Opal.def(self, '$-', TMP_Complex_$_8 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_minus(self.real, other), self.imag)
      } else {
        return self.$__coerced__("-", other)
      }
    }, TMP_Complex_$_8.$$arity = 1);
    
    Opal.def(self, '$*', TMP_Complex_$_9 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))
      } else {
        return self.$__coerced__("*", other)
      }
    }, TMP_Complex_$_9.$$arity = 1);
    
    Opal.def(self, '$/', TMP_Complex_$_10 = function(other) {
      var $a, $b, $c, $d, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = $$($nesting, 'Number')['$==='](self.real)) ? self.real['$nan?']() : $d)) ? $c : ($truthy($d = $$($nesting, 'Number')['$==='](self.imag)) ? self.imag['$nan?']() : $d))) ? $b : ($truthy($c = $$($nesting, 'Number')['$==='](other.$real())) ? other.$real()['$nan?']() : $c))) ? $a : ($truthy($b = $$($nesting, 'Number')['$==='](other.$imag())) ? other.$imag()['$nan?']() : $b)))) {
          return $$($nesting, 'Complex').$new($$$($$($nesting, 'Float'), 'NAN'), $$$($$($nesting, 'Float'), 'NAN'))
        } else {
          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())
        }
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex(self.real.$quo(other), self.imag.$quo(other))
      } else {
        return self.$__coerced__("/", other)
      }
    }, TMP_Complex_$_10.$$arity = 1);
    
    Opal.def(self, '$**', TMP_Complex_$$_11 = function(other) {
      var $a, $b, $c, $d, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;

      
      if (other['$=='](0)) {
        return $$($nesting, 'Complex').$new(1, 0)};
      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        
        $b = self.$polar(), $a = Opal.to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        ore = other.$real();
        oim = other.$imag();
        nr = $$($nesting, 'Math').$exp($rb_minus($rb_times(ore, $$($nesting, 'Math').$log(r)), $rb_times(oim, theta)));
        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, $$($nesting, 'Math').$log(r)));
        return $$($nesting, 'Complex').$polar(nr, ntheta);
      } else if ($truthy($$($nesting, 'Integer')['$==='](other))) {
        if ($truthy($rb_gt(other, 0))) {
          
          x = self;
          z = x;
          n = $rb_minus(other, 1);
          while ($truthy(n['$!='](0))) {
            
            $c = n.$divmod(2), $b = Opal.to_ary($c), (div = ($b[0] == null ? nil : $b[0])), (mod = ($b[1] == null ? nil : $b[1])), $c;
            while (mod['$=='](0)) {
              
              x = self.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));
              n = div;
              $d = n.$divmod(2), $c = Opal.to_ary($d), (div = ($c[0] == null ? nil : $c[0])), (mod = ($c[1] == null ? nil : $c[1])), $d;
            };
            z = $rb_times(z, x);
            n = $rb_minus(n, 1);
          };
          return z;
        } else {
          return $rb_divide($$($nesting, 'Rational').$new(1, 1), self)['$**'](other['$-@']())
        }
      } else if ($truthy(($truthy($a = $$($nesting, 'Float')['$==='](other)) ? $a : $$($nesting, 'Rational')['$==='](other)))) {
        
        $b = self.$polar(), $a = Opal.to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        return $$($nesting, 'Complex').$polar(r['$**'](other), $rb_times(theta, other));
      } else {
        return self.$__coerced__("**", other)
      };
    }, TMP_Complex_$$_11.$$arity = 1);
    
    Opal.def(self, '$abs', TMP_Complex_abs_12 = function $$abs() {
      var self = this;

      return $$($nesting, 'Math').$hypot(self.real, self.imag)
    }, TMP_Complex_abs_12.$$arity = 0);
    
    Opal.def(self, '$abs2', TMP_Complex_abs2_13 = function $$abs2() {
      var self = this;

      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag))
    }, TMP_Complex_abs2_13.$$arity = 0);
    
    Opal.def(self, '$angle', TMP_Complex_angle_14 = function $$angle() {
      var self = this;

      return $$($nesting, 'Math').$atan2(self.imag, self.real)
    }, TMP_Complex_angle_14.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    
    Opal.def(self, '$conj', TMP_Complex_conj_15 = function $$conj() {
      var self = this;

      return self.$Complex(self.real, self.imag['$-@']())
    }, TMP_Complex_conj_15.$$arity = 0);
    Opal.alias(self, "conjugate", "conj");
    
    Opal.def(self, '$denominator', TMP_Complex_denominator_16 = function $$denominator() {
      var self = this;

      return self.real.$denominator().$lcm(self.imag.$denominator())
    }, TMP_Complex_denominator_16.$$arity = 0);
    Opal.alias(self, "divide", "/");
    
    Opal.def(self, '$eql?', TMP_Complex_eql$q_17 = function(other) {
      var $a, $b, self = this;

      return ($truthy($a = ($truthy($b = $$($nesting, 'Complex')['$==='](other)) ? self.real.$class()['$=='](self.imag.$class()) : $b)) ? self['$=='](other) : $a)
    }, TMP_Complex_eql$q_17.$$arity = 1);
    
    Opal.def(self, '$fdiv', TMP_Complex_fdiv_18 = function $$fdiv(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Numeric')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
      return $rb_divide(self, other);
    }, TMP_Complex_fdiv_18.$$arity = 1);
    
    Opal.def(self, '$finite?', TMP_Complex_finite$q_19 = function() {
      var $a, self = this;

      return ($truthy($a = self.real['$finite?']()) ? self.imag['$finite?']() : $a)
    }, TMP_Complex_finite$q_19.$$arity = 0);
    
    Opal.def(self, '$hash', TMP_Complex_hash_20 = function $$hash() {
      var self = this;

      return "" + "Complex:" + (self.real) + ":" + (self.imag)
    }, TMP_Complex_hash_20.$$arity = 0);
    Opal.alias(self, "imaginary", "imag");
    
    Opal.def(self, '$infinite?', TMP_Complex_infinite$q_21 = function() {
      var $a, self = this;

      return ($truthy($a = self.real['$infinite?']()) ? $a : self.imag['$infinite?']())
    }, TMP_Complex_infinite$q_21.$$arity = 0);
    
    Opal.def(self, '$inspect', TMP_Complex_inspect_22 = function $$inspect() {
      var self = this;

      return "" + "(" + (self) + ")"
    }, TMP_Complex_inspect_22.$$arity = 0);
    Opal.alias(self, "magnitude", "abs");
    
    Opal.udef(self, '$' + "negative?");;
    
    Opal.def(self, '$numerator', TMP_Complex_numerator_23 = function $$numerator() {
      var self = this, d = nil;

      
      d = self.$denominator();
      return self.$Complex($rb_times(self.real.$numerator(), $rb_divide(d, self.real.$denominator())), $rb_times(self.imag.$numerator(), $rb_divide(d, self.imag.$denominator())));
    }, TMP_Complex_numerator_23.$$arity = 0);
    Opal.alias(self, "phase", "arg");
    
    Opal.def(self, '$polar', TMP_Complex_polar_24 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, TMP_Complex_polar_24.$$arity = 0);
    
    Opal.udef(self, '$' + "positive?");;
    Opal.alias(self, "quo", "/");
    
    Opal.def(self, '$rationalize', TMP_Complex_rationalize_25 = function $$rationalize(eps) {
      var self = this;

      
      ;
      
      if (arguments.length > 1) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($truthy(self.imag['$!='](0))) {
        self.$raise($$($nesting, 'RangeError'), "" + "can't' convert " + (self) + " into Rational")};
      return self.$real().$rationalize(eps);
    }, TMP_Complex_rationalize_25.$$arity = -1);
    
    Opal.def(self, '$real?', TMP_Complex_real$q_26 = function() {
      var self = this;

      return false
    }, TMP_Complex_real$q_26.$$arity = 0);
    
    Opal.def(self, '$rect', TMP_Complex_rect_27 = function $$rect() {
      var self = this;

      return [self.real, self.imag]
    }, TMP_Complex_rect_27.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.def(self, '$to_f', TMP_Complex_to_f_28 = function $$to_f() {
      var self = this;

      
      if (self.imag['$=='](0)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Float")
      };
      return self.real.$to_f();
    }, TMP_Complex_to_f_28.$$arity = 0);
    
    Opal.def(self, '$to_i', TMP_Complex_to_i_29 = function $$to_i() {
      var self = this;

      
      if (self.imag['$=='](0)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Integer")
      };
      return self.real.$to_i();
    }, TMP_Complex_to_i_29.$$arity = 0);
    
    Opal.def(self, '$to_r', TMP_Complex_to_r_30 = function $$to_r() {
      var self = this;

      
      if (self.imag['$=='](0)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Rational")
      };
      return self.real.$to_r();
    }, TMP_Complex_to_r_30.$$arity = 0);
    
    Opal.def(self, '$to_s', TMP_Complex_to_s_31 = function $$to_s() {
      var $a, $b, $c, self = this, result = nil;

      
      result = self.real.$inspect();
      result = $rb_plus(result, (function() {if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = $$($nesting, 'Number')['$==='](self.imag)) ? self.imag['$nan?']() : $c)) ? $b : self.imag['$positive?']())) ? $a : self.imag['$zero?']()))) {
        return "+"
      } else {
        return "-"
      }; return nil; })());
      result = $rb_plus(result, self.imag.$abs().$inspect());
      if ($truthy(($truthy($a = $$($nesting, 'Number')['$==='](self.imag)) ? ($truthy($b = self.imag['$nan?']()) ? $b : self.imag['$infinite?']()) : $a))) {
        result = $rb_plus(result, "*")};
      return $rb_plus(result, "i");
    }, TMP_Complex_to_s_31.$$arity = 0);
    return Opal.const_set($nesting[0], 'I', self.$new(0, 1));
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_Complex_32;

    
    Opal.def(self, '$Complex', TMP_Kernel_Complex_32 = function $$Complex(real, imag) {
      var self = this;

      
      
      if (imag == null) {
        imag = nil;
      };
      if ($truthy(imag)) {
        return $$($nesting, 'Complex').$new(real, imag)
      } else {
        return $$($nesting, 'Complex').$new(real, 0)
      };
    }, TMP_Kernel_Complex_32.$$arity = -2)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_String_to_c_33;

    return (Opal.def(self, '$to_c', TMP_String_to_c_33 = function $$to_c() {
      var self = this;

      
      var str = self,
          re = /[+-]?[\d_]+(\.[\d_]+)?(e\d+)?/,
          match = str.match(re),
          real, imag, denominator;

      function isFloat() {
        return re.test(str);
      }

      function cutFloat() {
        var match = str.match(re);
        var number = match[0];
        str = str.slice(number.length);
        return number.replace(/_/g, '');
      }

      // handles both floats and rationals
      function cutNumber() {
        if (isFloat()) {
          var numerator = parseFloat(cutFloat());

          if (str[0] === '/') {
            // rational real part
            str = str.slice(1);

            if (isFloat()) {
              var denominator = parseFloat(cutFloat());
              return self.$Rational(numerator, denominator);
            } else {
              // reverting '/'
              str = '/' + str;
              return numerator;
            }
          } else {
            // float real part, no denominator
            return numerator;
          }
        } else {
          return null;
        }
      }

      real = cutNumber();

      if (!real) {
        if (str[0] === 'i') {
          // i => Complex(0, 1)
          return self.$Complex(0, 1);
        }
        if (str[0] === '-' && str[1] === 'i') {
          // -i => Complex(0, -1)
          return self.$Complex(0, -1);
        }
        if (str[0] === '+' && str[1] === 'i') {
          // +i => Complex(0, 1)
          return self.$Complex(0, 1);
        }
        // anything => Complex(0, 0)
        return self.$Complex(0, 0);
      }

      imag = cutNumber();
      if (!imag) {
        if (str[0] === 'i') {
          // 3i => Complex(0, 3)
          return self.$Complex(0, real);
        } else {
          // 3 => Complex(3, 0)
          return self.$Complex(real, 0);
        }
      } else {
        // 3+2i => Complex(3, 2)
        return self.$Complex(real, imag);
      }
    
    }, TMP_String_to_c_33.$$arity = 0), nil) && 'to_c'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/rational"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$require', '$to_i', '$==', '$raise', '$<', '$-@', '$new', '$gcd', '$/', '$nil?', '$===', '$reduce', '$to_r', '$equal?', '$!', '$coerce_to!', '$to_f', '$numerator', '$denominator', '$<=>', '$-', '$*', '$__coerced__', '$+', '$Rational', '$>', '$**', '$abs', '$ceil', '$with_precision', '$floor', '$<=', '$truncate', '$send', '$convert']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    function $Rational(){};
    var self = $Rational = $klass($base, $super, 'Rational', $Rational);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Rational_reduce_1, TMP_Rational_convert_2, TMP_Rational_initialize_3, TMP_Rational_numerator_4, TMP_Rational_denominator_5, TMP_Rational_coerce_6, TMP_Rational_$eq$eq_7, TMP_Rational_$lt$eq$gt_8, TMP_Rational_$_9, TMP_Rational_$_10, TMP_Rational_$_11, TMP_Rational_$_12, TMP_Rational_$$_13, TMP_Rational_abs_14, TMP_Rational_ceil_15, TMP_Rational_floor_16, TMP_Rational_hash_17, TMP_Rational_inspect_18, TMP_Rational_rationalize_19, TMP_Rational_round_20, TMP_Rational_to_f_21, TMP_Rational_to_i_22, TMP_Rational_to_r_23, TMP_Rational_to_s_24, TMP_Rational_truncate_25, TMP_Rational_with_precision_26;

    def.num = def.den = nil;
    
    Opal.defs(self, '$reduce', TMP_Rational_reduce_1 = function $$reduce(num, den) {
      var self = this, gcd = nil;

      
      num = num.$to_i();
      den = den.$to_i();
      if (den['$=='](0)) {
        self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
      } else if ($truthy($rb_lt(den, 0))) {
        
        num = num['$-@']();
        den = den['$-@']();
      } else if (den['$=='](1)) {
        return self.$new(num, den)};
      gcd = num.$gcd(den);
      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));
    }, TMP_Rational_reduce_1.$$arity = 2);
    Opal.defs(self, '$convert', TMP_Rational_convert_2 = function $$convert(num, den) {
      var $a, $b, self = this;

      
      if ($truthy(($truthy($a = num['$nil?']()) ? $a : den['$nil?']()))) {
        self.$raise($$($nesting, 'TypeError'), "cannot convert nil into Rational")};
      if ($truthy(($truthy($a = $$($nesting, 'Integer')['$==='](num)) ? $$($nesting, 'Integer')['$==='](den) : $a))) {
        return self.$reduce(num, den)};
      if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'Float')['$==='](num)) ? $b : $$($nesting, 'String')['$==='](num))) ? $a : $$($nesting, 'Complex')['$==='](num)))) {
        num = num.$to_r()};
      if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'Float')['$==='](den)) ? $b : $$($nesting, 'String')['$==='](den))) ? $a : $$($nesting, 'Complex')['$==='](den)))) {
        den = den.$to_r()};
      if ($truthy(($truthy($a = den['$equal?'](1)) ? $$($nesting, 'Integer')['$==='](num)['$!']() : $a))) {
        return $$($nesting, 'Opal')['$coerce_to!'](num, $$($nesting, 'Rational'), "to_r")
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](num)) ? $$($nesting, 'Numeric')['$==='](den) : $a))) {
        return $rb_divide(num, den)
      } else {
        return self.$reduce(num, den)
      };
    }, TMP_Rational_convert_2.$$arity = 2);
    
    Opal.def(self, '$initialize', TMP_Rational_initialize_3 = function $$initialize(num, den) {
      var self = this;

      
      self.num = num;
      return (self.den = den);
    }, TMP_Rational_initialize_3.$$arity = 2);
    
    Opal.def(self, '$numerator', TMP_Rational_numerator_4 = function $$numerator() {
      var self = this;

      return self.num
    }, TMP_Rational_numerator_4.$$arity = 0);
    
    Opal.def(self, '$denominator', TMP_Rational_denominator_5 = function $$denominator() {
      var self = this;

      return self.den
    }, TMP_Rational_denominator_5.$$arity = 0);
    
    Opal.def(self, '$coerce', TMP_Rational_coerce_6 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {return [other, self]}
      else if ($$($nesting, 'Integer')['$===']($case)) {return [other.$to_r(), self]}
      else if ($$($nesting, 'Float')['$===']($case)) {return [other, self.$to_f()]}
      else { return nil }})()
    }, TMP_Rational_coerce_6.$$arity = 1);
    
    Opal.def(self, '$==', TMP_Rational_$eq$eq_7 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {return (($a = self.num['$=='](other.$numerator())) ? self.den['$=='](other.$denominator()) : self.num['$=='](other.$numerator()))}
      else if ($$($nesting, 'Integer')['$===']($case)) {return (($a = self.num['$=='](other)) ? self.den['$=='](1) : self.num['$=='](other))}
      else if ($$($nesting, 'Float')['$===']($case)) {return self.$to_f()['$=='](other)}
      else {return other['$=='](self)}})()
    }, TMP_Rational_$eq$eq_7.$$arity = 1);
    
    Opal.def(self, '$<=>', TMP_Rational_$lt$eq$gt_8 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)}
      else if ($$($nesting, 'Integer')['$===']($case)) {return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)}
      else if ($$($nesting, 'Float')['$===']($case)) {return self.$to_f()['$<=>'](other)}
      else {return self.$__coerced__("<=>", other)}})()
    }, TMP_Rational_$lt$eq$gt_8.$$arity = 1);
    
    Opal.def(self, '$+', TMP_Rational_$_9 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_plus(self.$to_f(), other)}
      else {return self.$__coerced__("+", other)}})()
    }, TMP_Rational_$_9.$$arity = 1);
    
    Opal.def(self, '$-', TMP_Rational_$_10 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_minus(self.$to_f(), other)}
      else {return self.$__coerced__("-", other)}})()
    }, TMP_Rational_$_10.$$arity = 1);
    
    Opal.def(self, '$*', TMP_Rational_$_11 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_times(self.num, other.$numerator());
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_times(self.num, other), self.den)}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_times(self.$to_f(), other)}
      else {return self.$__coerced__("*", other)}})()
    }, TMP_Rational_$_11.$$arity = 1);
    
    Opal.def(self, '$/', TMP_Rational_$_12 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_times(self.num, other.$denominator());
      den = $rb_times(self.den, other.$numerator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {if (other['$=='](0)) {
        return $rb_divide(self.$to_f(), 0.0)
      } else {
        return self.$Rational(self.num, $rb_times(self.den, other))
      }}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_divide(self.$to_f(), other)}
      else {return self.$__coerced__("/", other)}})()
    }, TMP_Rational_$_12.$$arity = 1);
    
    Opal.def(self, '$**', TMP_Rational_$$_13 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Integer')['$===']($case)) {if ($truthy((($a = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0)))) {
        return $$$($$($nesting, 'Float'), 'INFINITY')
      } else if ($truthy($rb_gt(other, 0))) {
        return self.$Rational(self.num['$**'](other), self.den['$**'](other))
      } else if ($truthy($rb_lt(other, 0))) {
        return self.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))
      } else {
        return self.$Rational(1, 1)
      }}
      else if ($$($nesting, 'Float')['$===']($case)) {return self.$to_f()['$**'](other)}
      else if ($$($nesting, 'Rational')['$===']($case)) {if (other['$=='](0)) {
        return self.$Rational(1, 1)
      } else if (other.$denominator()['$=='](1)) {
        if ($truthy($rb_lt(other, 0))) {
          return self.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))
        } else {
          return self.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))
        }
      } else if ($truthy((($a = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0)))) {
        return self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
      } else {
        return self.$to_f()['$**'](other)
      }}
      else {return self.$__coerced__("**", other)}})()
    }, TMP_Rational_$$_13.$$arity = 1);
    
    Opal.def(self, '$abs', TMP_Rational_abs_14 = function $$abs() {
      var self = this;

      return self.$Rational(self.num.$abs(), self.den.$abs())
    }, TMP_Rational_abs_14.$$arity = 0);
    
    Opal.def(self, '$ceil', TMP_Rational_ceil_15 = function $$ceil(precision) {
      var self = this;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$ceil()
      } else {
        return self.$with_precision("ceil", precision)
      };
    }, TMP_Rational_ceil_15.$$arity = -1);
    Opal.alias(self, "divide", "/");
    
    Opal.def(self, '$floor', TMP_Rational_floor_16 = function $$floor(precision) {
      var self = this;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$floor()
      } else {
        return self.$with_precision("floor", precision)
      };
    }, TMP_Rational_floor_16.$$arity = -1);
    
    Opal.def(self, '$hash', TMP_Rational_hash_17 = function $$hash() {
      var self = this;

      return "" + "Rational:" + (self.num) + ":" + (self.den)
    }, TMP_Rational_hash_17.$$arity = 0);
    
    Opal.def(self, '$inspect', TMP_Rational_inspect_18 = function $$inspect() {
      var self = this;

      return "" + "(" + (self) + ")"
    }, TMP_Rational_inspect_18.$$arity = 0);
    Opal.alias(self, "quo", "/");
    
    Opal.def(self, '$rationalize', TMP_Rational_rationalize_19 = function $$rationalize(eps) {
      var self = this;

      
      ;
      
      if (arguments.length > 1) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }

      if (eps == null) {
        return self;
      }

      var e = eps.$abs(),
          a = $rb_minus(self, e),
          b = $rb_plus(self, e);

      var p0 = 0,
          p1 = 1,
          q0 = 1,
          q1 = 0,
          p2, q2;

      var c, k, t;

      while (true) {
        c = (a).$ceil();

        if ($rb_le(c, b)) {
          break;
        }

        k  = c - 1;
        p2 = k * p1 + p0;
        q2 = k * q1 + q0;
        t  = $rb_divide(1, $rb_minus(b, k));
        b  = $rb_divide(1, $rb_minus(a, k));
        a  = t;

        p0 = p1;
        q0 = q1;
        p1 = p2;
        q1 = q2;
      }

      return self.$Rational(c * p1 + p0, c * q1 + q0);
    ;
    }, TMP_Rational_rationalize_19.$$arity = -1);
    
    Opal.def(self, '$round', TMP_Rational_round_20 = function $$round(precision) {
      var self = this, num = nil, den = nil, approx = nil;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
      } else {
        return self.$with_precision("round", precision)
      };
      if (self.num['$=='](0)) {
        return 0};
      if (self.den['$=='](1)) {
        return self.num};
      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);
      den = $rb_times(self.den, 2);
      approx = $rb_divide(num, den).$truncate();
      if ($truthy($rb_lt(self.num, 0))) {
        return approx['$-@']()
      } else {
        return approx
      };
    }, TMP_Rational_round_20.$$arity = -1);
    
    Opal.def(self, '$to_f', TMP_Rational_to_f_21 = function $$to_f() {
      var self = this;

      return $rb_divide(self.num, self.den)
    }, TMP_Rational_to_f_21.$$arity = 0);
    
    Opal.def(self, '$to_i', TMP_Rational_to_i_22 = function $$to_i() {
      var self = this;

      return self.$truncate()
    }, TMP_Rational_to_i_22.$$arity = 0);
    
    Opal.def(self, '$to_r', TMP_Rational_to_r_23 = function $$to_r() {
      var self = this;

      return self
    }, TMP_Rational_to_r_23.$$arity = 0);
    
    Opal.def(self, '$to_s', TMP_Rational_to_s_24 = function $$to_s() {
      var self = this;

      return "" + (self.num) + "/" + (self.den)
    }, TMP_Rational_to_s_24.$$arity = 0);
    
    Opal.def(self, '$truncate', TMP_Rational_truncate_25 = function $$truncate(precision) {
      var self = this;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
        if ($truthy($rb_lt(self.num, 0))) {
          return self.$ceil()
        } else {
          return self.$floor()
        }
      } else {
        return self.$with_precision("truncate", precision)
      };
    }, TMP_Rational_truncate_25.$$arity = -1);
    return (Opal.def(self, '$with_precision', TMP_Rational_with_precision_26 = function $$with_precision(method, precision) {
      var self = this, p = nil, s = nil;

      
      if ($truthy($$($nesting, 'Integer')['$==='](precision))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not an Integer")
      };
      p = (10)['$**'](precision);
      s = $rb_times(self, p);
      if ($truthy($rb_lt(precision, 1))) {
        return $rb_divide(s.$send(method), p).$to_i()
      } else {
        return self.$Rational(s.$send(method), p)
      };
    }, TMP_Rational_with_precision_26.$$arity = 2), nil) && 'with_precision';
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_Rational_27;

    
    Opal.def(self, '$Rational', TMP_Kernel_Rational_27 = function $$Rational(numerator, denominator) {
      var self = this;

      
      
      if (denominator == null) {
        denominator = 1;
      };
      return $$($nesting, 'Rational').$convert(numerator, denominator);
    }, TMP_Kernel_Rational_27.$$arity = -2)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_String_to_r_28;

    return (Opal.def(self, '$to_r', TMP_String_to_r_28 = function $$to_r() {
      var self = this;

      
      var str = self.trimLeft(),
          re = /^[+-]?[\d_]+(\.[\d_]+)?/,
          match = str.match(re),
          numerator, denominator;

      function isFloat() {
        return re.test(str);
      }

      function cutFloat() {
        var match = str.match(re);
        var number = match[0];
        str = str.slice(number.length);
        return number.replace(/_/g, '');
      }

      if (isFloat()) {
        numerator = parseFloat(cutFloat());

        if (str[0] === '/') {
          // rational real part
          str = str.slice(1);

          if (isFloat()) {
            denominator = parseFloat(cutFloat());
            return self.$Rational(numerator, denominator);
          } else {
            return self.$Rational(numerator, 1);
          }
        } else {
          return self.$Rational(numerator, 1);
        }
      } else {
        return self.$Rational(0, 1);
      }
    
    }, TMP_String_to_r_28.$$arity = 0), nil) && 'to_r'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/time"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$===', '$raise', '$coerce_to!', '$respond_to?', '$to_str', '$to_i', '$new', '$<=>', '$to_f', '$nil?', '$>', '$<', '$strftime', '$year', '$month', '$day', '$+', '$round', '$/', '$-', '$copy_instance_variables', '$initialize_dup', '$is_a?', '$zero?', '$wday', '$utc?', '$mon', '$yday', '$hour', '$min', '$sec', '$rjust', '$ljust', '$zone', '$to_s', '$[]', '$cweek_cyear', '$isdst', '$<=', '$!=', '$==', '$ceil']);
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Time_at_1, TMP_Time_new_2, TMP_Time_local_3, TMP_Time_gm_4, TMP_Time_now_5, TMP_Time_$_6, TMP_Time_$_7, TMP_Time_$lt$eq$gt_8, TMP_Time_$eq$eq_9, TMP_Time_asctime_10, TMP_Time_day_11, TMP_Time_yday_12, TMP_Time_isdst_13, TMP_Time_dup_14, TMP_Time_eql$q_15, TMP_Time_friday$q_16, TMP_Time_hash_17, TMP_Time_hour_18, TMP_Time_inspect_19, TMP_Time_min_20, TMP_Time_mon_21, TMP_Time_monday$q_22, TMP_Time_saturday$q_23, TMP_Time_sec_24, TMP_Time_succ_25, TMP_Time_usec_26, TMP_Time_zone_27, TMP_Time_getgm_28, TMP_Time_gmtime_29, TMP_Time_gmt$q_30, TMP_Time_gmt_offset_31, TMP_Time_strftime_32, TMP_Time_sunday$q_33, TMP_Time_thursday$q_34, TMP_Time_to_a_35, TMP_Time_to_f_36, TMP_Time_to_i_37, TMP_Time_tuesday$q_38, TMP_Time_wday_39, TMP_Time_wednesday$q_40, TMP_Time_year_41, TMP_Time_cweek_cyear_42;

    
    self.$include($$($nesting, 'Comparable'));
    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;
    Opal.defs(self, '$at', TMP_Time_at_1 = function $$at(seconds, frac) {
      var self = this;

      
      ;
      
      var result;

      if ($$($nesting, 'Time')['$==='](seconds)) {
        if (frac !== undefined) {
          self.$raise($$($nesting, 'TypeError'), "can't convert Time into an exact number")
        }
        result = new Date(seconds.getTime());
        result.is_utc = seconds.is_utc;
        return result;
      }

      if (!seconds.$$is_number) {
        seconds = $$($nesting, 'Opal')['$coerce_to!'](seconds, $$($nesting, 'Integer'), "to_int");
      }

      if (frac === undefined) {
        return new Date(seconds * 1000);
      }

      if (!frac.$$is_number) {
        frac = $$($nesting, 'Opal')['$coerce_to!'](frac, $$($nesting, 'Integer'), "to_int");
      }

      return new Date(seconds * 1000 + (frac / 1000));
    ;
    }, TMP_Time_at_1.$$arity = -2);
    
    function time_params(year, month, day, hour, min, sec) {
      if (year.$$is_string) {
        year = parseInt(year, 10);
      } else {
        year = $$($nesting, 'Opal')['$coerce_to!'](year, $$($nesting, 'Integer'), "to_int");
      }

      if (month === nil) {
        month = 1;
      } else if (!month.$$is_number) {
        if ((month)['$respond_to?']("to_str")) {
          month = (month).$to_str();
          switch (month.toLowerCase()) {
          case 'jan': month =  1; break;
          case 'feb': month =  2; break;
          case 'mar': month =  3; break;
          case 'apr': month =  4; break;
          case 'may': month =  5; break;
          case 'jun': month =  6; break;
          case 'jul': month =  7; break;
          case 'aug': month =  8; break;
          case 'sep': month =  9; break;
          case 'oct': month = 10; break;
          case 'nov': month = 11; break;
          case 'dec': month = 12; break;
          default: month = (month).$to_i();
          }
        } else {
          month = $$($nesting, 'Opal')['$coerce_to!'](month, $$($nesting, 'Integer'), "to_int");
        }
      }

      if (month < 1 || month > 12) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "month out of range: " + (month))
      }
      month = month - 1;

      if (day === nil) {
        day = 1;
      } else if (day.$$is_string) {
        day = parseInt(day, 10);
      } else {
        day = $$($nesting, 'Opal')['$coerce_to!'](day, $$($nesting, 'Integer'), "to_int");
      }

      if (day < 1 || day > 31) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "day out of range: " + (day))
      }

      if (hour === nil) {
        hour = 0;
      } else if (hour.$$is_string) {
        hour = parseInt(hour, 10);
      } else {
        hour = $$($nesting, 'Opal')['$coerce_to!'](hour, $$($nesting, 'Integer'), "to_int");
      }

      if (hour < 0 || hour > 24) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "hour out of range: " + (hour))
      }

      if (min === nil) {
        min = 0;
      } else if (min.$$is_string) {
        min = parseInt(min, 10);
      } else {
        min = $$($nesting, 'Opal')['$coerce_to!'](min, $$($nesting, 'Integer'), "to_int");
      }

      if (min < 0 || min > 59) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "min out of range: " + (min))
      }

      if (sec === nil) {
        sec = 0;
      } else if (!sec.$$is_number) {
        if (sec.$$is_string) {
          sec = parseInt(sec, 10);
        } else {
          sec = $$($nesting, 'Opal')['$coerce_to!'](sec, $$($nesting, 'Integer'), "to_int");
        }
      }

      if (sec < 0 || sec > 60) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "sec out of range: " + (sec))
      }

      return [year, month, day, hour, min, sec];
    }
  ;
    Opal.defs(self, '$new', TMP_Time_new_2 = function(year, month, day, hour, min, sec, utc_offset) {
      var self = this;

      
      ;
      
      if (month == null) {
        month = nil;
      };
      
      if (day == null) {
        day = nil;
      };
      
      if (hour == null) {
        hour = nil;
      };
      
      if (min == null) {
        min = nil;
      };
      
      if (sec == null) {
        sec = nil;
      };
      
      if (utc_offset == null) {
        utc_offset = nil;
      };
      
      var args, result;

      if (year === undefined) {
        return new Date();
      }

      if (utc_offset !== nil) {
        self.$raise($$($nesting, 'ArgumentError'), "Opal does not support explicitly specifying UTC offset for Time")
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    ;
    }, TMP_Time_new_2.$$arity = -1);
    Opal.defs(self, '$local', TMP_Time_local_3 = function $$local(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      
      
      if (month == null) {
        month = nil;
      };
      
      if (day == null) {
        day = nil;
      };
      
      if (hour == null) {
        hour = nil;
      };
      
      if (min == null) {
        min = nil;
      };
      
      if (sec == null) {
        sec = nil;
      };
      
      if (millisecond == null) {
        millisecond = nil;
      };
      
      if (_dummy1 == null) {
        _dummy1 = nil;
      };
      
      if (_dummy2 == null) {
        _dummy2 = nil;
      };
      
      if (_dummy3 == null) {
        _dummy3 = nil;
      };
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    ;
    }, TMP_Time_local_3.$$arity = -2);
    Opal.defs(self, '$gm', TMP_Time_gm_4 = function $$gm(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      
      
      if (month == null) {
        month = nil;
      };
      
      if (day == null) {
        day = nil;
      };
      
      if (hour == null) {
        hour = nil;
      };
      
      if (min == null) {
        min = nil;
      };
      
      if (sec == null) {
        sec = nil;
      };
      
      if (millisecond == null) {
        millisecond = nil;
      };
      
      if (_dummy1 == null) {
        _dummy1 = nil;
      };
      
      if (_dummy2 == null) {
        _dummy2 = nil;
      };
      
      if (_dummy3 == null) {
        _dummy3 = nil;
      };
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        result.setUTCFullYear(year);
      }
      result.is_utc = true;
      return result;
    ;
    }, TMP_Time_gm_4.$$arity = -2);
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      
      Opal.alias(self, "mktime", "local");
      return Opal.alias(self, "utc", "gm");
    })(Opal.get_singleton_class(self), $nesting);
    Opal.defs(self, '$now', TMP_Time_now_5 = function $$now() {
      var self = this;

      return self.$new()
    }, TMP_Time_now_5.$$arity = 0);
    
    Opal.def(self, '$+', TMP_Time_$_6 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Time')['$==='](other))) {
        self.$raise($$($nesting, 'TypeError'), "time + time?")};
      
      if (!other.$$is_number) {
        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Integer'), "to_int");
      }
      var result = new Date(self.getTime() + (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_Time_$_6.$$arity = 1);
    
    Opal.def(self, '$-', TMP_Time_$_7 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Time')['$==='](other))) {
        return (self.getTime() - other.getTime()) / 1000};
      
      if (!other.$$is_number) {
        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Integer'), "to_int");
      }
      var result = new Date(self.getTime() - (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_Time_$_7.$$arity = 1);
    
    Opal.def(self, '$<=>', TMP_Time_$lt$eq$gt_8 = function(other) {
      var self = this, r = nil;

      if ($truthy($$($nesting, 'Time')['$==='](other))) {
        return self.$to_f()['$<=>'](other.$to_f())
      } else {
        
        r = other['$<=>'](self);
        if ($truthy(r['$nil?']())) {
          return nil
        } else if ($truthy($rb_gt(r, 0))) {
          return -1
        } else if ($truthy($rb_lt(r, 0))) {
          return 1
        } else {
          return 0
        };
      }
    }, TMP_Time_$lt$eq$gt_8.$$arity = 1);
    
    Opal.def(self, '$==', TMP_Time_$eq$eq_9 = function(other) {
      var $a, self = this;

      return ($truthy($a = $$($nesting, 'Time')['$==='](other)) ? self.$to_f() === other.$to_f() : $a)
    }, TMP_Time_$eq$eq_9.$$arity = 1);
    
    Opal.def(self, '$asctime', TMP_Time_asctime_10 = function $$asctime() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y")
    }, TMP_Time_asctime_10.$$arity = 0);
    Opal.alias(self, "ctime", "asctime");
    
    Opal.def(self, '$day', TMP_Time_day_11 = function $$day() {
      var self = this;

      return self.is_utc ? self.getUTCDate() : self.getDate();
    }, TMP_Time_day_11.$$arity = 0);
    
    Opal.def(self, '$yday', TMP_Time_yday_12 = function $$yday() {
      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;

      
      start_of_year = $$($nesting, 'Time').$new(self.$year()).$to_i();
      start_of_day = $$($nesting, 'Time').$new(self.$year(), self.$month(), self.$day()).$to_i();
      one_day = 86400;
      return $rb_plus($rb_divide($rb_minus(start_of_day, start_of_year), one_day).$round(), 1);
    }, TMP_Time_yday_12.$$arity = 0);
    
    Opal.def(self, '$isdst', TMP_Time_isdst_13 = function $$isdst() {
      var self = this;

      
      var jan = new Date(self.getFullYear(), 0, 1),
          jul = new Date(self.getFullYear(), 6, 1);
      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    
    }, TMP_Time_isdst_13.$$arity = 0);
    Opal.alias(self, "dst?", "isdst");
    
    Opal.def(self, '$dup', TMP_Time_dup_14 = function $$dup() {
      var self = this, copy = nil;

      
      copy = new Date(self.getTime());
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_Time_dup_14.$$arity = 0);
    
    Opal.def(self, '$eql?', TMP_Time_eql$q_15 = function(other) {
      var $a, self = this;

      return ($truthy($a = other['$is_a?']($$($nesting, 'Time'))) ? self['$<=>'](other)['$zero?']() : $a)
    }, TMP_Time_eql$q_15.$$arity = 1);
    
    Opal.def(self, '$friday?', TMP_Time_friday$q_16 = function() {
      var self = this;

      return self.$wday() == 5
    }, TMP_Time_friday$q_16.$$arity = 0);
    
    Opal.def(self, '$hash', TMP_Time_hash_17 = function $$hash() {
      var self = this;

      return 'Time:' + self.getTime();
    }, TMP_Time_hash_17.$$arity = 0);
    
    Opal.def(self, '$hour', TMP_Time_hour_18 = function $$hour() {
      var self = this;

      return self.is_utc ? self.getUTCHours() : self.getHours();
    }, TMP_Time_hour_18.$$arity = 0);
    
    Opal.def(self, '$inspect', TMP_Time_inspect_19 = function $$inspect() {
      var self = this;

      if ($truthy(self['$utc?']())) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
      } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      }
    }, TMP_Time_inspect_19.$$arity = 0);
    Opal.alias(self, "mday", "day");
    
    Opal.def(self, '$min', TMP_Time_min_20 = function $$min() {
      var self = this;

      return self.is_utc ? self.getUTCMinutes() : self.getMinutes();
    }, TMP_Time_min_20.$$arity = 0);
    
    Opal.def(self, '$mon', TMP_Time_mon_21 = function $$mon() {
      var self = this;

      return (self.is_utc ? self.getUTCMonth() : self.getMonth()) + 1;
    }, TMP_Time_mon_21.$$arity = 0);
    
    Opal.def(self, '$monday?', TMP_Time_monday$q_22 = function() {
      var self = this;

      return self.$wday() == 1
    }, TMP_Time_monday$q_22.$$arity = 0);
    Opal.alias(self, "month", "mon");
    
    Opal.def(self, '$saturday?', TMP_Time_saturday$q_23 = function() {
      var self = this;

      return self.$wday() == 6
    }, TMP_Time_saturday$q_23.$$arity = 0);
    
    Opal.def(self, '$sec', TMP_Time_sec_24 = function $$sec() {
      var self = this;

      return self.is_utc ? self.getUTCSeconds() : self.getSeconds();
    }, TMP_Time_sec_24.$$arity = 0);
    
    Opal.def(self, '$succ', TMP_Time_succ_25 = function $$succ() {
      var self = this;

      
      var result = new Date(self.getTime() + 1000);
      result.is_utc = self.is_utc;
      return result;
    
    }, TMP_Time_succ_25.$$arity = 0);
    
    Opal.def(self, '$usec', TMP_Time_usec_26 = function $$usec() {
      var self = this;

      return self.getMilliseconds() * 1000;
    }, TMP_Time_usec_26.$$arity = 0);
    
    Opal.def(self, '$zone', TMP_Time_zone_27 = function $$zone() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\((.+)\)(?:\s|$)/)[1]
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    }, TMP_Time_zone_27.$$arity = 0);
    
    Opal.def(self, '$getgm', TMP_Time_getgm_28 = function $$getgm() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.is_utc = true;
      return result;
    
    }, TMP_Time_getgm_28.$$arity = 0);
    Opal.alias(self, "getutc", "getgm");
    
    Opal.def(self, '$gmtime', TMP_Time_gmtime_29 = function $$gmtime() {
      var self = this;

      
      self.is_utc = true;
      return self;
    
    }, TMP_Time_gmtime_29.$$arity = 0);
    Opal.alias(self, "utc", "gmtime");
    
    Opal.def(self, '$gmt?', TMP_Time_gmt$q_30 = function() {
      var self = this;

      return self.is_utc === true;
    }, TMP_Time_gmt$q_30.$$arity = 0);
    
    Opal.def(self, '$gmt_offset', TMP_Time_gmt_offset_31 = function $$gmt_offset() {
      var self = this;

      return -self.getTimezoneOffset() * 60;
    }, TMP_Time_gmt_offset_31.$$arity = 0);
    
    Opal.def(self, '$strftime', TMP_Time_strftime_32 = function $$strftime(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        width = parseInt(width, 10);

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    }, TMP_Time_strftime_32.$$arity = 1);
    
    Opal.def(self, '$sunday?', TMP_Time_sunday$q_33 = function() {
      var self = this;

      return self.$wday() == 0
    }, TMP_Time_sunday$q_33.$$arity = 0);
    
    Opal.def(self, '$thursday?', TMP_Time_thursday$q_34 = function() {
      var self = this;

      return self.$wday() == 4
    }, TMP_Time_thursday$q_34.$$arity = 0);
    
    Opal.def(self, '$to_a', TMP_Time_to_a_35 = function $$to_a() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()]
    }, TMP_Time_to_a_35.$$arity = 0);
    
    Opal.def(self, '$to_f', TMP_Time_to_f_36 = function $$to_f() {
      var self = this;

      return self.getTime() / 1000;
    }, TMP_Time_to_f_36.$$arity = 0);
    
    Opal.def(self, '$to_i', TMP_Time_to_i_37 = function $$to_i() {
      var self = this;

      return parseInt(self.getTime() / 1000, 10);
    }, TMP_Time_to_i_37.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$tuesday?', TMP_Time_tuesday$q_38 = function() {
      var self = this;

      return self.$wday() == 2
    }, TMP_Time_tuesday$q_38.$$arity = 0);
    Opal.alias(self, "tv_sec", "to_i");
    Opal.alias(self, "tv_usec", "usec");
    Opal.alias(self, "utc?", "gmt?");
    Opal.alias(self, "gmtoff", "gmt_offset");
    Opal.alias(self, "utc_offset", "gmt_offset");
    
    Opal.def(self, '$wday', TMP_Time_wday_39 = function $$wday() {
      var self = this;

      return self.is_utc ? self.getUTCDay() : self.getDay();
    }, TMP_Time_wday_39.$$arity = 0);
    
    Opal.def(self, '$wednesday?', TMP_Time_wednesday$q_40 = function() {
      var self = this;

      return self.$wday() == 3
    }, TMP_Time_wednesday$q_40.$$arity = 0);
    
    Opal.def(self, '$year', TMP_Time_year_41 = function $$year() {
      var self = this;

      return self.is_utc ? self.getUTCFullYear() : self.getFullYear();
    }, TMP_Time_year_41.$$arity = 0);
    return (Opal.def(self, '$cweek_cyear', TMP_Time_cweek_cyear_42 = function $$cweek_cyear() {
      var $a, self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      
      jan01 = $$($nesting, 'Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if ($truthy(($truthy($a = $rb_le(jan01_wday, 4)) ? jan01_wday['$!='](0) : $a))) {
        offset = $rb_minus(jan01_wday, 1)
      } else {
        
        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);
        if (offset['$=='](-8)) {
          offset = -1};
      };
      week = $rb_divide($rb_plus(self.$yday(), offset), 7.0).$ceil();
      if ($truthy($rb_le(week, 0))) {
        return $$($nesting, 'Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()
      } else if (week['$=='](53)) {
        
        dec31 = $$($nesting, 'Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if ($truthy(($truthy($a = $rb_le(dec31_wday, 3)) ? dec31_wday['$!='](0) : $a))) {
          
          week = 1;
          year = $rb_plus(year, 1);};};
      return [week, year];
    }, TMP_Time_cweek_cyear_42.$$arity = 0), nil) && 'cweek_cyear';
  })($nesting[0], Date, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/struct"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$const_name!', '$unshift', '$map', '$coerce_to!', '$new', '$each', '$define_struct_attribute', '$allocate', '$initialize', '$alias_method', '$module_eval', '$to_proc', '$const_set', '$==', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$class', '$last', '$>', '$length', '$-', '$keys', '$any?', '$join', '$[]', '$[]=', '$each_with_index', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$name', '$+', '$each_pair', '$inspect', '$each_with_object', '$flatten', '$to_a', '$respond_to?', '$dig']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Struct_new_1, TMP_Struct_define_struct_attribute_6, TMP_Struct_members_9, TMP_Struct_inherited_10, TMP_Struct_initialize_12, TMP_Struct_members_15, TMP_Struct_hash_16, TMP_Struct_$$_17, TMP_Struct_$$$eq_18, TMP_Struct_$eq$eq_19, TMP_Struct_eql$q_20, TMP_Struct_each_21, TMP_Struct_each_pair_24, TMP_Struct_length_27, TMP_Struct_to_a_28, TMP_Struct_inspect_30, TMP_Struct_to_h_32, TMP_Struct_values_at_34, TMP_Struct_dig_36;

    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defs(self, '$new', TMP_Struct_new_1 = function(const_name, $a, $b) {
      var $iter = TMP_Struct_new_1.$$p, block = $iter || nil, $post_args, $kwargs, args, keyword_init, TMP_2, TMP_3, self = this, klass = nil;

      if ($iter) TMP_Struct_new_1.$$p = null;
      
      
      if ($iter) TMP_Struct_new_1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      $kwargs = Opal.extract_kwargs($post_args);
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      args = $post_args;;
      
      keyword_init = $kwargs.$$smap["keyword_init"];
      if (keyword_init == null) {
        keyword_init = false
      };
      if ($truthy(const_name)) {
        
        try {
          const_name = $$($nesting, 'Opal')['$const_name!'](const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'TypeError'), $$($nesting, 'NameError')])) {
            try {
              
              args.$unshift(const_name);
              const_name = nil;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };};
      $send(args, 'map', [], (TMP_2 = function(arg){var self = TMP_2.$$s || this;

      
        
        if (arg == null) {
          arg = nil;
        };
        return $$($nesting, 'Opal')['$coerce_to!'](arg, $$($nesting, 'String'), "to_str");}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
      klass = $send($$($nesting, 'Class'), 'new', [self], (TMP_3 = function(){var self = TMP_3.$$s || this, TMP_4;

      
        $send(args, 'each', [], (TMP_4 = function(arg){var self = TMP_4.$$s || this;

        
          
          if (arg == null) {
            arg = nil;
          };
          return self.$define_struct_attribute(arg);}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        return (function(self, $parent_nesting) {
          var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_new_5;

          
          
          Opal.def(self, '$new', TMP_new_5 = function($a) {
            var $post_args, args, self = this, instance = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            instance = self.$allocate();
            instance.$$data = {};
            $send(instance, 'initialize', Opal.to_a(args));
            return instance;
          }, TMP_new_5.$$arity = -1);
          return self.$alias_method("[]", "new");
        })(Opal.get_singleton_class(self), $nesting);}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3));
      if ($truthy(block)) {
        $send(klass, 'module_eval', [], block.$to_proc())};
      klass.$$keyword_init = keyword_init;
      if ($truthy(const_name)) {
        $$($nesting, 'Struct').$const_set(const_name, klass)};
      return klass;
    }, TMP_Struct_new_1.$$arity = -2);
    Opal.defs(self, '$define_struct_attribute', TMP_Struct_define_struct_attribute_6 = function $$define_struct_attribute(name) {
      var TMP_7, TMP_8, self = this;

      
      if (self['$==']($$($nesting, 'Struct'))) {
        self.$raise($$($nesting, 'ArgumentError'), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      $send(self, 'define_method', [name], (TMP_7 = function(){var self = TMP_7.$$s || this;

      return self.$$data[name];}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7));
      return $send(self, 'define_method', ["" + (name) + "="], (TMP_8 = function(value){var self = TMP_8.$$s || this;

      
        
        if (value == null) {
          value = nil;
        };
        return self.$$data[name] = value;;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
    }, TMP_Struct_define_struct_attribute_6.$$arity = 1);
    Opal.defs(self, '$members', TMP_Struct_members_9 = function $$members() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      
      if (self['$==']($$($nesting, 'Struct'))) {
        self.$raise($$($nesting, 'ArgumentError'), "the Struct class has no members")};
      return (self.members = ($truthy($a = self.members) ? $a : []));
    }, TMP_Struct_members_9.$$arity = 0);
    Opal.defs(self, '$inherited', TMP_Struct_inherited_10 = function $$inherited(klass) {
      var TMP_11, self = this, members = nil;
      if (self.members == null) self.members = nil;

      
      members = self.members;
      return $send(klass, 'instance_eval', [], (TMP_11 = function(){var self = TMP_11.$$s || this;

      return (self.members = members)}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
    }, TMP_Struct_inherited_10.$$arity = 1);
    
    Opal.def(self, '$initialize', TMP_Struct_initialize_12 = function $$initialize($a) {
      var $post_args, args, $b, TMP_13, TMP_14, self = this, kwargs = nil, extra = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(self.$class().$$keyword_init)) {
        
        kwargs = ($truthy($b = args.$last()) ? $b : $hash2([], {}));
        if ($truthy(($truthy($b = $rb_gt(args.$length(), 1)) ? $b : (args.length === 1 && !kwargs.$$is_hash)))) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (given " + (args.$length()) + ", expected 0)")};
        extra = $rb_minus(kwargs.$keys(), self.$class().$members());
        if ($truthy(extra['$any?']())) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "unknown keywords: " + (extra.$join(", ")))};
        return $send(self.$class().$members(), 'each', [], (TMP_13 = function(name){var self = TMP_13.$$s || this, $writer = nil;

        
          
          if (name == null) {
            name = nil;
          };
          $writer = [name, kwargs['$[]'](name)];
          $send(self, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13));
      } else {
        
        if ($truthy($rb_gt(args.$length(), self.$class().$members().$length()))) {
          self.$raise($$($nesting, 'ArgumentError'), "struct size differs")};
        return $send(self.$class().$members(), 'each_with_index', [], (TMP_14 = function(name, index){var self = TMP_14.$$s || this, $writer = nil;

        
          
          if (name == null) {
            name = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          $writer = [name, args['$[]'](index)];
          $send(self, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14));
      };
    }, TMP_Struct_initialize_12.$$arity = -1);
    
    Opal.def(self, '$members', TMP_Struct_members_15 = function $$members() {
      var self = this;

      return self.$class().$members()
    }, TMP_Struct_members_15.$$arity = 0);
    
    Opal.def(self, '$hash', TMP_Struct_hash_16 = function $$hash() {
      var self = this;

      return $$($nesting, 'Hash').$new(self.$$data).$hash()
    }, TMP_Struct_hash_16.$$arity = 0);
    
    Opal.def(self, '$[]', TMP_Struct_$$_17 = function(name) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](name))) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ($truthy($$($nesting, 'String')['$==='](name))) {
        
        if(!self.$$data.hasOwnProperty(name)) {
          self.$raise($$($nesting, 'NameError').$new("" + "no member '" + (name) + "' in struct", name))
        }
      
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      return self.$$data[name];;
    }, TMP_Struct_$$_17.$$arity = 1);
    
    Opal.def(self, '$[]=', TMP_Struct_$$$eq_18 = function(name, value) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](name))) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ($truthy($$($nesting, 'String')['$==='](name))) {
        if ($truthy(self.$class().$members()['$include?'](name.$to_sym()))) {
        } else {
          self.$raise($$($nesting, 'NameError').$new("" + "no member '" + (name) + "' in struct", name))
        }
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      return self.$$data[name] = value;;
    }, TMP_Struct_$$$eq_18.$$arity = 2);
    
    Opal.def(self, '$==', TMP_Struct_$eq$eq_19 = function(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
      } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($$($nesting, 'Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_Struct_$eq$eq_19.$$arity = 1);
    
    Opal.def(self, '$eql?', TMP_Struct_eql$q_20 = function(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
      } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($$($nesting, 'Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_Struct_eql$q_20.$$arity = 1);
    
    Opal.def(self, '$each', TMP_Struct_each_21 = function $$each() {
      var TMP_22, TMP_23, $iter = TMP_Struct_each_21.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Struct_each_21.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each"], (TMP_22 = function(){var self = TMP_22.$$s || this;

        return self.$size()}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22))
      };
      $send(self.$class().$members(), 'each', [], (TMP_23 = function(name){var self = TMP_23.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        return Opal.yield1($yield, self['$[]'](name));;}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23));
      return self;
    }, TMP_Struct_each_21.$$arity = 0);
    
    Opal.def(self, '$each_pair', TMP_Struct_each_pair_24 = function $$each_pair() {
      var TMP_25, TMP_26, $iter = TMP_Struct_each_pair_24.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Struct_each_pair_24.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_pair"], (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25))
      };
      $send(self.$class().$members(), 'each', [], (TMP_26 = function(name){var self = TMP_26.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        return Opal.yield1($yield, [name, self['$[]'](name)]);;}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
      return self;
    }, TMP_Struct_each_pair_24.$$arity = 0);
    
    Opal.def(self, '$length', TMP_Struct_length_27 = function $$length() {
      var self = this;

      return self.$class().$members().$length()
    }, TMP_Struct_length_27.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$to_a', TMP_Struct_to_a_28 = function $$to_a() {
      var TMP_29, self = this;

      return $send(self.$class().$members(), 'map', [], (TMP_29 = function(name){var self = TMP_29.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        return self['$[]'](name);}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29))
    }, TMP_Struct_to_a_28.$$arity = 0);
    Opal.alias(self, "values", "to_a");
    
    Opal.def(self, '$inspect', TMP_Struct_inspect_30 = function $$inspect() {
      var $a, TMP_31, self = this, result = nil;

      
      result = "#<struct ";
      if ($truthy(($truthy($a = $$($nesting, 'Struct')['$==='](self)) ? self.$class().$name() : $a))) {
        result = $rb_plus(result, "" + (self.$class()) + " ")};
      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], (TMP_31 = function(name, value){var self = TMP_31.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return "" + (name) + "=" + (value.$inspect());}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31)).$join(", "));
      result = $rb_plus(result, ">");
      return result;
    }, TMP_Struct_inspect_30.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$to_h', TMP_Struct_to_h_32 = function $$to_h() {
      var TMP_33, self = this;

      return $send(self.$class().$members(), 'each_with_object', [$hash2([], {})], (TMP_33 = function(name, h){var self = TMP_33.$$s || this, $writer = nil;

      
        
        if (name == null) {
          name = nil;
        };
        
        if (h == null) {
          h = nil;
        };
        $writer = [name, self['$[]'](name)];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_33.$$s = self, TMP_33.$$arity = 2, TMP_33))
    }, TMP_Struct_to_h_32.$$arity = 0);
    
    Opal.def(self, '$values_at', TMP_Struct_values_at_34 = function $$values_at($a) {
      var $post_args, args, TMP_35, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      args = $send(args, 'map', [], (TMP_35 = function(arg){var self = TMP_35.$$s || this;

      
        
        if (arg == null) {
          arg = nil;
        };
        return arg.$$is_range ? arg.$to_a() : arg;}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35)).$flatten();
      
      var result = [];
      for (var i = 0, len = args.length; i < len; i++) {
        if (!args[i].$$is_number) {
          self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + ((args[i]).$class()) + " into Integer")
        }
        result.push(self['$[]'](args[i]));
      }
      return result;
    ;
    }, TMP_Struct_values_at_34.$$arity = -1);
    return (Opal.def(self, '$dig', TMP_Struct_dig_36 = function $$dig(key, $a) {
      var $post_args, keys, self = this, item = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      keys = $post_args;;
      item = (function() {if ($truthy(key.$$is_string && self.$$data.hasOwnProperty(key))) {
        return self.$$data[key] || nil;
      } else {
        return nil
      }; return nil; })();
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(keys));
    }, TMP_Struct_dig_36.$$arity = -2), nil) && 'dig';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/io"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $writer = nil;

  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$-', '$extend']);
  
  (function($base, $super, $parent_nesting) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_IO_tty$q_1, TMP_IO_closed$q_2, TMP_IO_write_3, TMP_IO_flush_4;

    def.tty = def.closed = nil;
    
    Opal.const_set($nesting[0], 'SEEK_SET', 0);
    Opal.const_set($nesting[0], 'SEEK_CUR', 1);
    Opal.const_set($nesting[0], 'SEEK_END', 2);
    
    Opal.def(self, '$tty?', TMP_IO_tty$q_1 = function() {
      var self = this;

      return self.tty
    }, TMP_IO_tty$q_1.$$arity = 0);
    
    Opal.def(self, '$closed?', TMP_IO_closed$q_2 = function() {
      var self = this;

      return self.closed
    }, TMP_IO_closed$q_2.$$arity = 0);
    self.$attr_accessor("write_proc");
    
    Opal.def(self, '$write', TMP_IO_write_3 = function $$write(string) {
      var self = this;

      
      self.write_proc(string);
      return string.$size();
    }, TMP_IO_write_3.$$arity = 1);
    self.$attr_accessor("sync", "tty");
    
    Opal.def(self, '$flush', TMP_IO_flush_4 = function $$flush() {
      var self = this;

      return nil
    }, TMP_IO_flush_4.$$arity = 0);
    (function($base, $parent_nesting) {
      function $Writable() {};
      var self = $Writable = $module($base, 'Writable', $Writable);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Writable_$lt$lt_5, TMP_Writable_print_6, TMP_Writable_puts_8;

      
      
      Opal.def(self, '$<<', TMP_Writable_$lt$lt_5 = function(string) {
        var self = this;

        
        self.$write(string);
        return self;
      }, TMP_Writable_$lt$lt_5.$$arity = 1);
      
      Opal.def(self, '$print', TMP_Writable_print_6 = function $$print($a) {
        var $post_args, args, TMP_7, self = this;
        if ($gvars[","] == null) $gvars[","] = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        self.$write($send(args, 'map', [], (TMP_7 = function(arg){var self = TMP_7.$$s || this;

        
          
          if (arg == null) {
            arg = nil;
          };
          return self.$String(arg);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7)).$join($gvars[","]));
        return nil;
      }, TMP_Writable_print_6.$$arity = -1);
      
      Opal.def(self, '$puts', TMP_Writable_puts_8 = function $$puts($a) {
        var $post_args, args, TMP_9, self = this, newline = nil;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        newline = $gvars["/"];
        if ($truthy(args['$empty?']())) {
          self.$write($gvars["/"])
        } else {
          self.$write($send(args, 'map', [], (TMP_9 = function(arg){var self = TMP_9.$$s || this;

          
            
            if (arg == null) {
              arg = nil;
            };
            return self.$String(arg).$chomp();}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9)).$concat([nil]).$join(newline))
        };
        return nil;
      }, TMP_Writable_puts_8.$$arity = -1);
    })($nesting[0], $nesting);
    return (function($base, $parent_nesting) {
      function $Readable() {};
      var self = $Readable = $module($base, 'Readable', $Readable);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Readable_readbyte_10, TMP_Readable_readchar_11, TMP_Readable_readline_12, TMP_Readable_readpartial_13;

      
      
      Opal.def(self, '$readbyte', TMP_Readable_readbyte_10 = function $$readbyte() {
        var self = this;

        return self.$getbyte()
      }, TMP_Readable_readbyte_10.$$arity = 0);
      
      Opal.def(self, '$readchar', TMP_Readable_readchar_11 = function $$readchar() {
        var self = this;

        return self.$getc()
      }, TMP_Readable_readchar_11.$$arity = 0);
      
      Opal.def(self, '$readline', TMP_Readable_readline_12 = function $$readline(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        
        
        if (sep == null) {
          sep = $gvars["/"];
        };
        return self.$raise($$($nesting, 'NotImplementedError'));
      }, TMP_Readable_readline_12.$$arity = -1);
      
      Opal.def(self, '$readpartial', TMP_Readable_readpartial_13 = function $$readpartial(integer, outbuf) {
        var self = this;

        
        
        if (outbuf == null) {
          outbuf = nil;
        };
        return self.$raise($$($nesting, 'NotImplementedError'));
      }, TMP_Readable_readpartial_13.$$arity = -2);
    })($nesting[0], $nesting);
  })($nesting[0], null, $nesting);
  Opal.const_set($nesting[0], 'STDERR', ($gvars.stderr = $$($nesting, 'IO').$new()));
  Opal.const_set($nesting[0], 'STDIN', ($gvars.stdin = $$($nesting, 'IO').$new()));
  Opal.const_set($nesting[0], 'STDOUT', ($gvars.stdout = $$($nesting, 'IO').$new()));
  var console = Opal.global.console;
  
  $writer = [typeof(process) === 'object' && typeof(process.stdout) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}];
  $send($$($nesting, 'STDOUT'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}];
  $send($$($nesting, 'STDERR'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  $$($nesting, 'STDOUT').$extend($$$($$($nesting, 'IO'), 'Writable'));
  return $$($nesting, 'STDERR').$extend($$$($$($nesting, 'IO'), 'Writable'));
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/main"] = function(Opal) {
  var TMP_to_s_1, TMP_include_2, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$include']);
  
  Opal.defs(self, '$to_s', TMP_to_s_1 = function $$to_s() {
    var self = this;

    return "main"
  }, TMP_to_s_1.$$arity = 0);
  return (Opal.defs(self, '$include', TMP_include_2 = function $$include(mod) {
    var self = this;

    return $$($nesting, 'Object').$include(mod)
  }, TMP_include_2.$$arity = 1), nil) && 'include';
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/dir"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]']);
  return (function($base, $super, $parent_nesting) {
    function $Dir(){};
    var self = $Dir = $klass($base, $super, 'Dir', $Dir);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_chdir_1, TMP_pwd_2, TMP_home_3;

      
      
      Opal.def(self, '$chdir', TMP_chdir_1 = function $$chdir(dir) {
        var $iter = TMP_chdir_1.$$p, $yield = $iter || nil, self = this, prev_cwd = nil;

        if ($iter) TMP_chdir_1.$$p = null;
        return (function() { try {
        
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return Opal.yieldX($yield, []);;
        } finally {
          Opal.current_dir = prev_cwd
        }; })()
      }, TMP_chdir_1.$$arity = 1);
      
      Opal.def(self, '$pwd', TMP_pwd_2 = function $$pwd() {
        var self = this;

        return Opal.current_dir || '.';
      }, TMP_pwd_2.$$arity = 0);
      Opal.alias(self, "getwd", "pwd");
      return (Opal.def(self, '$home', TMP_home_3 = function $$home() {
        var $a, self = this;

        return ($truthy($a = $$($nesting, 'ENV')['$[]']("HOME")) ? $a : ".")
      }, TMP_home_3.$$arity = 0), nil) && 'home';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/file"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$home', '$raise', '$start_with?', '$+', '$sub', '$pwd', '$split', '$unshift', '$join', '$respond_to?', '$coerce_to!', '$basename', '$empty?', '$rindex', '$[]', '$nil?', '$==', '$-', '$length', '$gsub', '$find', '$=~', '$map', '$each_with_index', '$flatten', '$reject', '$to_proc', '$end_with?']);
  return (function($base, $super, $parent_nesting) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), windows_root_rx = nil;

    
    Opal.const_set($nesting[0], 'Separator', Opal.const_set($nesting[0], 'SEPARATOR', "/"));
    Opal.const_set($nesting[0], 'ALT_SEPARATOR', nil);
    Opal.const_set($nesting[0], 'PATH_SEPARATOR', ":");
    Opal.const_set($nesting[0], 'FNM_SYSCASE', 0);
    windows_root_rx = /^[a-zA-Z]:(?:\\|\/)/;
    return (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_expand_path_1, TMP_dirname_2, TMP_basename_3, TMP_extname_4, TMP_exist$q_5, TMP_directory$q_6, TMP_join_8, TMP_split_11;

      
      
      Opal.def(self, '$expand_path', TMP_expand_path_1 = function $$expand_path(path, basedir) {
        var $a, self = this, sep = nil, sep_chars = nil, new_parts = nil, home = nil, home_path_regexp = nil, path_abs = nil, basedir_abs = nil, parts = nil, leading_sep = nil, abs = nil, new_path = nil;

        
        
        if (basedir == null) {
          basedir = nil;
        };
        sep = $$($nesting, 'SEPARATOR');
        sep_chars = $sep_chars();
        new_parts = [];
        if ($truthy(path[0] === '~' || (basedir && basedir[0] === '~'))) {
          
          home = $$($nesting, 'Dir').$home();
          if ($truthy(home)) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "couldn't find HOME environment -- expanding `~'")
          };
          if ($truthy(home['$start_with?'](sep))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "non-absolute home")
          };
          home = $rb_plus(home, sep);
          home_path_regexp = new RegExp("" + "^\\~(?:" + (sep) + "|$)");
          path = path.$sub(home_path_regexp, home);
          if ($truthy(basedir)) {
            basedir = basedir.$sub(home_path_regexp, home)};};
        basedir = ($truthy($a = basedir) ? $a : $$($nesting, 'Dir').$pwd());
        path_abs = path.substr(0, sep.length) === sep || windows_root_rx.test(path);
        basedir_abs = basedir.substr(0, sep.length) === sep || windows_root_rx.test(basedir);
        if ($truthy(path_abs)) {
          
          parts = path.$split(new RegExp("" + "[" + (sep_chars) + "]"));
          leading_sep = windows_root_rx.test(path) ? '' : path.$sub(new RegExp("" + "^([" + (sep_chars) + "]+).*$"), "\\1");
          abs = true;
        } else {
          
          parts = $rb_plus(basedir.$split(new RegExp("" + "[" + (sep_chars) + "]")), path.$split(new RegExp("" + "[" + (sep_chars) + "]")));
          leading_sep = windows_root_rx.test(basedir) ? '' : basedir.$sub(new RegExp("" + "^([" + (sep_chars) + "]+).*$"), "\\1");
          abs = basedir_abs;
        };
        
        var part;
        for (var i = 0, ii = parts.length; i < ii; i++) {
          part = parts[i];

          if (
            (part === nil) ||
            (part === ''  && ((new_parts.length === 0) || abs)) ||
            (part === '.' && ((new_parts.length === 0) || abs))
          ) {
            continue;
          }
          if (part === '..') {
            new_parts.pop();
          } else {
            new_parts.push(part);
          }
        }

        if (!abs && parts[0] !== '.') {
          new_parts.$unshift(".")
        }
      ;
        new_path = new_parts.$join(sep);
        if ($truthy(abs)) {
          new_path = $rb_plus(leading_sep, new_path)};
        return new_path;
      }, TMP_expand_path_1.$$arity = -2);
      Opal.alias(self, "realpath", "expand_path");
      
      // Coerce a given path to a path string using #to_path and #to_str
      function $coerce_to_path(path) {
        if ($truthy((path)['$respond_to?']("to_path"))) {
          path = path.$to_path();
        }

        path = $$($nesting, 'Opal')['$coerce_to!'](path, $$($nesting, 'String'), "to_str");

        return path;
      }

      // Return a RegExp compatible char class
      function $sep_chars() {
        if ($$($nesting, 'ALT_SEPARATOR') === nil) {
          return Opal.escape_regexp($$($nesting, 'SEPARATOR'));
        } else {
          return Opal.escape_regexp($rb_plus($$($nesting, 'SEPARATOR'), $$($nesting, 'ALT_SEPARATOR')));
        }
      }
    ;
      
      Opal.def(self, '$dirname', TMP_dirname_2 = function $$dirname(path) {
        var self = this, sep_chars = nil;

        
        sep_chars = $sep_chars();
        path = $coerce_to_path(path);
        
        var absolute = path.match(new RegExp("" + "^[" + (sep_chars) + "]"));

        path = path.replace(new RegExp("" + "[" + (sep_chars) + "]+$"), ''); // remove trailing separators
        path = path.replace(new RegExp("" + "[^" + (sep_chars) + "]+$"), ''); // remove trailing basename
        path = path.replace(new RegExp("" + "[" + (sep_chars) + "]+$"), ''); // remove final trailing separators

        if (path === '') {
          return absolute ? '/' : '.';
        }

        return path;
      ;
      }, TMP_dirname_2.$$arity = 1);
      
      Opal.def(self, '$basename', TMP_basename_3 = function $$basename(name, suffix) {
        var self = this, sep_chars = nil;

        
        
        if (suffix == null) {
          suffix = nil;
        };
        sep_chars = $sep_chars();
        name = $coerce_to_path(name);
        
        if (name.length == 0) {
          return name;
        }

        if (suffix !== nil) {
          suffix = $$($nesting, 'Opal')['$coerce_to!'](suffix, $$($nesting, 'String'), "to_str")
        } else {
          suffix = null;
        }

        name = name.replace(new RegExp("" + "(.)[" + (sep_chars) + "]*$"), '$1');
        name = name.replace(new RegExp("" + "^(?:.*[" + (sep_chars) + "])?([^" + (sep_chars) + "]+)$"), '$1');

        if (suffix === ".*") {
          name = name.replace(/\.[^\.]+$/, '');
        } else if(suffix !== null) {
          suffix = Opal.escape_regexp(suffix);
          name = name.replace(new RegExp("" + (suffix) + "$"), '');
        }

        return name;
      ;
      }, TMP_basename_3.$$arity = -2);
      
      Opal.def(self, '$extname', TMP_extname_4 = function $$extname(path) {
        var $a, self = this, filename = nil, last_dot_idx = nil;

        
        path = $coerce_to_path(path);
        filename = self.$basename(path);
        if ($truthy(filename['$empty?']())) {
          return ""};
        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(".");
        if ($truthy(($truthy($a = last_dot_idx['$nil?']()) ? $a : $rb_plus(last_dot_idx, 1)['$==']($rb_minus(filename.$length(), 1))))) {
          return ""
        } else {
          return filename['$[]'](Opal.Range.$new($rb_plus(last_dot_idx, 1), -1, false))
        };
      }, TMP_extname_4.$$arity = 1);
      
      Opal.def(self, '$exist?', TMP_exist$q_5 = function(path) {
        var self = this;

        return Opal.modules[path] != null
      }, TMP_exist$q_5.$$arity = 1);
      Opal.alias(self, "exists?", "exist?");
      
      Opal.def(self, '$directory?', TMP_directory$q_6 = function(path) {
        var TMP_7, self = this, files = nil, file = nil;

        
        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub(new RegExp("" + "(^." + ($$($nesting, 'SEPARATOR')) + "+|" + ($$($nesting, 'SEPARATOR')) + "+$)"));
        file = $send(files, 'find', [], (TMP_7 = function(f){var self = TMP_7.$$s || this;

        
          
          if (f == null) {
            f = nil;
          };
          return f['$=~'](new RegExp("" + "^" + (path)));}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        return file;
      }, TMP_directory$q_6.$$arity = 1);
      
      Opal.def(self, '$join', TMP_join_8 = function $$join($a) {
        var $post_args, paths, TMP_9, TMP_10, self = this, result = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        paths = $post_args;;
        if ($truthy(paths['$empty?']())) {
          return ""};
        result = "";
        paths = $send(paths.$flatten().$each_with_index(), 'map', [], (TMP_9 = function(item, index){var self = TMP_9.$$s || this, $b;

        
          
          if (item == null) {
            item = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          if ($truthy((($b = index['$=='](0)) ? item['$empty?']() : index['$=='](0)))) {
            return $$($nesting, 'SEPARATOR')
          } else if ($truthy((($b = paths.$length()['$==']($rb_plus(index, 1))) ? item['$empty?']() : paths.$length()['$==']($rb_plus(index, 1))))) {
            return $$($nesting, 'SEPARATOR')
          } else {
            return item
          };}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9));
        paths = $send(paths, 'reject', [], "empty?".$to_proc());
        $send(paths, 'each_with_index', [], (TMP_10 = function(item, index){var self = TMP_10.$$s || this, $b, next_item = nil;

        
          
          if (item == null) {
            item = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          next_item = paths['$[]']($rb_plus(index, 1));
          if ($truthy(next_item['$nil?']())) {
            return (result = "" + (result) + (item))
          } else {
            
            if ($truthy(($truthy($b = item['$end_with?']($$($nesting, 'SEPARATOR'))) ? next_item['$start_with?']($$($nesting, 'SEPARATOR')) : $b))) {
              item = item.$sub(new RegExp("" + ($$($nesting, 'SEPARATOR')) + "+$"), "")};
            return (result = (function() {if ($truthy(($truthy($b = item['$end_with?']($$($nesting, 'SEPARATOR'))) ? $b : next_item['$start_with?']($$($nesting, 'SEPARATOR'))))) {
              return "" + (result) + (item)
            } else {
              return "" + (result) + (item) + ($$($nesting, 'SEPARATOR'))
            }; return nil; })());
          };}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10));
        return result;
      }, TMP_join_8.$$arity = -1);
      return (Opal.def(self, '$split', TMP_split_11 = function $$split(path) {
        var self = this;

        return path.$split($$($nesting, 'SEPARATOR'))
      }, TMP_split_11.$$arity = 1), nil) && 'split';
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], $$($nesting, 'IO'), $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/process"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$const_set', '$size', '$<<', '$__register_clock__', '$to_f', '$now', '$new', '$[]', '$raise']);
  
  (function($base, $super, $parent_nesting) {
    function $Process(){};
    var self = $Process = $klass($base, $super, 'Process', $Process);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Process___register_clock___1, TMP_Process_pid_2, TMP_Process_times_3, TMP_Process_clock_gettime_4, monotonic = nil;

    
    self.__clocks__ = [];
    Opal.defs(self, '$__register_clock__', TMP_Process___register_clock___1 = function $$__register_clock__(name, func) {
      var self = this;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      
      self.$const_set(name, self.__clocks__.$size());
      return self.__clocks__['$<<'](func);
    }, TMP_Process___register_clock___1.$$arity = 2);
    self.$__register_clock__("CLOCK_REALTIME", function() { return Date.now() });
    monotonic = false;
    
    if (Opal.global.performance) {
      monotonic = function() {
        return performance.now()
      };
    }
    else if (Opal.global.process && process.hrtime) {
      // let now be the base to get smaller numbers
      var hrtime_base = process.hrtime();

      monotonic = function() {
        var hrtime = process.hrtime(hrtime_base);
        var us = (hrtime[1] / 1000) | 0; // cut below microsecs;
        return ((hrtime[0] * 1000) + (us / 1000));
      };
    }
  ;
    if ($truthy(monotonic)) {
      self.$__register_clock__("CLOCK_MONOTONIC", monotonic)};
    Opal.defs(self, '$pid', TMP_Process_pid_2 = function $$pid() {
      var self = this;

      return 0
    }, TMP_Process_pid_2.$$arity = 0);
    Opal.defs(self, '$times', TMP_Process_times_3 = function $$times() {
      var self = this, t = nil;

      
      t = $$($nesting, 'Time').$now().$to_f();
      return $$$($$($nesting, 'Benchmark'), 'Tms').$new(t, t, t, t, t);
    }, TMP_Process_times_3.$$arity = 0);
    return (Opal.defs(self, '$clock_gettime', TMP_Process_clock_gettime_4 = function $$clock_gettime(clock_id, unit) {
      var $a, self = this, clock = nil;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      
      
      if (unit == null) {
        unit = "float_second";
      };
      ($truthy($a = (clock = self.__clocks__['$[]'](clock_id))) ? $a : self.$raise($$$($$($nesting, 'Errno'), 'EINVAL'), "" + "clock_gettime(" + (clock_id) + ") " + (self.__clocks__['$[]'](clock_id))));
      
      var ms = clock();
      switch (unit) {
        case 'float_second':      return  (ms / 1000);         // number of seconds as a float (default)
        case 'float_millisecond': return  (ms / 1);            // number of milliseconds as a float
        case 'float_microsecond': return  (ms * 1000);         // number of microseconds as a float
        case 'second':            return ((ms / 1000)    | 0); // number of seconds as an integer
        case 'millisecond':       return ((ms / 1)       | 0); // number of milliseconds as an integer
        case 'microsecond':       return ((ms * 1000)    | 0); // number of microseconds as an integer
        case 'nanosecond':        return ((ms * 1000000) | 0); // number of nanoseconds as an integer
        default: self.$raise($$($nesting, 'ArgumentError'), "" + "unexpected unit: " + (unit))
      }
    ;
    }, TMP_Process_clock_gettime_4.$$arity = -2), nil) && 'clock_gettime';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Signal(){};
    var self = $Signal = $klass($base, $super, 'Signal', $Signal);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Signal_trap_5;

    return (Opal.defs(self, '$trap', TMP_Signal_trap_5 = function $$trap($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, TMP_Signal_trap_5.$$arity = -1), nil) && 'trap'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $GC(){};
    var self = $GC = $klass($base, $super, 'GC', $GC);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_GC_start_6;

    return (Opal.defs(self, '$start', TMP_GC_start_6 = function $$start() {
      var self = this;

      return nil
    }, TMP_GC_start_6.$$arity = 0), nil) && 'start'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/random"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new_seed', '$coerce_to!', '$reseed', '$rand', '$seed', '$<', '$raise', '$encode', '$join', '$new', '$chr', '$===', '$==', '$state', '$const_defined?', '$const_set']);
  return (function($base, $super, $parent_nesting) {
    function $Random(){};
    var self = $Random = $klass($base, $super, 'Random', $Random);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Random_initialize_1, TMP_Random_reseed_2, TMP_Random_new_seed_3, TMP_Random_rand_4, TMP_Random_srand_5, TMP_Random_urandom_6, TMP_Random_$eq$eq_8, TMP_Random_bytes_9, TMP_Random_rand_11, TMP_Random_generator$eq_12;

    
    self.$attr_reader("seed", "state");
    
    Opal.def(self, '$initialize', TMP_Random_initialize_1 = function $$initialize(seed) {
      var self = this;

      
      
      if (seed == null) {
        seed = $$($nesting, 'Random').$new_seed();
      };
      seed = $$($nesting, 'Opal')['$coerce_to!'](seed, $$($nesting, 'Integer'), "to_int");
      self.state = seed;
      return self.$reseed(seed);
    }, TMP_Random_initialize_1.$$arity = -1);
    
    Opal.def(self, '$reseed', TMP_Random_reseed_2 = function $$reseed(seed) {
      var self = this;

      
      self.seed = seed;
      return self.$rng = Opal.$$rand.reseed(seed);;
    }, TMP_Random_reseed_2.$$arity = 1);
    Opal.defs(self, '$new_seed', TMP_Random_new_seed_3 = function $$new_seed() {
      var self = this;

      return Opal.$$rand.new_seed();
    }, TMP_Random_new_seed_3.$$arity = 0);
    Opal.defs(self, '$rand', TMP_Random_rand_4 = function $$rand(limit) {
      var self = this;

      
      ;
      return $$($nesting, 'DEFAULT').$rand(limit);
    }, TMP_Random_rand_4.$$arity = -1);
    Opal.defs(self, '$srand', TMP_Random_srand_5 = function $$srand(n) {
      var self = this, previous_seed = nil;

      
      
      if (n == null) {
        n = $$($nesting, 'Random').$new_seed();
      };
      n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      previous_seed = $$($nesting, 'DEFAULT').$seed();
      $$($nesting, 'DEFAULT').$reseed(n);
      return previous_seed;
    }, TMP_Random_srand_5.$$arity = -1);
    Opal.defs(self, '$urandom', TMP_Random_urandom_6 = function $$urandom(size) {
      var TMP_7, self = this;

      
      size = $$($nesting, 'Opal')['$coerce_to!'](size, $$($nesting, 'Integer'), "to_int");
      if ($truthy($rb_lt(size, 0))) {
        self.$raise($$($nesting, 'ArgumentError'), "negative string size (or size too big)")};
      return $send($$($nesting, 'Array'), 'new', [size], (TMP_7 = function(){var self = TMP_7.$$s || this;

      return self.$rand(255).$chr()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7)).$join().$encode("ASCII-8BIT");
    }, TMP_Random_urandom_6.$$arity = 1);
    
    Opal.def(self, '$==', TMP_Random_$eq$eq_8 = function(other) {
      var $a, self = this;

      
      if ($truthy($$($nesting, 'Random')['$==='](other))) {
      } else {
        return false
      };
      return (($a = self.$seed()['$=='](other.$seed())) ? self.$state()['$=='](other.$state()) : self.$seed()['$=='](other.$seed()));
    }, TMP_Random_$eq$eq_8.$$arity = 1);
    
    Opal.def(self, '$bytes', TMP_Random_bytes_9 = function $$bytes(length) {
      var TMP_10, self = this;

      
      length = $$($nesting, 'Opal')['$coerce_to!'](length, $$($nesting, 'Integer'), "to_int");
      return $send($$($nesting, 'Array'), 'new', [length], (TMP_10 = function(){var self = TMP_10.$$s || this;

      return self.$rand(255).$chr()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10)).$join().$encode("ASCII-8BIT");
    }, TMP_Random_bytes_9.$$arity = 1);
    
    Opal.def(self, '$rand', TMP_Random_rand_11 = function $$rand(limit) {
      var self = this;

      
      ;
      
      function randomFloat() {
        self.state++;
        return Opal.$$rand.rand(self.$rng);
      }

      function randomInt() {
        return Math.floor(randomFloat() * limit);
      }

      function randomRange() {
        var min = limit.begin,
            max = limit.end;

        if (min === nil || max === nil) {
          return nil;
        }

        var length = max - min;

        if (length < 0) {
          return nil;
        }

        if (length === 0) {
          return min;
        }

        if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {
          length++;
        }

        return self.$rand(length) + min;
      }

      if (limit == null) {
        return randomFloat();
      } else if (limit.$$is_range) {
        return randomRange();
      } else if (limit.$$is_number) {
        if (limit <= 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid argument - " + (limit))
        }

        if (limit % 1 === 0) {
          // integer
          return randomInt();
        } else {
          return randomFloat() * limit;
        }
      } else {
        limit = $$($nesting, 'Opal')['$coerce_to!'](limit, $$($nesting, 'Integer'), "to_int");

        if (limit <= 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid argument - " + (limit))
        }

        return randomInt();
      }
    ;
    }, TMP_Random_rand_11.$$arity = -1);
    return (Opal.defs(self, '$generator=', TMP_Random_generator$eq_12 = function(generator) {
      var self = this;

      
      Opal.$$rand = generator;
      if ($truthy(self['$const_defined?']("DEFAULT"))) {
        return $$($nesting, 'DEFAULT').$reseed()
      } else {
        return self.$const_set("DEFAULT", self.$new(self.$new_seed()))
      };
    }, TMP_Random_generator$eq_12.$$arity = 1), nil) && 'generator=';
  })($nesting[0], null, $nesting)
};

/*
This is based on an adaptation of Makoto Matsumoto and Takuji Nishimura's code
done by Sean McCullough <banksean@gmail.com> and Dave Heitzman
<daveheitzman@yahoo.com>, subsequently readapted from an updated version of
ruby's random.c (rev c38a183032a7826df1adabd8aa0725c713d53e1c).

The original copyright notice from random.c follows.

  This is based on trimmed version of MT19937.  To get the original version,
  contact <http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html>.

  The original copyright notice follows.

     A C-program for MT19937, with initialization improved 2002/2/10.
     Coded by Takuji Nishimura and Makoto Matsumoto.
     This is a faster version by taking Shawn Cokus's optimization,
     Matthe Bellew's simplification, Isaku Wada's real version.

     Before using, initialize the state by using init_genrand(mt, seed)
     or init_by_array(mt, init_key, key_length).

     Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
     All rights reserved.

     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions
     are met:

       1. Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.

       2. Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.

       3. The names of its contributors may not be used to endorse or promote
          products derived from this software without specific prior written
          permission.

     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


     Any feedback is very welcome.
     http://www.math.keio.ac.jp/matumoto/emt.html
     email: matumoto@math.keio.ac.jp
*/
var MersenneTwister = (function() {
  /* Period parameters */
  var N = 624;
  var M = 397;
  var MATRIX_A = 0x9908b0df;      /* constant vector a */
  var UMASK = 0x80000000;         /* most significant w-r bits */
  var LMASK = 0x7fffffff;         /* least significant r bits */
  var MIXBITS = function(u,v) { return ( ((u) & UMASK) | ((v) & LMASK) ); };
  var TWIST = function(u,v) { return (MIXBITS((u),(v)) >>> 1) ^ ((v & 0x1) ? MATRIX_A : 0x0); };

  function init(s) {
    var mt = {left: 0, next: N, state: new Array(N)};
    init_genrand(mt, s);
    return mt;
  }

  /* initializes mt[N] with a seed */
  function init_genrand(mt, s) {
    var j, i;
    mt.state[0] = s >>> 0;
    for (j=1; j<N; j++) {
      mt.state[j] = (1812433253 * ((mt.state[j-1] ^ (mt.state[j-1] >> 30) >>> 0)) + j);
      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
      /* In the previous versions, MSBs of the seed affect   */
      /* only MSBs of the array state[].                     */
      /* 2002/01/09 modified by Makoto Matsumoto             */
      mt.state[j] &= 0xffffffff;  /* for >32 bit machines */
    }
    mt.left = 1;
    mt.next = N;
  }

  /* generate N words at one time */
  function next_state(mt) {
    var p = 0, _p = mt.state;
    var j;

    mt.left = N;
    mt.next = 0;

    for (j=N-M+1; --j; p++)
      _p[p] = _p[p+(M)] ^ TWIST(_p[p+(0)], _p[p+(1)]);

    for (j=M; --j; p++)
      _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[p+(1)]);

    _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[0]);
  }

  /* generates a random number on [0,0xffffffff]-interval */
  function genrand_int32(mt) {
    /* mt must be initialized */
    var y;

    if (--mt.left <= 0) next_state(mt);
    y = mt.state[mt.next++];

    /* Tempering */
    y ^= (y >>> 11);
    y ^= (y << 7) & 0x9d2c5680;
    y ^= (y << 15) & 0xefc60000;
    y ^= (y >>> 18);

    return y >>> 0;
  }

  function int_pair_to_real_exclusive(a, b) {
    a >>>= 5;
    b >>>= 6;
    return(a*67108864.0+b)*(1.0/9007199254740992.0);
  }

  // generates a random number on [0,1) with 53-bit resolution
  function genrand_real(mt) {
    /* mt must be initialized */
    var a = genrand_int32(mt), b = genrand_int32(mt);
    return int_pair_to_real_exclusive(a, b);
  }

  return { genrand_real: genrand_real, init: init };
})();
Opal.loaded(["corelib/random/MersenneTwister.js"]);
/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/random/mersenne_twister"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$generator=', '$-']);
  
  self.$require("corelib/random/MersenneTwister");
  return (function($base, $super, $parent_nesting) {
    function $Random(){};
    var self = $Random = $klass($base, $super, 'Random', $Random);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), $writer = nil;

    
    var MAX_INT = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
    Opal.const_set($nesting[0], 'MERSENNE_TWISTER_GENERATOR', {
    new_seed: function() { return Math.round(Math.random() * MAX_INT); },
    reseed: function(seed) { return MersenneTwister.init(seed); },
    rand: function(mt) { return MersenneTwister.genrand_real(mt); }
  });
    
    $writer = [$$($nesting, 'MERSENNE_TWISTER_GENERATOR')];
    $send(self, 'generator=', Opal.to_a($writer));
    return $writer[$rb_minus($writer["length"], 1)];;
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/unsupported"] = function(Opal) {
  var TMP_public_35, TMP_private_36, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$raise', '$warn', '$%']);
  
  
  var warnings = {};

  function handle_unsupported_feature(message) {
    switch (Opal.config.unsupported_features_severity) {
    case 'error':
      $$($nesting, 'Kernel').$raise($$($nesting, 'NotImplementedError'), message)
      break;
    case 'warning':
      warn(message)
      break;
    default: // ignore
      // noop
    }
  }

  function warn(string) {
    if (warnings[string]) {
      return;
    }

    warnings[string] = true;
    self.$warn(string);
  }
;
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_String_$lt$lt_1, TMP_String_capitalize$B_2, TMP_String_chomp$B_3, TMP_String_chop$B_4, TMP_String_downcase$B_5, TMP_String_gsub$B_6, TMP_String_lstrip$B_7, TMP_String_next$B_8, TMP_String_reverse$B_9, TMP_String_slice$B_10, TMP_String_squeeze$B_11, TMP_String_strip$B_12, TMP_String_sub$B_13, TMP_String_succ$B_14, TMP_String_swapcase$B_15, TMP_String_tr$B_16, TMP_String_tr_s$B_17, TMP_String_upcase$B_18, TMP_String_prepend_19, TMP_String_$$$eq_20, TMP_String_clear_21, TMP_String_encode$B_22, TMP_String_unicode_normalize$B_23;

    
    var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";
    
    Opal.def(self, '$<<', TMP_String_$lt$lt_1 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("<<"));
    }, TMP_String_$lt$lt_1.$$arity = -1);
    
    Opal.def(self, '$capitalize!', TMP_String_capitalize$B_2 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("capitalize!"));
    }, TMP_String_capitalize$B_2.$$arity = -1);
    
    Opal.def(self, '$chomp!', TMP_String_chomp$B_3 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("chomp!"));
    }, TMP_String_chomp$B_3.$$arity = -1);
    
    Opal.def(self, '$chop!', TMP_String_chop$B_4 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("chop!"));
    }, TMP_String_chop$B_4.$$arity = -1);
    
    Opal.def(self, '$downcase!', TMP_String_downcase$B_5 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("downcase!"));
    }, TMP_String_downcase$B_5.$$arity = -1);
    
    Opal.def(self, '$gsub!', TMP_String_gsub$B_6 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("gsub!"));
    }, TMP_String_gsub$B_6.$$arity = -1);
    
    Opal.def(self, '$lstrip!', TMP_String_lstrip$B_7 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("lstrip!"));
    }, TMP_String_lstrip$B_7.$$arity = -1);
    
    Opal.def(self, '$next!', TMP_String_next$B_8 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("next!"));
    }, TMP_String_next$B_8.$$arity = -1);
    
    Opal.def(self, '$reverse!', TMP_String_reverse$B_9 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("reverse!"));
    }, TMP_String_reverse$B_9.$$arity = -1);
    
    Opal.def(self, '$slice!', TMP_String_slice$B_10 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("slice!"));
    }, TMP_String_slice$B_10.$$arity = -1);
    
    Opal.def(self, '$squeeze!', TMP_String_squeeze$B_11 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("squeeze!"));
    }, TMP_String_squeeze$B_11.$$arity = -1);
    
    Opal.def(self, '$strip!', TMP_String_strip$B_12 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("strip!"));
    }, TMP_String_strip$B_12.$$arity = -1);
    
    Opal.def(self, '$sub!', TMP_String_sub$B_13 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("sub!"));
    }, TMP_String_sub$B_13.$$arity = -1);
    
    Opal.def(self, '$succ!', TMP_String_succ$B_14 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("succ!"));
    }, TMP_String_succ$B_14.$$arity = -1);
    
    Opal.def(self, '$swapcase!', TMP_String_swapcase$B_15 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("swapcase!"));
    }, TMP_String_swapcase$B_15.$$arity = -1);
    
    Opal.def(self, '$tr!', TMP_String_tr$B_16 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("tr!"));
    }, TMP_String_tr$B_16.$$arity = -1);
    
    Opal.def(self, '$tr_s!', TMP_String_tr_s$B_17 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("tr_s!"));
    }, TMP_String_tr_s$B_17.$$arity = -1);
    
    Opal.def(self, '$upcase!', TMP_String_upcase$B_18 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("upcase!"));
    }, TMP_String_upcase$B_18.$$arity = -1);
    
    Opal.def(self, '$prepend', TMP_String_prepend_19 = function $$prepend($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("prepend"));
    }, TMP_String_prepend_19.$$arity = -1);
    
    Opal.def(self, '$[]=', TMP_String_$$$eq_20 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("[]="));
    }, TMP_String_$$$eq_20.$$arity = -1);
    
    Opal.def(self, '$clear', TMP_String_clear_21 = function $$clear($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("clear"));
    }, TMP_String_clear_21.$$arity = -1);
    
    Opal.def(self, '$encode!', TMP_String_encode$B_22 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("encode!"));
    }, TMP_String_encode$B_22.$$arity = -1);
    return (Opal.def(self, '$unicode_normalize!', TMP_String_unicode_normalize$B_23 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("unicode_normalize!"));
    }, TMP_String_unicode_normalize$B_23.$$arity = -1), nil) && 'unicode_normalize!';
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_freeze_24, TMP_Kernel_frozen$q_25;

    
    var ERROR = "Object freezing is not supported by Opal";
    
    Opal.def(self, '$freeze', TMP_Kernel_freeze_24 = function $$freeze() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_Kernel_freeze_24.$$arity = 0);
    
    Opal.def(self, '$frozen?', TMP_Kernel_frozen$q_25 = function() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_Kernel_frozen$q_25.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_taint_26, TMP_Kernel_untaint_27, TMP_Kernel_tainted$q_28;

    
    var ERROR = "Object tainting is not supported by Opal";
    
    Opal.def(self, '$taint', TMP_Kernel_taint_26 = function $$taint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_Kernel_taint_26.$$arity = 0);
    
    Opal.def(self, '$untaint', TMP_Kernel_untaint_27 = function $$untaint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_Kernel_untaint_27.$$arity = 0);
    
    Opal.def(self, '$tainted?', TMP_Kernel_tainted$q_28 = function() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_Kernel_tainted$q_28.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Module_public_29, TMP_Module_private_class_method_30, TMP_Module_private_method_defined$q_31, TMP_Module_private_constant_32;

    
    
    Opal.def(self, '$public', TMP_Module_public_29 = function($a) {
      var $post_args, methods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      methods = $post_args;;
      
      if (methods.length === 0) {
        self.$$module_function = false;
      }

      return nil;
    ;
    }, TMP_Module_public_29.$$arity = -1);
    Opal.alias(self, "private", "public");
    Opal.alias(self, "protected", "public");
    Opal.alias(self, "nesting", "public");
    
    Opal.def(self, '$private_class_method', TMP_Module_private_class_method_30 = function $$private_class_method($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self;
    }, TMP_Module_private_class_method_30.$$arity = -1);
    Opal.alias(self, "public_class_method", "private_class_method");
    
    Opal.def(self, '$private_method_defined?', TMP_Module_private_method_defined$q_31 = function(obj) {
      var self = this;

      return false
    }, TMP_Module_private_method_defined$q_31.$$arity = 1);
    
    Opal.def(self, '$private_constant', TMP_Module_private_constant_32 = function $$private_constant($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, TMP_Module_private_constant_32.$$arity = -1);
    Opal.alias(self, "protected_method_defined?", "private_method_defined?");
    Opal.alias(self, "public_instance_methods", "instance_methods");
    Opal.alias(self, "public_instance_method", "instance_method");
    return Opal.alias(self, "public_method_defined?", "method_defined?");
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_private_methods_33;

    
    
    Opal.def(self, '$private_methods', TMP_Kernel_private_methods_33 = function $$private_methods($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return [];
    }, TMP_Kernel_private_methods_33.$$arity = -1);
    Opal.alias(self, "private_instance_methods", "private_methods");
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_eval_34;

    
    Opal.def(self, '$eval', TMP_Kernel_eval_34 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), "" + "To use Kernel#eval, you must first require 'opal-parser'. " + ("" + "See https://github.com/opal/opal/blob/" + ($$($nesting, 'RUBY_ENGINE_VERSION')) + "/docs/opal_parser.md for details."));
    }, TMP_Kernel_eval_34.$$arity = -1)
  })($nesting[0], $nesting);
  Opal.defs(self, '$public', TMP_public_35 = function($a) {
    var $post_args, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    ;
    return nil;
  }, TMP_public_35.$$arity = -1);
  return (Opal.defs(self, '$private', TMP_private_36 = function($a) {
    var $post_args, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    ;
    return nil;
  }, TMP_private_36.$$arity = -1), nil) && 'private';
};

/* Generated by Opal 0.11.99.dev */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/base");
  self.$require("opal/mini");
  self.$require("corelib/string/encoding");
  self.$require("corelib/math");
  self.$require("corelib/complex");
  self.$require("corelib/rational");
  self.$require("corelib/time");
  self.$require("corelib/struct");
  self.$require("corelib/io");
  self.$require("corelib/main");
  self.$require("corelib/dir");
  self.$require("corelib/file");
  self.$require("corelib/process");
  self.$require("corelib/random");
  self.$require("corelib/random/mersenne_twister.js");
  return self.$require("corelib/unsupported");
})(Opal);

},{}],86:[function(require,module,exports){
/* Generated by Opal 0.11.99.dev */
Opal.modules["stringio"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$include', '$new', '$call', '$close', '$attr_accessor', '$length', '$include?', '$!', '$check_readable', '$==', '$===', '$>=', '$raise', '$>', '$+', '$-', '$seek', '$enum_for', '$eof?', '$ord', '$[]', '$to_str', '$chomp', '$check_writable', '$String', '$write', '$closed_write?', '$closed_read?']);
  return (function($base, $super, $parent_nesting) {
    function $StringIO(){};
    var self = $StringIO = $klass($base, $super, 'StringIO', $StringIO);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_StringIO_open_1, TMP_StringIO_initialize_2, TMP_StringIO_eof$q_3, TMP_StringIO_seek_4, TMP_StringIO_tell_5, TMP_StringIO_rewind_6, TMP_StringIO_each_byte_7, TMP_StringIO_each_char_8, TMP_StringIO_each_9, TMP_StringIO_write_10, TMP_StringIO_read_11, TMP_StringIO_close_12, TMP_StringIO_close_read_13, TMP_StringIO_close_write_14, TMP_StringIO_closed$q_15, TMP_StringIO_closed_read$q_16, TMP_StringIO_closed_write$q_17, TMP_StringIO_check_writable_18, TMP_StringIO_check_readable_19;

    def.position = def.string = def.closed = nil;
    
    self.$include($$$($$($nesting, 'IO'), 'Readable'));
    self.$include($$$($$($nesting, 'IO'), 'Writable'));
    Opal.defs(self, '$open', TMP_StringIO_open_1 = function $$open(string, mode) {
      var $iter = TMP_StringIO_open_1.$$p, block = $iter || nil, self = this, io = nil, res = nil;

      if ($iter) TMP_StringIO_open_1.$$p = null;
      
      
      if ($iter) TMP_StringIO_open_1.$$p = null;;
      
      if (string == null) {
        string = "";
      };
      
      if (mode == null) {
        mode = nil;
      };
      io = self.$new(string, mode);
      res = block.$call(io);
      io.$close();
      return res;
    }, TMP_StringIO_open_1.$$arity = -1);
    self.$attr_accessor("string");
    
    Opal.def(self, '$initialize', TMP_StringIO_initialize_2 = function $$initialize(string, mode) {
      var $a, self = this;

      
      
      if (string == null) {
        string = "";
      };
      
      if (mode == null) {
        mode = "rw";
      };
      self.string = string;
      self.position = string.$length();
      if ($truthy(($truthy($a = mode['$include?']("r")) ? mode['$include?']("w")['$!']() : $a))) {
        return (self.closed = "write")
      } else if ($truthy(($truthy($a = mode['$include?']("w")) ? mode['$include?']("r")['$!']() : $a))) {
        return (self.closed = "read")
      } else {
        return nil
      };
    }, TMP_StringIO_initialize_2.$$arity = -1);
    
    Opal.def(self, '$eof?', TMP_StringIO_eof$q_3 = function() {
      var self = this;

      
      self.$check_readable();
      return self.position['$=='](self.string.$length());
    }, TMP_StringIO_eof$q_3.$$arity = 0);
    Opal.alias(self, "eof", "eof?");
    
    Opal.def(self, '$seek', TMP_StringIO_seek_4 = function $$seek(pos, whence) {
      var self = this, $case = nil;

      
      
      if (whence == null) {
        whence = $$$($$($nesting, 'IO'), 'SEEK_SET');
      };
      $case = whence;
      if ($$$($$($nesting, 'IO'), 'SEEK_SET')['$===']($case)) {
      if ($truthy($rb_ge(pos, 0))) {
      } else {
        self.$raise($$$($$($nesting, 'Errno'), 'EINVAL'))
      };
      self.position = pos;}
      else if ($$$($$($nesting, 'IO'), 'SEEK_CUR')['$===']($case)) {if ($truthy($rb_gt($rb_plus(self.position, pos), self.string.$length()))) {
        self.position = self.string.$length()
      } else {
        self.position = $rb_plus(self.position, pos)
      }}
      else if ($$$($$($nesting, 'IO'), 'SEEK_END')['$===']($case)) {if ($truthy($rb_gt(pos, self.string.$length()))) {
        self.position = 0
      } else {
        self.position = $rb_minus(self.position, pos)
      }};
      return 0;
    }, TMP_StringIO_seek_4.$$arity = -2);
    
    Opal.def(self, '$tell', TMP_StringIO_tell_5 = function $$tell() {
      var self = this;

      return self.position
    }, TMP_StringIO_tell_5.$$arity = 0);
    Opal.alias(self, "pos", "tell");
    Opal.alias(self, "pos=", "seek");
    
    Opal.def(self, '$rewind', TMP_StringIO_rewind_6 = function $$rewind() {
      var self = this;

      return self.$seek(0)
    }, TMP_StringIO_rewind_6.$$arity = 0);
    
    Opal.def(self, '$each_byte', TMP_StringIO_each_byte_7 = function $$each_byte() {
      var $iter = TMP_StringIO_each_byte_7.$$p, block = $iter || nil, $a, self = this, i = nil;

      if ($iter) TMP_StringIO_each_byte_7.$$p = null;
      
      
      if ($iter) TMP_StringIO_each_byte_7.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("each_byte")
      };
      self.$check_readable();
      i = self.position;
      while (!($truthy(self['$eof?']()))) {
        
        block.$call(self.string['$[]'](i).$ord());
        i = $rb_plus(i, 1);
      };
      return self;
    }, TMP_StringIO_each_byte_7.$$arity = 0);
    
    Opal.def(self, '$each_char', TMP_StringIO_each_char_8 = function $$each_char() {
      var $iter = TMP_StringIO_each_char_8.$$p, block = $iter || nil, $a, self = this, i = nil;

      if ($iter) TMP_StringIO_each_char_8.$$p = null;
      
      
      if ($iter) TMP_StringIO_each_char_8.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("each_char")
      };
      self.$check_readable();
      i = self.position;
      while (!($truthy(self['$eof?']()))) {
        
        block.$call(self.string['$[]'](i));
        i = $rb_plus(i, 1);
      };
      return self;
    }, TMP_StringIO_each_char_8.$$arity = 0);
    
    Opal.def(self, '$each', TMP_StringIO_each_9 = function $$each(separator) {
      var $iter = TMP_StringIO_each_9.$$p, $yield = $iter || nil, self = this, chomp_lines = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if ($iter) TMP_StringIO_each_9.$$p = null;
      
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("each_line")
      };
      self.$check_readable();
      chomp_lines = false;
      if ($truthy($$$('::', 'Hash')['$==='](separator))) {
        separator = (function() {if ($truthy((chomp_lines = separator['$[]']("chomp")))) {
          return /\r?\n/
        } else {
          return $gvars["/"]
        }; return nil; })()
      } else if ($truthy(separator)) {
        separator = separator.$to_str()
      } else {
        separator = undefined
      };
      
      var str = self.string, stringLength = str.length;
      if (self.position < stringLength) str = str.substr(self.position);
      if (separator) {
        var chomped = (str).$chomp(), trailing = str.length !== chomped.length, splitted = chomped.split(separator);
        for (var i = 0, len = splitted.length; i < len; i++) {
          var line = chomp_lines ? splitted[i] : (i < len - 1 || trailing ? splitted[i] + separator : splitted[i]);
          Opal.yield1($yield, line);
        }
      } else if (separator === undefined) {
        Opal.yield1($yield, str);
      } else {
        var m, re = /(.+(?:\n\n|$))\n*/g;
        while ((m = re.exec(str))) Opal.yield1($yield, m[1]);
      }
      self.position = stringLength;
    ;
      return self;
    }, TMP_StringIO_each_9.$$arity = -1);
    Opal.alias(self, "each_line", "each");
    
    Opal.def(self, '$write', TMP_StringIO_write_10 = function $$write(string) {
      var self = this, before = nil, after = nil;

      
      self.$check_writable();
      string = self.$String(string);
      if (self.string.$length()['$=='](self.position)) {
        
        self.string = $rb_plus(self.string, string);
        return (self.position = $rb_plus(self.position, string.$length()));
      } else {
        
        before = self.string['$[]'](Opal.Range.$new(0, $rb_minus(self.position, 1), false));
        after = self.string['$[]'](Opal.Range.$new($rb_plus(self.position, string.$length()), -1, false));
        self.string = $rb_plus($rb_plus(before, string), after);
        return (self.position = $rb_plus(self.position, string.$length()));
      };
    }, TMP_StringIO_write_10.$$arity = 1);
    
    Opal.def(self, '$read', TMP_StringIO_read_11 = function $$read(length, outbuf) {
      var self = this, string = nil, str = nil;

      
      
      if (length == null) {
        length = nil;
      };
      
      if (outbuf == null) {
        outbuf = nil;
      };
      self.$check_readable();
      if ($truthy(self['$eof?']())) {
        return nil};
      string = (function() {if ($truthy(length)) {
        
        str = self.string['$[]'](self.position, length);
        self.position = $rb_plus(self.position, length);
        return str;
      } else {
        
        str = self.string['$[]'](Opal.Range.$new(self.position, -1, false));
        self.position = self.string.$length();
        return str;
      }; return nil; })();
      if ($truthy(outbuf)) {
        return outbuf.$write(string)
      } else {
        return string
      };
    }, TMP_StringIO_read_11.$$arity = -1);
    
    Opal.def(self, '$close', TMP_StringIO_close_12 = function $$close() {
      var self = this;

      return (self.closed = "both")
    }, TMP_StringIO_close_12.$$arity = 0);
    
    Opal.def(self, '$close_read', TMP_StringIO_close_read_13 = function $$close_read() {
      var self = this;

      if (self.closed['$==']("write")) {
        return (self.closed = "both")
      } else {
        return (self.closed = "read")
      }
    }, TMP_StringIO_close_read_13.$$arity = 0);
    
    Opal.def(self, '$close_write', TMP_StringIO_close_write_14 = function $$close_write() {
      var self = this;

      if (self.closed['$==']("read")) {
        return (self.closed = "both")
      } else {
        return (self.closed = "write")
      }
    }, TMP_StringIO_close_write_14.$$arity = 0);
    
    Opal.def(self, '$closed?', TMP_StringIO_closed$q_15 = function() {
      var self = this;

      return self.closed['$==']("both")
    }, TMP_StringIO_closed$q_15.$$arity = 0);
    
    Opal.def(self, '$closed_read?', TMP_StringIO_closed_read$q_16 = function() {
      var $a, self = this;

      return ($truthy($a = self.closed['$==']("read")) ? $a : self.closed['$==']("both"))
    }, TMP_StringIO_closed_read$q_16.$$arity = 0);
    
    Opal.def(self, '$closed_write?', TMP_StringIO_closed_write$q_17 = function() {
      var $a, self = this;

      return ($truthy($a = self.closed['$==']("write")) ? $a : self.closed['$==']("both"))
    }, TMP_StringIO_closed_write$q_17.$$arity = 0);
    
    Opal.def(self, '$check_writable', TMP_StringIO_check_writable_18 = function $$check_writable() {
      var self = this;

      if ($truthy(self['$closed_write?']())) {
        return self.$raise($$($nesting, 'IOError'), "not opened for writing")
      } else {
        return nil
      }
    }, TMP_StringIO_check_writable_18.$$arity = 0);
    return (Opal.def(self, '$check_readable', TMP_StringIO_check_readable_19 = function $$check_readable() {
      var self = this;

      if ($truthy(self['$closed_read?']())) {
        return self.$raise($$($nesting, 'IOError'), "not opened for reading")
      } else {
        return nil
      }
    }, TMP_StringIO_check_readable_19.$$arity = 0), nil) && 'check_readable';
  })($nesting[0], $$($nesting, 'IO'), $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["open-uri"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$private', '$respond_to?', '$=~', '$open_uri', '$to_proc', '$open_uri_original_open', '$module_function', '$open_loop', '$rewind', '$close_io', '$close!', '$closed?', '$close', '$request', '$==', '$build_response', '$raise', '$new', '$<<', '$io', '$status=', '$-', '$meta_add_field', '$attr_reader', '$+', '$length', '$===', '$init', '$extend', '$instance_eval', '$status', '$base_uri', '$base_uri=', '$each', '$metas', '$meta_add_field2', '$attr_accessor', '$charset', '$find_encoding', '$set_encoding', '$force_encoding', '$string', '$find', '$downcase', '$[]=', '$join', '$meta_setup_encoding', '$[]', '$utc', '$at', '$content_type_parse', '$scheme', '$open', '$read']);
  
  self.$require("stringio");
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_open_1;

    
    self.$private();
    Opal.alias(self, "open_uri_original_open", "open");
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      return Opal.alias(self, "open_uri_original_open", "open")
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$open', TMP_Kernel_open_1 = function $$open(name, $a) {
      var $iter = TMP_Kernel_open_1.$$p, block = $iter || nil, $post_args, rest, $b, self = this;

      if ($iter) TMP_Kernel_open_1.$$p = null;
      
      
      if ($iter) TMP_Kernel_open_1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      rest = $post_args;;
      if ($truthy(($truthy($b = name['$respond_to?']("to_str")) ? /^[A-Za-z][A-Za-z0-9+\-\.]*:\/\//['$=~'](name) : $b))) {
        return $send($$($nesting, 'OpenURI'), 'open_uri', [name].concat(Opal.to_a(rest)), block.$to_proc())
      } else {
        return $send(self, 'open_uri_original_open', [name].concat(Opal.to_a(rest)), block.$to_proc())
      };
    }, TMP_Kernel_open_1.$$arity = -2);
    self.$module_function("open");
  })($nesting[0], $nesting);
  return (function($base, $parent_nesting) {
    function $OpenURI() {};
    var self = $OpenURI = $module($base, 'OpenURI', $OpenURI);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_OpenURI_open_uri_2, TMP_OpenURI_close_io_3, TMP_OpenURI_open_loop_4, TMP_OpenURI_build_response_5, TMP_OpenURI_request_6;

    
    Opal.defs(self, '$open_uri', TMP_OpenURI_open_uri_2 = function $$open_uri(name, $a) {
      var $post_args, rest, $iter = TMP_OpenURI_open_uri_2.$$p, $yield = $iter || nil, self = this, io = nil;

      if ($iter) TMP_OpenURI_open_uri_2.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      rest = $post_args;;
      io = self.$open_loop(name, $hash2([], {}));
      io.$rewind();
      if (($yield !== nil)) {
        
        return (function() { try {
        return Opal.yield1($yield, io);
        } finally {
          self.$close_io(io)
        }; })();
      } else {
        return io
      };
    }, TMP_OpenURI_open_uri_2.$$arity = -2);
    Opal.defs(self, '$close_io', TMP_OpenURI_close_io_3 = function $$close_io(io) {
      var self = this;

      if ($truthy(io['$respond_to?']("close!"))) {
        return io['$close!']()
      } else if ($truthy(io['$closed?']())) {
        return nil
      } else {
        return io.$close()
      }
    }, TMP_OpenURI_close_io_3.$$arity = 1);
    Opal.defs(self, '$open_loop', TMP_OpenURI_open_loop_4 = function $$open_loop(uri, options) {
      var $a, $b, self = this, req = nil, data = nil, status = nil, status_text = nil;

      
      req = self.$request(uri);
      data = req.responseText;
      status = req.status;
      status_text = req.statusText && req.statusText.errno ? req.statusText.errno : req.statusText;
      if ($truthy(($truthy($a = status['$=='](200)) ? $a : (($b = status['$=='](0)) ? data : status['$=='](0))))) {
        return self.$build_response(req, data, status, status_text)
      } else {
        return self.$raise($$$($$($nesting, 'OpenURI'), 'HTTPError').$new("" + (status) + " " + (status_text), ""))
      };
    }, TMP_OpenURI_open_loop_4.$$arity = 2);
    Opal.defs(self, '$build_response', TMP_OpenURI_build_response_5 = function $$build_response(req, data, status, status_text) {
      var self = this, buf = nil, io = nil, $writer = nil, last_modified = nil;

      
      buf = $$($nesting, 'Buffer').$new();
      buf['$<<'](data);
      io = buf.$io();
      
      $writer = ["" + (status) + " " + (status_text)];
      $send(io, 'status=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      io.$meta_add_field("content-type", req.getResponseHeader("Content-Type"));
      last_modified = req.getResponseHeader("Last-Modified");
      if ($truthy(last_modified)) {
        io.$meta_add_field("last-modified", last_modified)};
      return io;
    }, TMP_OpenURI_build_response_5.$$arity = 4);
    Opal.defs(self, '$request', TMP_OpenURI_request_6 = function $$request(uri) {
      var self = this;

      
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', uri, false);
        xhr.send();
        return xhr;
      } catch (error) {
        self.$raise($$$($$($nesting, 'OpenURI'), 'HTTPError').$new(error.message, ""))
      }
    
    }, TMP_OpenURI_request_6.$$arity = 1);
    (function($base, $super, $parent_nesting) {
      function $HTTPError(){};
      var self = $HTTPError = $klass($base, $super, 'HTTPError', $HTTPError);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_HTTPError_initialize_7;

      
      
      Opal.def(self, '$initialize', TMP_HTTPError_initialize_7 = function $$initialize(message, io) {
        var $iter = TMP_HTTPError_initialize_7.$$p, $yield = $iter || nil, self = this;

        if ($iter) TMP_HTTPError_initialize_7.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_HTTPError_initialize_7, false), [message, io], null);
        return (self.io = io);
      }, TMP_HTTPError_initialize_7.$$arity = 2);
      return self.$attr_reader("io");
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $Buffer(){};
      var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Buffer_initialize_8, TMP_Buffer_$lt$lt_9, TMP_Buffer_io_10;

      def.io = def.size = nil;
      
      
      Opal.def(self, '$initialize', TMP_Buffer_initialize_8 = function $$initialize() {
        var self = this;

        
        self.io = $$($nesting, 'StringIO').$new();
        return (self.size = 0);
      }, TMP_Buffer_initialize_8.$$arity = 0);
      self.$attr_reader("size");
      
      Opal.def(self, '$<<', TMP_Buffer_$lt$lt_9 = function(str) {
        var self = this;

        
        self.io['$<<'](str);
        return (self.size = $rb_plus(self.size, str.$length()));
      }, TMP_Buffer_$lt$lt_9.$$arity = 1);
      return (Opal.def(self, '$io', TMP_Buffer_io_10 = function $$io() {
        var self = this;

        
        if ($truthy($$($nesting, 'Meta')['$==='](self.io))) {
        } else {
          $$($nesting, 'Meta').$init(self.io)
        };
        return self.io;
      }, TMP_Buffer_io_10.$$arity = 0), nil) && 'io';
    })($nesting[0], null, $nesting);
    (function($base, $parent_nesting) {
      function $Meta() {};
      var self = $Meta = $module($base, 'Meta', $Meta);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Meta_init_11, TMP_Meta_meta_setup_encoding_14, TMP_Meta_set_encoding_15, TMP_Meta_find_encoding_16, TMP_Meta_meta_add_field2_17, TMP_Meta_meta_add_field_18, TMP_Meta_last_modified_19, TMP_Meta_content_type_parse_20, TMP_Meta_charset_21, TMP_Meta_content_type_22;

      
      Opal.defs($$($nesting, 'Meta'), '$init', TMP_Meta_init_11 = function $$init(obj, src) {
        var TMP_12, TMP_13, self = this, $writer = nil;

        
        
        if (src == null) {
          src = nil;
        };
        obj.$extend($$($nesting, 'Meta'));
        $send(obj, 'instance_eval', [], (TMP_12 = function(){var self = TMP_12.$$s || this;

        
          self.base_uri = nil;
          self.meta = $hash2([], {});
          return (self.metas = $hash2([], {}));}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12));
        if ($truthy(src)) {
          
          
          $writer = [src.$status()];
          $send(obj, 'status=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [src.$base_uri()];
          $send(obj, 'base_uri=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $send(src.$metas(), 'each', [], (TMP_13 = function(name, values){var self = TMP_13.$$s || this;

          
            
            if (name == null) {
              name = nil;
            };
            
            if (values == null) {
              values = nil;
            };
            return obj.$meta_add_field2(name, values);}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13));
        } else {
          return nil
        };
      }, TMP_Meta_init_11.$$arity = -2);
      self.$attr_accessor("status");
      self.$attr_accessor("base_uri");
      self.$attr_reader("meta");
      self.$attr_reader("metas");
      
      Opal.def(self, '$meta_setup_encoding', TMP_Meta_meta_setup_encoding_14 = function $$meta_setup_encoding() {
        var self = this, charset = nil, enc = nil;

        
        charset = self.$charset();
        enc = self.$find_encoding(charset);
        return self.$set_encoding(enc);
      }, TMP_Meta_meta_setup_encoding_14.$$arity = 0);
      
      Opal.def(self, '$set_encoding', TMP_Meta_set_encoding_15 = function $$set_encoding(enc) {
        var self = this;

        if ($truthy(self['$respond_to?']("force_encoding"))) {
          return self.$force_encoding(enc)
        } else if ($truthy(self['$respond_to?']("string"))) {
          return self.$string().$force_encoding(enc)
        } else {
          return self.$set_encoding(enc)
        }
      }, TMP_Meta_set_encoding_15.$$arity = 1);
      
      Opal.def(self, '$find_encoding', TMP_Meta_find_encoding_16 = function $$find_encoding(charset) {
        var self = this, enc = nil;

        
        enc = nil;
        if ($truthy(charset)) {
          
          try {
            enc = $$($nesting, 'Encoding').$find(charset)
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
              try {
                nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };};
        if ($truthy(enc)) {
        } else {
          enc = $$$($$($nesting, 'Encoding'), 'ASCII_8BIT')
        };
        return enc;
      }, TMP_Meta_find_encoding_16.$$arity = 1);
      
      Opal.def(self, '$meta_add_field2', TMP_Meta_meta_add_field2_17 = function $$meta_add_field2(name, values) {
        var self = this, $writer = nil;
        if (self.metas == null) self.metas = nil;
        if (self.meta == null) self.meta = nil;

        
        name = name.$downcase();
        
        $writer = [name, values];
        $send(self.metas, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [name, values.$join(", ")];
        $send(self.meta, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if (name['$==']("content-type")) {
          return self.$meta_setup_encoding()
        } else {
          return nil
        };
      }, TMP_Meta_meta_add_field2_17.$$arity = 2);
      
      Opal.def(self, '$meta_add_field', TMP_Meta_meta_add_field_18 = function $$meta_add_field(name, value) {
        var self = this;

        return self.$meta_add_field2(name, [value])
      }, TMP_Meta_meta_add_field_18.$$arity = 2);
      
      Opal.def(self, '$last_modified', TMP_Meta_last_modified_19 = function $$last_modified() {
        var self = this, vs = nil;
        if (self.metas == null) self.metas = nil;

        if ($truthy((vs = self.metas['$[]']("last-modified")))) {
          return $$($nesting, 'Time').$at(Date.parse(vs.$join(", ")) / 1000).$utc()
        } else {
          return nil
        }
      }, TMP_Meta_last_modified_19.$$arity = 0);
      
      Opal.def(self, '$content_type_parse', TMP_Meta_content_type_parse_20 = function $$content_type_parse() {
        var self = this, content_type = nil;
        if (self.metas == null) self.metas = nil;

        
        content_type = self.metas['$[]']("content-type");
        return content_type.$join(", ");
      }, TMP_Meta_content_type_parse_20.$$arity = 0);
      
      Opal.def(self, '$charset', TMP_Meta_charset_21 = function $$charset() {
        var $a, $b, $c, self = this, type = nil;
        if (self.base_uri == null) self.base_uri = nil;

        
        type = self.$content_type_parse();
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = type) ? /^text\//['$=~'](type) : $c)) ? self.base_uri : $b)) ? /^http$/i['$=~'](self.base_uri.$scheme()) : $a))) {
          return "iso-8859-1"
        } else {
          return nil
        };
      }, TMP_Meta_charset_21.$$arity = 0);
      
      Opal.def(self, '$content_type', TMP_Meta_content_type_22 = function $$content_type() {
        var $a, self = this, type = nil;

        
        type = self.$content_type_parse();
        return ($truthy($a = type) ? $a : "application/octet-stream");
      }, TMP_Meta_content_type_22.$$arity = 0);
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      function $OpenRead() {};
      var self = $OpenRead = $module($base, 'OpenRead', $OpenRead);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_OpenRead_open_23, TMP_OpenRead_read_24;

      
      
      Opal.def(self, '$open', TMP_OpenRead_open_23 = function $$open($a) {
        var $iter = TMP_OpenRead_open_23.$$p, block = $iter || nil, $post_args, rest, self = this;

        if ($iter) TMP_OpenRead_open_23.$$p = null;
        
        
        if ($iter) TMP_OpenRead_open_23.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        rest = $post_args;;
        return $send($$($nesting, 'OpenURI'), 'open_uri', [self].concat(Opal.to_a(rest)), block.$to_proc());
      }, TMP_OpenRead_open_23.$$arity = -1);
      
      Opal.def(self, '$read', TMP_OpenRead_read_24 = function $$read(options) {
        var TMP_25, self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        return $send(self, 'open', [options], (TMP_25 = function(f){var self = TMP_25.$$s || this, str = nil;

        
          
          if (f == null) {
            f = nil;
          };
          str = f.$read();
          $$($nesting, 'Meta').$init(str, f);
          return str;}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25));
      }, TMP_OpenRead_read_24.$$arity = -1);
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
};

},{}],87:[function(require,module,exports){
/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base, $parent_nesting) {
    function $Comparable() {};
    var self = $Comparable = $module($base, 'Comparable', $Comparable);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Comparable_normalize_1, TMP_Comparable_$eq$eq_2, TMP_Comparable_$gt_3, TMP_Comparable_$gt$eq_4, TMP_Comparable_$lt_5, TMP_Comparable_$lt$eq_6, TMP_Comparable_between$q_7, TMP_Comparable_clamp_8;

    
    Opal.defs(self, '$normalize', TMP_Comparable_normalize_1 = function $$normalize(what) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](what))) {
        return what};
      if ($truthy($rb_gt(what, 0))) {
        return 1};
      if ($truthy($rb_lt(what, 0))) {
        return -1};
      return 0;
    }, TMP_Comparable_normalize_1.$$arity = 1);
    
    Opal.def(self, '$==', TMP_Comparable_$eq$eq_2 = function(other) {
      var self = this, cmp = nil;

      try {
        
        if ($truthy(self['$equal?'](other))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    ;
        if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
          return false
        };
        return $$($nesting, 'Comparable').$normalize(cmp) == 0;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Comparable_$eq$eq_2.$$arity = 1);
    
    Opal.def(self, '$>', TMP_Comparable_$gt_3 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) > 0;
    }, TMP_Comparable_$gt_3.$$arity = 1);
    
    Opal.def(self, '$>=', TMP_Comparable_$gt$eq_4 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) >= 0;
    }, TMP_Comparable_$gt$eq_4.$$arity = 1);
    
    Opal.def(self, '$<', TMP_Comparable_$lt_5 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) < 0;
    }, TMP_Comparable_$lt_5.$$arity = 1);
    
    Opal.def(self, '$<=', TMP_Comparable_$lt$eq_6 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) <= 0;
    }, TMP_Comparable_$lt$eq_6.$$arity = 1);
    
    Opal.def(self, '$between?', TMP_Comparable_between$q_7 = function(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, TMP_Comparable_between$q_7.$$arity = 2);
    
    Opal.def(self, '$clamp', TMP_Comparable_clamp_8 = function $$clamp(min, max) {
      var self = this, cmp = nil;

      
      cmp = min['$<=>'](max);
      if ($truthy(cmp)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (min.$class()) + " with " + (max.$class()) + " failed")
      };
      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(cmp), 0))) {
        self.$raise($$($nesting, 'ArgumentError'), "min argument must be smaller than max argument")};
      if ($truthy($rb_lt($$($nesting, 'Comparable').$normalize(self['$<=>'](min)), 0))) {
        return min};
      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(self['$<=>'](max)), 0))) {
        return max};
      return self;
    }, TMP_Comparable_clamp_8.$$arity = 2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["pathname"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$require', '$include', '$quote', '$===', '$to_s', '$path', '$respond_to?', '$to_path', '$is_a?', '$nil?', '$raise', '$class', '$==', '$attr_reader', '$!', '$relative?', '$chop_basename', '$basename', '$=~', '$new', '$source', '$[]', '$rindex', '$sub', '$absolute?', '$expand_path', '$plus', '$unshift', '$length', '$!=', '$empty?', '$first', '$shift', '$+', '$join', '$dirname', '$pop', '$reverse_each', '$directory?', '$extname', '$<=>', '$nonzero?', '$proc', '$casecmp', '$cleanpath', '$inspect', '$include?', '$fill', '$map', '$entries']);
  
  self.$require("corelib/comparable");
  (function($base, $super, $parent_nesting) {
    function $Pathname(){};
    var self = $Pathname = $klass($base, $super, 'Pathname', $Pathname);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Pathname_initialize_1, TMP_Pathname_$eq$eq_2, TMP_Pathname_absolute$q_3, TMP_Pathname_relative$q_4, TMP_Pathname_chop_basename_5, TMP_Pathname_root$q_6, TMP_Pathname_parent_7, TMP_Pathname_sub_8, TMP_Pathname_cleanpath_9, TMP_Pathname_to_path_10, TMP_Pathname_hash_11, TMP_Pathname_expand_path_12, TMP_Pathname_$_13, TMP_Pathname_plus_14, TMP_Pathname_join_15, TMP_Pathname_split_17, TMP_Pathname_dirname_18, TMP_Pathname_basename_19, TMP_Pathname_directory$q_20, TMP_Pathname_extname_21, TMP_Pathname_$lt$eq$gt_22, TMP_Pathname_23, TMP_Pathname_24, TMP_Pathname_relative_path_from_25, TMP_Pathname_entries_26;

    def.path = nil;
    
    self.$include($$($nesting, 'Comparable'));
    Opal.const_set($nesting[0], 'SEPARATOR_PAT', new RegExp($$($nesting, 'Regexp').$quote($$$($$($nesting, 'File'), 'SEPARATOR'))));
    
    Opal.def(self, '$initialize', TMP_Pathname_initialize_1 = function $$initialize(path) {
      var self = this;

      
      if ($truthy($$($nesting, 'Pathname')['$==='](path))) {
        self.path = path.$path().$to_s()
      } else if ($truthy(path['$respond_to?']("to_path"))) {
        self.path = path.$to_path()
      } else if ($truthy(path['$is_a?']($$($nesting, 'String')))) {
        self.path = path
      } else if ($truthy(path['$nil?']())) {
        self.$raise($$($nesting, 'TypeError'), "no implicit conversion of nil into String")
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (path.$class()) + " into String")
      };
      if (self.path['$==']("\u0000")) {
        return self.$raise($$($nesting, 'ArgumentError'))
      } else {
        return nil
      };
    }, TMP_Pathname_initialize_1.$$arity = 1);
    self.$attr_reader("path");
    
    Opal.def(self, '$==', TMP_Pathname_$eq$eq_2 = function(other) {
      var self = this;

      return other.$path()['$=='](self.path)
    }, TMP_Pathname_$eq$eq_2.$$arity = 1);
    
    Opal.def(self, '$absolute?', TMP_Pathname_absolute$q_3 = function() {
      var self = this;

      return self['$relative?']()['$!']()
    }, TMP_Pathname_absolute$q_3.$$arity = 0);
    
    Opal.def(self, '$relative?', TMP_Pathname_relative$q_4 = function() {
      var $a, $b, $c, self = this, path = nil, r = nil;

      
      path = self.path;
      while ($truthy((r = self.$chop_basename(path)))) {
        $c = r, $b = Opal.to_ary($c), (path = ($b[0] == null ? nil : $b[0])), $c
      };
      return path['$==']("");
    }, TMP_Pathname_relative$q_4.$$arity = 0);
    
    Opal.def(self, '$chop_basename', TMP_Pathname_chop_basename_5 = function $$chop_basename(path) {
      var self = this, base = nil;

      
      base = $$($nesting, 'File').$basename(path);
      if ($truthy($$($nesting, 'Regexp').$new("" + "^" + ($$$($$($nesting, 'Pathname'), 'SEPARATOR_PAT').$source()) + "?$")['$=~'](base))) {
        return nil
      } else {
        return [path['$[]'](0, path.$rindex(base)), base]
      };
    }, TMP_Pathname_chop_basename_5.$$arity = 1);
    
    Opal.def(self, '$root?', TMP_Pathname_root$q_6 = function() {
      var self = this;

      return self.path['$==']("/")
    }, TMP_Pathname_root$q_6.$$arity = 0);
    
    Opal.def(self, '$parent', TMP_Pathname_parent_7 = function $$parent() {
      var self = this, new_path = nil;

      
      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if (new_path['$==']("")) {
        new_path = (function() {if ($truthy(self['$absolute?']())) {
          return "/"
        } else {
          return "."
        }; return nil; })()};
      return $$($nesting, 'Pathname').$new(new_path);
    }, TMP_Pathname_parent_7.$$arity = 0);
    
    Opal.def(self, '$sub', TMP_Pathname_sub_8 = function $$sub($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $$($nesting, 'Pathname').$new($send(self.path, 'sub', Opal.to_a(args)));
    }, TMP_Pathname_sub_8.$$arity = -1);
    
    Opal.def(self, '$cleanpath', TMP_Pathname_cleanpath_9 = function $$cleanpath() {
      var self = this;

      return Opal.normalize(self.path)
    }, TMP_Pathname_cleanpath_9.$$arity = 0);
    
    Opal.def(self, '$to_path', TMP_Pathname_to_path_10 = function $$to_path() {
      var self = this;

      return self.path
    }, TMP_Pathname_to_path_10.$$arity = 0);
    
    Opal.def(self, '$hash', TMP_Pathname_hash_11 = function $$hash() {
      var self = this;

      return self.path
    }, TMP_Pathname_hash_11.$$arity = 0);
    
    Opal.def(self, '$expand_path', TMP_Pathname_expand_path_12 = function $$expand_path() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$expand_path(self.path))
    }, TMP_Pathname_expand_path_12.$$arity = 0);
    
    Opal.def(self, '$+', TMP_Pathname_$_13 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Pathname')['$==='](other))) {
      } else {
        other = $$($nesting, 'Pathname').$new(other)
      };
      return $$($nesting, 'Pathname').$new(self.$plus(self.path, other.$to_s()));
    }, TMP_Pathname_$_13.$$arity = 1);
    
    Opal.def(self, '$plus', TMP_Pathname_plus_14 = function $$plus(path1, path2) {
      var $a, $b, $c, self = this, prefix2 = nil, index_list2 = nil, basename_list2 = nil, r2 = nil, basename2 = nil, prefix1 = nil, r1 = nil, basename1 = nil, suffix2 = nil;

      
      prefix2 = path2;
      index_list2 = [];
      basename_list2 = [];
      while ($truthy((r2 = self.$chop_basename(prefix2)))) {
        
        $c = r2, $b = Opal.to_ary($c), (prefix2 = ($b[0] == null ? nil : $b[0])), (basename2 = ($b[1] == null ? nil : $b[1])), $c;
        index_list2.$unshift(prefix2.$length());
        basename_list2.$unshift(basename2);
      };
      if ($truthy(prefix2['$!='](""))) {
        return path2};
      prefix1 = path1;
      while ($truthy(true)) {
        
        while ($truthy(($truthy($c = basename_list2['$empty?']()['$!']()) ? basename_list2.$first()['$=='](".") : $c))) {
          
          index_list2.$shift();
          basename_list2.$shift();
        };
        if ($truthy((r1 = self.$chop_basename(prefix1)))) {
        } else {
          break;
        };
        $c = r1, $b = Opal.to_ary($c), (prefix1 = ($b[0] == null ? nil : $b[0])), (basename1 = ($b[1] == null ? nil : $b[1])), $c;
        if (basename1['$=='](".")) {
          continue;};
        if ($truthy(($truthy($b = ($truthy($c = basename1['$==']("..")) ? $c : basename_list2['$empty?']())) ? $b : basename_list2.$first()['$!=']("..")))) {
          
          prefix1 = $rb_plus(prefix1, basename1);
          break;;};
        index_list2.$shift();
        basename_list2.$shift();
      };
      r1 = self.$chop_basename(prefix1);
      if ($truthy(($truthy($a = r1['$!']()) ? new RegExp($$($nesting, 'SEPARATOR_PAT'))['$=~']($$($nesting, 'File').$basename(prefix1)) : $a))) {
        while ($truthy(($truthy($b = basename_list2['$empty?']()['$!']()) ? basename_list2.$first()['$==']("..") : $b))) {
          
          index_list2.$shift();
          basename_list2.$shift();
        }};
      if ($truthy(basename_list2['$empty?']()['$!']())) {
        
        suffix2 = path2['$[]'](Opal.Range.$new(index_list2.$first(), -1, false));
        if ($truthy(r1)) {
          return $$($nesting, 'File').$join(prefix1, suffix2)
        } else {
          return $rb_plus(prefix1, suffix2)
        };
      } else if ($truthy(r1)) {
        return prefix1
      } else {
        return $$($nesting, 'File').$dirname(prefix1)
      };
    }, TMP_Pathname_plus_14.$$arity = 2);
    
    Opal.def(self, '$join', TMP_Pathname_join_15 = function $$join($a) {try {

      var $post_args, args, TMP_16, self = this, result = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(args['$empty?']())) {
        return self};
      result = args.$pop();
      if ($truthy($$($nesting, 'Pathname')['$==='](result))) {
      } else {
        result = $$($nesting, 'Pathname').$new(result)
      };
      if ($truthy(result['$absolute?']())) {
        return result};
      $send(args, 'reverse_each', [], (TMP_16 = function(arg){var self = TMP_16.$$s || this;

      
        
        if (arg == null) {
          arg = nil;
        };
        if ($truthy($$($nesting, 'Pathname')['$==='](arg))) {
        } else {
          arg = $$($nesting, 'Pathname').$new(arg)
        };
        result = $rb_plus(arg, result);
        if ($truthy(result['$absolute?']())) {
          Opal.ret(result)
        } else {
          return nil
        };}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));
      return $rb_plus(self, result);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Pathname_join_15.$$arity = -1);
    
    Opal.def(self, '$split', TMP_Pathname_split_17 = function $$split() {
      var self = this;

      return [self.$dirname(), self.$basename()]
    }, TMP_Pathname_split_17.$$arity = 0);
    
    Opal.def(self, '$dirname', TMP_Pathname_dirname_18 = function $$dirname() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$dirname(self.path))
    }, TMP_Pathname_dirname_18.$$arity = 0);
    
    Opal.def(self, '$basename', TMP_Pathname_basename_19 = function $$basename() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$basename(self.path))
    }, TMP_Pathname_basename_19.$$arity = 0);
    
    Opal.def(self, '$directory?', TMP_Pathname_directory$q_20 = function() {
      var self = this;

      return $$($nesting, 'File')['$directory?'](self.path)
    }, TMP_Pathname_directory$q_20.$$arity = 0);
    
    Opal.def(self, '$extname', TMP_Pathname_extname_21 = function $$extname() {
      var self = this;

      return $$($nesting, 'File').$extname(self.path)
    }, TMP_Pathname_extname_21.$$arity = 0);
    
    Opal.def(self, '$<=>', TMP_Pathname_$lt$eq$gt_22 = function(other) {
      var self = this;

      return self.$path()['$<=>'](other.$path())
    }, TMP_Pathname_$lt$eq$gt_22.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    Opal.alias(self, "to_str", "to_path");
    Opal.alias(self, "to_s", "to_path");
    Opal.const_set($nesting[0], 'SAME_PATHS', (function() {if ($truthy($$$($$($nesting, 'File'), 'FNM_SYSCASE')['$nonzero?']())) {
      return $send(self, 'proc', [], (TMP_Pathname_23 = function(a, b){var self = TMP_Pathname_23.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a.$casecmp(b)['$=='](0);}, TMP_Pathname_23.$$s = self, TMP_Pathname_23.$$arity = 2, TMP_Pathname_23))
    } else {
      return $send(self, 'proc', [], (TMP_Pathname_24 = function(a, b){var self = TMP_Pathname_24.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a['$=='](b);}, TMP_Pathname_24.$$s = self, TMP_Pathname_24.$$arity = 2, TMP_Pathname_24))
    }; return nil; })());
    
    Opal.def(self, '$relative_path_from', TMP_Pathname_relative_path_from_25 = function $$relative_path_from(base_directory) {
      var $a, $b, $c, self = this, dest_directory = nil, dest_prefix = nil, dest_names = nil, r = nil, basename = nil, base_prefix = nil, base_names = nil, relpath_names = nil;

      
      dest_directory = self.$cleanpath().$to_s();
      base_directory = base_directory.$cleanpath().$to_s();
      dest_prefix = dest_directory;
      dest_names = [];
      while ($truthy((r = self.$chop_basename(dest_prefix)))) {
        
        $c = r, $b = Opal.to_ary($c), (dest_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(basename['$!=']("."))) {
          dest_names.$unshift(basename)};
      };
      base_prefix = base_directory;
      base_names = [];
      while ($truthy((r = self.$chop_basename(base_prefix)))) {
        
        $c = r, $b = Opal.to_ary($c), (base_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(basename['$!=']("."))) {
          base_names.$unshift(basename)};
      };
      if ($truthy($$($nesting, 'SAME_PATHS')['$[]'](dest_prefix, base_prefix))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "different prefix: " + (dest_prefix.$inspect()) + " and " + (base_directory.$inspect()))
      };
      while ($truthy(($truthy($b = ($truthy($c = dest_names['$empty?']()['$!']()) ? base_names['$empty?']()['$!']() : $c)) ? $$($nesting, 'SAME_PATHS')['$[]'](dest_names.$first(), base_names.$first()) : $b))) {
        
        dest_names.$shift();
        base_names.$shift();
      };
      if ($truthy(base_names['$include?'](".."))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "base_directory has ..: " + (base_directory.$inspect()))};
      base_names.$fill("..");
      relpath_names = $rb_plus(base_names, dest_names);
      if ($truthy(relpath_names['$empty?']())) {
        return $$($nesting, 'Pathname').$new(".")
      } else {
        return $$($nesting, 'Pathname').$new($send($$($nesting, 'File'), 'join', Opal.to_a(relpath_names)))
      };
    }, TMP_Pathname_relative_path_from_25.$$arity = 1);
    return (Opal.def(self, '$entries', TMP_Pathname_entries_26 = function $$entries() {
      var TMP_27, self = this;

      return $send($$($nesting, 'Dir').$entries(self.path), 'map', [], (TMP_27 = function(f){var self = TMP_27.$$s || this;

      
        
        if (f == null) {
          f = nil;
        };
        return self.$class().$new(f);}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27))
    }, TMP_Pathname_entries_26.$$arity = 0), nil) && 'entries';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_Pathname_28;

    
    Opal.def(self, '$Pathname', TMP_Kernel_Pathname_28 = function $$Pathname(path) {
      var self = this;

      return $$($nesting, 'Pathname').$new(path)
    }, TMP_Kernel_Pathname_28.$$arity = 1)
  })($nesting[0], $nesting);
};

},{}],88:[function(require,module,exports){
/* Generated by Opal 0.11.99.dev */
Opal.modules["stringio"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$include', '$new', '$call', '$close', '$attr_accessor', '$length', '$include?', '$!', '$check_readable', '$==', '$===', '$>=', '$raise', '$>', '$+', '$-', '$seek', '$enum_for', '$eof?', '$ord', '$[]', '$to_str', '$chomp', '$check_writable', '$String', '$write', '$closed_write?', '$closed_read?']);
  return (function($base, $super, $parent_nesting) {
    function $StringIO(){};
    var self = $StringIO = $klass($base, $super, 'StringIO', $StringIO);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_StringIO_open_1, TMP_StringIO_initialize_2, TMP_StringIO_eof$q_3, TMP_StringIO_seek_4, TMP_StringIO_tell_5, TMP_StringIO_rewind_6, TMP_StringIO_each_byte_7, TMP_StringIO_each_char_8, TMP_StringIO_each_9, TMP_StringIO_write_10, TMP_StringIO_read_11, TMP_StringIO_close_12, TMP_StringIO_close_read_13, TMP_StringIO_close_write_14, TMP_StringIO_closed$q_15, TMP_StringIO_closed_read$q_16, TMP_StringIO_closed_write$q_17, TMP_StringIO_check_writable_18, TMP_StringIO_check_readable_19;

    def.position = def.string = def.closed = nil;
    
    self.$include($$$($$($nesting, 'IO'), 'Readable'));
    self.$include($$$($$($nesting, 'IO'), 'Writable'));
    Opal.defs(self, '$open', TMP_StringIO_open_1 = function $$open(string, mode) {
      var $iter = TMP_StringIO_open_1.$$p, block = $iter || nil, self = this, io = nil, res = nil;

      if ($iter) TMP_StringIO_open_1.$$p = null;
      
      
      if ($iter) TMP_StringIO_open_1.$$p = null;;
      
      if (string == null) {
        string = "";
      };
      
      if (mode == null) {
        mode = nil;
      };
      io = self.$new(string, mode);
      res = block.$call(io);
      io.$close();
      return res;
    }, TMP_StringIO_open_1.$$arity = -1);
    self.$attr_accessor("string");
    
    Opal.def(self, '$initialize', TMP_StringIO_initialize_2 = function $$initialize(string, mode) {
      var $a, self = this;

      
      
      if (string == null) {
        string = "";
      };
      
      if (mode == null) {
        mode = "rw";
      };
      self.string = string;
      self.position = string.$length();
      if ($truthy(($truthy($a = mode['$include?']("r")) ? mode['$include?']("w")['$!']() : $a))) {
        return (self.closed = "write")
      } else if ($truthy(($truthy($a = mode['$include?']("w")) ? mode['$include?']("r")['$!']() : $a))) {
        return (self.closed = "read")
      } else {
        return nil
      };
    }, TMP_StringIO_initialize_2.$$arity = -1);
    
    Opal.def(self, '$eof?', TMP_StringIO_eof$q_3 = function() {
      var self = this;

      
      self.$check_readable();
      return self.position['$=='](self.string.$length());
    }, TMP_StringIO_eof$q_3.$$arity = 0);
    Opal.alias(self, "eof", "eof?");
    
    Opal.def(self, '$seek', TMP_StringIO_seek_4 = function $$seek(pos, whence) {
      var self = this, $case = nil;

      
      
      if (whence == null) {
        whence = $$$($$($nesting, 'IO'), 'SEEK_SET');
      };
      $case = whence;
      if ($$$($$($nesting, 'IO'), 'SEEK_SET')['$===']($case)) {
      if ($truthy($rb_ge(pos, 0))) {
      } else {
        self.$raise($$$($$($nesting, 'Errno'), 'EINVAL'))
      };
      self.position = pos;}
      else if ($$$($$($nesting, 'IO'), 'SEEK_CUR')['$===']($case)) {if ($truthy($rb_gt($rb_plus(self.position, pos), self.string.$length()))) {
        self.position = self.string.$length()
      } else {
        self.position = $rb_plus(self.position, pos)
      }}
      else if ($$$($$($nesting, 'IO'), 'SEEK_END')['$===']($case)) {if ($truthy($rb_gt(pos, self.string.$length()))) {
        self.position = 0
      } else {
        self.position = $rb_minus(self.position, pos)
      }};
      return 0;
    }, TMP_StringIO_seek_4.$$arity = -2);
    
    Opal.def(self, '$tell', TMP_StringIO_tell_5 = function $$tell() {
      var self = this;

      return self.position
    }, TMP_StringIO_tell_5.$$arity = 0);
    Opal.alias(self, "pos", "tell");
    Opal.alias(self, "pos=", "seek");
    
    Opal.def(self, '$rewind', TMP_StringIO_rewind_6 = function $$rewind() {
      var self = this;

      return self.$seek(0)
    }, TMP_StringIO_rewind_6.$$arity = 0);
    
    Opal.def(self, '$each_byte', TMP_StringIO_each_byte_7 = function $$each_byte() {
      var $iter = TMP_StringIO_each_byte_7.$$p, block = $iter || nil, $a, self = this, i = nil;

      if ($iter) TMP_StringIO_each_byte_7.$$p = null;
      
      
      if ($iter) TMP_StringIO_each_byte_7.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("each_byte")
      };
      self.$check_readable();
      i = self.position;
      while (!($truthy(self['$eof?']()))) {
        
        block.$call(self.string['$[]'](i).$ord());
        i = $rb_plus(i, 1);
      };
      return self;
    }, TMP_StringIO_each_byte_7.$$arity = 0);
    
    Opal.def(self, '$each_char', TMP_StringIO_each_char_8 = function $$each_char() {
      var $iter = TMP_StringIO_each_char_8.$$p, block = $iter || nil, $a, self = this, i = nil;

      if ($iter) TMP_StringIO_each_char_8.$$p = null;
      
      
      if ($iter) TMP_StringIO_each_char_8.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("each_char")
      };
      self.$check_readable();
      i = self.position;
      while (!($truthy(self['$eof?']()))) {
        
        block.$call(self.string['$[]'](i));
        i = $rb_plus(i, 1);
      };
      return self;
    }, TMP_StringIO_each_char_8.$$arity = 0);
    
    Opal.def(self, '$each', TMP_StringIO_each_9 = function $$each(separator) {
      var $iter = TMP_StringIO_each_9.$$p, $yield = $iter || nil, self = this, chomp_lines = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if ($iter) TMP_StringIO_each_9.$$p = null;
      
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("each_line")
      };
      self.$check_readable();
      chomp_lines = false;
      if ($truthy($$$('::', 'Hash')['$==='](separator))) {
        separator = (function() {if ($truthy((chomp_lines = separator['$[]']("chomp")))) {
          return /\r?\n/
        } else {
          return $gvars["/"]
        }; return nil; })()
      } else if ($truthy(separator)) {
        separator = separator.$to_str()
      } else {
        separator = undefined
      };
      
      var str = self.string, stringLength = str.length;
      if (self.position < stringLength) str = str.substr(self.position);
      if (separator) {
        var chomped = (str).$chomp(), trailing = str.length !== chomped.length, splitted = chomped.split(separator);
        for (var i = 0, len = splitted.length; i < len; i++) {
          var line = chomp_lines ? splitted[i] : (i < len - 1 || trailing ? splitted[i] + separator : splitted[i]);
          Opal.yield1($yield, line);
        }
      } else if (separator === undefined) {
        Opal.yield1($yield, str);
      } else {
        var m, re = /(.+(?:\n\n|$))\n*/g;
        while ((m = re.exec(str))) Opal.yield1($yield, m[1]);
      }
      self.position = stringLength;
    ;
      return self;
    }, TMP_StringIO_each_9.$$arity = -1);
    Opal.alias(self, "each_line", "each");
    
    Opal.def(self, '$write', TMP_StringIO_write_10 = function $$write(string) {
      var self = this, before = nil, after = nil;

      
      self.$check_writable();
      string = self.$String(string);
      if (self.string.$length()['$=='](self.position)) {
        
        self.string = $rb_plus(self.string, string);
        return (self.position = $rb_plus(self.position, string.$length()));
      } else {
        
        before = self.string['$[]'](Opal.Range.$new(0, $rb_minus(self.position, 1), false));
        after = self.string['$[]'](Opal.Range.$new($rb_plus(self.position, string.$length()), -1, false));
        self.string = $rb_plus($rb_plus(before, string), after);
        return (self.position = $rb_plus(self.position, string.$length()));
      };
    }, TMP_StringIO_write_10.$$arity = 1);
    
    Opal.def(self, '$read', TMP_StringIO_read_11 = function $$read(length, outbuf) {
      var self = this, string = nil, str = nil;

      
      
      if (length == null) {
        length = nil;
      };
      
      if (outbuf == null) {
        outbuf = nil;
      };
      self.$check_readable();
      if ($truthy(self['$eof?']())) {
        return nil};
      string = (function() {if ($truthy(length)) {
        
        str = self.string['$[]'](self.position, length);
        self.position = $rb_plus(self.position, length);
        return str;
      } else {
        
        str = self.string['$[]'](Opal.Range.$new(self.position, -1, false));
        self.position = self.string.$length();
        return str;
      }; return nil; })();
      if ($truthy(outbuf)) {
        return outbuf.$write(string)
      } else {
        return string
      };
    }, TMP_StringIO_read_11.$$arity = -1);
    
    Opal.def(self, '$close', TMP_StringIO_close_12 = function $$close() {
      var self = this;

      return (self.closed = "both")
    }, TMP_StringIO_close_12.$$arity = 0);
    
    Opal.def(self, '$close_read', TMP_StringIO_close_read_13 = function $$close_read() {
      var self = this;

      if (self.closed['$==']("write")) {
        return (self.closed = "both")
      } else {
        return (self.closed = "read")
      }
    }, TMP_StringIO_close_read_13.$$arity = 0);
    
    Opal.def(self, '$close_write', TMP_StringIO_close_write_14 = function $$close_write() {
      var self = this;

      if (self.closed['$==']("read")) {
        return (self.closed = "both")
      } else {
        return (self.closed = "write")
      }
    }, TMP_StringIO_close_write_14.$$arity = 0);
    
    Opal.def(self, '$closed?', TMP_StringIO_closed$q_15 = function() {
      var self = this;

      return self.closed['$==']("both")
    }, TMP_StringIO_closed$q_15.$$arity = 0);
    
    Opal.def(self, '$closed_read?', TMP_StringIO_closed_read$q_16 = function() {
      var $a, self = this;

      return ($truthy($a = self.closed['$==']("read")) ? $a : self.closed['$==']("both"))
    }, TMP_StringIO_closed_read$q_16.$$arity = 0);
    
    Opal.def(self, '$closed_write?', TMP_StringIO_closed_write$q_17 = function() {
      var $a, self = this;

      return ($truthy($a = self.closed['$==']("write")) ? $a : self.closed['$==']("both"))
    }, TMP_StringIO_closed_write$q_17.$$arity = 0);
    
    Opal.def(self, '$check_writable', TMP_StringIO_check_writable_18 = function $$check_writable() {
      var self = this;

      if ($truthy(self['$closed_write?']())) {
        return self.$raise($$($nesting, 'IOError'), "not opened for writing")
      } else {
        return nil
      }
    }, TMP_StringIO_check_writable_18.$$arity = 0);
    return (Opal.def(self, '$check_readable', TMP_StringIO_check_readable_19 = function $$check_readable() {
      var self = this;

      if ($truthy(self['$closed_read?']())) {
        return self.$raise($$($nesting, 'IOError'), "not opened for reading")
      } else {
        return nil
      }
    }, TMP_StringIO_check_readable_19.$$arity = 0), nil) && 'check_readable';
  })($nesting[0], $$($nesting, 'IO'), $nesting)
};

},{}],89:[function(require,module,exports){
'use strict';

function posix(path) {
	return path.charAt(0) === '/';
}

function win32(path) {
	// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
	var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
	var result = splitDeviceRe.exec(path);
	var device = result[1] || '';
	var isUnc = Boolean(device && device.charAt(1) !== ':');

	// UNC paths are always absolute
	return Boolean(result[2] || isUnc);
}

module.exports = process.platform === 'win32' ? win32 : posix;
module.exports.posix = posix;
module.exports.win32 = win32;

},{}],90:[function(require,module,exports){
'use strict';

module.exports = require('./lib/picomatch');

},{"./lib/picomatch":93}],91:[function(require,module,exports){
'use strict';

const path = require('path');
const WIN_SLASH = '\\\\/';
const WIN_NO_SLASH = `[^${WIN_SLASH}]`;

/**
 * Posix glob regex
 */

const DOT_LITERAL = '\\.';
const PLUS_LITERAL = '\\+';
const QMARK_LITERAL = '\\?';
const SLASH_LITERAL = '\\/';
const ONE_CHAR = '(?=.)';
const QMARK = '[^/]';
const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
const NO_DOT = `(?!${DOT_LITERAL})`;
const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
const STAR = `${QMARK}*?`;

const POSIX_CHARS = {
  DOT_LITERAL,
  PLUS_LITERAL,
  QMARK_LITERAL,
  SLASH_LITERAL,
  ONE_CHAR,
  QMARK,
  END_ANCHOR,
  DOTS_SLASH,
  NO_DOT,
  NO_DOTS,
  NO_DOT_SLASH,
  NO_DOTS_SLASH,
  QMARK_NO_DOT,
  STAR,
  START_ANCHOR
};

/**
 * Windows glob regex
 */

const WINDOWS_CHARS = {
  ...POSIX_CHARS,

  SLASH_LITERAL: `[${WIN_SLASH}]`,
  QMARK: WIN_NO_SLASH,
  STAR: `${WIN_NO_SLASH}*?`,
  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
  NO_DOT: `(?!${DOT_LITERAL})`,
  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
};

/**
 * POSIX Bracket Regex
 */

const POSIX_REGEX_SOURCE = {
  alnum: 'a-zA-Z0-9',
  alpha: 'a-zA-Z',
  ascii: '\\x00-\\x7F',
  blank: ' \\t',
  cntrl: '\\x00-\\x1F\\x7F',
  digit: '0-9',
  graph: '\\x21-\\x7E',
  lower: 'a-z',
  print: '\\x20-\\x7E ',
  punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
  space: ' \\t\\r\\n\\v\\f',
  upper: 'A-Z',
  word: 'A-Za-z0-9_',
  xdigit: 'A-Fa-f0-9'
};

module.exports = {
  MAX_LENGTH: 1024 * 64,
  POSIX_REGEX_SOURCE,

  // regular expressions
  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
  REGEX_NON_SPECIAL_CHAR: /^[^@![\].,$*+?^{}()|\\/]+/,
  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,

  // Replace globs with equivalent patterns to reduce parsing time.
  REPLACEMENTS: {
    '***': '*',
    '**/**': '**',
    '**/**/**': '**'
  },

  // Digits
  CHAR_0: 48, /* 0 */
  CHAR_9: 57, /* 9 */

  // Alphabet chars.
  CHAR_UPPERCASE_A: 65, /* A */
  CHAR_LOWERCASE_A: 97, /* a */
  CHAR_UPPERCASE_Z: 90, /* Z */
  CHAR_LOWERCASE_Z: 122, /* z */

  CHAR_LEFT_PARENTHESES: 40, /* ( */
  CHAR_RIGHT_PARENTHESES: 41, /* ) */

  CHAR_ASTERISK: 42, /* * */

  // Non-alphabetic chars.
  CHAR_AMPERSAND: 38, /* & */
  CHAR_AT: 64, /* @ */
  CHAR_BACKWARD_SLASH: 92, /* \ */
  CHAR_CARRIAGE_RETURN: 13, /* \r */
  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */
  CHAR_COLON: 58, /* : */
  CHAR_COMMA: 44, /* , */
  CHAR_DOT: 46, /* . */
  CHAR_DOUBLE_QUOTE: 34, /* " */
  CHAR_EQUAL: 61, /* = */
  CHAR_EXCLAMATION_MARK: 33, /* ! */
  CHAR_FORM_FEED: 12, /* \f */
  CHAR_FORWARD_SLASH: 47, /* / */
  CHAR_GRAVE_ACCENT: 96, /* ` */
  CHAR_HASH: 35, /* # */
  CHAR_HYPHEN_MINUS: 45, /* - */
  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */
  CHAR_LEFT_CURLY_BRACE: 123, /* { */
  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */
  CHAR_LINE_FEED: 10, /* \n */
  CHAR_NO_BREAK_SPACE: 160, /* \u00A0 */
  CHAR_PERCENT: 37, /* % */
  CHAR_PLUS: 43, /* + */
  CHAR_QUESTION_MARK: 63, /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */
  CHAR_RIGHT_CURLY_BRACE: 125, /* } */
  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */
  CHAR_SEMICOLON: 59, /* ; */
  CHAR_SINGLE_QUOTE: 39, /* ' */
  CHAR_SPACE: 32, /*   */
  CHAR_TAB: 9, /* \t */
  CHAR_UNDERSCORE: 95, /* _ */
  CHAR_VERTICAL_LINE: 124, /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \uFEFF */

  SEP: path.sep,

  /**
   * Create EXTGLOB_CHARS
   */

  extglobChars(chars) {
    return {
      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },
      '?': { type: 'qmark', open: '(?:', close: ')?' },
      '+': { type: 'plus', open: '(?:', close: ')+' },
      '*': { type: 'star', open: '(?:', close: ')*' },
      '@': { type: 'at', open: '(?:', close: ')' }
    };
  },

  /**
   * Create GLOB_CHARS
   */

  globChars(win32) {
    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
  }
};

},{"path":undefined}],92:[function(require,module,exports){
'use strict';

const utils = require('./utils');
const constants = require('./constants');

/**
 * Constants
 */

const {
  MAX_LENGTH,
  POSIX_REGEX_SOURCE,
  REGEX_NON_SPECIAL_CHAR,
  REGEX_SPECIAL_CHARS_BACKREF,
  REPLACEMENTS
} = constants;

/**
 * Helpers
 */

const expandRange = (args, options) => {
  if (typeof options.expandRange === 'function') {
    return options.expandRange(...args, options);
  }

  args.sort();
  let value = `[${args.join('-')}]`;

  try {
    /* eslint-disable no-new */
    new RegExp(value);
  } catch (ex) {
    return args.map(v => utils.escapeRegex(v)).join('..');
  }

  return value;
};

const negate = state => {
  let count = 1;

  while (state.peek() === '!' && (state.peek(2) !== '(' || state.peek(3) === '?')) {
    state.advance();
    state.start++;
    count++;
  }

  if (count % 2 === 0) {
    return false;
  }

  state.negated = true;
  state.start++;
  return true;
};

/**
 * Create the message for a syntax error
 */

const syntaxError = (type, char) => {
  return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
};

/**
 * Parse the given input string.
 * @param {String} input
 * @param {Object} options
 * @return {Object}
 */

const parse = (input, options) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string');
  }

  input = REPLACEMENTS[input] || input;

  let opts = { ...options };
  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  let len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }

  let bos = { type: 'bos', value: '', output: opts.prepend || '' };
  let tokens = [bos];

  let capture = opts.capture ? '' : '?:';
  let win32 = utils.isWindows(options);

  // create constants based on platform, for windows or posix
  const PLATFORM_CHARS = constants.globChars(win32);
  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);

  const {
    DOT_LITERAL,
    PLUS_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR
  } = PLATFORM_CHARS;

  const globstar = (opts) => {
    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
  };

  let nodot = opts.dot ? '' : NO_DOT;
  let star = opts.bash === true ? globstar(opts) : STAR;
  let qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;

  if (opts.capture) {
    star = `(${star})`;
  }

  // minimatch options support
  if (typeof opts.noext === 'boolean') {
    opts.noextglob = opts.noext;
  }

  let state = {
    index: -1,
    start: 0,
    consumed: '',
    output: '',
    backtrack: false,
    brackets: 0,
    braces: 0,
    parens: 0,
    quotes: 0,
    tokens
  };

  let extglobs = [];
  let stack = [];
  let prev = bos;
  let value;

  /**
   * Tokenizing helpers
   */

  const eos = () => state.index === len - 1;
  const peek = state.peek = (n = 1) => input[state.index + n];
  const advance = state.advance = () => input[++state.index];
  const append = token => {
    state.output += token.output != null ? token.output : token.value;
    state.consumed += token.value || '';
  };

  const increment = type => {
    state[type]++;
    stack.push(type);
  };

  const decrement = type => {
    state[type]--;
    stack.pop();
  };

  /**
   * Push tokens onto the tokens array. This helper speeds up
   * tokenizing by 1) helping us avoid backtracking as much as possible,
   * and 2) helping us avoid creating extra tokens when consecutive
   * characters are plain text. This improves performance and simplifies
   * lookbehinds.
   */

  const push = tok => {
    if (prev.type === 'globstar') {
      let isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');
      let isExtglob = extglobs.length && (tok.type === 'pipe' || tok.type === 'paren');
      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = 'star';
        prev.value = '*';
        prev.output = star;
        state.output += prev.output;
      }
    }

    if (extglobs.length && tok.type !== 'paren' && !EXTGLOB_CHARS[tok.value]) {
      extglobs[extglobs.length - 1].inner += tok.value;
    }

    if (tok.value || tok.output) append(tok);
    if (prev && prev.type === 'text' && tok.type === 'text') {
      prev.value += tok.value;
      return;
    }

    tok.prev = prev;
    tokens.push(tok);
    prev = tok;
  };

  const extglobOpen = (type, value) => {
    let token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };

    token.prev = prev;
    token.parens = state.parens;
    token.output = state.output;
    let output = (opts.capture ? '(' : '') + token.open;

    push({ type, value, output: state.output ? '' : ONE_CHAR });
    push({ type: 'paren', extglob: true, value: advance(), output });
    increment('parens');
    extglobs.push(token);
  };

  const extglobClose = token => {
    let output = token.close + (opts.capture ? ')' : '');

    if (token.type === 'negate') {
      let extglobStar = star;

      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {
        extglobStar = globstar(opts);
      }

      if (extglobStar !== star || eos() || /^\)+$/.test(input.slice(state.index + 1))) {
        output = token.close = ')$))' + extglobStar;
      }

      if (token.prev.type === 'bos' && eos()) {
        state.negatedExtglob = true;
      }
    }

    push({ type: 'paren', extglob: true, value, output });
    decrement('parens');
  };

  if (opts.fastpaths !== false && !/(^[*!]|[/{[()\]}"])/.test(input)) {
    let backslashes = false;

    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
      if (first === '\\') {
        backslashes = true;
        return m;
      }

      if (first === '?') {
        if (esc) {
          return esc + first + (rest ? QMARK.repeat(rest.length) : '');
        }
        if (index === 0) {
          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');
        }
        return QMARK.repeat(chars.length);
      }

      if (first === '.') {
        return DOT_LITERAL.repeat(chars.length);
      }

      if (first === '*') {
        if (esc) {
          return esc + first + (rest ? star : '');
        }
        return star;
      }
      return esc ? m : '\\' + m;
    });

    if (backslashes === true) {
      if (opts.unescape === true) {
        output = output.replace(/\\/g, '');
      } else {
        output = output.replace(/\\+/g, m => {
          return m.length % 2 === 0 ? '\\\\' : (m ? '\\' : '');
        });
      }
    }

    state.output = output;
    return state;
  }

  /**
   * Tokenize input until we reach end-of-string
   */

  while (!eos()) {
    value = advance();

    if (value === '\u0000') {
      continue;
    }

    /**
     * Escaped characters
     */

    if (value === '\\') {
      let next = peek();

      if (next === '/' && opts.bash !== true) {
        continue;
      }

      if (next === '.' || next === ';') {
        continue;
      }

      if (!next) {
        value += '\\';
        push({ type: 'text', value });
        continue;
      }

      // collapse slashes to reduce potential for exploits
      let match = /^\\+/.exec(input.slice(state.index + 1));
      let slashes = 0;

      if (match && match[0].length > 2) {
        slashes = match[0].length;
        state.index += slashes;
        if (slashes % 2 !== 0) {
          value += '\\';
        }
      }

      if (opts.unescape === true) {
        value = advance() || '';
      } else {
        value += advance() || '';
      }

      if (state.brackets === 0) {
        push({ type: 'text', value });
        continue;
      }
    }

    /**
     * If we're inside a regex character class, continue
     * until we reach the closing bracket.
     */

    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {
      if (opts.posix !== false && value === ':') {
        let inner = prev.value.slice(1);
        if (inner.includes('[')) {
          prev.posix = true;

          if (inner.includes(':')) {
            let idx = prev.value.lastIndexOf('[');
            let pre = prev.value.slice(0, idx);
            let rest = prev.value.slice(idx + 2);
            let posix = POSIX_REGEX_SOURCE[rest];
            if (posix) {
              prev.value = pre + posix;
              state.backtrack = true;
              advance();

              if (!bos.output && tokens.indexOf(prev) === 1) {
                bos.output = ONE_CHAR;
              }
              continue;
            }
          }
        }
      }

      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {
        value = '\\' + value;
      }

      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {
        value = '\\' + value;
      }

      if (opts.posix === true && value === '!' && prev.value === '[') {
        value = '^';
      }

      prev.value += value;
      append({ value });
      continue;
    }

    /**
     * If we're inside a quoted string, continue
     * until we reach the closing double quote.
     */

    if (state.quotes === 1 && value !== '"') {
      value = utils.escapeRegex(value);
      prev.value += value;
      append({ value });
      continue;
    }

    /**
     * Double quotes
     */

    if (value === '"') {
      state.quotes = state.quotes === 1 ? 0 : 1;
      if (opts.keepQuotes === true) {
        push({ type: 'text', value });
      }
      continue;
    }

    /**
     * Parentheses
     */

    if (value === '(') {
      push({ type: 'paren', value });
      increment('parens');
      continue;
    }

    if (value === ')') {
      if (state.parens === 0 && opts.strictBrackets === true) {
        throw new SyntaxError(syntaxError('opening', '('));
      }

      let extglob = extglobs[extglobs.length - 1];
      if (extglob && state.parens === extglob.parens + 1) {
        extglobClose(extglobs.pop());
        continue;
      }

      push({ type: 'paren', value, output: state.parens ? ')' : '\\)' });
      decrement('parens');
      continue;
    }

    /**
     * Brackets
     */

    if (value === '[') {
      if (opts.nobracket === true || !input.slice(state.index + 1).includes(']')) {
        if (opts.nobracket !== true && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError('closing', ']'));
        }

        value = '\\' + value;
      } else {
        increment('brackets');
      }

      push({ type: 'bracket', value });
      continue;
    }

    if (value === ']') {
      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {
        push({ type: 'text', value, output: '\\' + value });
        continue;
      }

      if (state.brackets === 0) {
        if (opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError('opening', '['));
        }

        push({ type: 'text', value, output: '\\' + value });
        continue;
      }

      decrement('brackets');

      let prevValue = prev.value.slice(1);
      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {
        value = '/' + value;
      }

      prev.value += value;
      append({ value });

      // when literal brackets are explicitly disabled
      // assume we should match with a regex character class
      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
        continue;
      }

      let escaped = utils.escapeRegex(prev.value);
      state.output = state.output.slice(0, -prev.value.length);

      // when literal brackets are explicitly enabled
      // assume we should escape the brackets to match literal characters
      if (opts.literalBrackets === true) {
        state.output += escaped;
        prev.value = escaped;
        continue;
      }

      // when the user specifies nothing, try to match both
      prev.value = `(${capture}${escaped}|${prev.value})`;
      state.output += prev.value;
      continue;
    }

    /**
     * Braces
     */

    if (value === '{' && opts.nobrace !== true) {
      push({ type: 'brace', value, output: '(' });
      increment('braces');
      continue;
    }

    if (value === '}') {
      if (opts.nobrace === true || state.braces === 0) {
        push({ type: 'text', value, output: '\\' + value });
        continue;
      }

      let output = ')';

      if (state.dots === true) {
        let arr = tokens.slice();
        let range = [];

        for (let i = arr.length - 1; i >= 0; i--) {
          tokens.pop();
          if (arr[i].type === 'brace') {
            break;
          }
          if (arr[i].type !== 'dots') {
            range.unshift(arr[i].value);
          }
        }

        output = expandRange(range, opts);
        state.backtrack = true;
      }

      push({ type: 'brace', value, output });
      decrement('braces');
      continue;
    }

    /**
     * Pipes
     */

    if (value === '|') {
      if (extglobs.length > 0) {
        extglobs[extglobs.length - 1].conditions++;
      }
      push({ type: 'text', value });
      continue;
    }

    /**
     * Commas
     */

    if (value === ',') {
      let output = value;

      if (state.braces > 0 && stack[stack.length - 1] === 'braces') {
        output = '|';
      }

      push({ type: 'comma', value, output });
      continue;
    }

    /**
     * Slashes
     */

    if (value === '/') {
      // if the beginning of the glob is "./", advance the start
      // to the current index, and don't add the "./" characters
      // to the state. This greatly simplifies lookbehinds when
      // checking for BOS characters like "!" and "." (not "./")
      if (prev.type === 'dot' && state.index === 1) {
        state.start = state.index + 1;
        state.consumed = '';
        state.output = '';
        tokens.pop();
        prev = bos; // reset "prev" to the first token
        continue;
      }

      push({ type: 'slash', value, output: SLASH_LITERAL });
      continue;
    }

    /**
     * Dots
     */

    if (value === '.') {
      if (state.braces > 0 && prev.type === 'dot') {
        if (prev.value === '.') prev.output = DOT_LITERAL;
        prev.type = 'dots';
        prev.output += value;
        prev.value += value;
        state.dots = true;
        continue;
      }

      push({ type: 'dot', value, output: DOT_LITERAL });
      continue;
    }

    /**
     * Question marks
     */

    if (value === '?') {
      if (prev && prev.type === 'paren') {
        let next = peek();
        let output = value;

        if (next === '<' && !utils.supportsLookbehinds()) {
          throw new Error('Node.js v10 or higher is required for regex lookbehinds');
        }

        if (prev.value === '(' && !/[!=<:]/.test(next) || (next === '<' && !/[!=]/.test(peek(2)))) {
          output = '\\' + value;
        }

        push({ type: 'text', value, output });
        continue;
      }

      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        extglobOpen('qmark', value);
        continue;
      }

      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {
        push({ type: 'qmark', value, output: QMARK_NO_DOT });
        continue;
      }

      push({ type: 'qmark', value, output: QMARK });
      continue;
    }

    /**
     * Exclamation
     */

    if (value === '!') {
      if (opts.noextglob !== true && peek() === '(') {
        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {
          extglobOpen('negate', value);
          continue;
        }
      }

      if (opts.nonegate !== true && state.index === 0) {
        negate(state);
        continue;
      }
    }

    /**
     * Plus
     */

    if (value === '+') {
      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        extglobOpen('plus', value);
        continue;
      }

      if (prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) {
        let output = prev.extglob === true ? '\\' + value : value;
        push({ type: 'plus', value, output });
        continue;
      }

      // use regex behavior inside parens
      if (state.parens > 0 && opts.regex !== false) {
        push({ type: 'plus', value });
        continue;
      }

      push({ type: 'plus', value: PLUS_LITERAL });
      continue;
    }

    /**
     * Plain text
     */

    if (value === '@') {
      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        push({ type: 'at', value, output: '' });
        continue;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Plain text
     */

    if (value !== '*') {
      if (value === '$' || value === '^') {
        value = '\\' + value;
      }

      let match = REGEX_NON_SPECIAL_CHAR.exec(input.slice(state.index + 1));
      if (match) {
        value += match[0];
        state.index += match[0].length;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Stars
     */

    if (prev && (prev.type === 'globstar' || prev.star === true)) {
      prev.type = 'star';
      prev.star = true;
      prev.value += value;
      prev.output = star;
      state.backtrack = true;
      state.consumed += value;
      continue;
    }

    if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
      extglobOpen('star', value);
      continue;
    }

    if (prev.type === 'star') {
      if (opts.noglobstar === true) {
        state.consumed += value;
        continue;
      }

      let prior = prev.prev;
      let before = prior.prev;
      let isStart = prior.type === 'slash' || prior.type === 'bos';
      let afterStar = before && (before.type === 'star' || before.type === 'globstar');

      if (opts.bash === true && (!isStart || (!eos() && peek() !== '/'))) {
        push({ type: 'star', value, output: '' });
        continue;
      }

      let isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');
      let isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');
      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {
        push({ type: 'star', value, output: '' });
        continue;
      }

      // strip consecutive `/**/`
      while (input.slice(state.index + 1, state.index + 4) === '/**') {
        let after = input[state.index + 4];
        if (after && after !== '/') {
          break;
        }
        state.consumed += '/**';
        state.index += 3;
      }

      if (prior.type === 'bos' && eos()) {
        prev.type = 'globstar';
        prev.value += value;
        prev.output = globstar(opts);
        state.output = prev.output;
        state.consumed += value;
        continue;
      }

      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = '(?:' + prior.output;

        prev.type = 'globstar';
        prev.output = globstar(opts) + '|$)';
        prev.value += value;

        state.output += prior.output + prev.output;
        state.consumed += value;
        continue;
      }

      let next = peek();
      if (prior.type === 'slash' && prior.prev.type !== 'bos' && next === '/') {
        let end = peek(2) !== void 0 ? '|$' : '';

        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = '(?:' + prior.output;

        prev.type = 'globstar';
        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
        prev.value += value;

        state.output += prior.output + prev.output;
        state.consumed += value + advance();

        push({ type: 'slash', value, output: '' });
        continue;
      }

      if (prior.type === 'bos' && next === '/') {
        prev.type = 'globstar';
        prev.value += value;
        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
        state.output = prev.output;
        state.consumed += value + advance();
        push({ type: 'slash', value, output: '' });
        continue;
      }

      // remove single star from output
      state.output = state.output.slice(0, -prev.output.length);

      // reset previous token to globstar
      prev.type = 'globstar';
      prev.output = globstar(opts);
      prev.value += value;

      // reset output with globstar
      state.output += prev.output;
      state.consumed += value;
      continue;
    }

    let token = { type: 'star', value, output: star };

    if (opts.bash === true) {
      token.output = '.*?';
      if (prev.type === 'bos' || prev.type === 'slash') {
        token.output = nodot + token.output;
      }
      push(token);
      continue;
    }

    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {
      token.output = value;
      push(token);
      continue;
    }

    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {
      if (prev.type === 'dot') {
        state.output += NO_DOT_SLASH;
        prev.output += NO_DOT_SLASH;

      } else if (opts.dot === true) {
        state.output += NO_DOTS_SLASH;
        prev.output += NO_DOTS_SLASH;

      } else {
        state.output += nodot;
        prev.output += nodot;
      }

      if (peek() !== '*') {
        state.output += ONE_CHAR;
        prev.output += ONE_CHAR;
      }
    }

    push(token);
  }

  while (state.brackets > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));
    state.output = utils.escapeLast(state.output, '[');
    decrement('brackets');
  }

  while (state.parens > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));
    state.output = utils.escapeLast(state.output, '(');
    decrement('parens');
  }

  while (state.braces > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));
    state.output = utils.escapeLast(state.output, '{');
    decrement('braces');
  }

  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {
    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });
  }

  // rebuild the output if we had to backtrack at any point
  if (state.backtrack === true) {
    state.output = '';

    for (let token of state.tokens) {
      state.output += token.output != null ? token.output : token.value;

      if (token.suffix) {
        state.output += token.suffix;
      }
    }
  }

  return state;
};

/**
 * Fast paths for creating regular expressions for common glob patterns.
 * This can significantly speed up processing and has very little downside
 * impact when none of the fast paths match.
 */

parse.fastpaths = (input, options) => {
  let opts = { ...options };
  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  let len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }

  input = REPLACEMENTS[input] || input;
  let win32 = utils.isWindows(options);

  // create constants based on platform, for windows or posix
  const {
    DOT_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOTS_SLASH,
    STAR,
    START_ANCHOR
  } = constants.globChars(win32);

  let capture = opts.capture ? '' : '?:';
  let star = opts.bash === true ? '.*?' : STAR;
  let nodot = opts.dot ? NO_DOTS : NO_DOT;
  let slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;

  if (opts.capture) {
    star = `(${star})`;
  }

  const globstar = (opts) => {
    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
  };

  const create = str => {
    switch (str) {
      case '*':
        return `${nodot}${ONE_CHAR}${star}`;

      case '.*':
        return `${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '*.*':
        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '*/*':
        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;

      case '**':
        return nodot + globstar(opts);

      case '**/*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;

      case '**/*.*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '**/.*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;

      default: {
        let match = /^(.*?)\.(\w+)$/.exec(str);
        if (!match) return;

        let source = create(match[1], options);
        if (!source) return;

        return source + DOT_LITERAL + match[2];
      }
    }
  };

  let output = create(input);
  if (output && opts.strictSlashes !== true) {
    output += `${SLASH_LITERAL}?`;
  }

  return output;
};

module.exports = parse;

},{"./constants":91,"./utils":95}],93:[function(require,module,exports){
'use strict';

const path = require('path');
const scan = require('./scan');
const parse = require('./parse');
const utils = require('./utils');

/**
 * Creates a matcher function from one or more glob patterns. The
 * returned function takes a string to match as its first argument,
 * and returns true if the string is a match. The returned matcher
 * function also takes a boolean as the second argument that, when true,
 * returns an object with additional information.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch(glob[, options]);
 *
 * const isMatch = picomatch('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @name picomatch
 * @param {String|Array} `globs` One or more glob patterns.
 * @param {Object=} `options`
 * @return {Function=} Returns a matcher function.
 * @api public
 */

const picomatch = (glob, options, returnState = false) => {
  if (Array.isArray(glob)) {
    let fns = glob.map(input => picomatch(input, options, returnState));
    return str => {
      for (let isMatch of fns) {
        let state = isMatch(str);
        if (state) return state;
      }
      return false;
    };
  }

  if (typeof glob !== 'string' || glob === '') {
    throw new TypeError('Expected pattern to be a non-empty string');
  }

  let opts = options || {};
  let posix = utils.isWindows(options);
  let regex = picomatch.makeRe(glob, options, false, true);
  let state = regex.state;
  delete regex.state;

  let isIgnored = () => false;
  if (opts.ignore) {
    let ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
  }

  const matcher = (input, returnObject = false) => {
    let { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
    let result = { glob, state, regex, posix, input, output, match, isMatch };

    if (typeof opts.onResult === 'function') {
      opts.onResult(result);
    }

    if (isMatch === false) {
      result.isMatch = false;
      return returnObject ? result : false;
    }

    if (isIgnored(input)) {
      if (typeof opts.onIgnore === 'function') {
        opts.onIgnore(result);
      }
      result.isMatch = false;
      return returnObject ? result : false;
    }

    if (typeof opts.onMatch === 'function') {
      opts.onMatch(result);
    }
    return returnObject ? result : true;
  };

  if (returnState) {
    matcher.state = state;
  }

  return matcher;
};

/**
 * Test `input` with the given `regex`. This is used by the main
 * `picomatch()` function to test the input string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.test(input, regex[, options]);
 *
 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp} `regex`
 * @return {Object} Returns an object with matching info.
 * @api public
 */

picomatch.test = (input, regex, options, { glob, posix } = {}) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected input to be a string');
  }

  if (input === '') {
    return { isMatch: false, output: '' };
  }

  let opts = options || {};
  let format = opts.format || (posix ? utils.toPosixSlashes : null);
  let match = input === glob;
  let output = (match && format) ? format(input) : input;

  if (match === false) {
    output = format ? format(input) : input;
    match = output === glob;
  }

  if (match === false || opts.capture === true) {
    if (opts.matchBase === true || opts.basename === true) {
      match = picomatch.matchBase(input, regex, options, posix);
    } else {
      match = regex.exec(output);
    }
  }

  return { isMatch: !!match, match, output };
};

/**
 * Match the basename of a filepath.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.matchBase(input, glob[, options]);
 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
 * @return {Boolean}
 * @api public
 */

picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
  let regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
  return regex.test(path.basename(input));
};

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.isMatch(string, patterns[, options]);
 *
 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String|Array} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const result = picomatch.parse(glob[, options]);
 * ```
 * @param {String} `glob`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
 * @api public
 */

picomatch.parse = (glob, options) => parse(glob, options);

/**
 * Scan a glob pattern to separate the pattern into segments.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.scan(input[, options]);
 *
 * const result = picomatch.scan('!./foo/*.js');
 * console.log(result);
 * // { prefix: '!./',
 * //   input: '!./foo/*.js',
 * //   base: 'foo',
 * //   glob: '*.js',
 * //   negated: true,
 * //   isGlob: true }
 * ```
 * @param {String} `input` Glob pattern to scan.
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

picomatch.scan = (input, options) => scan(input, options);

/**
 * Create a regular expression from a glob pattern.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.makeRe(input[, options]);
 *
 * console.log(picomatch.makeRe('*.js'));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `input` A glob pattern to convert to regex.
 * @param {Object} `options`
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

picomatch.makeRe = (input, options, returnOutput = false, returnState = false) => {
  if (!input || typeof input !== 'string') {
    throw new TypeError('Expected a non-empty string');
  }

  let opts = options || {};
  let prepend = opts.contains ? '' : '^';
  let append = opts.contains ? '' : '$';
  let state = { negated: false, fastpaths: true };
  let prefix = '';
  let output;

  if (input.startsWith('./')) {
    input = input.slice(2);
    prefix = state.prefix = './';
  }

  if (opts.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {
    output = parse.fastpaths(input, options);
  }

  if (output === void 0) {
    state = picomatch.parse(input, options);
    state.prefix = prefix + (state.prefix || '');
    output = state.output;
  }

  if (returnOutput === true) {
    return output;
  }

  let source = `${prepend}(?:${output})${append}`;
  if (state && state.negated === true) {
    source = `^(?!${source}).*$`;
  }

  let regex = picomatch.toRegex(source, options);
  if (returnState === true) {
    regex.state = state;
  }

  return regex;
};

/**
 * Create a regular expression from the given regex source string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.toRegex(source[, options]);
 *
 * const { output } = picomatch.parse('*.js');
 * console.log(picomatch.toRegex(output));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `source` Regular expression source string.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

picomatch.toRegex = (source, options) => {
  try {
    let opts = options || {};
    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));
  } catch (err) {
    if (options && options.debug === true) throw err;
    return /$^/;
  }
};

/**
 * Picomatch constants.
 * @return {Object}
 */

picomatch.constants = require('./constants');

/**
 * Expose "picomatch"
 */

module.exports = picomatch;

},{"./constants":91,"./parse":92,"./scan":94,"./utils":95,"path":undefined}],94:[function(require,module,exports){
'use strict';

const utils = require('./utils');

const {
  CHAR_ASTERISK,             /* * */
  CHAR_AT,                   /* @ */
  CHAR_BACKWARD_SLASH,       /* \ */
  CHAR_COMMA,                /* , */
  CHAR_DOT,                  /* . */
  CHAR_EXCLAMATION_MARK,     /* ! */
  CHAR_FORWARD_SLASH,        /* / */
  CHAR_LEFT_CURLY_BRACE,     /* { */
  CHAR_LEFT_PARENTHESES,     /* ( */
  CHAR_LEFT_SQUARE_BRACKET,  /* [ */
  CHAR_PLUS,                 /* + */
  CHAR_QUESTION_MARK,        /* ? */
  CHAR_RIGHT_CURLY_BRACE,    /* } */
  CHAR_RIGHT_PARENTHESES,    /* ) */
  CHAR_RIGHT_SQUARE_BRACKET /* ] */
} = require('./constants');

const isPathSeparator = code => {
  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
};

/**
 * Quickly scans a glob pattern and returns an object with a handful of
 * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
 * `glob` (the actual pattern), and `negated` (true if the path starts with `!`).
 *
 * ```js
 * const pm = require('picomatch');
 * console.log(pm.scan('foo/bar/*.js'));
 * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {Object} Returns an object with tokens and regex source string.
 * @api public
 */

module.exports = (input, options) => {
  let opts = options || {};
  let length = input.length - 1;
  let index = -1;
  let start = 0;
  let lastIndex = 0;
  let isGlob = false;
  let backslashes = false;
  let negated = false;
  let braces = 0;
  let prev;
  let code;

  let braceEscaped = false;

  let eos = () => index >= length;
  let advance = () => {
    prev = code;
    return input.charCodeAt(++index);
  };

  while (index < length) {
    code = advance();
    let next;

    if (code === CHAR_BACKWARD_SLASH) {
      backslashes = true;
      next = advance();

      if (next === CHAR_LEFT_CURLY_BRACE) {
        braceEscaped = true;
      }
      continue;
    }

    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
      braces++;

      while (!eos() && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = true;
          next = advance();
          continue;
        }

        if (next === CHAR_LEFT_CURLY_BRACE) {
          braces++;
          continue;
        }

        if (!braceEscaped && next === CHAR_DOT && (next = advance()) === CHAR_DOT) {
          isGlob = true;
          break;
        }

        if (!braceEscaped && next === CHAR_COMMA) {
          isGlob = true;
          break;
        }

        if (next === CHAR_RIGHT_CURLY_BRACE) {
          braces--;
          if (braces === 0) {
            braceEscaped = false;
            break;
          }
        }
      }
    }

    if (code === CHAR_FORWARD_SLASH) {
      if (prev === CHAR_DOT && index === (start + 1)) {
        start += 2;
        continue;
      }

      lastIndex = index + 1;
      continue;
    }

    if (code === CHAR_ASTERISK) {
      isGlob = true;
      break;
    }

    if (code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK) {
      isGlob = true;
      break;
    }

    if (code === CHAR_LEFT_SQUARE_BRACKET) {
      while (!eos() && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = true;
          next = advance();
          continue;
        }

        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          isGlob = true;
          break;
        }
      }
    }

    let isExtglobChar = code === CHAR_PLUS
      || code === CHAR_AT
      || code === CHAR_EXCLAMATION_MARK;

    if (isExtglobChar && input.charCodeAt(index + 1) === CHAR_LEFT_PARENTHESES) {
      isGlob = true;
      break;
    }

    if (code === CHAR_EXCLAMATION_MARK && index === start) {
      negated = true;
      start++;
      continue;
    }

    if (code === CHAR_LEFT_PARENTHESES) {
      while (!eos() && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = true;
          next = advance();
          continue;
        }

        if (next === CHAR_RIGHT_PARENTHESES) {
          isGlob = true;
          break;
        }
      }
    }

    if (isGlob) {
      break;
    }
  }

  let prefix = '';
  let orig = input;
  let base = input;
  let glob = '';

  if (start > 0) {
    prefix = input.slice(0, start);
    input = input.slice(start);
    lastIndex -= start;
  }

  if (base && isGlob === true && lastIndex > 0) {
    base = input.slice(0, lastIndex);
    glob = input.slice(lastIndex);
  } else if (isGlob === true) {
    base = '';
    glob = input;
  } else {
    base = input;
  }

  if (base && base !== '' && base !== '/' && base !== input) {
    if (isPathSeparator(base.charCodeAt(base.length - 1))) {
      base = base.slice(0, -1);
    }
  }

  if (opts.unescape === true) {
    if (glob) glob = utils.removeBackslashes(glob);

    if (base && backslashes === true) {
      base = utils.removeBackslashes(base);
    }
  }

  return { prefix, input: orig, base, glob, negated, isGlob };
};

},{"./constants":91,"./utils":95}],95:[function(require,module,exports){
'use strict';

const path = require('path');
const win32 = process.platform === 'win32';
const {
  REGEX_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_GLOBAL,
  REGEX_REMOVE_BACKSLASH
} = require('./constants');

exports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);
exports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);
exports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);
exports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\$1');
exports.toPosixSlashes = str => str.replace(/\\/g, '/');

exports.removeBackslashes = str => {
  return str.replace(REGEX_REMOVE_BACKSLASH, match => {
    return match === '\\' ? '' : match;
  });
}

exports.supportsLookbehinds = () => {
  let segs = process.version.slice(1).split('.');
  if (segs.length === 3 && +segs[0] >= 9 || (+segs[0] === 8 && +segs[1] >= 10)) {
    return true;
  }
  return false;
};

exports.isWindows = options => {
  if (options && typeof options.windows === 'boolean') {
    return options.windows;
  }
  return win32 === true || path.sep === '\\';
};

exports.escapeLast = (input, char, lastIdx) => {
  let idx = input.lastIndexOf(char, lastIdx);
  if (idx === -1) return input;
  if (input[idx - 1] === '\\') return exports.escapeLast(input, char, idx - 1);
  return input.slice(0, idx) + '\\' + input.slice(idx);
};

},{"./constants":91,"path":undefined}],96:[function(require,module,exports){
'use strict';

const fs = require('fs');
const {Readable} = require('stream');
const sysPath = require('path');
const picomatch = require('picomatch');
const {promisify} = require('util');
const [readdir, stat, lstat] = [promisify(fs.readdir), promisify(fs.stat), promisify(fs.lstat)];
const supportsDirent = 'Dirent' in fs;

/**
 * @typedef {Object} EntryInfo
 * @property {String} path
 * @property {String} fullPath
 * @property {fs.Stats=} stats
 * @property {fs.Dirent=} dirent
 * @property {String} basename
 */

const isWindows = process.platform === 'win32';
const supportsBigint = typeof BigInt === 'function';
const BANG = '!';
const NORMAL_FLOW_ERRORS = new Set(['ENOENT', 'EPERM', 'EACCES', 'ELOOP']);
const STAT_OPTIONS_SUPPORT_LENGTH = 3;
const FILE_TYPE = 'files';
const DIR_TYPE = 'directories';
const FILE_DIR_TYPE = 'files_directories';
const EVERYTHING_TYPE = 'all';
const FILE_TYPES = new Set([FILE_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE]);
const DIR_TYPES = new Set([DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE]);
const ALL_TYPES = [FILE_TYPE, DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE];

const isNormalFlowError = (errorCode) => NORMAL_FLOW_ERRORS.has(errorCode);

const normalizeFilter = (filter) => {
  if (filter === undefined) return;
  if (typeof filter === 'function') return filter;

  if (typeof filter === 'string') {
    const glob = picomatch(filter.trim());
    return (entry) => glob(entry.basename);
  }

  if (Array.isArray(filter)) {
    const positive = [];
    const negative = [];
    for (const item of filter) {
      const trimmed = item.trim();
      if (trimmed.charAt(0) === BANG) {
        negative.push(picomatch(trimmed.slice(1)));
      } else {
        positive.push(picomatch(trimmed));
      }
    }

    if (negative.length > 0) {
      if (positive.length > 0) {
        return (entry) => positive.some(f => f(entry.basename)) &&
          !negative.some(f => f(entry.basename));
      } else {
        return (entry) => !negative.some(f => f(entry.basename));
      }
    } else {
      return (entry) => positive.some(f => f(entry.basename));
    }
  }
};

class ExploringDir {
  constructor(path, depth) {
    this.path = path;
    this.depth = depth;
  }
}

class ReaddirpStream extends Readable {
  static get defaultOptions() {
    return {
      root: '.',
      fileFilter: (path) => true,
      directoryFilter: (path) => true,
      type: 'files',
      lstat: false,
      depth: 2147483648,
      alwaysStat: false
    }
  }

  constructor(options = {}) {
    super({objectMode: true, highWaterMark: 1});
    const opts = Object.assign({}, ReaddirpStream.defaultOptions, options);
    const {root} = opts;

    this._fileFilter = normalizeFilter(opts.fileFilter);
    this._directoryFilter = normalizeFilter(opts.directoryFilter);
    this._statMethod = opts.lstat ? lstat : stat;
    this._statOpts = {bigint: isWindows};
    this._maxDepth = opts.depth;
    this._entryType = opts.type
    this._root = root;
    this._isDirent = !opts.alwaysStat && supportsDirent;
    this._statsProp = this._isDirent ? 'dirent' : 'stats';
    this._readdir_options = {encoding: 'utf8', withFileTypes: this._isDirent};

    // Launch stream with one parent, the root dir.
    /** @type Array<[string, number]>  */
    this.parents = [new ExploringDir(root, 0)];
    this.filesToRead = 0;
  }

  async _read() {
    // If the stream was destroyed, we must not proceed.
    if (!this.readable) return;

    do {
      const parent = this.parents.pop();
      if (!parent) {
        // ...we have files to process; but not directories.
        // hence, parent is undefined; and we cannot execute fs.readdir().
        // The files are being processed anywhere.
        break;
      }
      await this._exploreDirectory(parent);
    } while(!this.isPaused() && !this._isQueueEmpty());

    this._endStreamIfQueueIsEmpty();
  }

  async _exploreDirectory(parent) {
    /** @type Array<fs.Dirent|string> */
    let files = [];

    // To prevent race conditions, we increase counter while awaiting readdir.
    this.filesToRead++;
    try {
      files = await readdir(parent.path, this._readdir_options);
    } catch (error) {
      if (isNormalFlowError(error.code)) {
        this._handleError(error);
      } else {
        this._handleFatalError(error);
      }
    }
    this.filesToRead--;

    // If the stream was destroyed, after readdir is completed
    if (!this.readable) return;

    this.filesToRead += files.length;

    const entries = await Promise.all(files.map(dirent =>  this._formatEntry(dirent, parent)));

    if (!this.readable) return;

    for (let i = 0; i < entries.length; i++) {
      const entry = entries[i];
      this.filesToRead--;
      if (!entry) {
        continue;
      }
      if (this._isDirAndMatchesFilter(entry)) {
        this._pushNewParentIfLessThanMaxDepth(entry.fullPath, parent.depth + 1);
        this._emitPushIfUserWantsDir(entry);
      } else if (this._isFileAndMatchesFilter(entry)) {
        this._emitPushIfUserWantsFile(entry);
      }
    }
  }

  _isStatOptionsSupported() {
    return this._statMethod.length === STAT_OPTIONS_SUPPORT_LENGTH; 
  }

  _stat(fullPath) {
    if (isWindows && this._isStatOptionsSupported()) {
      return this._statMethod(fullPath, this._statOpts);
    } else {
      return this._statMethod(fullPath);
    }
  }

  async _formatEntry(dirent, parent) {
    const relativePath = this._isDirent ? dirent.name : dirent;
    const fullPath = sysPath.resolve(sysPath.join(parent.path, relativePath));

    let stats;
    if (this._isDirent) {
      stats = dirent;
    } else {
      try {
        stats = await this._stat(fullPath);
      } catch (error) {
        if (isNormalFlowError(error.code)) {
          this._handleError(error);
        } else {
          this._handleFatalError(error);
        }
        return;
      }
    }
    const path = sysPath.relative(this._root, fullPath);
    const basename = sysPath.basename(path);

    /** @type {EntryInfo} */
    const entry = {path, fullPath, basename, [this._statsProp]: stats};

    return entry;
  }

  _isQueueEmpty() {
    return this.parents.length === 0 && this.filesToRead === 0 && this.readable;
  }

  _endStreamIfQueueIsEmpty() {
    if (this._isQueueEmpty()) {
      this.push(null);
    }
  }

  _pushNewParentIfLessThanMaxDepth(parentPath, depth) {
    if (depth <= this._maxDepth) {
      this.parents.push(new ExploringDir(parentPath, depth));
      return true
    } else {
      return false;
    }
  }

  _isDirAndMatchesFilter(entry) {
    return entry[this._statsProp].isDirectory() && this._directoryFilter(entry);
  }

  _isFileAndMatchesFilter(entry) {
    const stats = entry[this._statsProp];
    const isFileType = (
      (this._entryType === EVERYTHING_TYPE && !stats.isDirectory()) ||
      (stats.isFile() || stats.isSymbolicLink())
    );
    return isFileType && this._fileFilter(entry);
  }

  _emitPushIfUserWantsDir(entry) {
    if (DIR_TYPES.has(this._entryType)) {
      // TODO: Understand why this happens.
      const fn = () => {this._push(entry)};
      if (this._isDirent) setImmediate(fn);
      else fn();
    }
  }

  _emitPushIfUserWantsFile(entry) {
    if (FILE_TYPES.has(this._entryType)) {
      this._push(entry);
    }
  }

  _push(entry) {
    if (this.readable) {
      this.push(entry);
    }
  }

  _handleError(error) {
    if (!this.readable) {
      return;
    }
    this.emit('warn', error);
  }

  _handleFatalError(error) {
    if (!this.readable) {
      return;
    }
    this.emit('error', error);
    this.destroy();
  }

  destroy() {
    this.emit('close');
  }
}

/**
 * @typedef {Object} ReaddirpArguments
 * @property {Function=} fileFilter
 * @property {Function=} directoryFilter
 * @property {String=} type
 * @property {Number=} depth
 * @property {String=} root
 * @property {Boolean=} lstat
 * @property {Boolean=} bigint
 */

/**
 * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.
 * @param {String} root Root directory
 * @param {ReaddirpArguments=} options Options to specify root (start directory), filters and recursion depth
 */
const readdirp = (root, options = {}) => {
  let type = options['entryType'] || options.type;
  if (type === 'both') type = FILE_DIR_TYPE; // backwards-compatibility
  if (type) options.type = type;
  if (root == null || typeof root === 'undefined') {
    throw new Error('readdirp: root argument is required. Usage: readdirp(root, options)');
  } else if (typeof root !== 'string') {
    throw new Error(`readdirp: root argument must be a string. Usage: readdirp(root, options)`);
  } else if (type && !ALL_TYPES.includes(type)) {
    throw new Error(`readdirp: Invalid type passed. Use one of ${ALL_TYPES.join(', ')}`);
  }

  options.root = root;
  return new ReaddirpStream(options);
};

const readdirpPromise = (root, options = {}) => {
  return new Promise((resolve, reject) => {
    const files = [];
    readdirp(root, options)
      .on('data', (entry) => files.push(entry))
      .on('end', () => resolve(files))
      .on('error', (error) => reject(error));
  });
};

readdirp.promise = readdirpPromise;
readdirp.ReaddirpStream = ReaddirpStream;
readdirp.default = readdirp;

module.exports = readdirp;

},{"fs":undefined,"path":undefined,"picomatch":90,"stream":undefined,"util":undefined}],97:[function(require,module,exports){
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */

'use strict';

const isNumber = require('is-number');

const toRegexRange = (min, max, options) => {
  if (isNumber(min) === false) {
    throw new TypeError('toRegexRange: expected the first argument to be a number');
  }

  if (max === void 0 || min === max) {
    return String(min);
  }

  if (isNumber(max) === false) {
    throw new TypeError('toRegexRange: expected the second argument to be a number.');
  }

  let opts = { relaxZeros: true, ...options };
  if (typeof opts.strictZeros === 'boolean') {
    opts.relaxZeros = opts.strictZeros === false;
  }

  let relax = String(opts.relaxZeros);
  let shorthand = String(opts.shorthand);
  let capture = String(opts.capture);
  let wrap = String(opts.wrap);
  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;

  if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange.cache[cacheKey].result;
  }

  let a = Math.min(min, max);
  let b = Math.max(min, max);

  if (Math.abs(a - b) === 1) {
    let result = min + '|' + max;
    if (opts.capture) {
      return `(${result})`;
    }
    if (opts.wrap === false) {
      return result;
    }
    return `(?:${result})`;
  }

  let isPadded = hasPadding(min) || hasPadding(max);
  let state = { min, max, a, b };
  let positives = [];
  let negatives = [];

  if (isPadded) {
    state.isPadded = isPadded;
    state.maxLen = String(state.max).length;
  }

  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1;
    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
    a = state.a = 0;
  }

  if (b >= 0) {
    positives = splitToPatterns(a, b, state, opts);
  }

  state.negatives = negatives;
  state.positives = positives;
  state.result = collatePatterns(negatives, positives, opts);

  if (opts.capture === true) {
    state.result = `(${state.result})`;
  } else if (opts.wrap !== false && (positives.length + negatives.length) > 1) {
    state.result = `(?:${state.result})`;
  }

  toRegexRange.cache[cacheKey] = state;
  return state.result;
};

function collatePatterns(neg, pos, options) {
  let onlyNegative = filterPatterns(neg, pos, '-', false, options) || [];
  let onlyPositive = filterPatterns(pos, neg, '', false, options) || [];
  let intersected = filterPatterns(neg, pos, '-?', true, options) || [];
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
  return subpatterns.join('|');
}

function splitToRanges(min, max) {
  let nines = 1;
  let zeros = 1;

  let stop = countNines(min, nines);
  let stops = new Set([max]);

  while (min <= stop && stop <= max) {
    stops.add(stop);
    nines += 1;
    stop = countNines(min, nines);
  }

  stop = countZeros(max + 1, zeros) - 1;

  while (min < stop && stop <= max) {
    stops.add(stop);
    zeros += 1;
    stop = countZeros(max + 1, zeros) - 1;
  }

  stops = [...stops];
  stops.sort(compare);
  return stops;
}

/**
 * Convert a range to a regex pattern
 * @param {Number} `start`
 * @param {Number} `stop`
 * @return {String}
 */

function rangeToPattern(start, stop, options) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 };
  }

  let zipped = zip(start, stop);
  let digits = zipped.length;
  let pattern = '';
  let count = 0;

  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i];

    if (startDigit === stopDigit) {
      pattern += startDigit;

    } else if (startDigit !== '0' || stopDigit !== '9') {
      pattern += toCharacterClass(startDigit, stopDigit, options);

    } else {
      count++;
    }
  }

  if (count) {
    pattern += options.shorthand === true ? '\\d' : '[0-9]';
  }

  return { pattern, count: [count], digits };
}

function splitToPatterns(min, max, tok, options) {
  let ranges = splitToRanges(min, max);
  let tokens = [];
  let start = min;
  let prev;

  for (let i = 0; i < ranges.length; i++) {
    let max = ranges[i];
    let obj = rangeToPattern(String(start), String(max), options);
    let zeros = '';

    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop();
      }

      prev.count.push(obj.count[0]);
      prev.string = prev.pattern + toQuantifier(prev.count);
      start = max + 1;
      continue;
    }

    if (tok.isPadded) {
      zeros = padZeros(max, tok, options);
    }

    obj.string = zeros + obj.pattern + toQuantifier(obj.count);
    tokens.push(obj);
    start = max + 1;
    prev = obj;
  }

  return tokens;
}

function filterPatterns(arr, comparison, prefix, intersection, options) {
  let result = [];

  for (let ele of arr) {
    let { string } = ele;

    // only push if _both_ are negative...
    if (!intersection && !contains(comparison, 'string', string)) {
      result.push(prefix + string);
    }

    // or _both_ are positive
    if (intersection && contains(comparison, 'string', string)) {
      result.push(prefix + string);
    }
  }
  return result;
}

/**
 * Zip strings
 */

function zip(a, b) {
  let arr = [];
  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
  return arr;
}

function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0;
}

function contains(arr, key, val) {
  return arr.some(ele => ele[key] === val);
}

function countNines(min, len) {
  return Number(String(min).slice(0, -len) + '9'.repeat(len));
}

function countZeros(integer, zeros) {
  return integer - (integer % Math.pow(10, zeros));
}

function toQuantifier(digits) {
  let [start = 0, stop = ''] = digits;
  if (stop || start > 1) {
    return `{${start + (stop ? ',' + stop : '')}}`;
  }
  return '';
}

function toCharacterClass(a, b, options) {
  return `[${a}${(b - a === 1) ? '' : '-'}${b}]`;
}

function hasPadding(str) {
  return /^-?(0+)\d/.test(str);
}

function padZeros(value, tok, options) {
  if (!tok.isPadded) {
    return value;
  }

  let diff = Math.abs(tok.maxLen - String(value).length);
  let relax = options.relaxZeros !== false;

  switch (diff) {
    case 0:
      return '';
    case 1:
      return relax ? '0?' : '0';
    case 2:
      return relax ? '0{0,2}' : '00';
    default: {
      return relax ? `0{0,${diff}}` : `0{${diff}}`;
    }
  }
}

/**
 * Cache
 */

toRegexRange.cache = {};
toRegexRange.clearCache = () => (toRegexRange.cache = {});

/**
 * Expose `toRegexRange`
 */

module.exports = toRegexRange;

},{"is-number":73}],98:[function(require,module,exports){
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}

},{}],99:[function(require,module,exports){
/**
 * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
 *
 * This can be used with JS designed for browsers to improve reuse of code and
 * allow the use of existing libraries.
 *
 * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
 *
 * @author Dan DeFelippi <dan@driverdan.com>
 * @contributor David Ellis <d.f.ellis@ieee.org>
 * @license MIT
 */

var Url = require("url");
var spawn = require("child_process").spawn;
var fs = require("fs");

exports.XMLHttpRequest = function() {
  "use strict";

  /**
   * Private variables
   */
  var self = this;
  var http = require("http");
  var https = require("https");

  // Holds http.js objects
  var request;
  var response;

  // Request settings
  var settings = {};

  // Disable header blacklist.
  // Not part of XHR specs.
  var disableHeaderCheck = false;

  // Set some default headers
  var defaultHeaders = {
    "User-Agent": "node-XMLHttpRequest",
    "Accept": "*/*",
  };

  var headers = {};
  var headersCase = {};

  // These headers are not user setable.
  // The following are allowed but banned in the spec:
  // * user-agent
  var forbiddenRequestHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "content-transfer-encoding",
    "cookie",
    "cookie2",
    "date",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "via"
  ];

  // These request methods are not allowed
  var forbiddenRequestMethods = [
    "TRACE",
    "TRACK",
    "CONNECT"
  ];

  // Send flag
  var sendFlag = false;
  // Error flag, used when errors occur or abort is called
  var errorFlag = false;

  // Event listeners
  var listeners = {};

  /**
   * Constants
   */

  this.UNSENT = 0;
  this.OPENED = 1;
  this.HEADERS_RECEIVED = 2;
  this.LOADING = 3;
  this.DONE = 4;

  /**
   * Public vars
   */

  // Current state
  this.readyState = this.UNSENT;

  // default ready state change handler in case one is not set or is set late
  this.onreadystatechange = null;

  // Result & response
  this.responseText = "";
  this.responseXML = "";
  this.status = null;
  this.statusText = null;
  
  // Whether cross-site Access-Control requests should be made using
  // credentials such as cookies or authorization headers
  this.withCredentials = false;

  /**
   * Private methods
   */

  /**
   * Check if the specified header is allowed.
   *
   * @param string header Header to validate
   * @return boolean False if not allowed, otherwise true
   */
  var isAllowedHttpHeader = function(header) {
    return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);
  };

  /**
   * Check if the specified method is allowed.
   *
   * @param string method Request method to validate
   * @return boolean False if not allowed, otherwise true
   */
  var isAllowedHttpMethod = function(method) {
    return (method && forbiddenRequestMethods.indexOf(method) === -1);
  };

  /**
   * Public methods
   */

  /**
   * Open the connection. Currently supports local server requests.
   *
   * @param string method Connection method (eg GET, POST)
   * @param string url URL for the connection.
   * @param boolean async Asynchronous connection. Default is true.
   * @param string user Username for basic authentication (optional)
   * @param string password Password for basic authentication (optional)
   */
  this.open = function(method, url, async, user, password) {
    this.abort();
    errorFlag = false;

    // Check for valid request method
    if (!isAllowedHttpMethod(method)) {
      throw new Error("SecurityError: Request method not allowed");
    }

    settings = {
      "method": method,
      "url": url.toString(),
      "async": (typeof async !== "boolean" ? true : async),
      "user": user || null,
      "password": password || null
    };

    setState(this.OPENED);
  };

  /**
   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.
   * This does not conform to the W3C spec.
   *
   * @param boolean state Enable or disable header checking.
   */
  this.setDisableHeaderCheck = function(state) {
    disableHeaderCheck = state;
  };

  /**
   * Sets a header for the request or appends the value if one is already set.
   *
   * @param string header Header name
   * @param string value Header value
   */
  this.setRequestHeader = function(header, value) {
    if (this.readyState !== this.OPENED) {
      throw new Error("INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN");
    }
    if (!isAllowedHttpHeader(header)) {
      console.warn("Refused to set unsafe header \"" + header + "\"");
      return;
    }
    if (sendFlag) {
      throw new Error("INVALID_STATE_ERR: send flag is true");
    }
    header = headersCase[header.toLowerCase()] || header;
    headersCase[header.toLowerCase()] = header;
    headers[header] = headers[header] ? headers[header] + ', ' + value : value;
  };

  /**
   * Gets a header from the server response.
   *
   * @param string header Name of header to get.
   * @return string Text of the header or null if it doesn't exist.
   */
  this.getResponseHeader = function(header) {
    if (typeof header === "string"
      && this.readyState > this.OPENED
      && response
      && response.headers
      && response.headers[header.toLowerCase()]
      && !errorFlag
    ) {
      return response.headers[header.toLowerCase()];
    }

    return null;
  };

  /**
   * Gets all the response headers.
   *
   * @return string A string with all response headers separated by CR+LF
   */
  this.getAllResponseHeaders = function() {
    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
      return "";
    }
    var result = "";

    for (var i in response.headers) {
      // Cookie headers are excluded
      if (i !== "set-cookie" && i !== "set-cookie2") {
        result += i + ": " + response.headers[i] + "\r\n";
      }
    }
    return result.substr(0, result.length - 2);
  };

  /**
   * Gets a request header
   *
   * @param string name Name of header to get
   * @return string Returns the request header or empty string if not set
   */
  this.getRequestHeader = function(name) {
    if (typeof name === "string" && headersCase[name.toLowerCase()]) {
      return headers[headersCase[name.toLowerCase()]];
    }

    return "";
  };

  /**
   * Sends the request to the server.
   *
   * @param string data Optional data to send as request body.
   */
  this.send = function(data) {
    if (this.readyState !== this.OPENED) {
      throw new Error("INVALID_STATE_ERR: connection must be opened before send() is called");
    }

    if (sendFlag) {
      throw new Error("INVALID_STATE_ERR: send has already been called");
    }

    var ssl = false, local = false;
    var url = Url.parse(settings.url);
    var host;
    // Determine the server
    switch (url.protocol) {
      case "https:":
        ssl = true;
        // SSL & non-SSL both need host, no break here.
      case "http:":
        host = url.hostname;
        break;

      case "file:":
        local = true;
        break;

      case undefined:
      case null:
      case "":
        host = "localhost";
        break;

      default:
        throw new Error("Protocol not supported.");
    }

    // Load files off the local filesystem (file://)
    if (local) {
      if (settings.method !== "GET") {
        throw new Error("XMLHttpRequest: Only GET method is supported");
      }

      if (settings.async) {
        fs.readFile(url.pathname, "utf8", function(error, data) {
          if (error) {
            self.handleError(error);
          } else {
            self.status = 200;
            self.responseText = data;
            setState(self.DONE);
          }
        });
      } else {
        try {
          this.responseText = fs.readFileSync(url.pathname, "utf8");
          this.status = 200;
          setState(self.DONE);
        } catch(e) {
          this.handleError(e);
        }
      }

      return;
    }

    // Default to port 80. If accessing localhost on another port be sure
    // to use http://localhost:port/path
    var port = url.port || (ssl ? 443 : 80);
    // Add query string if one is used
    var uri = url.pathname + (url.search ? url.search : "");

    // Set the defaults if they haven't been set
    for (var name in defaultHeaders) {
      if (!headersCase[name.toLowerCase()]) {
        headers[name] = defaultHeaders[name];
      }
    }

    // Set the Host header or the server may reject the request
    headers.Host = host;
    if (!((ssl && port === 443) || port === 80)) {
      headers.Host += ":" + url.port;
    }

    // Set Basic Auth if necessary
    if (settings.user) {
      if (typeof settings.password === "undefined") {
        settings.password = "";
      }
      var authBuf = new Buffer(settings.user + ":" + settings.password);
      headers.Authorization = "Basic " + authBuf.toString("base64");
    }

    // Set content length header
    if (settings.method === "GET" || settings.method === "HEAD") {
      data = null;
    } else if (data) {
      headers["Content-Length"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);

      if (!headers["Content-Type"]) {
        headers["Content-Type"] = "text/plain;charset=UTF-8";
      }
    } else if (settings.method === "POST") {
      // For a post with no data set Content-Length: 0.
      // This is required by buggy servers that don't meet the specs.
      headers["Content-Length"] = 0;
    }

    var options = {
      host: host,
      port: port,
      path: uri,
      method: settings.method,
      headers: headers,
      agent: false,
      withCredentials: self.withCredentials
    };

    // Reset error flag
    errorFlag = false;

    // Handle async requests
    if (settings.async) {
      // Use the proper protocol
      var doRequest = ssl ? https.request : http.request;

      // Request is being sent, set send flag
      sendFlag = true;

      // As per spec, this is called here for historical reasons.
      self.dispatchEvent("readystatechange");

      // Handler for the response
      var responseHandler = function responseHandler(resp) {
        // Set response var to the response we got back
        // This is so it remains accessable outside this scope
        response = resp;
        // Check for redirect
        // @TODO Prevent looped redirects
        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {
          // Change URL to the redirect location
          settings.url = response.headers.location;
          var url = Url.parse(settings.url);
          // Set host var in case it's used later
          host = url.hostname;
          // Options for the new request
          var newOptions = {
            hostname: url.hostname,
            port: url.port,
            path: url.path,
            method: response.statusCode === 303 ? "GET" : settings.method,
            headers: headers,
            withCredentials: self.withCredentials
          };

          // Issue the new request
          request = doRequest(newOptions, responseHandler).on("error", errorHandler);
          request.end();
          // @TODO Check if an XHR event needs to be fired here
          return;
        }

        response.setEncoding("utf8");

        setState(self.HEADERS_RECEIVED);
        self.status = response.statusCode;

        response.on("data", function(chunk) {
          // Make sure there's some data
          if (chunk) {
            self.responseText += chunk;
          }
          // Don't emit state changes if the connection has been aborted.
          if (sendFlag) {
            setState(self.LOADING);
          }
        });

        response.on("end", function() {
          if (sendFlag) {
            // Discard the end event if the connection has been aborted
            setState(self.DONE);
            sendFlag = false;
          }
        });

        response.on("error", function(error) {
          self.handleError(error);
        });
      };

      // Error handler for the request
      var errorHandler = function errorHandler(error) {
        self.handleError(error);
      };

      // Create the request
      request = doRequest(options, responseHandler).on("error", errorHandler);

      // Node 0.4 and later won't accept empty data. Make sure it's needed.
      if (data) {
        request.write(data);
      }

      request.end();

      self.dispatchEvent("loadstart");
    } else { // Synchronous
      // Create a temporary file for communication with the other Node process
      var contentFile = ".node-xmlhttprequest-content-" + process.pid;
      var syncFile = ".node-xmlhttprequest-sync-" + process.pid;
      fs.writeFileSync(syncFile, "", "utf8");
      // The async request the other Node process executes
      var execString = "var http = require('http'), https = require('https'), fs = require('fs');"
        + "var doRequest = http" + (ssl ? "s" : "") + ".request;"
        + "var options = " + JSON.stringify(options) + ";"
        + "var responseText = '';"
        + "var req = doRequest(options, function(response) {"
        + "response.setEncoding('utf8');"
        + "response.on('data', function(chunk) {"
        + "  responseText += chunk;"
        + "});"
        + "response.on('end', function() {"
        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + "response.on('error', function(error) {"
        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + "}).on('error', function(error) {"
        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + (data ? "req.write('" + JSON.stringify(data).slice(1,-1).replace(/'/g, "\\'") + "');":"")
        + "req.end();";
      // Start the other Node Process, executing this string
      var syncProc = spawn(process.argv[0], ["-e", execString]);
      while(fs.existsSync(syncFile)) {
        // Wait while the sync file is empty
      }
      var resp = JSON.parse(fs.readFileSync(contentFile, 'utf8'));
      // Kill the child process once the file has data
      syncProc.stdin.end();
      // Remove the temporary file
      fs.unlinkSync(contentFile);

      if (resp.err) {
        self.handleError(resp.err);
      } else {
        response = resp.data;
        self.status = resp.data.statusCode;
        self.responseText = resp.data.text;
        setState(self.DONE);
      }
    }
  };

  /**
   * Called when an error is encountered to deal with it.
   */
  this.handleError = function(error) {
    this.status = 0;
    this.statusText = error;
    this.responseText = error.stack;
    errorFlag = true;
    setState(this.DONE);
    this.dispatchEvent('error');
  };

  /**
   * Aborts a request.
   */
  this.abort = function() {
    if (request) {
      request.abort();
      request = null;
    }

    headers = defaultHeaders;
    this.status = 0;
    this.responseText = "";
    this.responseXML = "";

    errorFlag = true;

    if (this.readyState !== this.UNSENT
        && (this.readyState !== this.OPENED || sendFlag)
        && this.readyState !== this.DONE) {
      sendFlag = false;
      setState(this.DONE);
    }
    this.readyState = this.UNSENT;
    this.dispatchEvent('abort');
  };

  /**
   * Adds an event listener. Preferred method of binding to events.
   */
  this.addEventListener = function(event, callback) {
    if (!(event in listeners)) {
      listeners[event] = [];
    }
    // Currently allows duplicate callbacks. Should it?
    listeners[event].push(callback);
  };

  /**
   * Remove an event callback that has already been bound.
   * Only works on the matching funciton, cannot be a copy.
   */
  this.removeEventListener = function(event, callback) {
    if (event in listeners) {
      // Filter will return a new array with the callback removed
      listeners[event] = listeners[event].filter(function(ev) {
        return ev !== callback;
      });
    }
  };

  /**
   * Dispatch any events, including both "on" methods and events attached using addEventListener.
   */
  this.dispatchEvent = function(event) {
    if (typeof self["on" + event] === "function") {
      self["on" + event]();
    }
    if (event in listeners) {
      for (var i = 0, len = listeners[event].length; i < len; i++) {
        listeners[event][i].call(self);
      }
    }
  };

  /**
   * Changes readyState and calls onreadystatechange.
   *
   * @param int state New state
   */
  var setState = function(state) {
    if (state == self.LOADING || self.readyState !== state) {
      self.readyState = state;

      if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {
        self.dispatchEvent("readystatechange");
      }

      if (self.readyState === self.DONE && !errorFlag) {
        self.dispatchEvent("load");
        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)
        self.dispatchEvent("loadend");
      }
    }
  };
};

},{"child_process":undefined,"fs":undefined,"http":undefined,"https":undefined,"url":undefined}],100:[function(require,module,exports){
const chokidar = require("chokidar");
const cliparse = require("cliparse");
const fs = require("fs");
const path = require("path");

const asciidoctor = require("asciidoctor.js")();
const asciidoctorRevealjs = require("asciidoctor-reveal.js");
asciidoctorRevealjs.register();

function fromEntries(iterable) {
  return [...iterable].reduce((obj, { 0: key, 1: val }) => Object.assign(obj, { [key]: val }), {});
}

const slidesOptions = [
  cliparse.option("input", {
    aliases: [ "i", "in" ],
    parser: cliparse.parsers.existingPathParser,
    description: "The input AsciiDoc document",
    default: "presentation.adoc",
  }),
  cliparse.option("output", {
    aliases: [ "o", "out" ],
    parser: cliparse.parsers.stringParser,
    description: "The Reveal.js slides to output",
    default: "index.html",
  }),
];

const documentOptions = [
  cliparse.option("input", {
    aliases: [ "i", "in" ],
    parser: cliparse.parsers.existingPathParser,
    description: "The input AsciiDoc document",
    default: "presentation.adoc",
  }),
  cliparse.option("output", {
    aliases: [ "o", "out" ],
    parser: cliparse.parsers.stringParser,
    description: "The HTML document to output",
    default: "presentation.html",
  }),
  cliparse.option("use-attributes-from", {
    aliases: [ "config" ],
    parser: cliparse.parsers.existingPathParser,
    description: "An AsciiDoctor documents which attributes should be used to do the conversion",
    default: "presentation.adoc",
  }),
  cliparse.option("attributes-to-import", {
    aliases: [ "a", "attrs" ],
    parser: cliparse.parsers.stringParser,
    description: "Comma-separated list of attributes to import",
    default: "",
  }),
];

const cliParser = cliparse.cli({
  name: "node build.js",
  description: "CLI tool to build Reveal.js slides from an AsciiDoc document",
  commands: [
    cliparse.command("build", { description: "Build the slides once", options: slidesOptions }, buildOnce),
    cliparse.command("watch", { description: "Build the slides everytime the AsciiDoc documents change", options: slidesOptions }, watch),
    cliparse.command("doc", { description: "Build the slides or parts of the slides as a HTML document", options: documentOptions }, buildDocument),
  ],
});

function buildOnce(params) {
  const input = path.resolve(params.options.input);
  const output = path.resolve(params.options.output);
  console.info(`Building '${input}' to '${output}'`);

  const options = {
    safe: "safe",
    backend: "revealjs",
    to_file: false,
    header_footer: true,
    attributes: {
      revealjsdir: ".",
      revealjs_theme: "theme",
      "highlightjs-theme": "#",
      revealjs_slideNumber: true,
      revealjs_history: true,
      revealjs_transition: "none",
      "source-highlighter": "highlightjs",
      icons: "font",
      "iconfont-remote": false,
      "iconfont-name": "#",
      "sectids!": "",
      "revealjs_defaultTiming": null, // Useless because of a bug
    },
  };

  // I have to modify the output manually because there is a bug inside asciidoctor(-reveal).js
  // that makes the "revealjs_defaultTiming" attribute become "revealjs_defaulttiming"...
  const rawOutput = asciidoctor.convertFile(input, options);
  fs.writeFileSync(output, rawOutput.replace("defaultTiming: 120", "defaultTiming: null"));
}

function watch(params) {
  buildOnce(params);

  const inputDir = path.dirname(params.options.input);
  console.info(`Watching changes of AsciiDoc files in ${inputDir}`);

  chokidar.watch("**/*.adoc", {
    useFsEvents: false,
    ignoreInitial: true,
  }).on("all", (event, path) => {
    if (["add", "change", "unlink"].includes(event)) {
      console.info(`A '${event}' event on '${path}' triggered a rebuild`);
      buildOnce(params);
    }
  });
}

function buildDocument(params) {
  const input = path.resolve(params.options.input);
  const output = path.resolve(params.options.output);
  const attrsFile = path.resolve(params.options["use-attributes-from"]);
  const attrsToImport = params.options["attributes-to-import"].split(",").map(a => a.trim());
  console.info(`Building '${input}' to '${output}' using attributes '${attrsToImport.join(", ")}' from '${attrsFile}')`);

  const attrsDocument = asciidoctor.loadFile(attrsFile);
  const importedAttributes = attrsDocument.getAttributes();

  const asciidoctorCss = "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */\n/* Uncomment @import statement below to use as custom stylesheet */\n/*@import \"https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/\narticle,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}\naudio,canvas,video{display:inline-block}\naudio:not([controls]){display:none;height:0}\nscript{display:none!important}\nhtml{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}\na{background:transparent}\na:focus{outline:thin dotted}\na:active,a:hover{outline:0}\nh1{font-size:2em;margin:.67em 0}\nabbr[title]{border-bottom:1px dotted}\nb,strong{font-weight:bold}\ndfn{font-style:italic}\nhr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}\nmark{background:#ff0;color:#000}\ncode,kbd,pre,samp{font-family:monospace;font-size:1em}\npre{white-space:pre-wrap}\nq{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}\nsmall{font-size:80%}\nsub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}\nsup{top:-.5em}\nsub{bottom:-.25em}\nimg{border:0}\nsvg:not(:root){overflow:hidden}\nfigure{margin:0}\nfieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}\nlegend{border:0;padding:0}\nbutton,input,select,textarea{font-family:inherit;font-size:100%;margin:0}\nbutton,input{line-height:normal}\nbutton,select{text-transform:none}\nbutton,html input[type=\"button\"],input[type=\"reset\"],input[type=\"submit\"]{-webkit-appearance:button;cursor:pointer}\nbutton[disabled],html input[disabled]{cursor:default}\ninput[type=\"checkbox\"],input[type=\"radio\"]{box-sizing:border-box;padding:0}\nbutton::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}\ntextarea{overflow:auto;vertical-align:top}\ntable{border-collapse:collapse;border-spacing:0}\n*,*::before,*::after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}\nhtml,body{font-size:100%}\nbody{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto;tab-size:4;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}\na:hover{cursor:pointer}\nimg,object,embed{max-width:100%;height:auto}\nobject,embed{height:100%}\nimg{-ms-interpolation-mode:bicubic}\n.left{float:left!important}\n.right{float:right!important}\n.text-left{text-align:left!important}\n.text-right{text-align:right!important}\n.text-center{text-align:center!important}\n.text-justify{text-align:justify!important}\n.hide{display:none}\nimg,object,svg{display:inline-block;vertical-align:middle}\ntextarea{height:auto;min-height:50px}\nselect{width:100%}\n.center{margin-left:auto;margin-right:auto}\n.stretch{width:100%}\n.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}\ndiv,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}\na{color:#2156a5;text-decoration:underline;line-height:inherit}\na:hover,a:focus{color:#1d4b8f}\na img{border:none}\np{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}\np aside{font-size:.875em;line-height:1.35;font-style:italic}\nh1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}\nh1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}\nh1{font-size:2.125em}\nh2{font-size:1.6875em}\nh3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}\nh4,h5{font-size:1.125em}\nh6{font-size:1em}\nhr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}\nem,i{font-style:italic;line-height:inherit}\nstrong,b{font-weight:bold;line-height:inherit}\nsmall{font-size:60%;line-height:inherit}\ncode{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}\nul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}\nul,ol{margin-left:1.5em}\nul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}\nul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}\nul.square{list-style-type:square}\nul.circle{list-style-type:circle}\nul.disc{list-style-type:disc}\nol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}\ndl dt{margin-bottom:.3125em;font-weight:bold}\ndl dd{margin-bottom:1.25em}\nabbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}\nabbr{text-transform:none}\nblockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}\nblockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}\nblockquote cite::before{content:\"\\2014 \\0020\"}\nblockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}\nblockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}\n@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}\nh1{font-size:2.75em}\nh2{font-size:2.3125em}\nh3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}\nh4{font-size:1.4375em}}\ntable{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}\ntable thead,table tfoot{background:#f7f8f7}\ntable thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}\ntable tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}\ntable tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}\ntable thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}\nh1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}\nh1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}\n.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:\" \";display:table}\n.clearfix::after,.float-group::after{clear:both}\n*:not(pre)>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed;word-wrap:break-word}\n*:not(pre)>code.nobreak{word-wrap:normal}\n*:not(pre)>code.nowrap{white-space:nowrap}\npre,pre>code{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}\nem em{font-style:normal}\nstrong strong{font-weight:400}\n.keyseq{color:rgba(51,51,51,.8)}\nkbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}\n.keyseq kbd:first-child{margin-left:0}\n.keyseq kbd:last-child{margin-right:0}\n.menuseq,.menuref{color:#000}\n.menuseq b:not(.caret),.menuref{font-weight:inherit}\n.menuseq{word-spacing:-.02em}\n.menuseq b.caret{font-size:1.25em;line-height:.8}\n.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}\nb.button::before,b.button::after{position:relative;top:-1px;font-weight:400}\nb.button::before{content:\"[\";padding:0 3px 0 2px}\nb.button::after{content:\"]\";padding:0 2px 0 3px}\np a>code:hover{color:rgba(0,0,0,.9)}\n#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}\n#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:\" \";display:table}\n#header::after,#content::after,#footnotes::after,#footer::after{clear:both}\n#content{margin-top:1.25em}\n#content::before{content:none}\n#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}\n#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}\n#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}\n#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}\n#header .details span:first-child{margin-left:-.125em}\n#header .details span.email a{color:rgba(0,0,0,.85)}\n#header .details br{display:none}\n#header .details br+span::before{content:\"\\00a0\\2013\\00a0\"}\n#header .details br+span.author::before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}\n#header .details br+span#revremark::before{content:\"\\00a0|\\00a0\"}\n#header #revnumber{text-transform:capitalize}\n#header #revnumber::after{content:\"\\00a0\"}\n#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}\n#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}\n#toc>ul{margin-left:.125em}\n#toc ul.sectlevel0>li>a{font-style:italic}\n#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}\n#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}\n#toc li{line-height:1.3334;margin-top:.3334em}\n#toc a{text-decoration:none}\n#toc a:active{text-decoration:underline}\n#toctitle{color:#7a2518;font-size:1.2em}\n@media screen and (min-width:768px){#toctitle{font-size:1.375em}\nbody.toc2{padding-left:15em;padding-right:0}\n#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}\n#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}\n#toc.toc2>ul{font-size:.9em;margin-bottom:0}\n#toc.toc2 ul ul{margin-left:0;padding-left:1em}\n#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}\nbody.toc2.toc-right{padding-left:0;padding-right:15em}\nbody.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}\n@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}\n#toc.toc2{width:20em}\n#toc.toc2 #toctitle{font-size:1.375em}\n#toc.toc2>ul{font-size:.95em}\n#toc.toc2 ul ul{padding-left:1.25em}\nbody.toc2.toc-right{padding-left:0;padding-right:20em}}\n#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}\n#content #toc>:first-child{margin-top:0}\n#content #toc>:last-child{margin-bottom:0}\n#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}\n#footer-text{color:rgba(255,255,255,.8);line-height:1.44}\n#content{margin-bottom:.625em}\n.sect1{padding-bottom:.625em}\n@media screen and (min-width:768px){#content{margin-bottom:1.25em}\n.sect1{padding-bottom:1.25em}}\n.sect1:last-child{padding-bottom:0}\n.sect1+.sect1{border-top:1px solid #e7e7e9}\n#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}\n#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}\n#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}\n#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}\n#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}\n.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}\n.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}\ntable.tableblock.fit-content>caption.title{white-space:nowrap;width:0}\n.paragraph.lead>p,#preamble>.sectionbody>[class=\"paragraph\"]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}\ntable.tableblock #preamble>.sectionbody>[class=\"paragraph\"]:first-of-type p{font-size:inherit}\n.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}\n.admonitionblock>table td.icon{text-align:center;width:80px}\n.admonitionblock>table td.icon img{max-width:none}\n.admonitionblock>table td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}\n.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6)}\n.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}\n.exampleblock>.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}\n.exampleblock>.content>:first-child{margin-top:0}\n.exampleblock>.content>:last-child{margin-bottom:0}\n.sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}\n.sidebarblock>:first-child{margin-top:0}\n.sidebarblock>:last-child{margin-bottom:0}\n.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}\n.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}\n.literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class=\"highlight\"],.listingblock pre[class^=\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}\n.sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class=\"highlight\"],.sidebarblock .listingblock pre[class^=\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}\n.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;overflow-x:auto;padding:1em;font-size:.8125em}\n@media screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}\n@media screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}\n.literalblock pre.nowrap,.literalblock pre.nowrap pre,.listingblock pre.nowrap,.listingblock pre.nowrap pre{white-space:pre;word-wrap:normal}\n.literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}\n.listingblock pre.highlightjs{padding:0}\n.listingblock pre.highlightjs>code{padding:1em;-webkit-border-radius:4px;border-radius:4px}\n.listingblock pre.prettyprint{border-width:0}\n.listingblock>.content{position:relative}\n.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}\n.listingblock:hover code[data-lang]::before{display:block}\n.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:#999}\n.listingblock.terminal pre .command:not([data-prompt])::before{content:\"$\"}\ntable.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}\ntable.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}\ntable.pyhltable td.code{padding-left:.75em;padding-right:0}\npre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #dddddf}\npre.pygments .lineno{display:inline-block;margin-right:.25em}\ntable.pyhltable .linenodiv{background:none!important;padding-right:0!important}\n.quoteblock{margin:0 1em 1.25em 1.5em;display:table}\n.quoteblock>.title{margin-left:-1.5em;margin-bottom:.75em}\n.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}\n.quoteblock blockquote{margin:0;padding:0;border:0}\n.quoteblock blockquote::before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}\n.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}\n.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}\n.verseblock{margin:0 1em 1.25em}\n.verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}\n.verseblock pre strong{font-weight:400}\n.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}\n.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}\n.quoteblock .attribution br,.verseblock .attribution br{display:none}\n.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}\n.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}\n.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}\n.quoteblock.abstract{margin:0 1em 1.25em;display:block}\n.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}\n.quoteblock.excerpt,.quoteblock .quoteblock{margin:0 0 1.25em;padding:0 0 .25em 1em;border-left:.25em solid #dddddf}\n.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}\n.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;text-align:left;margin-right:0}\ntable.tableblock{max-width:100%;border-collapse:separate}\np.tableblock:last-child{margin-bottom:0}\ntd.tableblock>.content{margin-bottom:-1.25em}\ntable.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}\ntable.grid-all>thead>tr>.tableblock,table.grid-all>tbody>tr>.tableblock{border-width:0 1px 1px 0}\ntable.grid-all>tfoot>tr>.tableblock{border-width:1px 1px 0 0}\ntable.grid-cols>*>tr>.tableblock{border-width:0 1px 0 0}\ntable.grid-rows>thead>tr>.tableblock,table.grid-rows>tbody>tr>.tableblock{border-width:0 0 1px}\ntable.grid-rows>tfoot>tr>.tableblock{border-width:1px 0 0}\ntable.grid-all>*>tr>.tableblock:last-child,table.grid-cols>*>tr>.tableblock:last-child{border-right-width:0}\ntable.grid-all>tbody>tr:last-child>.tableblock,table.grid-all>thead:last-child>tr>.tableblock,table.grid-rows>tbody>tr:last-child>.tableblock,table.grid-rows>thead:last-child>tr>.tableblock{border-bottom-width:0}\ntable.frame-all{border-width:1px}\ntable.frame-sides{border-width:0 1px}\ntable.frame-topbot,table.frame-ends{border-width:1px 0}\ntable.stripes-all tr,table.stripes-odd tr:nth-of-type(odd){background:#f8f8f7}\ntable.stripes-none tr,table.stripes-odd tr:nth-of-type(even){background:none}\nth.halign-left,td.halign-left{text-align:left}\nth.halign-right,td.halign-right{text-align:right}\nth.halign-center,td.halign-center{text-align:center}\nth.valign-top,td.valign-top{vertical-align:top}\nth.valign-bottom,td.valign-bottom{vertical-align:bottom}\nth.valign-middle,td.valign-middle{vertical-align:middle}\ntable thead th,table tfoot th{font-weight:bold}\ntbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}\ntbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}\np.tableblock>code:only-child{background:none;padding:0}\np.tableblock{font-size:1em}\ntd>div.verse{white-space:pre}\nol{margin-left:1.75em}\nul li ol{margin-left:1.5em}\ndl dd{margin-left:1.125em}\ndl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}\nol>li p,ul>li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}\nul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}\nul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}\nul.unstyled,ol.unstyled{margin-left:0}\nul.checklist{margin-left:.625em}\nul.checklist li>p:first-child>.fa-square-o:first-child,ul.checklist li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}\nul.checklist li>p:first-child>input[type=\"checkbox\"]:first-child{margin-right:.25em}\nul.inline{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}\nul.inline>li{margin-left:1.25em}\n.unstyled dl dt{font-weight:400;font-style:normal}\nol.arabic{list-style-type:decimal}\nol.decimal{list-style-type:decimal-leading-zero}\nol.loweralpha{list-style-type:lower-alpha}\nol.upperalpha{list-style-type:upper-alpha}\nol.lowerroman{list-style-type:lower-roman}\nol.upperroman{list-style-type:upper-roman}\nol.lowergreek{list-style-type:lower-greek}\n.hdlist>table,.colist>table{border:0;background:none}\n.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}\ntd.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}\ntd.hdlist1{font-weight:bold;padding-bottom:1.25em}\n.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}\n.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}\n.colist td:not([class]):first-child img{max-width:none}\n.colist td:not([class]):last-child{padding:.25em 0}\n.thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}\n.imageblock.left{margin:.25em .625em 1.25em 0}\n.imageblock.right{margin:.25em 0 1.25em .625em}\n.imageblock>.title{margin-bottom:0}\n.imageblock.thumb,.imageblock.th{border-width:6px}\n.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}\n.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}\n.image.left{margin-right:.625em}\n.image.right{margin-left:.625em}\na.image{text-decoration:none;display:inline-block}\na.image object{pointer-events:none}\nsup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}\nsup.footnote a,sup.footnoteref a{text-decoration:none}\nsup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}\n#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}\n#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}\n#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}\n#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}\n#footnotes .footnote:last-of-type{margin-bottom:0}\n#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}\n.gist .file-data>table{border:0;background:#fff;width:100%;margin-bottom:0}\n.gist .file-data>table td.line-data{width:99%}\ndiv.unbreakable{page-break-inside:avoid}\n.big{font-size:larger}\n.small{font-size:smaller}\n.underline{text-decoration:underline}\n.overline{text-decoration:overline}\n.line-through{text-decoration:line-through}\n.aqua{color:#00bfbf}\n.aqua-background{background-color:#00fafa}\n.black{color:#000}\n.black-background{background-color:#000}\n.blue{color:#0000bf}\n.blue-background{background-color:#0000fa}\n.fuchsia{color:#bf00bf}\n.fuchsia-background{background-color:#fa00fa}\n.gray{color:#606060}\n.gray-background{background-color:#7d7d7d}\n.green{color:#006000}\n.green-background{background-color:#007d00}\n.lime{color:#00bf00}\n.lime-background{background-color:#00fa00}\n.maroon{color:#600000}\n.maroon-background{background-color:#7d0000}\n.navy{color:#000060}\n.navy-background{background-color:#00007d}\n.olive{color:#606000}\n.olive-background{background-color:#7d7d00}\n.purple{color:#600060}\n.purple-background{background-color:#7d007d}\n.red{color:#bf0000}\n.red-background{background-color:#fa0000}\n.silver{color:#909090}\n.silver-background{background-color:#bcbcbc}\n.teal{color:#006060}\n.teal-background{background-color:#007d7d}\n.white{color:#bfbfbf}\n.white-background{background-color:#fafafa}\n.yellow{color:#bfbf00}\n.yellow-background{background-color:#fafa00}\nspan.icon>.fa{cursor:default}\na span.icon>.fa{cursor:inherit}\n.admonitionblock td.icon [class^=\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}\n.admonitionblock td.icon .icon-note::before{content:\"\\f05a\";color:#19407c}\n.admonitionblock td.icon .icon-tip::before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}\n.admonitionblock td.icon .icon-warning::before{content:\"\\f071\";color:#bf6900}\n.admonitionblock td.icon .icon-caution::before{content:\"\\f06d\";color:#bf3400}\n.admonitionblock td.icon .icon-important::before{content:\"\\f06a\";color:#bf0000}\n.conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}\n.conum[data-value] *{color:#fff!important}\n.conum[data-value]+b{display:none}\n.conum[data-value]::after{content:attr(data-value)}\npre .conum[data-value]{position:relative;top:-.125em}\nb.conum *{color:inherit!important}\n.conum:not([data-value]):empty{display:none}\ndt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}\nh1,h2,p,td.content,span.alt{letter-spacing:-.01em}\np strong,td.content strong,div.footnote strong{letter-spacing:-.005em}\np,blockquote,dt,td.content,span.alt{font-size:1.0625rem}\np{margin-bottom:1.25rem}\n.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}\n.exampleblock>.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}\n.print-only{display:none!important}\n@page{margin:1.25cm .75cm}\n@media print{*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}\nhtml{font-size:80%}\na{color:inherit!important;text-decoration:underline!important}\na.bare,a[href^=\"#\"],a[href^=\"mailto:\"]{text-decoration:none!important}\na[href^=\"http:\"]:not(.bare)::after,a[href^=\"https:\"]:not(.bare)::after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}\nabbr[title]::after{content:\" (\" attr(title) \")\"}\npre,blockquote,tr,img,object,svg{page-break-inside:avoid}\nthead{display:table-header-group}\nsvg{max-width:100%}\np,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}\nh2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}\n#toc,.sidebarblock,.exampleblock>.content{background:none!important}\n#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}\nbody.book #header{text-align:center}\nbody.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}\nbody.book #header .details{border:0!important;display:block;padding:0!important}\nbody.book #header .details span:first-child{margin-left:0!important}\nbody.book #header .details br{display:block}\nbody.book #header .details br+span::before{content:none!important}\nbody.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}\nbody.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}\n.listingblock code[data-lang]::before{display:block}\n#footer{padding:0 .9375em}\n.hide-on-print{display:none!important}\n.print-only{display:block!important}\n.hide-for-print{display:none!important}\n.show-for-print{display:inherit!important}}\n@media print,amzn-kf8{#header>h1:first-child{margin-top:1.25rem}\n.sect1{padding:0!important}\n.sect1+.sect1{border:0}\n#footer{background:none}\n#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}\n@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}\n";
  const cssFilename = "asciidoctor.css";
  const cssPath = path.resolve(path.dirname(input), cssFilename);
  fs.writeFileSync(cssPath, asciidoctorCss);

  const importedAttrsValues = fromEntries(attrsToImport.reduce((acc, cur) => acc.set(cur, importedAttributes[cur]), new Map()));
  const attributes = Object.assign(importedAttrsValues, {
    "reproducible": "",
    "stylesheet": cssFilename,
    "source-highlighter": "highlightjs",
    icons: "font",
    "data-uri": "",
    "imagesdir": path.resolve(importedAttributes.imagesdir),
    "toc": attrsDocument.hasAttribute("toc") ? "" : null,
    "toc-position": attrsDocument.getAttribute("toc-position"),
    "toc-title": asciidoctor.loadFile(input).getTitle(),
  });
  const options = {
    safe: "unsafe",
    backend: "html",
    to_file: output,
    header_footer: true,
    attributes,
  };

  asciidoctor.convertFile(input, options);
  fs.unlinkSync(cssPath);
}

cliparse.parse(cliParser);

},{"asciidoctor-reveal.js":2,"asciidoctor.js":3,"chokidar":52,"cliparse":59,"fs":undefined,"path":undefined}]},{},[100]);
